// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calc,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=144,HLS_SYN_FF=19148,HLS_SYN_LUT=27023,HLS_VERSION=2019_1}" *)

module calc (
        ap_clk,
        ap_rst_n,
        m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY,
        m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY,
        m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST,
        m_axi_buf_r_WID,
        m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY,
        m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID,
        m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA,
        m_axi_buf_r_RLAST,
        m_axi_buf_r_RID,
        m_axi_buf_r_RUSER,
        m_axi_buf_r_RRESP,
        m_axi_buf_r_BVALID,
        m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP,
        m_axi_buf_r_BID,
        m_axi_buf_r_BUSER,
        s_axi_in_parms_AWVALID,
        s_axi_in_parms_AWREADY,
        s_axi_in_parms_AWADDR,
        s_axi_in_parms_WVALID,
        s_axi_in_parms_WREADY,
        s_axi_in_parms_WDATA,
        s_axi_in_parms_WSTRB,
        s_axi_in_parms_ARVALID,
        s_axi_in_parms_ARREADY,
        s_axi_in_parms_ARADDR,
        s_axi_in_parms_RVALID,
        s_axi_in_parms_RREADY,
        s_axi_in_parms_RDATA,
        s_axi_in_parms_RRESP,
        s_axi_in_parms_BVALID,
        s_axi_in_parms_BREADY,
        s_axi_in_parms_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage0 = 53'd2251799813685248;
parameter    ap_ST_fsm_state60 = 53'd4503599627370496;
parameter    C_S_AXI_IN_PARMS_DATA_WIDTH = 32;
parameter    C_S_AXI_IN_PARMS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_BUF_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_TARGET_ADDR = 0;
parameter    C_M_AXI_BUF_R_USER_VALUE = 0;
parameter    C_M_AXI_BUF_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUF_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_IN_PARMS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUF_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_buf_r_AWVALID;
input   m_axi_buf_r_AWREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_AWADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_AWID;
output  [7:0] m_axi_buf_r_AWLEN;
output  [2:0] m_axi_buf_r_AWSIZE;
output  [1:0] m_axi_buf_r_AWBURST;
output  [1:0] m_axi_buf_r_AWLOCK;
output  [3:0] m_axi_buf_r_AWCACHE;
output  [2:0] m_axi_buf_r_AWPROT;
output  [3:0] m_axi_buf_r_AWQOS;
output  [3:0] m_axi_buf_r_AWREGION;
output  [C_M_AXI_BUF_R_AWUSER_WIDTH - 1:0] m_axi_buf_r_AWUSER;
output   m_axi_buf_r_WVALID;
input   m_axi_buf_r_WREADY;
output  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_WDATA;
output  [C_M_AXI_BUF_R_WSTRB_WIDTH - 1:0] m_axi_buf_r_WSTRB;
output   m_axi_buf_r_WLAST;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_WID;
output  [C_M_AXI_BUF_R_WUSER_WIDTH - 1:0] m_axi_buf_r_WUSER;
output   m_axi_buf_r_ARVALID;
input   m_axi_buf_r_ARREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_ARADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_ARID;
output  [7:0] m_axi_buf_r_ARLEN;
output  [2:0] m_axi_buf_r_ARSIZE;
output  [1:0] m_axi_buf_r_ARBURST;
output  [1:0] m_axi_buf_r_ARLOCK;
output  [3:0] m_axi_buf_r_ARCACHE;
output  [2:0] m_axi_buf_r_ARPROT;
output  [3:0] m_axi_buf_r_ARQOS;
output  [3:0] m_axi_buf_r_ARREGION;
output  [C_M_AXI_BUF_R_ARUSER_WIDTH - 1:0] m_axi_buf_r_ARUSER;
input   m_axi_buf_r_RVALID;
output   m_axi_buf_r_RREADY;
input  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_RDATA;
input   m_axi_buf_r_RLAST;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_RID;
input  [C_M_AXI_BUF_R_RUSER_WIDTH - 1:0] m_axi_buf_r_RUSER;
input  [1:0] m_axi_buf_r_RRESP;
input   m_axi_buf_r_BVALID;
output   m_axi_buf_r_BREADY;
input  [1:0] m_axi_buf_r_BRESP;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_BID;
input  [C_M_AXI_BUF_R_BUSER_WIDTH - 1:0] m_axi_buf_r_BUSER;
input   s_axi_in_parms_AWVALID;
output   s_axi_in_parms_AWREADY;
input  [C_S_AXI_IN_PARMS_ADDR_WIDTH - 1:0] s_axi_in_parms_AWADDR;
input   s_axi_in_parms_WVALID;
output   s_axi_in_parms_WREADY;
input  [C_S_AXI_IN_PARMS_DATA_WIDTH - 1:0] s_axi_in_parms_WDATA;
input  [C_S_AXI_IN_PARMS_WSTRB_WIDTH - 1:0] s_axi_in_parms_WSTRB;
input   s_axi_in_parms_ARVALID;
output   s_axi_in_parms_ARREADY;
input  [C_S_AXI_IN_PARMS_ADDR_WIDTH - 1:0] s_axi_in_parms_ARADDR;
output   s_axi_in_parms_RVALID;
input   s_axi_in_parms_RREADY;
output  [C_S_AXI_IN_PARMS_DATA_WIDTH - 1:0] s_axi_in_parms_RDATA;
output  [1:0] s_axi_in_parms_RRESP;
output   s_axi_in_parms_BVALID;
input   s_axi_in_parms_BREADY;
output  [1:0] s_axi_in_parms_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [35:0] X0_V;
wire   [35:0] Y0_V;
wire   [35:0] X1_V;
wire   [11:0] width_V;
wire   [15:0] maxIter;
reg    buf_r_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] icmp_ln96_reg_2419;
reg    buf_r_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln96_reg_2419_pp0_iter1_reg;
reg    buf_r_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] icmp_ln96_reg_2419_pp0_iter6_reg;
reg    buf_r_AWVALID;
wire    buf_r_AWREADY;
wire   [31:0] buf_r_AWADDR;
reg    buf_r_WVALID;
wire    buf_r_WREADY;
wire   [15:0] buf_r_WDATA;
wire    buf_r_ARREADY;
wire    buf_r_RVALID;
wire   [15:0] buf_r_RDATA;
wire    buf_r_RLAST;
wire   [0:0] buf_r_RID;
wire   [0:0] buf_r_RUSER;
wire   [1:0] buf_r_RRESP;
wire    buf_r_BVALID;
reg    buf_r_BREADY;
wire   [1:0] buf_r_BRESP;
wire   [0:0] buf_r_BID;
wire   [0:0] buf_r_BUSER;
reg   [23:0] index_1_reg_432;
reg   [11:0] i_op_assign_reg_442;
wire   [35:0] grp_fu_1937_p3;
wire    ap_CS_fsm_state60;
reg   [11:0] width_V_read_reg_1962;
reg   [35:0] Y0_V_read_reg_1971;
reg  signed [35:0] X0_V_read_reg_1976;
wire   [35:0] add_ln703_3_fu_1094_p2;
reg   [35:0] reg_1989;
wire    ap_CS_fsm_state47;
wire   [35:0] trunc_ln1192_2_fu_812_p1;
wire    ap_CS_fsm_state46;
wire   [2:0] trunc_ln99_fu_1795_p1;
wire    ap_block_state52_pp0_stage0_iter0;
wire    ap_block_state53_pp0_stage0_iter1;
reg    ap_block_state53_io;
wire    ap_block_state54_pp0_stage0_iter2;
reg    ap_block_state54_io;
wire    ap_block_state55_pp0_stage0_iter3;
wire    ap_block_state56_pp0_stage0_iter4;
wire    ap_block_state57_pp0_stage0_iter5;
wire    ap_block_state58_pp0_stage0_iter6;
reg    ap_block_state59_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln96_fu_1783_p2;
reg   [11:0] tmp_17_reg_1994;
wire    ap_CS_fsm_state42;
reg   [8:0] lshr_ln_reg_1999;
wire    ap_CS_fsm_state44;
wire   [0:0] icmp_ln85_fu_664_p2;
wire   [23:0] zext_ln1118_fu_639_p1;
reg   [23:0] zext_ln1118_reg_2004;
wire  signed [47:0] sext_ln1118_fu_642_p1;
reg  signed [47:0] sext_ln1118_reg_2011;
wire  signed [47:0] sext_ln703_fu_646_p1;
reg  signed [47:0] sext_ln703_reg_2023;
wire  signed [36:0] rhs_V_4_fu_649_p1;
reg  signed [36:0] rhs_V_4_reg_2035;
reg   [35:0] reg_2040;
wire    ap_CS_fsm_state48;
wire   [15:0] grp_mandel_calc_fu_453_ap_return;
wire    ap_CS_fsm_state50;
wire    grp_mandel_calc_fu_453_ap_ready;
wire    grp_mandel_calc_fu_453_ap_done;
wire    grp_mandel_calc_fu_461_ap_ready;
wire    grp_mandel_calc_fu_461_ap_done;
wire    grp_mandel_calc_fu_469_ap_ready;
wire    grp_mandel_calc_fu_469_ap_done;
wire    grp_mandel_calc_fu_477_ap_ready;
wire    grp_mandel_calc_fu_477_ap_done;
wire    grp_mandel_calc_fu_485_ap_ready;
wire    grp_mandel_calc_fu_485_ap_done;
wire    grp_mandel_calc_fu_493_ap_ready;
wire    grp_mandel_calc_fu_493_ap_done;
wire    grp_mandel_calc_fu_501_ap_ready;
wire    grp_mandel_calc_fu_501_ap_done;
wire    grp_mandel_calc_fu_509_ap_ready;
wire    grp_mandel_calc_fu_509_ap_done;
reg    ap_block_state50_on_subcall_done;
wire   [35:0] trunc_ln1192_fu_804_p1;
wire   [11:0] grp_fu_1789_p2;
reg   [11:0] line_V_reg_2043;
wire    ap_CS_fsm_state43;
wire   [35:0] select_ln340_18_fu_1554_p3;
reg   [47:0] reg_2052;
wire   [15:0] grp_mandel_calc_fu_461_ap_return;
wire   [35:0] grp_fu_1945_p2;
wire   [47:0] grp_fu_728_p2;
wire   [47:0] zext_ln1116_fu_669_p1;
wire   [0:0] and_ln785_7_fu_1462_p2;
reg   [0:0] and_ln785_7_reg_2057;
reg   [47:0] reg_2062;
wire   [35:0] select_ln340_19_fu_1589_p3;
wire   [15:0] grp_mandel_calc_fu_469_ap_return;
wire   [35:0] add_ln703_2_fu_1012_p2;
wire   [47:0] zext_ln1116_2_fu_709_p1;
wire   [36:0] zext_ln1148_fu_531_p1;
wire    ap_CS_fsm_state2;
wire   [47:0] grp_fu_698_p2;
wire   [35:0] trunc_ln1192_1_fu_808_p1;
reg   [35:0] reg_2067;
wire   [0:0] and_ln786_18_fu_1404_p2;
reg   [0:0] and_ln786_18_reg_2072;
reg   [15:0] maxIter_read_reg_2077;
wire   [11:0] add_ln700_fu_658_p2;
reg   [11:0] add_ln700_reg_2097;
wire   [36:0] grp_fu_1866_p2;
reg   [47:0] reg_2107;
wire   [35:0] select_ln340_20_fu_1624_p3;
wire   [15:0] grp_mandel_calc_fu_477_ap_return;
wire   [15:0] tmp_16_fu_1840_p10;
wire   [35:0] add_ln703_4_fu_1176_p2;
wire   [47:0] zext_ln1116_1_fu_694_p1;
wire   [47:0] grp_fu_713_p2;
wire   [35:0] select_ln340_21_fu_1659_p3;
reg   [47:0] reg_2137;
wire   [15:0] grp_mandel_calc_fu_485_ap_return;
wire   [47:0] grp_fu_673_p2;
wire   [47:0] zext_ln1116_3_fu_724_p1;
reg   [35:0] reg_2142;
wire   [35:0] trunc_ln1192_3_fu_816_p1;
reg   [47:0] reg_2147;
wire   [35:0] select_ln340_22_fu_1694_p3;
wire   [15:0] grp_mandel_calc_fu_493_ap_return;
wire   [35:0] add_ln703_6_fu_1340_p2;
wire   [47:0] zext_ln1116_4_fu_739_p1;
wire   [47:0] grp_fu_743_p2;
wire   [35:0] trunc_ln1192_4_fu_820_p1;
reg   [35:0] trunc_ln1192_4_reg_2152;
wire   [35:0] add_ln703_1_fu_930_p2;
reg   [47:0] reg_2157;
wire   [35:0] select_ln340_23_fu_1729_p3;
wire   [15:0] grp_mandel_calc_fu_501_ap_return;
wire   [47:0] zext_ln1116_5_fu_754_p1;
wire   [47:0] grp_fu_758_p2;
wire   [35:0] trunc_ln1192_5_fu_824_p1;
reg   [35:0] trunc_ln1192_5_reg_2162;
reg   [47:0] reg_2167;
wire   [35:0] select_ln340_24_fu_1764_p3;
wire   [15:0] grp_mandel_calc_fu_509_ap_return;
wire   [35:0] add_ln703_7_fu_1422_p2;
wire   [47:0] zext_ln1116_6_fu_769_p1;
wire   [47:0] grp_fu_773_p2;
wire   [35:0] trunc_ln1192_6_fu_828_p1;
reg   [35:0] trunc_ln1192_6_reg_2172;
wire   [35:0] add_ln703_5_fu_1258_p2;
reg   [47:0] reg_2177;
wire   [47:0] zext_ln1116_7_fu_784_p1;
wire   [47:0] grp_fu_788_p2;
wire   [35:0] trunc_ln1192_7_fu_832_p1;
reg   [35:0] trunc_ln1192_7_reg_2182;
wire   [0:0] and_ln785_fu_888_p2;
reg   [0:0] and_ln785_reg_2193;
wire   [0:0] and_ln786_fu_912_p2;
reg   [0:0] and_ln786_reg_2199;
wire   [0:0] and_ln785_1_fu_970_p2;
reg   [0:0] and_ln785_1_reg_2212;
wire   [0:0] and_ln786_13_fu_994_p2;
reg   [0:0] and_ln786_13_reg_2218;
wire   [0:0] and_ln785_2_fu_1052_p2;
reg   [0:0] and_ln785_2_reg_2231;
wire   [0:0] and_ln786_14_fu_1076_p2;
reg   [0:0] and_ln786_14_reg_2237;
wire   [0:0] and_ln785_3_fu_1134_p2;
reg   [0:0] and_ln785_3_reg_2250;
wire   [0:0] and_ln786_15_fu_1158_p2;
reg   [0:0] and_ln786_15_reg_2256;
wire   [0:0] and_ln785_4_fu_1216_p2;
reg   [0:0] and_ln785_4_reg_2269;
wire   [0:0] and_ln786_16_fu_1240_p2;
reg   [0:0] and_ln786_16_reg_2275;
wire   [0:0] and_ln785_5_fu_1298_p2;
reg   [0:0] and_ln785_5_reg_2288;
wire   [0:0] and_ln786_17_fu_1322_p2;
reg   [0:0] and_ln786_17_reg_2294;
wire   [0:0] and_ln785_6_fu_1380_p2;
reg   [0:0] and_ln785_6_reg_2307;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] and_ln786_19_fu_1486_p2;
reg   [0:0] and_ln786_19_reg_2332;
reg   [0:0] icmp_ln96_reg_2419_pp0_iter2_reg;
reg   [0:0] icmp_ln96_reg_2419_pp0_iter3_reg;
reg   [0:0] icmp_ln96_reg_2419_pp0_iter4_reg;
reg   [0:0] icmp_ln96_reg_2419_pp0_iter5_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state52;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [7:0] mem_0_address0;
reg    mem_0_ce0;
reg    mem_0_we0;
wire   [15:0] mem_0_d0;
wire   [15:0] mem_0_q0;
reg   [7:0] mem_1_address0;
reg    mem_1_ce0;
reg    mem_1_we0;
wire   [15:0] mem_1_d0;
wire   [15:0] mem_1_q0;
reg   [7:0] mem_2_address0;
reg    mem_2_ce0;
reg    mem_2_we0;
wire   [15:0] mem_2_d0;
wire   [15:0] mem_2_q0;
reg   [7:0] mem_3_address0;
reg    mem_3_ce0;
reg    mem_3_we0;
wire   [15:0] mem_3_d0;
wire   [15:0] mem_3_q0;
reg   [7:0] mem_4_address0;
reg    mem_4_ce0;
reg    mem_4_we0;
wire   [15:0] mem_4_d0;
wire   [15:0] mem_4_q0;
reg   [7:0] mem_5_address0;
reg    mem_5_ce0;
reg    mem_5_we0;
wire   [15:0] mem_5_d0;
wire   [15:0] mem_5_q0;
reg   [7:0] mem_6_address0;
reg    mem_6_ce0;
reg    mem_6_we0;
wire   [15:0] mem_6_d0;
wire   [15:0] mem_6_q0;
reg   [7:0] mem_7_address0;
reg    mem_7_ce0;
reg    mem_7_we0;
wire   [15:0] mem_7_d0;
wire   [15:0] mem_7_q0;
wire    grp_mandel_calc_fu_453_ap_start;
wire    grp_mandel_calc_fu_453_ap_idle;
wire    grp_mandel_calc_fu_461_ap_start;
wire    grp_mandel_calc_fu_461_ap_idle;
wire   [35:0] grp_mandel_calc_fu_461_x_in_V;
wire    grp_mandel_calc_fu_469_ap_start;
wire    grp_mandel_calc_fu_469_ap_idle;
wire   [35:0] grp_mandel_calc_fu_469_x_in_V;
wire    grp_mandel_calc_fu_477_ap_start;
wire    grp_mandel_calc_fu_477_ap_idle;
wire   [35:0] grp_mandel_calc_fu_477_x_in_V;
wire    grp_mandel_calc_fu_485_ap_start;
wire    grp_mandel_calc_fu_485_ap_idle;
wire   [35:0] grp_mandel_calc_fu_485_x_in_V;
wire    grp_mandel_calc_fu_493_ap_start;
wire    grp_mandel_calc_fu_493_ap_idle;
wire   [35:0] grp_mandel_calc_fu_493_x_in_V;
wire    grp_mandel_calc_fu_501_ap_start;
wire    grp_mandel_calc_fu_501_ap_idle;
wire   [35:0] grp_mandel_calc_fu_501_x_in_V;
wire    grp_mandel_calc_fu_509_ap_start;
wire    grp_mandel_calc_fu_509_ap_idle;
wire   [35:0] grp_mandel_calc_fu_509_x_in_V;
reg   [23:0] indvars_iv_reg_378;
reg   [35:0] p_Val2_30_reg_388;
reg   [11:0] t_V_1_reg_398;
reg   [23:0] index_0_reg_409;
reg   [11:0] tmp_V_1_0_reg_421;
wire   [0:0] icmp_ln79_fu_653_p2;
wire    ap_CS_fsm_state51;
reg    grp_mandel_calc_fu_453_ap_start_reg;
wire    ap_CS_fsm_state49;
reg    grp_mandel_calc_fu_461_ap_start_reg;
reg    grp_mandel_calc_fu_469_ap_start_reg;
reg    grp_mandel_calc_fu_477_ap_start_reg;
reg    grp_mandel_calc_fu_485_ap_start_reg;
reg    grp_mandel_calc_fu_493_ap_start_reg;
reg    grp_mandel_calc_fu_501_ap_start_reg;
reg    grp_mandel_calc_fu_509_ap_start_reg;
wire   [63:0] zext_ln91_fu_1772_p1;
wire   [63:0] zext_ln99_1_fu_1809_p1;
wire   [63:0] zext_ln99_2_fu_1827_p1;
reg    ap_block_pp0_stage0_01001;
wire  signed [35:0] rhs_V_fu_521_p0;
wire   [13:0] shl_ln_fu_616_p3;
wire   [13:0] zext_ln79_fu_613_p1;
wire   [36:0] grp_fu_534_p0;
wire   [12:0] grp_fu_534_p1;
wire   [36:0] grp_fu_534_p2;
wire   [0:0] p_Result_21_fu_551_p3;
wire   [0:0] p_Result_s_fu_539_p3;
wire   [0:0] xor_ln786_fu_559_p2;
wire   [0:0] xor_ln340_fu_577_p2;
reg   [0:0] grp_fu_589_p0;
wire   [0:0] or_ln340_19_fu_1492_p2;
wire   [0:0] xor_ln340_12_fu_1903_p2;
wire   [0:0] xor_ln340_2_fu_571_p2;
reg   [35:0] grp_fu_589_p2;
wire   [35:0] y_V_fu_1879_p1;
wire   [35:0] p_Val2_29_fu_547_p1;
reg   [0:0] grp_fu_597_p0;
wire   [0:0] underflow_fu_565_p2;
wire   [0:0] underflow_7_fu_1897_p2;
reg   [35:0] grp_fu_597_p2;
wire   [13:0] sub_ln79_fu_525_p2;
wire  signed [35:0] sext_ln1118_fu_642_p0;
wire  signed [35:0] rhs_V_4_fu_649_p0;
wire   [11:0] grp_fu_673_p0;
wire  signed [35:0] grp_fu_673_p1;
wire   [11:0] or_ln700_fu_688_p2;
wire   [11:0] grp_fu_698_p0;
wire  signed [35:0] grp_fu_698_p1;
wire   [11:0] or_ln700_1_fu_703_p2;
wire   [11:0] grp_fu_713_p0;
wire  signed [35:0] grp_fu_713_p1;
wire   [11:0] or_ln700_2_fu_718_p2;
wire   [11:0] grp_fu_728_p0;
wire  signed [35:0] grp_fu_728_p1;
wire   [11:0] or_ln700_3_fu_733_p2;
wire   [11:0] grp_fu_743_p0;
wire  signed [35:0] grp_fu_743_p1;
wire   [11:0] or_ln700_4_fu_748_p2;
wire   [11:0] grp_fu_758_p0;
wire  signed [35:0] grp_fu_758_p1;
wire   [11:0] or_ln700_5_fu_763_p2;
wire   [11:0] grp_fu_773_p0;
wire  signed [35:0] grp_fu_773_p1;
wire   [11:0] or_ln700_6_fu_778_p2;
wire   [11:0] grp_fu_788_p0;
wire  signed [35:0] grp_fu_788_p1;
wire   [47:0] add_ln1192_fu_848_p2;
wire   [11:0] tmp_9_fu_860_p4;
wire   [0:0] tmp_47_fu_852_p3;
wire   [0:0] icmp_ln785_fu_870_p2;
wire   [0:0] tmp_46_fu_840_p3;
wire   [0:0] or_ln785_fu_876_p2;
wire   [0:0] xor_ln785_fu_882_p2;
wire   [0:0] icmp_ln786_fu_900_p2;
wire   [0:0] xor_ln786_7_fu_894_p2;
wire   [0:0] or_ln786_fu_906_p2;
wire   [47:0] add_ln1192_1_fu_918_p2;
wire   [11:0] tmp_s_fu_942_p4;
wire   [0:0] tmp_49_fu_934_p3;
wire   [0:0] icmp_ln785_1_fu_952_p2;
wire   [0:0] tmp_48_fu_922_p3;
wire   [0:0] or_ln785_6_fu_958_p2;
wire   [0:0] xor_ln785_11_fu_964_p2;
wire   [0:0] icmp_ln786_1_fu_982_p2;
wire   [0:0] xor_ln786_9_fu_976_p2;
wire   [0:0] or_ln786_1_fu_988_p2;
wire   [47:0] add_ln1192_2_fu_1000_p2;
wire   [11:0] tmp_10_fu_1024_p4;
wire   [0:0] tmp_51_fu_1016_p3;
wire   [0:0] icmp_ln785_2_fu_1034_p2;
wire   [0:0] tmp_50_fu_1004_p3;
wire   [0:0] or_ln785_7_fu_1040_p2;
wire   [0:0] xor_ln785_12_fu_1046_p2;
wire   [0:0] icmp_ln786_2_fu_1064_p2;
wire   [0:0] xor_ln786_10_fu_1058_p2;
wire   [0:0] or_ln786_2_fu_1070_p2;
wire   [47:0] add_ln1192_3_fu_1082_p2;
wire   [11:0] tmp_11_fu_1106_p4;
wire   [0:0] tmp_53_fu_1098_p3;
wire   [0:0] icmp_ln785_3_fu_1116_p2;
wire   [0:0] tmp_52_fu_1086_p3;
wire   [0:0] or_ln785_8_fu_1122_p2;
wire   [0:0] xor_ln785_13_fu_1128_p2;
wire   [0:0] icmp_ln786_3_fu_1146_p2;
wire   [0:0] xor_ln786_11_fu_1140_p2;
wire   [0:0] or_ln786_3_fu_1152_p2;
wire   [47:0] add_ln1192_4_fu_1164_p2;
wire   [11:0] tmp_12_fu_1188_p4;
wire   [0:0] tmp_55_fu_1180_p3;
wire   [0:0] icmp_ln785_4_fu_1198_p2;
wire   [0:0] tmp_54_fu_1168_p3;
wire   [0:0] or_ln785_9_fu_1204_p2;
wire   [0:0] xor_ln785_14_fu_1210_p2;
wire   [0:0] icmp_ln786_4_fu_1228_p2;
wire   [0:0] xor_ln786_12_fu_1222_p2;
wire   [0:0] or_ln786_4_fu_1234_p2;
wire   [47:0] add_ln1192_5_fu_1246_p2;
wire   [11:0] tmp_13_fu_1270_p4;
wire   [0:0] tmp_57_fu_1262_p3;
wire   [0:0] icmp_ln785_5_fu_1280_p2;
wire   [0:0] tmp_56_fu_1250_p3;
wire   [0:0] or_ln785_10_fu_1286_p2;
wire   [0:0] xor_ln785_15_fu_1292_p2;
wire   [0:0] icmp_ln786_5_fu_1310_p2;
wire   [0:0] xor_ln786_13_fu_1304_p2;
wire   [0:0] or_ln786_5_fu_1316_p2;
wire   [47:0] add_ln1192_6_fu_1328_p2;
wire   [11:0] tmp_14_fu_1352_p4;
wire   [0:0] tmp_59_fu_1344_p3;
wire   [0:0] icmp_ln785_6_fu_1362_p2;
wire   [0:0] tmp_58_fu_1332_p3;
wire   [0:0] or_ln785_11_fu_1368_p2;
wire   [0:0] xor_ln785_16_fu_1374_p2;
wire   [0:0] icmp_ln786_6_fu_1392_p2;
wire   [0:0] xor_ln786_14_fu_1386_p2;
wire   [0:0] or_ln786_6_fu_1398_p2;
wire   [47:0] add_ln1192_7_fu_1410_p2;
wire   [11:0] tmp_15_fu_1434_p4;
wire   [0:0] tmp_61_fu_1426_p3;
wire   [0:0] icmp_ln785_7_fu_1444_p2;
wire   [0:0] tmp_60_fu_1414_p3;
wire   [0:0] or_ln785_12_fu_1450_p2;
wire   [0:0] xor_ln785_17_fu_1456_p2;
wire   [0:0] icmp_ln786_7_fu_1474_p2;
wire   [0:0] xor_ln786_15_fu_1468_p2;
wire   [0:0] or_ln786_7_fu_1480_p2;
wire   [0:0] xor_ln340_3_fu_1496_p2;
wire   [0:0] or_ln340_21_fu_1527_p2;
wire   [35:0] select_ln340_9_fu_1519_p2;
wire   [0:0] xor_ln340_4_fu_1531_p2;
wire   [35:0] select_ln388_9_fu_1548_p2;
wire   [0:0] or_ln340_22_fu_1536_p2;
wire   [35:0] select_ln340_9_fu_1519_p3;
wire   [35:0] select_ln388_9_fu_1548_p3;
wire   [0:0] xor_ln340_5_fu_1566_p2;
wire   [0:0] or_ln340_23_fu_1562_p2;
wire   [35:0] select_ln340_10_fu_1576_p2;
wire   [35:0] select_ln388_10_fu_1583_p2;
wire   [0:0] or_ln340_24_fu_1571_p2;
wire   [35:0] select_ln340_10_fu_1576_p3;
wire   [35:0] select_ln388_10_fu_1583_p3;
wire   [0:0] xor_ln340_6_fu_1601_p2;
wire   [0:0] or_ln340_25_fu_1597_p2;
wire   [0:0] or_ln340_26_fu_1606_p2;
wire   [35:0] select_ln340_11_fu_1611_p3;
wire   [35:0] select_ln388_11_fu_1618_p3;
wire   [0:0] xor_ln340_7_fu_1636_p2;
wire   [0:0] or_ln340_28_fu_1632_p2;
wire   [35:0] select_ln340_12_fu_1646_p2;
wire   [35:0] select_ln388_12_fu_1653_p2;
wire   [0:0] or_ln340_29_fu_1641_p2;
wire   [35:0] select_ln340_12_fu_1646_p3;
wire   [35:0] select_ln388_12_fu_1653_p3;
wire   [0:0] xor_ln340_9_fu_1671_p2;
wire   [0:0] or_ln340_30_fu_1667_p2;
wire   [35:0] select_ln340_13_fu_1681_p2;
wire   [35:0] select_ln388_13_fu_1688_p2;
wire   [0:0] or_ln340_31_fu_1676_p2;
wire   [35:0] select_ln340_13_fu_1681_p3;
wire   [35:0] select_ln388_13_fu_1688_p3;
wire   [0:0] xor_ln340_10_fu_1706_p2;
wire   [0:0] or_ln340_32_fu_1702_p2;
wire   [35:0] select_ln340_14_fu_1716_p2;
wire   [35:0] select_ln388_14_fu_1723_p2;
wire   [0:0] or_ln340_33_fu_1711_p2;
wire   [35:0] select_ln340_14_fu_1716_p3;
wire   [35:0] select_ln388_14_fu_1723_p3;
wire   [0:0] xor_ln340_11_fu_1741_p2;
wire   [0:0] or_ln340_34_fu_1737_p2;
wire   [35:0] select_ln340_15_fu_1751_p2;
wire   [35:0] select_ln388_15_fu_1758_p2;
wire   [0:0] or_ln340_35_fu_1746_p2;
wire   [35:0] select_ln340_15_fu_1751_p3;
wire   [35:0] select_ln388_15_fu_1758_p3;
reg   [11:0] grp_fu_1789_p0;
wire   [8:0] lshr_ln1_fu_1799_p4;
wire   [2:0] zext_ln99_fu_1837_p0;
wire   [31:0] tmp_16_fu_1840_p9;
reg  signed [36:0] grp_fu_1866_p0;
wire  signed [36:0] lhs_V_3_fu_1862_p1;
wire  signed [36:0] lhs_V_fu_517_p1;
reg  signed [36:0] grp_fu_1866_p1;
wire  signed [36:0] rhs_V_fu_521_p1;
wire   [0:0] p_Result_23_fu_1883_p3;
wire   [0:0] p_Result_22_fu_1871_p3;
wire   [0:0] xor_ln786_8_fu_1891_p2;
wire   [0:0] xor_ln340_8_fu_1909_p2;
reg   [0:0] grp_fu_1937_p0;
wire   [0:0] or_ln340_20_fu_1501_p2;
wire   [0:0] or_ln340_27_fu_1915_p2;
wire   [0:0] or_ln340_fu_583_p2;
wire   [35:0] grp_fu_589_p3;
wire   [35:0] grp_fu_597_p3;
reg  signed [35:0] grp_fu_1945_p0;
reg   [35:0] grp_fu_1945_p1;
reg    grp_fu_534_ap_start;
wire    grp_fu_534_ap_done;
reg   [52:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [36:0] grp_fu_534_p10;
wire   [47:0] grp_fu_673_p00;
wire   [47:0] grp_fu_698_p00;
wire   [47:0] grp_fu_713_p00;
wire   [47:0] grp_fu_728_p00;
wire   [47:0] grp_fu_743_p00;
wire   [47:0] grp_fu_758_p00;
wire   [47:0] grp_fu_773_p00;
wire   [47:0] grp_fu_788_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 grp_mandel_calc_fu_453_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_461_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_469_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_477_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_485_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_493_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_501_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_509_ap_start_reg = 1'b0;
end

calc_in_parms_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_IN_PARMS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_IN_PARMS_DATA_WIDTH ))
calc_in_parms_s_axi_U(
    .AWVALID(s_axi_in_parms_AWVALID),
    .AWREADY(s_axi_in_parms_AWREADY),
    .AWADDR(s_axi_in_parms_AWADDR),
    .WVALID(s_axi_in_parms_WVALID),
    .WREADY(s_axi_in_parms_WREADY),
    .WDATA(s_axi_in_parms_WDATA),
    .WSTRB(s_axi_in_parms_WSTRB),
    .ARVALID(s_axi_in_parms_ARVALID),
    .ARREADY(s_axi_in_parms_ARREADY),
    .ARADDR(s_axi_in_parms_ARADDR),
    .RVALID(s_axi_in_parms_RVALID),
    .RREADY(s_axi_in_parms_RREADY),
    .RDATA(s_axi_in_parms_RDATA),
    .RRESP(s_axi_in_parms_RRESP),
    .BVALID(s_axi_in_parms_BVALID),
    .BREADY(s_axi_in_parms_BREADY),
    .BRESP(s_axi_in_parms_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .X0_V(X0_V),
    .Y0_V(Y0_V),
    .X1_V(X1_V),
    .width_V(width_V),
    .maxIter(maxIter)
);

calc_buf_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUF_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUF_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUF_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUF_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUF_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUF_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUF_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUF_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BUF_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BUF_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUF_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUF_R_CACHE_VALUE ))
calc_buf_r_m_axi_U(
    .AWVALID(m_axi_buf_r_AWVALID),
    .AWREADY(m_axi_buf_r_AWREADY),
    .AWADDR(m_axi_buf_r_AWADDR),
    .AWID(m_axi_buf_r_AWID),
    .AWLEN(m_axi_buf_r_AWLEN),
    .AWSIZE(m_axi_buf_r_AWSIZE),
    .AWBURST(m_axi_buf_r_AWBURST),
    .AWLOCK(m_axi_buf_r_AWLOCK),
    .AWCACHE(m_axi_buf_r_AWCACHE),
    .AWPROT(m_axi_buf_r_AWPROT),
    .AWQOS(m_axi_buf_r_AWQOS),
    .AWREGION(m_axi_buf_r_AWREGION),
    .AWUSER(m_axi_buf_r_AWUSER),
    .WVALID(m_axi_buf_r_WVALID),
    .WREADY(m_axi_buf_r_WREADY),
    .WDATA(m_axi_buf_r_WDATA),
    .WSTRB(m_axi_buf_r_WSTRB),
    .WLAST(m_axi_buf_r_WLAST),
    .WID(m_axi_buf_r_WID),
    .WUSER(m_axi_buf_r_WUSER),
    .ARVALID(m_axi_buf_r_ARVALID),
    .ARREADY(m_axi_buf_r_ARREADY),
    .ARADDR(m_axi_buf_r_ARADDR),
    .ARID(m_axi_buf_r_ARID),
    .ARLEN(m_axi_buf_r_ARLEN),
    .ARSIZE(m_axi_buf_r_ARSIZE),
    .ARBURST(m_axi_buf_r_ARBURST),
    .ARLOCK(m_axi_buf_r_ARLOCK),
    .ARCACHE(m_axi_buf_r_ARCACHE),
    .ARPROT(m_axi_buf_r_ARPROT),
    .ARQOS(m_axi_buf_r_ARQOS),
    .ARREGION(m_axi_buf_r_ARREGION),
    .ARUSER(m_axi_buf_r_ARUSER),
    .RVALID(m_axi_buf_r_RVALID),
    .RREADY(m_axi_buf_r_RREADY),
    .RDATA(m_axi_buf_r_RDATA),
    .RLAST(m_axi_buf_r_RLAST),
    .RID(m_axi_buf_r_RID),
    .RUSER(m_axi_buf_r_RUSER),
    .RRESP(m_axi_buf_r_RRESP),
    .BVALID(m_axi_buf_r_BVALID),
    .BREADY(m_axi_buf_r_BREADY),
    .BRESP(m_axi_buf_r_BRESP),
    .BID(m_axi_buf_r_BID),
    .BUSER(m_axi_buf_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(buf_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(buf_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(buf_r_RDATA),
    .I_RID(buf_r_RID),
    .I_RUSER(buf_r_RUSER),
    .I_RRESP(buf_r_RRESP),
    .I_RLAST(buf_r_RLAST),
    .I_AWVALID(buf_r_AWVALID),
    .I_AWREADY(buf_r_AWREADY),
    .I_AWADDR(buf_r_AWADDR),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(buf_r_WVALID),
    .I_WREADY(buf_r_WREADY),
    .I_WDATA(buf_r_WDATA),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(buf_r_BVALID),
    .I_BREADY(buf_r_BREADY),
    .I_BRESP(buf_r_BRESP),
    .I_BID(buf_r_BID),
    .I_BUSER(buf_r_BUSER)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_0_address0),
    .ce0(mem_0_ce0),
    .we0(mem_0_we0),
    .d0(mem_0_d0),
    .q0(mem_0_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_1_address0),
    .ce0(mem_1_ce0),
    .we0(mem_1_we0),
    .d0(mem_1_d0),
    .q0(mem_1_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_2_address0),
    .ce0(mem_2_ce0),
    .we0(mem_2_we0),
    .d0(mem_2_d0),
    .q0(mem_2_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_3_address0),
    .ce0(mem_3_ce0),
    .we0(mem_3_we0),
    .d0(mem_3_d0),
    .q0(mem_3_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_4_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_4_address0),
    .ce0(mem_4_ce0),
    .we0(mem_4_we0),
    .d0(mem_4_d0),
    .q0(mem_4_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_5_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_5_address0),
    .ce0(mem_5_ce0),
    .we0(mem_5_we0),
    .d0(mem_5_d0),
    .q0(mem_5_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_6_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_6_address0),
    .ce0(mem_6_ce0),
    .we0(mem_6_we0),
    .d0(mem_6_d0),
    .q0(mem_6_q0)
);

calc_mem_0 #(
    .DataWidth( 16 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
mem_7_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_7_address0),
    .ce0(mem_7_ce0),
    .we0(mem_7_we0),
    .d0(mem_7_d0),
    .q0(mem_7_q0)
);

mandel_calc grp_mandel_calc_fu_453(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_453_ap_start),
    .ap_done(grp_mandel_calc_fu_453_ap_done),
    .ap_idle(grp_mandel_calc_fu_453_ap_idle),
    .ap_ready(grp_mandel_calc_fu_453_ap_ready),
    .x_in_V(reg_2040),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_453_ap_return)
);

mandel_calc grp_mandel_calc_fu_461(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_461_ap_start),
    .ap_done(grp_mandel_calc_fu_461_ap_done),
    .ap_idle(grp_mandel_calc_fu_461_ap_idle),
    .ap_ready(grp_mandel_calc_fu_461_ap_ready),
    .x_in_V(grp_mandel_calc_fu_461_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_461_ap_return)
);

mandel_calc grp_mandel_calc_fu_469(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_469_ap_start),
    .ap_done(grp_mandel_calc_fu_469_ap_done),
    .ap_idle(grp_mandel_calc_fu_469_ap_idle),
    .ap_ready(grp_mandel_calc_fu_469_ap_ready),
    .x_in_V(grp_mandel_calc_fu_469_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_469_ap_return)
);

mandel_calc grp_mandel_calc_fu_477(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_477_ap_start),
    .ap_done(grp_mandel_calc_fu_477_ap_done),
    .ap_idle(grp_mandel_calc_fu_477_ap_idle),
    .ap_ready(grp_mandel_calc_fu_477_ap_ready),
    .x_in_V(grp_mandel_calc_fu_477_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_477_ap_return)
);

mandel_calc grp_mandel_calc_fu_485(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_485_ap_start),
    .ap_done(grp_mandel_calc_fu_485_ap_done),
    .ap_idle(grp_mandel_calc_fu_485_ap_idle),
    .ap_ready(grp_mandel_calc_fu_485_ap_ready),
    .x_in_V(grp_mandel_calc_fu_485_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_485_ap_return)
);

mandel_calc grp_mandel_calc_fu_493(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_493_ap_start),
    .ap_done(grp_mandel_calc_fu_493_ap_done),
    .ap_idle(grp_mandel_calc_fu_493_ap_idle),
    .ap_ready(grp_mandel_calc_fu_493_ap_ready),
    .x_in_V(grp_mandel_calc_fu_493_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_493_ap_return)
);

mandel_calc grp_mandel_calc_fu_501(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_501_ap_start),
    .ap_done(grp_mandel_calc_fu_501_ap_done),
    .ap_idle(grp_mandel_calc_fu_501_ap_idle),
    .ap_ready(grp_mandel_calc_fu_501_ap_ready),
    .x_in_V(grp_mandel_calc_fu_501_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_501_ap_return)
);

mandel_calc grp_mandel_calc_fu_509(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_509_ap_start),
    .ap_done(grp_mandel_calc_fu_509_ap_done),
    .ap_idle(grp_mandel_calc_fu_509_ap_idle),
    .ap_ready(grp_mandel_calc_fu_509_ap_ready),
    .x_in_V(grp_mandel_calc_fu_509_x_in_V),
    .y_in_V(p_Val2_30_reg_388),
    .maxIter(maxIter_read_reg_2077),
    .ap_return(grp_mandel_calc_fu_509_ap_return)
);

calc_sdiv_37ns_13eOg #(
    .ID( 1 ),
    .NUM_STAGE( 41 ),
    .din0_WIDTH( 37 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 37 ))
calc_sdiv_37ns_13eOg_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_534_ap_start),
    .done(grp_fu_534_ap_done),
    .din0(grp_fu_534_p0),
    .din1(grp_fu_534_p1),
    .ce(1'b1),
    .dout(grp_fu_534_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_673_p0),
    .din1(grp_fu_673_p1),
    .ce(1'b1),
    .dout(grp_fu_673_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_698_p0),
    .din1(grp_fu_698_p1),
    .ce(1'b1),
    .dout(grp_fu_698_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_713_p0),
    .din1(grp_fu_713_p1),
    .ce(1'b1),
    .dout(grp_fu_713_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_728_p0),
    .din1(grp_fu_728_p1),
    .ce(1'b1),
    .dout(grp_fu_728_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_743_p0),
    .din1(grp_fu_743_p1),
    .ce(1'b1),
    .dout(grp_fu_743_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_758_p0),
    .din1(grp_fu_758_p1),
    .ce(1'b1),
    .dout(grp_fu_758_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U20(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_773_p0),
    .din1(grp_fu_773_p1),
    .ce(1'b1),
    .dout(grp_fu_773_p2)
);

calc_mul_12ns_36sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 36 ),
    .dout_WIDTH( 48 ))
calc_mul_12ns_36sfYi_U21(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_788_p0),
    .din1(grp_fu_788_p1),
    .ce(1'b1),
    .dout(grp_fu_788_p2)
);

calc_mux_832_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
calc_mux_832_16_1_1_U22(
    .din0(mem_0_q0),
    .din1(mem_1_q0),
    .din2(mem_2_q0),
    .din3(mem_3_q0),
    .din4(mem_4_q0),
    .din5(mem_5_q0),
    .din6(mem_6_q0),
    .din7(mem_7_q0),
    .din8(tmp_16_fu_1840_p9),
    .dout(tmp_16_fu_1840_p10)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state52) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln85_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state52)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state52);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((icmp_ln85_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_453_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_453_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_453_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_453_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_461_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_461_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_461_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_461_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_469_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_469_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_469_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_469_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_477_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_477_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_477_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_477_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_485_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_485_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_485_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_485_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_493_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_493_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_493_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_493_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_501_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_501_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_501_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_501_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_509_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_509_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_509_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_509_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        i_op_assign_reg_442 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        i_op_assign_reg_442 <= grp_fu_1789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        index_0_reg_409 <= 24'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        index_0_reg_409 <= reg_2052;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln85_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
        index_1_reg_432 <= index_0_reg_409;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        index_1_reg_432 <= grp_fu_1945_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        indvars_iv_reg_378 <= zext_ln1118_fu_639_p1;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        indvars_iv_reg_378 <= grp_fu_1945_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        p_Val2_30_reg_388 <= Y0_V_read_reg_1971;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        p_Val2_30_reg_388 <= grp_fu_1937_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_1989 <= trunc_ln99_fu_1795_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_1989 <= trunc_ln1192_2_fu_812_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_1989 <= add_ln703_3_fu_1094_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2040 <= trunc_ln1192_fu_804_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2040 <= zext_ln99_1_fu_1809_p1;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2040 <= grp_mandel_calc_fu_453_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2040 <= grp_fu_1937_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2052 <= zext_ln1116_fu_669_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2052 <= grp_fu_728_p2;
    end else if (((1'b1 == ap_CS_fsm_state47) | ((icmp_ln85_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44)))) begin
        reg_2052 <= grp_fu_1945_p2;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2052 <= grp_mandel_calc_fu_461_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2052 <= select_ln340_18_fu_1554_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2062 <= grp_fu_698_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_2062 <= zext_ln1148_fu_531_p1;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2062 <= zext_ln1116_2_fu_709_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_2062 <= add_ln703_2_fu_1012_p2;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2062 <= grp_mandel_calc_fu_469_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2062 <= select_ln340_19_fu_1589_p3;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2062 <= zext_ln99_1_fu_1809_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2067 <= zext_ln99_2_fu_1827_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2067 <= trunc_ln1192_1_fu_808_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2107 <= grp_fu_713_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2107 <= zext_ln1116_1_fu_694_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_2107 <= add_ln703_4_fu_1176_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_reg_2419 == 1'd0))) begin
        reg_2107 <= tmp_16_fu_1840_p10;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2107 <= grp_mandel_calc_fu_477_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2107 <= select_ln340_20_fu_1624_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        reg_2107 <= grp_fu_1866_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2137 <= zext_ln1116_3_fu_724_p1;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2137 <= grp_fu_673_p2;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2137 <= zext_ln99_1_fu_1809_p1;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2137 <= grp_mandel_calc_fu_485_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2137 <= select_ln340_21_fu_1659_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2142 <= trunc_ln1192_3_fu_816_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2142 <= zext_ln99_1_fu_1809_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2147 <= grp_fu_743_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2147 <= zext_ln1116_4_fu_739_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_2147 <= add_ln703_6_fu_1340_p2;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2147 <= grp_mandel_calc_fu_493_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2147 <= select_ln340_22_fu_1694_p3;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2147 <= zext_ln99_1_fu_1809_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2157 <= grp_fu_758_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2157 <= zext_ln1116_5_fu_754_p1;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2157 <= grp_mandel_calc_fu_501_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2157 <= select_ln340_23_fu_1729_p3;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2157 <= zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_2157 <= add_ln703_1_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2167 <= grp_fu_773_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2167 <= zext_ln1116_6_fu_769_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_2167 <= add_ln703_7_fu_1422_p2;
    end else if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        reg_2167 <= grp_mandel_calc_fu_509_ap_return;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        reg_2167 <= select_ln340_24_fu_1764_p3;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2167 <= zext_ln99_1_fu_1809_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        reg_2177 <= grp_fu_788_p2;
    end else if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        reg_2177 <= zext_ln1116_7_fu_784_p1;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_fu_1783_p2 == 1'd0))) begin
        reg_2177 <= zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        reg_2177 <= add_ln703_5_fu_1258_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        t_V_1_reg_398 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        t_V_1_reg_398 <= line_V_reg_2043;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_V_1_0_reg_421 <= add_ln700_reg_2097;
    end else if (((1'b1 == ap_CS_fsm_state43) & (icmp_ln79_fu_653_p2 == 1'd0))) begin
        tmp_V_1_0_reg_421 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        X0_V_read_reg_1976 <= X0_V;
        Y0_V_read_reg_1971 <= Y0_V;
        maxIter_read_reg_2077 <= maxIter;
        width_V_read_reg_1962 <= width_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (icmp_ln85_fu_664_p2 == 1'd0))) begin
        add_ln700_reg_2097 <= add_ln700_fu_658_p2;
        lshr_ln_reg_1999 <= {{tmp_V_1_0_reg_421[11:3]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        and_ln785_1_reg_2212 <= and_ln785_1_fu_970_p2;
        and_ln785_2_reg_2231 <= and_ln785_2_fu_1052_p2;
        and_ln785_3_reg_2250 <= and_ln785_3_fu_1134_p2;
        and_ln785_4_reg_2269 <= and_ln785_4_fu_1216_p2;
        and_ln785_5_reg_2288 <= and_ln785_5_fu_1298_p2;
        and_ln785_6_reg_2307 <= and_ln785_6_fu_1380_p2;
        and_ln785_7_reg_2057 <= and_ln785_7_fu_1462_p2;
        and_ln785_reg_2193 <= and_ln785_fu_888_p2;
        and_ln786_13_reg_2218 <= and_ln786_13_fu_994_p2;
        and_ln786_14_reg_2237 <= and_ln786_14_fu_1076_p2;
        and_ln786_15_reg_2256 <= and_ln786_15_fu_1158_p2;
        and_ln786_16_reg_2275 <= and_ln786_16_fu_1240_p2;
        and_ln786_17_reg_2294 <= and_ln786_17_fu_1322_p2;
        and_ln786_18_reg_2072 <= and_ln786_18_fu_1404_p2;
        and_ln786_19_reg_2332 <= and_ln786_19_fu_1486_p2;
        and_ln786_reg_2199 <= and_ln786_fu_912_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln96_reg_2419 <= icmp_ln96_fu_1783_p2;
        icmp_ln96_reg_2419_pp0_iter1_reg <= icmp_ln96_reg_2419;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln96_reg_2419_pp0_iter2_reg <= icmp_ln96_reg_2419_pp0_iter1_reg;
        icmp_ln96_reg_2419_pp0_iter3_reg <= icmp_ln96_reg_2419_pp0_iter2_reg;
        icmp_ln96_reg_2419_pp0_iter4_reg <= icmp_ln96_reg_2419_pp0_iter3_reg;
        icmp_ln96_reg_2419_pp0_iter5_reg <= icmp_ln96_reg_2419_pp0_iter4_reg;
        icmp_ln96_reg_2419_pp0_iter6_reg <= icmp_ln96_reg_2419_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        line_V_reg_2043 <= grp_fu_1789_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        rhs_V_4_reg_2035 <= rhs_V_4_fu_649_p1;
        sext_ln1118_reg_2011 <= sext_ln1118_fu_642_p1;
        sext_ln703_reg_2023 <= sext_ln703_fu_646_p1;
        tmp_17_reg_1994 <= {{sub_ln79_fu_525_p2[13:2]}};
        zext_ln1118_reg_2004[11 : 0] <= zext_ln1118_fu_639_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        trunc_ln1192_4_reg_2152 <= trunc_ln1192_4_fu_820_p1;
        trunc_ln1192_5_reg_2162 <= trunc_ln1192_5_fu_824_p1;
        trunc_ln1192_6_reg_2172 <= trunc_ln1192_6_fu_828_p1;
        trunc_ln1192_7_reg_2182 <= trunc_ln1192_7_fu_832_p1;
    end
end

always @ (*) begin
    if ((icmp_ln96_fu_1783_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state52 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state52 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln79_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_reg_2419 == 1'd0))) begin
        buf_r_AWVALID = 1'b1;
    end else begin
        buf_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter6_reg == 1'd0))) begin
        buf_r_BREADY = 1'b1;
    end else begin
        buf_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter1_reg == 1'd0))) begin
        buf_r_WVALID = 1'b1;
    end else begin
        buf_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln96_reg_2419 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY;
    end else begin
        buf_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_B = m_axi_buf_r_BVALID;
    end else begin
        buf_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_W = m_axi_buf_r_WREADY;
    end else begin
        buf_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_1789_p0 = i_op_assign_reg_442;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        grp_fu_1789_p0 = t_V_1_reg_398;
    end else begin
        grp_fu_1789_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_1866_p0 = lhs_V_3_fu_1862_p1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_1866_p0 = lhs_V_fu_517_p1;
    end else begin
        grp_fu_1866_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_1866_p1 = rhs_V_4_reg_2035;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        grp_fu_1866_p1 = rhs_V_fu_521_p1;
    end else begin
        grp_fu_1866_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_1937_p0 = or_ln340_27_fu_1915_p2;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_1937_p0 = or_ln340_20_fu_1501_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_1937_p0 = or_ln340_fu_583_p2;
    end else begin
        grp_fu_1937_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_1945_p0 = 24'd1;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_1945_p0 = X0_V_read_reg_1976;
    end else if (((1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state60))) begin
        grp_fu_1945_p0 = zext_ln1118_reg_2004;
    end else begin
        grp_fu_1945_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_1945_p1 = indvars_iv_reg_378;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_1945_p1 = index_1_reg_432;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_1945_p1 = reg_2040;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        grp_fu_1945_p1 = index_0_reg_409;
    end else begin
        grp_fu_1945_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_534_ap_start = 1'b1;
    end else begin
        grp_fu_534_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_589_p0 = xor_ln340_12_fu_1903_p2;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_589_p0 = or_ln340_19_fu_1492_p2;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_589_p0 = xor_ln340_2_fu_571_p2;
    end else begin
        grp_fu_589_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_589_p2 = y_V_fu_1879_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_589_p2 = reg_2052;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_589_p2 = p_Val2_29_fu_547_p1;
    end else begin
        grp_fu_589_p2 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_597_p0 = underflow_7_fu_1897_p2;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_597_p0 = and_ln786_reg_2199;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_597_p0 = underflow_fu_565_p2;
    end else begin
        grp_fu_597_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        grp_fu_597_p2 = y_V_fu_1879_p1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        grp_fu_597_p2 = reg_2052;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_597_p2 = p_Val2_29_fu_547_p1;
    end else begin
        grp_fu_597_p2 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_0_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_0_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_0_ce0 = 1'b1;
    end else begin
        mem_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_0_we0 = 1'b1;
    end else begin
        mem_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_1_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_1_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_1_ce0 = 1'b1;
    end else begin
        mem_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_1_we0 = 1'b1;
    end else begin
        mem_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_2_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_2_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_2_ce0 = 1'b1;
    end else begin
        mem_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_2_we0 = 1'b1;
    end else begin
        mem_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_3_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_3_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_3_ce0 = 1'b1;
    end else begin
        mem_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_3_we0 = 1'b1;
    end else begin
        mem_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_4_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_4_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_4_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_4_ce0 = 1'b1;
    end else begin
        mem_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_4_we0 = 1'b1;
    end else begin
        mem_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_5_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_5_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_5_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_5_ce0 = 1'b1;
    end else begin
        mem_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_5_we0 = 1'b1;
    end else begin
        mem_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_6_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_6_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_6_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_6_ce0 = 1'b1;
    end else begin
        mem_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_6_we0 = 1'b1;
    end else begin
        mem_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_7_address0 = zext_ln99_1_fu_1809_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_7_address0 = zext_ln91_fu_1772_p1;
    end else begin
        mem_7_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_7_ce0 = 1'b1;
    end else begin
        mem_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_7_we0 = 1'b1;
    end else begin
        mem_7_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            if (((icmp_ln79_fu_653_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state43))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((icmp_ln85_fu_664_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state44))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln96_fu_1783_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln96_fu_1783_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1192_1_fu_918_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2062));

assign add_ln1192_2_fu_1000_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2107));

assign add_ln1192_3_fu_1082_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2052));

assign add_ln1192_4_fu_1164_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2147));

assign add_ln1192_5_fu_1246_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2157));

assign add_ln1192_6_fu_1328_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2167));

assign add_ln1192_7_fu_1410_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2177));

assign add_ln1192_fu_848_p2 = ($signed(sext_ln703_reg_2023) + $signed(reg_2137));

assign add_ln700_fu_658_p2 = (12'd8 + tmp_V_1_0_reg_421);

assign add_ln703_1_fu_930_p2 = ($signed(X0_V_read_reg_1976) + $signed(reg_2067));

assign add_ln703_2_fu_1012_p2 = ($signed(X0_V_read_reg_1976) + $signed(reg_1989));

assign add_ln703_3_fu_1094_p2 = ($signed(X0_V_read_reg_1976) + $signed(reg_2142));

assign add_ln703_4_fu_1176_p2 = ($signed(X0_V_read_reg_1976) + $signed(trunc_ln1192_4_reg_2152));

assign add_ln703_5_fu_1258_p2 = ($signed(X0_V_read_reg_1976) + $signed(trunc_ln1192_5_reg_2162));

assign add_ln703_6_fu_1340_p2 = ($signed(X0_V_read_reg_1976) + $signed(trunc_ln1192_6_reg_2172));

assign add_ln703_7_fu_1422_p2 = ($signed(X0_V_read_reg_1976) + $signed(trunc_ln1192_7_reg_2182));

assign and_ln785_1_fu_970_p2 = (xor_ln785_11_fu_964_p2 & or_ln785_6_fu_958_p2);

assign and_ln785_2_fu_1052_p2 = (xor_ln785_12_fu_1046_p2 & or_ln785_7_fu_1040_p2);

assign and_ln785_3_fu_1134_p2 = (xor_ln785_13_fu_1128_p2 & or_ln785_8_fu_1122_p2);

assign and_ln785_4_fu_1216_p2 = (xor_ln785_14_fu_1210_p2 & or_ln785_9_fu_1204_p2);

assign and_ln785_5_fu_1298_p2 = (xor_ln785_15_fu_1292_p2 & or_ln785_10_fu_1286_p2);

assign and_ln785_6_fu_1380_p2 = (xor_ln785_16_fu_1374_p2 & or_ln785_11_fu_1368_p2);

assign and_ln785_7_fu_1462_p2 = (xor_ln785_17_fu_1456_p2 & or_ln785_12_fu_1450_p2);

assign and_ln785_fu_888_p2 = (xor_ln785_fu_882_p2 & or_ln785_fu_876_p2);

assign and_ln786_13_fu_994_p2 = (tmp_48_fu_922_p3 & or_ln786_1_fu_988_p2);

assign and_ln786_14_fu_1076_p2 = (tmp_50_fu_1004_p3 & or_ln786_2_fu_1070_p2);

assign and_ln786_15_fu_1158_p2 = (tmp_52_fu_1086_p3 & or_ln786_3_fu_1152_p2);

assign and_ln786_16_fu_1240_p2 = (tmp_54_fu_1168_p3 & or_ln786_4_fu_1234_p2);

assign and_ln786_17_fu_1322_p2 = (tmp_56_fu_1250_p3 & or_ln786_5_fu_1316_p2);

assign and_ln786_18_fu_1404_p2 = (tmp_58_fu_1332_p3 & or_ln786_6_fu_1398_p2);

assign and_ln786_19_fu_1486_p2 = (tmp_60_fu_1414_p3 & or_ln786_7_fu_1480_p2);

assign and_ln786_fu_912_p2 = (tmp_46_fu_840_p3 & or_ln786_fu_906_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd52];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter6_reg == 1'd0)) | ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (icmp_ln96_reg_2419_pp0_iter6_reg == 1'd0)) | ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state50_on_subcall_done = ((grp_mandel_calc_fu_509_ap_done == 1'b0) | (grp_mandel_calc_fu_501_ap_done == 1'b0) | (grp_mandel_calc_fu_493_ap_done == 1'b0) | (grp_mandel_calc_fu_485_ap_done == 1'b0) | (grp_mandel_calc_fu_477_ap_done == 1'b0) | (grp_mandel_calc_fu_469_ap_done == 1'b0) | (grp_mandel_calc_fu_461_ap_done == 1'b0) | (grp_mandel_calc_fu_453_ap_done == 1'b0));
end

assign ap_block_state52_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state53_io = ((buf_r_AWREADY == 1'b0) & (icmp_ln96_reg_2419 == 1'd0));
end

assign ap_block_state53_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_io = ((buf_r_WREADY == 1'b0) & (icmp_ln96_reg_2419_pp0_iter1_reg == 1'd0));
end

assign ap_block_state54_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59_pp0_stage0_iter7 = ((buf_r_BVALID == 1'b0) & (icmp_ln96_reg_2419_pp0_iter6_reg == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign buf_r_AWADDR = reg_2067;

assign buf_r_WDATA = reg_2107;

assign grp_fu_1789_p2 = (grp_fu_1789_p0 + 12'd1);

assign grp_fu_1866_p2 = ($signed(grp_fu_1866_p0) - $signed(grp_fu_1866_p1));

assign grp_fu_1937_p3 = ((grp_fu_1937_p0[0:0] === 1'b1) ? grp_fu_589_p3 : grp_fu_597_p3);

assign grp_fu_1945_p2 = ($signed(grp_fu_1945_p0) + $signed(grp_fu_1945_p1));

assign grp_fu_534_p0 = reg_2107;

assign grp_fu_534_p1 = grp_fu_534_p10;

assign grp_fu_534_p10 = width_V_read_reg_1962;

assign grp_fu_589_p3 = ((grp_fu_589_p0[0:0] === 1'b1) ? 36'd34359738367 : grp_fu_589_p2);

assign grp_fu_597_p3 = ((grp_fu_597_p0[0:0] === 1'b1) ? 36'd34359738368 : grp_fu_597_p2);

assign grp_fu_673_p0 = grp_fu_673_p00;

assign grp_fu_673_p00 = tmp_V_1_0_reg_421;

assign grp_fu_673_p1 = sext_ln1118_reg_2011;

assign grp_fu_698_p0 = grp_fu_698_p00;

assign grp_fu_698_p00 = or_ln700_fu_688_p2;

assign grp_fu_698_p1 = sext_ln1118_reg_2011;

assign grp_fu_713_p0 = grp_fu_713_p00;

assign grp_fu_713_p00 = or_ln700_1_fu_703_p2;

assign grp_fu_713_p1 = sext_ln1118_reg_2011;

assign grp_fu_728_p0 = grp_fu_728_p00;

assign grp_fu_728_p00 = or_ln700_2_fu_718_p2;

assign grp_fu_728_p1 = sext_ln1118_reg_2011;

assign grp_fu_743_p0 = grp_fu_743_p00;

assign grp_fu_743_p00 = or_ln700_3_fu_733_p2;

assign grp_fu_743_p1 = sext_ln1118_reg_2011;

assign grp_fu_758_p0 = grp_fu_758_p00;

assign grp_fu_758_p00 = or_ln700_4_fu_748_p2;

assign grp_fu_758_p1 = sext_ln1118_reg_2011;

assign grp_fu_773_p0 = grp_fu_773_p00;

assign grp_fu_773_p00 = or_ln700_5_fu_763_p2;

assign grp_fu_773_p1 = sext_ln1118_reg_2011;

assign grp_fu_788_p0 = grp_fu_788_p00;

assign grp_fu_788_p00 = or_ln700_6_fu_778_p2;

assign grp_fu_788_p1 = sext_ln1118_reg_2011;

assign grp_mandel_calc_fu_453_ap_start = grp_mandel_calc_fu_453_ap_start_reg;

assign grp_mandel_calc_fu_461_ap_start = grp_mandel_calc_fu_461_ap_start_reg;

assign grp_mandel_calc_fu_461_x_in_V = reg_2052;

assign grp_mandel_calc_fu_469_ap_start = grp_mandel_calc_fu_469_ap_start_reg;

assign grp_mandel_calc_fu_469_x_in_V = reg_2062;

assign grp_mandel_calc_fu_477_ap_start = grp_mandel_calc_fu_477_ap_start_reg;

assign grp_mandel_calc_fu_477_x_in_V = reg_2107;

assign grp_mandel_calc_fu_485_ap_start = grp_mandel_calc_fu_485_ap_start_reg;

assign grp_mandel_calc_fu_485_x_in_V = reg_2137;

assign grp_mandel_calc_fu_493_ap_start = grp_mandel_calc_fu_493_ap_start_reg;

assign grp_mandel_calc_fu_493_x_in_V = reg_2147;

assign grp_mandel_calc_fu_501_ap_start = grp_mandel_calc_fu_501_ap_start_reg;

assign grp_mandel_calc_fu_501_x_in_V = reg_2157;

assign grp_mandel_calc_fu_509_ap_start = grp_mandel_calc_fu_509_ap_start_reg;

assign grp_mandel_calc_fu_509_x_in_V = reg_2167;

assign icmp_ln785_1_fu_952_p2 = ((tmp_s_fu_942_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_2_fu_1034_p2 = ((tmp_10_fu_1024_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_3_fu_1116_p2 = ((tmp_11_fu_1106_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_4_fu_1198_p2 = ((tmp_12_fu_1188_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_5_fu_1280_p2 = ((tmp_13_fu_1270_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_6_fu_1362_p2 = ((tmp_14_fu_1352_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_7_fu_1444_p2 = ((tmp_15_fu_1434_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln785_fu_870_p2 = ((tmp_9_fu_860_p4 != 12'd0) ? 1'b1 : 1'b0);

assign icmp_ln786_1_fu_982_p2 = ((tmp_s_fu_942_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_2_fu_1064_p2 = ((tmp_10_fu_1024_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_3_fu_1146_p2 = ((tmp_11_fu_1106_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_4_fu_1228_p2 = ((tmp_12_fu_1188_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_5_fu_1310_p2 = ((tmp_13_fu_1270_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_6_fu_1392_p2 = ((tmp_14_fu_1352_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_7_fu_1474_p2 = ((tmp_15_fu_1434_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln786_fu_900_p2 = ((tmp_9_fu_860_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_653_p2 = ((t_V_1_reg_398 == tmp_17_reg_1994) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_664_p2 = ((tmp_V_1_0_reg_421 == width_V_read_reg_1962) ? 1'b1 : 1'b0);

assign icmp_ln96_fu_1783_p2 = ((index_1_reg_432 == indvars_iv_reg_378) ? 1'b1 : 1'b0);

assign lhs_V_3_fu_1862_p1 = $signed(p_Val2_30_reg_388);

assign lhs_V_fu_517_p1 = $signed(X1_V);

assign lshr_ln1_fu_1799_p4 = {{i_op_assign_reg_442[11:3]}};

assign mem_0_d0 = reg_2040;

assign mem_1_d0 = reg_2052;

assign mem_2_d0 = reg_2062;

assign mem_3_d0 = reg_2107;

assign mem_4_d0 = reg_2137;

assign mem_5_d0 = reg_2147;

assign mem_6_d0 = reg_2157;

assign mem_7_d0 = reg_2167;

assign or_ln340_19_fu_1492_p2 = (and_ln786_reg_2199 | and_ln785_reg_2193);

assign or_ln340_20_fu_1501_p2 = (xor_ln340_3_fu_1496_p2 | and_ln785_reg_2193);

assign or_ln340_21_fu_1527_p2 = (and_ln786_13_reg_2218 | and_ln785_1_reg_2212);

assign or_ln340_22_fu_1536_p2 = (xor_ln340_4_fu_1531_p2 | and_ln785_1_reg_2212);

assign or_ln340_23_fu_1562_p2 = (and_ln786_14_reg_2237 | and_ln785_2_reg_2231);

assign or_ln340_24_fu_1571_p2 = (xor_ln340_5_fu_1566_p2 | and_ln785_2_reg_2231);

assign or_ln340_25_fu_1597_p2 = (and_ln786_15_reg_2256 | and_ln785_3_reg_2250);

assign or_ln340_26_fu_1606_p2 = (xor_ln340_6_fu_1601_p2 | and_ln785_3_reg_2250);

assign or_ln340_27_fu_1915_p2 = (xor_ln340_8_fu_1909_p2 | p_Result_23_fu_1883_p3);

assign or_ln340_28_fu_1632_p2 = (and_ln786_16_reg_2275 | and_ln785_4_reg_2269);

assign or_ln340_29_fu_1641_p2 = (xor_ln340_7_fu_1636_p2 | and_ln785_4_reg_2269);

assign or_ln340_30_fu_1667_p2 = (and_ln786_17_reg_2294 | and_ln785_5_reg_2288);

assign or_ln340_31_fu_1676_p2 = (xor_ln340_9_fu_1671_p2 | and_ln785_5_reg_2288);

assign or_ln340_32_fu_1702_p2 = (and_ln786_18_reg_2072 | and_ln785_6_reg_2307);

assign or_ln340_33_fu_1711_p2 = (xor_ln340_10_fu_1706_p2 | and_ln785_6_reg_2307);

assign or_ln340_34_fu_1737_p2 = (and_ln786_19_reg_2332 | and_ln785_7_reg_2057);

assign or_ln340_35_fu_1746_p2 = (xor_ln340_11_fu_1741_p2 | and_ln785_7_reg_2057);

assign or_ln340_fu_583_p2 = (xor_ln340_fu_577_p2 | p_Result_21_fu_551_p3);

assign or_ln700_1_fu_703_p2 = (tmp_V_1_0_reg_421 | 12'd2);

assign or_ln700_2_fu_718_p2 = (tmp_V_1_0_reg_421 | 12'd3);

assign or_ln700_3_fu_733_p2 = (tmp_V_1_0_reg_421 | 12'd4);

assign or_ln700_4_fu_748_p2 = (tmp_V_1_0_reg_421 | 12'd5);

assign or_ln700_5_fu_763_p2 = (tmp_V_1_0_reg_421 | 12'd6);

assign or_ln700_6_fu_778_p2 = (tmp_V_1_0_reg_421 | 12'd7);

assign or_ln700_fu_688_p2 = (tmp_V_1_0_reg_421 | 12'd1);

assign or_ln785_10_fu_1286_p2 = (tmp_57_fu_1262_p3 | icmp_ln785_5_fu_1280_p2);

assign or_ln785_11_fu_1368_p2 = (tmp_59_fu_1344_p3 | icmp_ln785_6_fu_1362_p2);

assign or_ln785_12_fu_1450_p2 = (tmp_61_fu_1426_p3 | icmp_ln785_7_fu_1444_p2);

assign or_ln785_6_fu_958_p2 = (tmp_49_fu_934_p3 | icmp_ln785_1_fu_952_p2);

assign or_ln785_7_fu_1040_p2 = (tmp_51_fu_1016_p3 | icmp_ln785_2_fu_1034_p2);

assign or_ln785_8_fu_1122_p2 = (tmp_53_fu_1098_p3 | icmp_ln785_3_fu_1116_p2);

assign or_ln785_9_fu_1204_p2 = (tmp_55_fu_1180_p3 | icmp_ln785_4_fu_1198_p2);

assign or_ln785_fu_876_p2 = (tmp_47_fu_852_p3 | icmp_ln785_fu_870_p2);

assign or_ln786_1_fu_988_p2 = (xor_ln786_9_fu_976_p2 | icmp_ln786_1_fu_982_p2);

assign or_ln786_2_fu_1070_p2 = (xor_ln786_10_fu_1058_p2 | icmp_ln786_2_fu_1064_p2);

assign or_ln786_3_fu_1152_p2 = (xor_ln786_11_fu_1140_p2 | icmp_ln786_3_fu_1146_p2);

assign or_ln786_4_fu_1234_p2 = (xor_ln786_12_fu_1222_p2 | icmp_ln786_4_fu_1228_p2);

assign or_ln786_5_fu_1316_p2 = (xor_ln786_13_fu_1304_p2 | icmp_ln786_5_fu_1310_p2);

assign or_ln786_6_fu_1398_p2 = (xor_ln786_14_fu_1386_p2 | icmp_ln786_6_fu_1392_p2);

assign or_ln786_7_fu_1480_p2 = (xor_ln786_15_fu_1468_p2 | icmp_ln786_7_fu_1474_p2);

assign or_ln786_fu_906_p2 = (xor_ln786_7_fu_894_p2 | icmp_ln786_fu_900_p2);

assign p_Result_21_fu_551_p3 = grp_fu_534_p2[32'd35];

assign p_Result_22_fu_1871_p3 = grp_fu_1866_p2[32'd36];

assign p_Result_23_fu_1883_p3 = grp_fu_1866_p2[32'd35];

assign p_Result_s_fu_539_p3 = grp_fu_534_p2[32'd36];

assign p_Val2_29_fu_547_p1 = grp_fu_534_p2[35:0];

assign rhs_V_4_fu_649_p0 = grp_fu_1937_p3;

assign rhs_V_4_fu_649_p1 = rhs_V_4_fu_649_p0;

assign rhs_V_fu_521_p0 = X0_V;

assign rhs_V_fu_521_p1 = rhs_V_fu_521_p0;

assign select_ln340_10_fu_1576_p2 = reg_2062;

assign select_ln340_10_fu_1576_p3 = ((or_ln340_23_fu_1562_p2[0:0] === 1'b1) ? 36'd34359738367 : select_ln340_10_fu_1576_p2);

assign select_ln340_11_fu_1611_p3 = ((or_ln340_25_fu_1597_p2[0:0] === 1'b1) ? 36'd34359738367 : reg_1989);

assign select_ln340_12_fu_1646_p2 = reg_2107;

assign select_ln340_12_fu_1646_p3 = ((or_ln340_28_fu_1632_p2[0:0] === 1'b1) ? 36'd34359738367 : select_ln340_12_fu_1646_p2);

assign select_ln340_13_fu_1681_p2 = reg_2177;

assign select_ln340_13_fu_1681_p3 = ((or_ln340_30_fu_1667_p2[0:0] === 1'b1) ? 36'd34359738367 : select_ln340_13_fu_1681_p2);

assign select_ln340_14_fu_1716_p2 = reg_2147;

assign select_ln340_14_fu_1716_p3 = ((or_ln340_32_fu_1702_p2[0:0] === 1'b1) ? 36'd34359738367 : select_ln340_14_fu_1716_p2);

assign select_ln340_15_fu_1751_p2 = reg_2167;

assign select_ln340_15_fu_1751_p3 = ((or_ln340_34_fu_1737_p2[0:0] === 1'b1) ? 36'd34359738367 : select_ln340_15_fu_1751_p2);

assign select_ln340_18_fu_1554_p3 = ((or_ln340_22_fu_1536_p2[0:0] === 1'b1) ? select_ln340_9_fu_1519_p3 : select_ln388_9_fu_1548_p3);

assign select_ln340_19_fu_1589_p3 = ((or_ln340_24_fu_1571_p2[0:0] === 1'b1) ? select_ln340_10_fu_1576_p3 : select_ln388_10_fu_1583_p3);

assign select_ln340_20_fu_1624_p3 = ((or_ln340_26_fu_1606_p2[0:0] === 1'b1) ? select_ln340_11_fu_1611_p3 : select_ln388_11_fu_1618_p3);

assign select_ln340_21_fu_1659_p3 = ((or_ln340_29_fu_1641_p2[0:0] === 1'b1) ? select_ln340_12_fu_1646_p3 : select_ln388_12_fu_1653_p3);

assign select_ln340_22_fu_1694_p3 = ((or_ln340_31_fu_1676_p2[0:0] === 1'b1) ? select_ln340_13_fu_1681_p3 : select_ln388_13_fu_1688_p3);

assign select_ln340_23_fu_1729_p3 = ((or_ln340_33_fu_1711_p2[0:0] === 1'b1) ? select_ln340_14_fu_1716_p3 : select_ln388_14_fu_1723_p3);

assign select_ln340_24_fu_1764_p3 = ((or_ln340_35_fu_1746_p2[0:0] === 1'b1) ? select_ln340_15_fu_1751_p3 : select_ln388_15_fu_1758_p3);

assign select_ln340_9_fu_1519_p2 = reg_2157;

assign select_ln340_9_fu_1519_p3 = ((or_ln340_21_fu_1527_p2[0:0] === 1'b1) ? 36'd34359738367 : select_ln340_9_fu_1519_p2);

assign select_ln388_10_fu_1583_p2 = reg_2062;

assign select_ln388_10_fu_1583_p3 = ((and_ln786_14_reg_2237[0:0] === 1'b1) ? 36'd34359738368 : select_ln388_10_fu_1583_p2);

assign select_ln388_11_fu_1618_p3 = ((and_ln786_15_reg_2256[0:0] === 1'b1) ? 36'd34359738368 : reg_1989);

assign select_ln388_12_fu_1653_p2 = reg_2107;

assign select_ln388_12_fu_1653_p3 = ((and_ln786_16_reg_2275[0:0] === 1'b1) ? 36'd34359738368 : select_ln388_12_fu_1653_p2);

assign select_ln388_13_fu_1688_p2 = reg_2177;

assign select_ln388_13_fu_1688_p3 = ((and_ln786_17_reg_2294[0:0] === 1'b1) ? 36'd34359738368 : select_ln388_13_fu_1688_p2);

assign select_ln388_14_fu_1723_p2 = reg_2147;

assign select_ln388_14_fu_1723_p3 = ((and_ln786_18_reg_2072[0:0] === 1'b1) ? 36'd34359738368 : select_ln388_14_fu_1723_p2);

assign select_ln388_15_fu_1758_p2 = reg_2167;

assign select_ln388_15_fu_1758_p3 = ((and_ln786_19_reg_2332[0:0] === 1'b1) ? 36'd34359738368 : select_ln388_15_fu_1758_p2);

assign select_ln388_9_fu_1548_p2 = reg_2157;

assign select_ln388_9_fu_1548_p3 = ((and_ln786_13_reg_2218[0:0] === 1'b1) ? 36'd34359738368 : select_ln388_9_fu_1548_p2);

assign sext_ln1118_fu_642_p0 = grp_fu_1937_p3;

assign sext_ln1118_fu_642_p1 = sext_ln1118_fu_642_p0;

assign sext_ln703_fu_646_p1 = X0_V_read_reg_1976;

assign shl_ln_fu_616_p3 = {{width_V_read_reg_1962}, {2'd0}};

assign sub_ln79_fu_525_p2 = (shl_ln_fu_616_p3 - zext_ln79_fu_613_p1);

assign tmp_10_fu_1024_p4 = {{add_ln1192_2_fu_1000_p2[47:36]}};

assign tmp_11_fu_1106_p4 = {{add_ln1192_3_fu_1082_p2[47:36]}};

assign tmp_12_fu_1188_p4 = {{add_ln1192_4_fu_1164_p2[47:36]}};

assign tmp_13_fu_1270_p4 = {{add_ln1192_5_fu_1246_p2[47:36]}};

assign tmp_14_fu_1352_p4 = {{add_ln1192_6_fu_1328_p2[47:36]}};

assign tmp_15_fu_1434_p4 = {{add_ln1192_7_fu_1410_p2[47:36]}};

assign tmp_16_fu_1840_p9 = zext_ln99_fu_1837_p0;

assign tmp_46_fu_840_p3 = add_ln1192_fu_848_p2[32'd47];

assign tmp_47_fu_852_p3 = grp_fu_1945_p2[32'd35];

assign tmp_48_fu_922_p3 = add_ln1192_1_fu_918_p2[32'd47];

assign tmp_49_fu_934_p3 = add_ln703_1_fu_930_p2[32'd35];

assign tmp_50_fu_1004_p3 = add_ln1192_2_fu_1000_p2[32'd47];

assign tmp_51_fu_1016_p3 = add_ln703_2_fu_1012_p2[32'd35];

assign tmp_52_fu_1086_p3 = add_ln1192_3_fu_1082_p2[32'd47];

assign tmp_53_fu_1098_p3 = add_ln703_3_fu_1094_p2[32'd35];

assign tmp_54_fu_1168_p3 = add_ln1192_4_fu_1164_p2[32'd47];

assign tmp_55_fu_1180_p3 = add_ln703_4_fu_1176_p2[32'd35];

assign tmp_56_fu_1250_p3 = add_ln1192_5_fu_1246_p2[32'd47];

assign tmp_57_fu_1262_p3 = add_ln703_5_fu_1258_p2[32'd35];

assign tmp_58_fu_1332_p3 = add_ln1192_6_fu_1328_p2[32'd47];

assign tmp_59_fu_1344_p3 = add_ln703_6_fu_1340_p2[32'd35];

assign tmp_60_fu_1414_p3 = add_ln1192_7_fu_1410_p2[32'd47];

assign tmp_61_fu_1426_p3 = add_ln703_7_fu_1422_p2[32'd35];

assign tmp_9_fu_860_p4 = {{add_ln1192_fu_848_p2[47:36]}};

assign tmp_s_fu_942_p4 = {{add_ln1192_1_fu_918_p2[47:36]}};

assign trunc_ln1192_1_fu_808_p1 = grp_fu_698_p2[35:0];

assign trunc_ln1192_2_fu_812_p1 = grp_fu_713_p2[35:0];

assign trunc_ln1192_3_fu_816_p1 = grp_fu_728_p2[35:0];

assign trunc_ln1192_4_fu_820_p1 = grp_fu_743_p2[35:0];

assign trunc_ln1192_5_fu_824_p1 = grp_fu_758_p2[35:0];

assign trunc_ln1192_6_fu_828_p1 = grp_fu_773_p2[35:0];

assign trunc_ln1192_7_fu_832_p1 = grp_fu_788_p2[35:0];

assign trunc_ln1192_fu_804_p1 = grp_fu_673_p2[35:0];

assign trunc_ln99_fu_1795_p1 = i_op_assign_reg_442[2:0];

assign underflow_7_fu_1897_p2 = (xor_ln786_8_fu_1891_p2 & p_Result_22_fu_1871_p3);

assign underflow_fu_565_p2 = (xor_ln786_fu_559_p2 & p_Result_s_fu_539_p3);

assign xor_ln340_10_fu_1706_p2 = (1'd1 ^ and_ln786_18_reg_2072);

assign xor_ln340_11_fu_1741_p2 = (1'd1 ^ and_ln786_19_reg_2332);

assign xor_ln340_12_fu_1903_p2 = (p_Result_23_fu_1883_p3 ^ p_Result_22_fu_1871_p3);

assign xor_ln340_2_fu_571_p2 = (p_Result_s_fu_539_p3 ^ p_Result_21_fu_551_p3);

assign xor_ln340_3_fu_1496_p2 = (1'd1 ^ and_ln786_reg_2199);

assign xor_ln340_4_fu_1531_p2 = (1'd1 ^ and_ln786_13_reg_2218);

assign xor_ln340_5_fu_1566_p2 = (1'd1 ^ and_ln786_14_reg_2237);

assign xor_ln340_6_fu_1601_p2 = (1'd1 ^ and_ln786_15_reg_2256);

assign xor_ln340_7_fu_1636_p2 = (1'd1 ^ and_ln786_16_reg_2275);

assign xor_ln340_8_fu_1909_p2 = (p_Result_22_fu_1871_p3 ^ 1'd1);

assign xor_ln340_9_fu_1671_p2 = (1'd1 ^ and_ln786_17_reg_2294);

assign xor_ln340_fu_577_p2 = (p_Result_s_fu_539_p3 ^ 1'd1);

assign xor_ln785_11_fu_964_p2 = (tmp_48_fu_922_p3 ^ 1'd1);

assign xor_ln785_12_fu_1046_p2 = (tmp_50_fu_1004_p3 ^ 1'd1);

assign xor_ln785_13_fu_1128_p2 = (tmp_52_fu_1086_p3 ^ 1'd1);

assign xor_ln785_14_fu_1210_p2 = (tmp_54_fu_1168_p3 ^ 1'd1);

assign xor_ln785_15_fu_1292_p2 = (tmp_56_fu_1250_p3 ^ 1'd1);

assign xor_ln785_16_fu_1374_p2 = (tmp_58_fu_1332_p3 ^ 1'd1);

assign xor_ln785_17_fu_1456_p2 = (tmp_60_fu_1414_p3 ^ 1'd1);

assign xor_ln785_fu_882_p2 = (tmp_46_fu_840_p3 ^ 1'd1);

assign xor_ln786_10_fu_1058_p2 = (tmp_51_fu_1016_p3 ^ 1'd1);

assign xor_ln786_11_fu_1140_p2 = (tmp_53_fu_1098_p3 ^ 1'd1);

assign xor_ln786_12_fu_1222_p2 = (tmp_55_fu_1180_p3 ^ 1'd1);

assign xor_ln786_13_fu_1304_p2 = (tmp_57_fu_1262_p3 ^ 1'd1);

assign xor_ln786_14_fu_1386_p2 = (tmp_59_fu_1344_p3 ^ 1'd1);

assign xor_ln786_15_fu_1468_p2 = (tmp_61_fu_1426_p3 ^ 1'd1);

assign xor_ln786_7_fu_894_p2 = (tmp_47_fu_852_p3 ^ 1'd1);

assign xor_ln786_8_fu_1891_p2 = (p_Result_23_fu_1883_p3 ^ 1'd1);

assign xor_ln786_9_fu_976_p2 = (tmp_49_fu_934_p3 ^ 1'd1);

assign xor_ln786_fu_559_p2 = (p_Result_21_fu_551_p3 ^ 1'd1);

assign y_V_fu_1879_p1 = grp_fu_1866_p2[35:0];

assign zext_ln1116_1_fu_694_p1 = or_ln700_fu_688_p2;

assign zext_ln1116_2_fu_709_p1 = or_ln700_1_fu_703_p2;

assign zext_ln1116_3_fu_724_p1 = or_ln700_2_fu_718_p2;

assign zext_ln1116_4_fu_739_p1 = or_ln700_3_fu_733_p2;

assign zext_ln1116_5_fu_754_p1 = or_ln700_4_fu_748_p2;

assign zext_ln1116_6_fu_769_p1 = or_ln700_5_fu_763_p2;

assign zext_ln1116_7_fu_784_p1 = or_ln700_6_fu_778_p2;

assign zext_ln1116_fu_669_p1 = tmp_V_1_0_reg_421;

assign zext_ln1118_fu_639_p1 = width_V_read_reg_1962;

assign zext_ln1148_fu_531_p1 = width_V_read_reg_1962;

assign zext_ln79_fu_613_p1 = width_V_read_reg_1962;

assign zext_ln91_fu_1772_p1 = lshr_ln_reg_1999;

assign zext_ln99_1_fu_1809_p1 = lshr_ln1_fu_1799_p4;

assign zext_ln99_2_fu_1827_p1 = index_1_reg_432;

assign zext_ln99_fu_1837_p0 = reg_1989;

always @ (posedge ap_clk) begin
    zext_ln1118_reg_2004[23:12] <= 12'b000000000000;
end

endmodule //calc

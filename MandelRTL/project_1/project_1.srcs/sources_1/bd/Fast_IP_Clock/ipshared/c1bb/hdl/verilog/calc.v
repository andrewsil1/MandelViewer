// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calc,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.250000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=148,HLS_SYN_FF=20480,HLS_SYN_LUT=15781,HLS_VERSION=2018_3}" *)

module calc (
        ap_clk,
        ap_rst_n,
        m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY,
        m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY,
        m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST,
        m_axi_buf_r_WID,
        m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY,
        m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID,
        m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA,
        m_axi_buf_r_RLAST,
        m_axi_buf_r_RID,
        m_axi_buf_r_RUSER,
        m_axi_buf_r_RRESP,
        m_axi_buf_r_BVALID,
        m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP,
        m_axi_buf_r_BID,
        m_axi_buf_r_BUSER,
        s_axi_in_parms_AWVALID,
        s_axi_in_parms_AWREADY,
        s_axi_in_parms_AWADDR,
        s_axi_in_parms_WVALID,
        s_axi_in_parms_WREADY,
        s_axi_in_parms_WDATA,
        s_axi_in_parms_WSTRB,
        s_axi_in_parms_ARVALID,
        s_axi_in_parms_ARREADY,
        s_axi_in_parms_ARADDR,
        s_axi_in_parms_RVALID,
        s_axi_in_parms_RREADY,
        s_axi_in_parms_RDATA,
        s_axi_in_parms_RRESP,
        s_axi_in_parms_BVALID,
        s_axi_in_parms_BREADY,
        s_axi_in_parms_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 61'd1;
parameter    ap_ST_fsm_state2 = 61'd2;
parameter    ap_ST_fsm_state3 = 61'd4;
parameter    ap_ST_fsm_state4 = 61'd8;
parameter    ap_ST_fsm_state5 = 61'd16;
parameter    ap_ST_fsm_state6 = 61'd32;
parameter    ap_ST_fsm_state7 = 61'd64;
parameter    ap_ST_fsm_state8 = 61'd128;
parameter    ap_ST_fsm_state9 = 61'd256;
parameter    ap_ST_fsm_state10 = 61'd512;
parameter    ap_ST_fsm_state11 = 61'd1024;
parameter    ap_ST_fsm_state12 = 61'd2048;
parameter    ap_ST_fsm_state13 = 61'd4096;
parameter    ap_ST_fsm_state14 = 61'd8192;
parameter    ap_ST_fsm_state15 = 61'd16384;
parameter    ap_ST_fsm_state16 = 61'd32768;
parameter    ap_ST_fsm_state17 = 61'd65536;
parameter    ap_ST_fsm_state18 = 61'd131072;
parameter    ap_ST_fsm_state19 = 61'd262144;
parameter    ap_ST_fsm_state20 = 61'd524288;
parameter    ap_ST_fsm_state21 = 61'd1048576;
parameter    ap_ST_fsm_state22 = 61'd2097152;
parameter    ap_ST_fsm_state23 = 61'd4194304;
parameter    ap_ST_fsm_state24 = 61'd8388608;
parameter    ap_ST_fsm_state25 = 61'd16777216;
parameter    ap_ST_fsm_state26 = 61'd33554432;
parameter    ap_ST_fsm_state27 = 61'd67108864;
parameter    ap_ST_fsm_state28 = 61'd134217728;
parameter    ap_ST_fsm_state29 = 61'd268435456;
parameter    ap_ST_fsm_state30 = 61'd536870912;
parameter    ap_ST_fsm_state31 = 61'd1073741824;
parameter    ap_ST_fsm_state32 = 61'd2147483648;
parameter    ap_ST_fsm_state33 = 61'd4294967296;
parameter    ap_ST_fsm_state34 = 61'd8589934592;
parameter    ap_ST_fsm_state35 = 61'd17179869184;
parameter    ap_ST_fsm_state36 = 61'd34359738368;
parameter    ap_ST_fsm_state37 = 61'd68719476736;
parameter    ap_ST_fsm_state38 = 61'd137438953472;
parameter    ap_ST_fsm_state39 = 61'd274877906944;
parameter    ap_ST_fsm_state40 = 61'd549755813888;
parameter    ap_ST_fsm_state41 = 61'd1099511627776;
parameter    ap_ST_fsm_state42 = 61'd2199023255552;
parameter    ap_ST_fsm_state43 = 61'd4398046511104;
parameter    ap_ST_fsm_state44 = 61'd8796093022208;
parameter    ap_ST_fsm_state45 = 61'd17592186044416;
parameter    ap_ST_fsm_state46 = 61'd35184372088832;
parameter    ap_ST_fsm_state47 = 61'd70368744177664;
parameter    ap_ST_fsm_state48 = 61'd140737488355328;
parameter    ap_ST_fsm_state49 = 61'd281474976710656;
parameter    ap_ST_fsm_state50 = 61'd562949953421312;
parameter    ap_ST_fsm_state51 = 61'd1125899906842624;
parameter    ap_ST_fsm_state52 = 61'd2251799813685248;
parameter    ap_ST_fsm_state53 = 61'd4503599627370496;
parameter    ap_ST_fsm_state54 = 61'd9007199254740992;
parameter    ap_ST_fsm_state55 = 61'd18014398509481984;
parameter    ap_ST_fsm_state56 = 61'd36028797018963968;
parameter    ap_ST_fsm_state57 = 61'd72057594037927936;
parameter    ap_ST_fsm_state58 = 61'd144115188075855872;
parameter    ap_ST_fsm_state59 = 61'd288230376151711744;
parameter    ap_ST_fsm_pp0_stage0 = 61'd576460752303423488;
parameter    ap_ST_fsm_state68 = 61'd1152921504606846976;
parameter    C_S_AXI_IN_PARMS_DATA_WIDTH = 32;
parameter    C_S_AXI_IN_PARMS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_BUF_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_TARGET_ADDR = 0;
parameter    C_M_AXI_BUF_R_USER_VALUE = 0;
parameter    C_M_AXI_BUF_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUF_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_IN_PARMS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUF_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_buf_r_AWVALID;
input   m_axi_buf_r_AWREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_AWADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_AWID;
output  [7:0] m_axi_buf_r_AWLEN;
output  [2:0] m_axi_buf_r_AWSIZE;
output  [1:0] m_axi_buf_r_AWBURST;
output  [1:0] m_axi_buf_r_AWLOCK;
output  [3:0] m_axi_buf_r_AWCACHE;
output  [2:0] m_axi_buf_r_AWPROT;
output  [3:0] m_axi_buf_r_AWQOS;
output  [3:0] m_axi_buf_r_AWREGION;
output  [C_M_AXI_BUF_R_AWUSER_WIDTH - 1:0] m_axi_buf_r_AWUSER;
output   m_axi_buf_r_WVALID;
input   m_axi_buf_r_WREADY;
output  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_WDATA;
output  [C_M_AXI_BUF_R_WSTRB_WIDTH - 1:0] m_axi_buf_r_WSTRB;
output   m_axi_buf_r_WLAST;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_WID;
output  [C_M_AXI_BUF_R_WUSER_WIDTH - 1:0] m_axi_buf_r_WUSER;
output   m_axi_buf_r_ARVALID;
input   m_axi_buf_r_ARREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_ARADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_ARID;
output  [7:0] m_axi_buf_r_ARLEN;
output  [2:0] m_axi_buf_r_ARSIZE;
output  [1:0] m_axi_buf_r_ARBURST;
output  [1:0] m_axi_buf_r_ARLOCK;
output  [3:0] m_axi_buf_r_ARCACHE;
output  [2:0] m_axi_buf_r_ARPROT;
output  [3:0] m_axi_buf_r_ARQOS;
output  [3:0] m_axi_buf_r_ARREGION;
output  [C_M_AXI_BUF_R_ARUSER_WIDTH - 1:0] m_axi_buf_r_ARUSER;
input   m_axi_buf_r_RVALID;
output   m_axi_buf_r_RREADY;
input  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_RDATA;
input   m_axi_buf_r_RLAST;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_RID;
input  [C_M_AXI_BUF_R_RUSER_WIDTH - 1:0] m_axi_buf_r_RUSER;
input  [1:0] m_axi_buf_r_RRESP;
input   m_axi_buf_r_BVALID;
output   m_axi_buf_r_BREADY;
input  [1:0] m_axi_buf_r_BRESP;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_BID;
input  [C_M_AXI_BUF_R_BUSER_WIDTH - 1:0] m_axi_buf_r_BUSER;
input   s_axi_in_parms_AWVALID;
output   s_axi_in_parms_AWREADY;
input  [C_S_AXI_IN_PARMS_ADDR_WIDTH - 1:0] s_axi_in_parms_AWADDR;
input   s_axi_in_parms_WVALID;
output   s_axi_in_parms_WREADY;
input  [C_S_AXI_IN_PARMS_DATA_WIDTH - 1:0] s_axi_in_parms_WDATA;
input  [C_S_AXI_IN_PARMS_WSTRB_WIDTH - 1:0] s_axi_in_parms_WSTRB;
input   s_axi_in_parms_ARVALID;
output   s_axi_in_parms_ARREADY;
input  [C_S_AXI_IN_PARMS_ADDR_WIDTH - 1:0] s_axi_in_parms_ARADDR;
output   s_axi_in_parms_RVALID;
input   s_axi_in_parms_RREADY;
output  [C_S_AXI_IN_PARMS_DATA_WIDTH - 1:0] s_axi_in_parms_RDATA;
output  [1:0] s_axi_in_parms_RRESP;
output   s_axi_in_parms_BVALID;
input   s_axi_in_parms_BREADY;
output  [1:0] s_axi_in_parms_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [60:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [39:0] X0_V;
wire   [39:0] Y0_V;
wire   [39:0] X1_V;
wire   [11:0] width_V;
reg    buf_r_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_reg_1567;
reg    buf_r_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond2_reg_1567_pp0_iter1_reg;
reg    buf_r_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] exitcond2_reg_1567_pp0_iter6_reg;
reg    buf_r_AWVALID;
wire    buf_r_AWREADY;
reg    buf_r_WVALID;
wire    buf_r_WREADY;
wire    buf_r_ARREADY;
wire    buf_r_RVALID;
wire   [15:0] buf_r_RDATA;
wire    buf_r_RLAST;
wire   [0:0] buf_r_RID;
wire   [0:0] buf_r_RUSER;
wire   [1:0] buf_r_RRESP;
wire    buf_r_BVALID;
reg    buf_r_BREADY;
wire   [1:0] buf_r_BRESP;
wire   [0:0] buf_r_BID;
wire   [0:0] buf_r_BUSER;
reg   [23:0] index_1_reg_316;
reg   [11:0] i_op_assign_reg_326;
reg   [11:0] width_V_read_reg_1242;
reg   [39:0] Y0_V_read_reg_1251;
reg  signed [39:0] X0_V_read_reg_1256;
wire   [40:0] ret_V_14_fu_373_p2;
reg   [40:0] ret_V_14_reg_1265;
wire    ap_CS_fsm_state2;
reg   [0:0] p_Result_s_reg_1275;
wire    ap_CS_fsm_state46;
wire   [39:0] p_Val2_28_fu_395_p1;
reg   [39:0] p_Val2_28_reg_1282;
reg   [0:0] p_Result_21_reg_1288;
reg   [11:0] height_V_reg_1295;
wire    ap_CS_fsm_state47;
wire   [23:0] tmp_2_cast_fu_479_p1;
reg   [23:0] tmp_2_cast_reg_1300;
wire  signed [51:0] tmp_30_fu_482_p1;
reg  signed [51:0] tmp_30_reg_1307;
wire  signed [51:0] lhs_V_8_cast_fu_486_p1;
reg  signed [51:0] lhs_V_8_cast_reg_1315;
wire  signed [40:0] rhs_V_4_fu_489_p1;
reg  signed [40:0] rhs_V_4_reg_1323;
wire   [11:0] line_V_fu_498_p2;
reg   [11:0] line_V_reg_1331;
wire    ap_CS_fsm_state48;
wire   [0:0] exitcond3_fu_504_p2;
wire    ap_CS_fsm_state49;
reg   [9:0] newIndex2_reg_1345;
wire   [11:0] pix_x_V_3_fu_573_p2;
reg   [11:0] pix_x_V_3_reg_1365;
wire   [23:0] index_3_fu_579_p2;
reg   [23:0] index_3_reg_1370;
wire   [51:0] grp_fu_513_p2;
reg   [51:0] r_V_s_reg_1375;
wire    ap_CS_fsm_state54;
wire   [39:0] tmp_66_fu_584_p1;
reg   [39:0] tmp_66_reg_1380;
wire   [51:0] grp_fu_538_p2;
reg   [51:0] r_V_25_1_reg_1385;
wire   [39:0] tmp_69_fu_588_p1;
reg   [39:0] tmp_69_reg_1390;
wire   [51:0] grp_fu_553_p2;
reg   [51:0] r_V_25_2_reg_1395;
wire   [39:0] tmp_72_fu_592_p1;
reg   [39:0] tmp_72_reg_1400;
wire   [51:0] grp_fu_568_p2;
reg   [51:0] r_V_25_3_reg_1405;
wire   [39:0] tmp_75_fu_596_p1;
reg   [39:0] tmp_75_reg_1410;
reg   [0:0] tmp_67_reg_1415;
wire    ap_CS_fsm_state55;
wire   [39:0] p_Val2_12_fu_612_p2;
reg   [39:0] p_Val2_12_reg_1421;
reg   [0:0] tmp_68_reg_1427;
wire   [0:0] p_not_fu_634_p2;
reg   [0:0] p_not_reg_1433;
wire   [0:0] p_not4_fu_640_p2;
reg   [0:0] p_not4_reg_1438;
reg   [0:0] tmp_70_reg_1443;
wire   [39:0] p_Val2_13_1_fu_658_p2;
reg   [39:0] p_Val2_13_1_reg_1449;
reg   [0:0] tmp_71_reg_1455;
wire   [0:0] p_not_1_fu_680_p2;
reg   [0:0] p_not_1_reg_1461;
wire   [0:0] p_not4_1_fu_686_p2;
reg   [0:0] p_not4_1_reg_1466;
reg   [0:0] tmp_73_reg_1471;
wire   [39:0] p_Val2_13_2_fu_704_p2;
reg   [39:0] p_Val2_13_2_reg_1477;
reg   [0:0] tmp_74_reg_1483;
wire   [0:0] p_not_2_fu_726_p2;
reg   [0:0] p_not_2_reg_1489;
wire   [0:0] p_not4_2_fu_732_p2;
reg   [0:0] p_not4_2_reg_1494;
reg   [0:0] tmp_76_reg_1499;
wire   [39:0] p_Val2_13_3_fu_750_p2;
reg   [39:0] p_Val2_13_3_reg_1505;
reg   [0:0] tmp_77_reg_1511;
wire   [0:0] p_not_3_fu_772_p2;
reg   [0:0] p_not_3_reg_1517;
wire   [0:0] p_not4_3_fu_778_p2;
reg   [0:0] p_not4_3_reg_1522;
wire   [39:0] p_0_fu_846_p3;
reg   [39:0] p_0_reg_1527;
wire    ap_CS_fsm_state56;
wire   [39:0] p_0_1_fu_916_p3;
reg   [39:0] p_0_1_reg_1532;
wire   [39:0] p_0_2_fu_986_p3;
reg   [39:0] p_0_2_reg_1537;
wire   [39:0] p_0_3_fu_1056_p3;
reg   [39:0] p_0_3_reg_1542;
wire   [10:0] grp_mandel_calc_fu_337_ap_return;
reg   [10:0] tmp_33_reg_1547;
wire    ap_CS_fsm_state58;
wire    grp_mandel_calc_fu_337_ap_ready;
wire    grp_mandel_calc_fu_337_ap_done;
wire    grp_mandel_calc_fu_344_ap_ready;
wire    grp_mandel_calc_fu_344_ap_done;
wire    grp_mandel_calc_fu_351_ap_ready;
wire    grp_mandel_calc_fu_351_ap_done;
wire    grp_mandel_calc_fu_358_ap_ready;
wire    grp_mandel_calc_fu_358_ap_done;
reg    ap_block_state58_on_subcall_done;
wire   [10:0] grp_mandel_calc_fu_344_ap_return;
reg   [10:0] tmp_78_1_reg_1552;
wire   [10:0] grp_mandel_calc_fu_351_ap_return;
reg   [10:0] tmp_78_2_reg_1557;
wire   [10:0] grp_mandel_calc_fu_358_ap_return;
reg   [10:0] tmp_78_3_reg_1562;
wire   [0:0] exitcond2_fu_1071_p2;
wire    ap_block_state60_pp0_stage0_iter0;
wire    ap_block_state61_pp0_stage0_iter1;
reg    ap_sig_ioackin_buf_r_AWREADY;
reg    ap_block_state61_io;
wire    ap_block_state62_pp0_stage0_iter2;
reg    ap_sig_ioackin_buf_r_WREADY;
reg    ap_block_state62_io;
wire    ap_block_state63_pp0_stage0_iter3;
wire    ap_block_state64_pp0_stage0_iter4;
wire    ap_block_state65_pp0_stage0_iter5;
wire    ap_block_state66_pp0_stage0_iter6;
reg    ap_block_state67_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_reg_1567_pp0_iter2_reg;
reg   [0:0] exitcond2_reg_1567_pp0_iter3_reg;
reg   [0:0] exitcond2_reg_1567_pp0_iter4_reg;
reg   [0:0] exitcond2_reg_1567_pp0_iter5_reg;
wire   [11:0] i_fu_1077_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] tmp_81_fu_1083_p1;
reg   [1:0] tmp_81_reg_1576;
wire   [23:0] index_2_fu_1105_p2;
reg   [31:0] buf_addr_reg_1606;
wire   [15:0] tmp_38_fu_1140_p6;
reg   [15:0] tmp_38_reg_1612;
wire   [39:0] p_0285_2_fu_1229_p3;
wire    ap_CS_fsm_state68;
wire   [23:0] indvars_iv_next_fu_1237_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state60;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [8:0] mem_0_address0;
reg    mem_0_ce0;
reg    mem_0_we0;
wire   [10:0] mem_0_q0;
reg   [8:0] mem_1_address0;
reg    mem_1_ce0;
reg    mem_1_we0;
wire   [10:0] mem_1_q0;
reg   [8:0] mem_2_address0;
reg    mem_2_ce0;
reg    mem_2_we0;
wire   [10:0] mem_2_q0;
reg   [8:0] mem_3_address0;
reg    mem_3_ce0;
reg    mem_3_we0;
wire   [10:0] mem_3_q0;
wire    grp_mandel_calc_fu_337_ap_start;
wire    grp_mandel_calc_fu_337_ap_idle;
wire    grp_mandel_calc_fu_344_ap_start;
wire    grp_mandel_calc_fu_344_ap_idle;
wire    grp_mandel_calc_fu_351_ap_start;
wire    grp_mandel_calc_fu_351_ap_idle;
wire    grp_mandel_calc_fu_358_ap_start;
wire    grp_mandel_calc_fu_358_ap_idle;
reg   [23:0] indvars_iv_reg_262;
reg   [39:0] p_Val2_29_reg_272;
reg   [11:0] t_V_1_reg_282;
reg   [23:0] index_reg_293;
reg   [11:0] tmp_V_1_reg_305;
wire    ap_CS_fsm_state59;
wire   [0:0] exitcond_fu_493_p2;
reg    grp_mandel_calc_fu_337_ap_start_reg;
wire    ap_CS_fsm_state57;
reg    grp_mandel_calc_fu_344_ap_start_reg;
reg    grp_mandel_calc_fu_351_ap_start_reg;
reg    grp_mandel_calc_fu_358_ap_start_reg;
wire   [63:0] newIndex3_fu_1064_p1;
wire   [63:0] newIndex1_fu_1097_p1;
wire   [63:0] tmp_39_fu_1111_p1;
reg    ap_reg_ioackin_buf_r_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_buf_r_WREADY;
wire  signed [39:0] rhs_V_fu_369_p0;
wire  signed [40:0] lhs_V_fu_365_p1;
wire  signed [40:0] rhs_V_fu_369_p1;
wire   [12:0] grp_fu_382_p1;
wire   [40:0] grp_fu_382_p2;
wire   [0:0] tmp_s_fu_407_p2;
wire   [0:0] signbit_i_i_i_i27_0_s_fu_421_p2;
wire   [0:0] brmerge_fu_417_p2;
wire   [0:0] underflow_fu_412_p2;
wire   [0:0] brmerge9_fu_426_p2;
wire   [39:0] p_mux_fu_431_p3;
wire   [39:0] p_s_fu_438_p3;
wire   [13:0] p_shl_fu_456_p3;
wire   [13:0] lhs_V_7_cast_fu_453_p1;
wire   [13:0] ret_V_fu_463_p2;
wire  signed [39:0] delta_V_fu_445_p3;
wire   [11:0] grp_fu_513_p0;
wire  signed [39:0] grp_fu_513_p1;
wire   [11:0] pix_x_V_s_fu_528_p2;
wire   [11:0] grp_fu_538_p0;
wire  signed [39:0] grp_fu_538_p1;
wire   [11:0] pix_x_V_1_fu_543_p2;
wire   [11:0] grp_fu_553_p0;
wire  signed [39:0] grp_fu_553_p1;
wire   [11:0] pix_x_V_2_fu_558_p2;
wire   [11:0] grp_fu_568_p0;
wire  signed [39:0] grp_fu_568_p1;
wire   [51:0] ret_V_s_fu_600_p2;
wire   [11:0] tmp_31_fu_624_p4;
wire   [51:0] ret_V_21_1_fu_646_p2;
wire   [11:0] tmp_34_fu_670_p4;
wire   [51:0] ret_V_21_2_fu_692_p2;
wire   [11:0] tmp_35_fu_716_p4;
wire   [51:0] ret_V_21_3_fu_738_p2;
wire   [11:0] tmp_36_fu_762_p4;
wire   [0:0] brmerge1_fu_784_p2;
wire   [0:0] tmp_32_fu_788_p2;
wire   [0:0] newsignbit_i_i_i_i_fu_799_p2;
wire   [0:0] brmerge2_fu_804_p2;
wire   [0:0] underflow_7_fu_809_p2;
wire   [0:0] overflow_7_fu_793_p2;
wire   [0:0] p_707_not_fu_820_p2;
wire   [0:0] brmerge3_fu_814_p2;
wire   [0:0] brmerge4_fu_826_p2;
wire   [39:0] p_mux7_fu_832_p3;
wire   [39:0] p_1_fu_839_p3;
wire   [0:0] brmerge32_1_fu_854_p2;
wire   [0:0] tmp_75_1_fu_858_p2;
wire   [0:0] newsignbit_i_i_i_i_0_1_fu_869_p2;
wire   [0:0] brmerge33_1_fu_874_p2;
wire   [0:0] underflow_7_1_fu_879_p2;
wire   [0:0] overflow_7_1_fu_863_p2;
wire   [0:0] p_707_not_1_fu_890_p2;
wire   [0:0] brmerge34_1_fu_884_p2;
wire   [0:0] brmerge35_1_fu_896_p2;
wire   [39:0] p_mux7_1_fu_902_p3;
wire   [39:0] p_11_1_fu_909_p3;
wire   [0:0] brmerge32_2_fu_924_p2;
wire   [0:0] tmp_75_2_fu_928_p2;
wire   [0:0] newsignbit_i_i_i_i_0_2_fu_939_p2;
wire   [0:0] brmerge33_2_fu_944_p2;
wire   [0:0] underflow_7_2_fu_949_p2;
wire   [0:0] overflow_7_2_fu_933_p2;
wire   [0:0] p_707_not_2_fu_960_p2;
wire   [0:0] brmerge34_2_fu_954_p2;
wire   [0:0] brmerge35_2_fu_966_p2;
wire   [39:0] p_mux7_2_fu_972_p3;
wire   [39:0] p_11_2_fu_979_p3;
wire   [0:0] brmerge32_3_fu_994_p2;
wire   [0:0] tmp_75_3_fu_998_p2;
wire   [0:0] newsignbit_i_i_i_i_0_3_fu_1009_p2;
wire   [0:0] brmerge33_3_fu_1014_p2;
wire   [0:0] underflow_7_3_fu_1019_p2;
wire   [0:0] overflow_7_3_fu_1003_p2;
wire   [0:0] p_707_not_3_fu_1030_p2;
wire   [0:0] brmerge34_3_fu_1024_p2;
wire   [0:0] brmerge35_3_fu_1036_p2;
wire   [39:0] p_mux7_3_fu_1042_p3;
wire   [39:0] p_11_3_fu_1049_p3;
wire   [9:0] newIndex_fu_1087_p4;
wire   [15:0] tmp_38_fu_1140_p1;
wire   [15:0] tmp_38_fu_1140_p2;
wire   [15:0] tmp_38_fu_1140_p3;
wire   [15:0] tmp_38_fu_1140_p4;
wire   [31:0] tmp_38_fu_1140_p5;
wire  signed [40:0] lhs_V_3_fu_1154_p1;
wire   [40:0] ret_V_15_fu_1158_p2;
wire   [0:0] p_Result_23_fu_1175_p3;
wire   [0:0] p_Result_22_fu_1163_p3;
wire   [0:0] tmp_37_fu_1183_p2;
wire   [0:0] signbit_i_i_0_not_fu_1201_p2;
wire   [0:0] brmerge5_fu_1195_p2;
wire   [39:0] y_V_fu_1171_p1;
wire   [0:0] underflow_8_fu_1189_p2;
wire   [0:0] brmerge6_fu_1207_p2;
wire   [39:0] p_mux8_fu_1213_p3;
wire   [39:0] p_2_fu_1221_p3;
reg    grp_fu_382_ap_start;
wire    grp_fu_382_ap_done;
reg   [60:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [40:0] grp_fu_382_p10;
wire   [51:0] grp_fu_513_p00;
wire   [51:0] grp_fu_538_p00;
wire   [51:0] grp_fu_553_p00;
wire   [51:0] grp_fu_568_p00;
reg    ap_condition_1601;

// power-on initialization
initial begin
#0 ap_CS_fsm = 61'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 grp_mandel_calc_fu_337_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_344_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_351_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_358_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_buf_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_buf_r_WREADY = 1'b0;
end

calc_in_parms_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_IN_PARMS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_IN_PARMS_DATA_WIDTH ))
calc_in_parms_s_axi_U(
    .AWVALID(s_axi_in_parms_AWVALID),
    .AWREADY(s_axi_in_parms_AWREADY),
    .AWADDR(s_axi_in_parms_AWADDR),
    .WVALID(s_axi_in_parms_WVALID),
    .WREADY(s_axi_in_parms_WREADY),
    .WDATA(s_axi_in_parms_WDATA),
    .WSTRB(s_axi_in_parms_WSTRB),
    .ARVALID(s_axi_in_parms_ARVALID),
    .ARREADY(s_axi_in_parms_ARREADY),
    .ARADDR(s_axi_in_parms_ARADDR),
    .RVALID(s_axi_in_parms_RVALID),
    .RREADY(s_axi_in_parms_RREADY),
    .RDATA(s_axi_in_parms_RDATA),
    .RRESP(s_axi_in_parms_RRESP),
    .BVALID(s_axi_in_parms_BVALID),
    .BREADY(s_axi_in_parms_BREADY),
    .BRESP(s_axi_in_parms_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .X0_V(X0_V),
    .Y0_V(Y0_V),
    .X1_V(X1_V),
    .width_V(width_V)
);

calc_buf_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUF_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUF_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUF_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUF_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUF_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUF_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUF_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUF_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BUF_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BUF_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUF_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUF_R_CACHE_VALUE ))
calc_buf_r_m_axi_U(
    .AWVALID(m_axi_buf_r_AWVALID),
    .AWREADY(m_axi_buf_r_AWREADY),
    .AWADDR(m_axi_buf_r_AWADDR),
    .AWID(m_axi_buf_r_AWID),
    .AWLEN(m_axi_buf_r_AWLEN),
    .AWSIZE(m_axi_buf_r_AWSIZE),
    .AWBURST(m_axi_buf_r_AWBURST),
    .AWLOCK(m_axi_buf_r_AWLOCK),
    .AWCACHE(m_axi_buf_r_AWCACHE),
    .AWPROT(m_axi_buf_r_AWPROT),
    .AWQOS(m_axi_buf_r_AWQOS),
    .AWREGION(m_axi_buf_r_AWREGION),
    .AWUSER(m_axi_buf_r_AWUSER),
    .WVALID(m_axi_buf_r_WVALID),
    .WREADY(m_axi_buf_r_WREADY),
    .WDATA(m_axi_buf_r_WDATA),
    .WSTRB(m_axi_buf_r_WSTRB),
    .WLAST(m_axi_buf_r_WLAST),
    .WID(m_axi_buf_r_WID),
    .WUSER(m_axi_buf_r_WUSER),
    .ARVALID(m_axi_buf_r_ARVALID),
    .ARREADY(m_axi_buf_r_ARREADY),
    .ARADDR(m_axi_buf_r_ARADDR),
    .ARID(m_axi_buf_r_ARID),
    .ARLEN(m_axi_buf_r_ARLEN),
    .ARSIZE(m_axi_buf_r_ARSIZE),
    .ARBURST(m_axi_buf_r_ARBURST),
    .ARLOCK(m_axi_buf_r_ARLOCK),
    .ARCACHE(m_axi_buf_r_ARCACHE),
    .ARPROT(m_axi_buf_r_ARPROT),
    .ARQOS(m_axi_buf_r_ARQOS),
    .ARREGION(m_axi_buf_r_ARREGION),
    .ARUSER(m_axi_buf_r_ARUSER),
    .RVALID(m_axi_buf_r_RVALID),
    .RREADY(m_axi_buf_r_RREADY),
    .RDATA(m_axi_buf_r_RDATA),
    .RLAST(m_axi_buf_r_RLAST),
    .RID(m_axi_buf_r_RID),
    .RUSER(m_axi_buf_r_RUSER),
    .RRESP(m_axi_buf_r_RRESP),
    .BVALID(m_axi_buf_r_BVALID),
    .BREADY(m_axi_buf_r_BREADY),
    .BRESP(m_axi_buf_r_BRESP),
    .BID(m_axi_buf_r_BID),
    .BUSER(m_axi_buf_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(buf_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(buf_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(buf_r_RDATA),
    .I_RID(buf_r_RID),
    .I_RUSER(buf_r_RUSER),
    .I_RRESP(buf_r_RRESP),
    .I_RLAST(buf_r_RLAST),
    .I_AWVALID(buf_r_AWVALID),
    .I_AWREADY(buf_r_AWREADY),
    .I_AWADDR(buf_addr_reg_1606),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(buf_r_WVALID),
    .I_WREADY(buf_r_WREADY),
    .I_WDATA(tmp_38_reg_1612),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(buf_r_BVALID),
    .I_BREADY(buf_r_BREADY),
    .I_BRESP(buf_r_BRESP),
    .I_BID(buf_r_BID),
    .I_BUSER(buf_r_BUSER)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_0_address0),
    .ce0(mem_0_ce0),
    .we0(mem_0_we0),
    .d0(tmp_33_reg_1547),
    .q0(mem_0_q0)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_1_address0),
    .ce0(mem_1_ce0),
    .we0(mem_1_we0),
    .d0(tmp_78_1_reg_1552),
    .q0(mem_1_q0)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_2_address0),
    .ce0(mem_2_ce0),
    .we0(mem_2_we0),
    .d0(tmp_78_2_reg_1557),
    .q0(mem_2_q0)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_3_address0),
    .ce0(mem_3_ce0),
    .we0(mem_3_we0),
    .d0(tmp_78_3_reg_1562),
    .q0(mem_3_q0)
);

mandel_calc grp_mandel_calc_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_337_ap_start),
    .ap_done(grp_mandel_calc_fu_337_ap_done),
    .ap_idle(grp_mandel_calc_fu_337_ap_idle),
    .ap_ready(grp_mandel_calc_fu_337_ap_ready),
    .x_in_V(p_0_reg_1527),
    .y_in_V(p_Val2_29_reg_272),
    .ap_return(grp_mandel_calc_fu_337_ap_return)
);

mandel_calc grp_mandel_calc_fu_344(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_344_ap_start),
    .ap_done(grp_mandel_calc_fu_344_ap_done),
    .ap_idle(grp_mandel_calc_fu_344_ap_idle),
    .ap_ready(grp_mandel_calc_fu_344_ap_ready),
    .x_in_V(p_0_1_reg_1532),
    .y_in_V(p_Val2_29_reg_272),
    .ap_return(grp_mandel_calc_fu_344_ap_return)
);

mandel_calc grp_mandel_calc_fu_351(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_351_ap_start),
    .ap_done(grp_mandel_calc_fu_351_ap_done),
    .ap_idle(grp_mandel_calc_fu_351_ap_idle),
    .ap_ready(grp_mandel_calc_fu_351_ap_ready),
    .x_in_V(p_0_2_reg_1537),
    .y_in_V(p_Val2_29_reg_272),
    .ap_return(grp_mandel_calc_fu_351_ap_return)
);

mandel_calc grp_mandel_calc_fu_358(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_358_ap_start),
    .ap_done(grp_mandel_calc_fu_358_ap_done),
    .ap_idle(grp_mandel_calc_fu_358_ap_idle),
    .ap_ready(grp_mandel_calc_fu_358_ap_ready),
    .x_in_V(p_0_3_reg_1542),
    .y_in_V(p_Val2_29_reg_272),
    .ap_return(grp_mandel_calc_fu_358_ap_return)
);

calc_sdiv_41ns_13eOg #(
    .ID( 1 ),
    .NUM_STAGE( 45 ),
    .din0_WIDTH( 41 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 41 ))
calc_sdiv_41ns_13eOg_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_382_ap_start),
    .done(grp_fu_382_ap_done),
    .din0(ret_V_14_reg_1265),
    .din1(grp_fu_382_p1),
    .ce(1'b1),
    .dout(grp_fu_382_p2)
);

calc_mul_12ns_40sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 52 ))
calc_mul_12ns_40sfYi_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_513_p0),
    .din1(grp_fu_513_p1),
    .ce(1'b1),
    .dout(grp_fu_513_p2)
);

calc_mul_12ns_40sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 52 ))
calc_mul_12ns_40sfYi_U17(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_538_p0),
    .din1(grp_fu_538_p1),
    .ce(1'b1),
    .dout(grp_fu_538_p2)
);

calc_mul_12ns_40sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 52 ))
calc_mul_12ns_40sfYi_U18(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_553_p0),
    .din1(grp_fu_553_p1),
    .ce(1'b1),
    .dout(grp_fu_553_p2)
);

calc_mul_12ns_40sfYi #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 40 ),
    .dout_WIDTH( 52 ))
calc_mul_12ns_40sfYi_U19(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_568_p0),
    .din1(grp_fu_568_p1),
    .ce(1'b1),
    .dout(grp_fu_568_p2)
);

calc_mux_432_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
calc_mux_432_16_1_1_U20(
    .din0(tmp_38_fu_1140_p1),
    .din1(tmp_38_fu_1140_p2),
    .din2(tmp_38_fu_1140_p3),
    .din3(tmp_38_fu_1140_p4),
    .din4(tmp_38_fu_1140_p5),
    .dout(tmp_38_fu_1140_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state60) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond3_fu_504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state60)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state60);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((exitcond3_fu_504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_buf_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1601)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_buf_r_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (buf_r_AWREADY == 1'b1))) begin
                ap_reg_ioackin_buf_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_buf_r_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_1567_pp0_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_buf_r_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (buf_r_WREADY == 1'b1))) begin
                ap_reg_ioackin_buf_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_337_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            grp_mandel_calc_fu_337_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_337_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_337_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_344_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            grp_mandel_calc_fu_344_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_344_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_344_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_351_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            grp_mandel_calc_fu_351_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_351_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_351_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_358_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state57)) begin
            grp_mandel_calc_fu_358_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_358_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_358_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        i_op_assign_reg_326 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1071_p2 == 1'd0))) begin
        i_op_assign_reg_326 <= i_fu_1077_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        index_1_reg_316 <= index_reg_293;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1071_p2 == 1'd0))) begin
        index_1_reg_316 <= index_2_fu_1105_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        index_reg_293 <= index_3_reg_1370;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        index_reg_293 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        indvars_iv_reg_262 <= indvars_iv_next_fu_1237_p2;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        indvars_iv_reg_262 <= tmp_2_cast_fu_479_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        p_Val2_29_reg_272 <= p_0285_2_fu_1229_p3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        p_Val2_29_reg_272 <= Y0_V_read_reg_1251;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        t_V_1_reg_282 <= line_V_reg_1331;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        t_V_1_reg_282 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state48) & (exitcond_fu_493_p2 == 1'd0))) begin
        tmp_V_1_reg_305 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        tmp_V_1_reg_305 <= pix_x_V_3_reg_1365;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        X0_V_read_reg_1256 <= X0_V;
        Y0_V_read_reg_1251 <= Y0_V;
        ret_V_14_reg_1265 <= ret_V_14_fu_373_p2;
        width_V_read_reg_1242 <= width_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1071_p2 == 1'd0))) begin
        buf_addr_reg_1606[23 : 0] <= tmp_39_fu_1111_p1[23 : 0];
        tmp_81_reg_1576 <= tmp_81_fu_1083_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_1567 <= exitcond2_fu_1071_p2;
        exitcond2_reg_1567_pp0_iter1_reg <= exitcond2_reg_1567;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond2_reg_1567_pp0_iter2_reg <= exitcond2_reg_1567_pp0_iter1_reg;
        exitcond2_reg_1567_pp0_iter3_reg <= exitcond2_reg_1567_pp0_iter2_reg;
        exitcond2_reg_1567_pp0_iter4_reg <= exitcond2_reg_1567_pp0_iter3_reg;
        exitcond2_reg_1567_pp0_iter5_reg <= exitcond2_reg_1567_pp0_iter4_reg;
        exitcond2_reg_1567_pp0_iter6_reg <= exitcond2_reg_1567_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        height_V_reg_1295 <= {{ret_V_fu_463_p2[13:2]}};
        lhs_V_8_cast_reg_1315 <= lhs_V_8_cast_fu_486_p1;
        rhs_V_4_reg_1323 <= rhs_V_4_fu_489_p1;
        tmp_2_cast_reg_1300[11 : 0] <= tmp_2_cast_fu_479_p1[11 : 0];
        tmp_30_reg_1307 <= tmp_30_fu_482_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
        index_3_reg_1370 <= index_3_fu_579_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        line_V_reg_1331 <= line_V_fu_498_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state49) & (exitcond3_fu_504_p2 == 1'd0))) begin
        newIndex2_reg_1345 <= {{tmp_V_1_reg_305[11:2]}};
        pix_x_V_3_reg_1365 <= pix_x_V_3_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        p_0_1_reg_1532 <= p_0_1_fu_916_p3;
        p_0_2_reg_1537 <= p_0_2_fu_986_p3;
        p_0_3_reg_1542 <= p_0_3_fu_1056_p3;
        p_0_reg_1527 <= p_0_fu_846_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        p_Result_21_reg_1288 <= grp_fu_382_p2[32'd39];
        p_Result_s_reg_1275 <= grp_fu_382_p2[32'd40];
        p_Val2_28_reg_1282 <= p_Val2_28_fu_395_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        p_Val2_12_reg_1421 <= p_Val2_12_fu_612_p2;
        p_Val2_13_1_reg_1449 <= p_Val2_13_1_fu_658_p2;
        p_Val2_13_2_reg_1477 <= p_Val2_13_2_fu_704_p2;
        p_Val2_13_3_reg_1505 <= p_Val2_13_3_fu_750_p2;
        p_not4_1_reg_1466 <= p_not4_1_fu_686_p2;
        p_not4_2_reg_1494 <= p_not4_2_fu_732_p2;
        p_not4_3_reg_1522 <= p_not4_3_fu_778_p2;
        p_not4_reg_1438 <= p_not4_fu_640_p2;
        p_not_1_reg_1461 <= p_not_1_fu_680_p2;
        p_not_2_reg_1489 <= p_not_2_fu_726_p2;
        p_not_3_reg_1517 <= p_not_3_fu_772_p2;
        p_not_reg_1433 <= p_not_fu_634_p2;
        tmp_67_reg_1415 <= ret_V_s_fu_600_p2[32'd51];
        tmp_68_reg_1427 <= p_Val2_12_fu_612_p2[32'd39];
        tmp_70_reg_1443 <= ret_V_21_1_fu_646_p2[32'd51];
        tmp_71_reg_1455 <= p_Val2_13_1_fu_658_p2[32'd39];
        tmp_73_reg_1471 <= ret_V_21_2_fu_692_p2[32'd51];
        tmp_74_reg_1483 <= p_Val2_13_2_fu_704_p2[32'd39];
        tmp_76_reg_1499 <= ret_V_21_3_fu_738_p2[32'd51];
        tmp_77_reg_1511 <= p_Val2_13_3_fu_750_p2[32'd39];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        r_V_25_1_reg_1385 <= grp_fu_538_p2;
        r_V_25_2_reg_1395 <= grp_fu_553_p2;
        r_V_25_3_reg_1405 <= grp_fu_568_p2;
        r_V_s_reg_1375 <= grp_fu_513_p2;
        tmp_66_reg_1380 <= tmp_66_fu_584_p1;
        tmp_69_reg_1390 <= tmp_69_fu_588_p1;
        tmp_72_reg_1400 <= tmp_72_fu_592_p1;
        tmp_75_reg_1410 <= tmp_75_fu_596_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
        tmp_33_reg_1547 <= grp_mandel_calc_fu_337_ap_return;
        tmp_78_1_reg_1552 <= grp_mandel_calc_fu_344_ap_return;
        tmp_78_2_reg_1557 <= grp_mandel_calc_fu_351_ap_return;
        tmp_78_3_reg_1562 <= grp_mandel_calc_fu_358_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1567 == 1'd0))) begin
        tmp_38_reg_1612 <= tmp_38_fu_1140_p6;
    end
end

always @ (*) begin
    if ((exitcond2_fu_1071_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state60 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state60 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_buf_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_buf_r_AWREADY = buf_r_AWREADY;
    end else begin
        ap_sig_ioackin_buf_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_buf_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_buf_r_WREADY = buf_r_WREADY;
    end else begin
        ap_sig_ioackin_buf_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_buf_r_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1567 == 1'd0))) begin
        buf_r_AWVALID = 1'b1;
    end else begin
        buf_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1567_pp0_iter6_reg == 1'd0))) begin
        buf_r_BREADY = 1'b1;
    end else begin
        buf_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_buf_r_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_1567_pp0_iter1_reg == 1'd0))) begin
        buf_r_WVALID = 1'b1;
    end else begin
        buf_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1567 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY;
    end else begin
        buf_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1567_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_B = m_axi_buf_r_BVALID;
    end else begin
        buf_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_1567_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_W = m_axi_buf_r_WREADY;
    end else begin
        buf_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        grp_fu_382_ap_start = 1'b1;
    end else begin
        grp_fu_382_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_0_address0 = newIndex1_fu_1097_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_0_address0 = newIndex3_fu_1064_p1;
    end else begin
        mem_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_0_ce0 = 1'b1;
    end else begin
        mem_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_0_we0 = 1'b1;
    end else begin
        mem_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_1_address0 = newIndex1_fu_1097_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_1_address0 = newIndex3_fu_1064_p1;
    end else begin
        mem_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_1_ce0 = 1'b1;
    end else begin
        mem_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_1_we0 = 1'b1;
    end else begin
        mem_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_2_address0 = newIndex1_fu_1097_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_2_address0 = newIndex3_fu_1064_p1;
    end else begin
        mem_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_2_ce0 = 1'b1;
    end else begin
        mem_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_2_we0 = 1'b1;
    end else begin
        mem_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_3_address0 = newIndex1_fu_1097_p1;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_3_address0 = newIndex3_fu_1064_p1;
    end else begin
        mem_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state59) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_3_ce0 = 1'b1;
    end else begin
        mem_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        mem_3_we0 = 1'b1;
    end else begin
        mem_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            if (((exitcond_fu_493_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state48))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state49;
            end
        end
        ap_ST_fsm_state49 : begin
            if (((exitcond3_fu_504_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state49))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            if (((1'b0 == ap_block_state58_on_subcall_done) & (1'b1 == ap_CS_fsm_state58))) begin
                ap_NS_fsm = ap_ST_fsm_state59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state58;
            end
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_1071_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_1071_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd60];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1567_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1567_pp0_iter6_reg == 1'd0)) | ((1'b1 == ap_block_state62_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state61_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1567_pp0_iter6_reg == 1'd0)) | ((1'b1 == ap_block_state62_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state61_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state58_on_subcall_done = ((grp_mandel_calc_fu_358_ap_done == 1'b0) | (grp_mandel_calc_fu_351_ap_done == 1'b0) | (grp_mandel_calc_fu_344_ap_done == 1'b0) | (grp_mandel_calc_fu_337_ap_done == 1'b0));
end

assign ap_block_state60_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state61_io = ((ap_sig_ioackin_buf_r_AWREADY == 1'b0) & (exitcond2_reg_1567 == 1'd0));
end

assign ap_block_state61_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state62_io = ((ap_sig_ioackin_buf_r_WREADY == 1'b0) & (exitcond2_reg_1567_pp0_iter1_reg == 1'd0));
end

assign ap_block_state62_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state67_pp0_stage0_iter7 = ((buf_r_BVALID == 1'b0) & (exitcond2_reg_1567_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1601 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1567 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge1_fu_784_p2 = (tmp_68_reg_1427 | p_not_reg_1433);

assign brmerge2_fu_804_p2 = (p_not4_reg_1438 | newsignbit_i_i_i_i_fu_799_p2);

assign brmerge32_1_fu_854_p2 = (tmp_71_reg_1455 | p_not_1_reg_1461);

assign brmerge32_2_fu_924_p2 = (tmp_74_reg_1483 | p_not_2_reg_1489);

assign brmerge32_3_fu_994_p2 = (tmp_77_reg_1511 | p_not_3_reg_1517);

assign brmerge33_1_fu_874_p2 = (p_not4_1_reg_1466 | newsignbit_i_i_i_i_0_1_fu_869_p2);

assign brmerge33_2_fu_944_p2 = (p_not4_2_reg_1494 | newsignbit_i_i_i_i_0_2_fu_939_p2);

assign brmerge33_3_fu_1014_p2 = (p_not4_3_reg_1522 | newsignbit_i_i_i_i_0_3_fu_1009_p2);

assign brmerge34_1_fu_884_p2 = (underflow_7_1_fu_879_p2 | overflow_7_1_fu_863_p2);

assign brmerge34_2_fu_954_p2 = (underflow_7_2_fu_949_p2 | overflow_7_2_fu_933_p2);

assign brmerge34_3_fu_1024_p2 = (underflow_7_3_fu_1019_p2 | overflow_7_3_fu_1003_p2);

assign brmerge35_1_fu_896_p2 = (p_707_not_1_fu_890_p2 | overflow_7_1_fu_863_p2);

assign brmerge35_2_fu_966_p2 = (p_707_not_2_fu_960_p2 | overflow_7_2_fu_933_p2);

assign brmerge35_3_fu_1036_p2 = (p_707_not_3_fu_1030_p2 | overflow_7_3_fu_1003_p2);

assign brmerge3_fu_814_p2 = (underflow_7_fu_809_p2 | overflow_7_fu_793_p2);

assign brmerge4_fu_826_p2 = (p_707_not_fu_820_p2 | overflow_7_fu_793_p2);

assign brmerge5_fu_1195_p2 = (p_Result_23_fu_1175_p3 ^ p_Result_22_fu_1163_p3);

assign brmerge6_fu_1207_p2 = (signbit_i_i_0_not_fu_1201_p2 | p_Result_23_fu_1175_p3);

assign brmerge9_fu_426_p2 = (signbit_i_i_i_i27_0_s_fu_421_p2 | p_Result_21_reg_1288);

assign brmerge_fu_417_p2 = (p_Result_s_reg_1275 ^ p_Result_21_reg_1288);

assign delta_V_fu_445_p3 = ((brmerge9_fu_426_p2[0:0] === 1'b1) ? p_mux_fu_431_p3 : p_s_fu_438_p3);

assign exitcond2_fu_1071_p2 = ((index_1_reg_316 == indvars_iv_reg_262) ? 1'b1 : 1'b0);

assign exitcond3_fu_504_p2 = ((tmp_V_1_reg_305 == width_V_read_reg_1242) ? 1'b1 : 1'b0);

assign exitcond_fu_493_p2 = ((t_V_1_reg_282 == height_V_reg_1295) ? 1'b1 : 1'b0);

assign grp_fu_382_p1 = grp_fu_382_p10;

assign grp_fu_382_p10 = width_V_read_reg_1242;

assign grp_fu_513_p0 = grp_fu_513_p00;

assign grp_fu_513_p00 = tmp_V_1_reg_305;

assign grp_fu_513_p1 = tmp_30_reg_1307;

assign grp_fu_538_p0 = grp_fu_538_p00;

assign grp_fu_538_p00 = pix_x_V_s_fu_528_p2;

assign grp_fu_538_p1 = tmp_30_reg_1307;

assign grp_fu_553_p0 = grp_fu_553_p00;

assign grp_fu_553_p00 = pix_x_V_1_fu_543_p2;

assign grp_fu_553_p1 = tmp_30_reg_1307;

assign grp_fu_568_p0 = grp_fu_568_p00;

assign grp_fu_568_p00 = pix_x_V_2_fu_558_p2;

assign grp_fu_568_p1 = tmp_30_reg_1307;

assign grp_mandel_calc_fu_337_ap_start = grp_mandel_calc_fu_337_ap_start_reg;

assign grp_mandel_calc_fu_344_ap_start = grp_mandel_calc_fu_344_ap_start_reg;

assign grp_mandel_calc_fu_351_ap_start = grp_mandel_calc_fu_351_ap_start_reg;

assign grp_mandel_calc_fu_358_ap_start = grp_mandel_calc_fu_358_ap_start_reg;

assign i_fu_1077_p2 = (i_op_assign_reg_326 + 12'd1);

assign index_2_fu_1105_p2 = (24'd1 + index_1_reg_316);

assign index_3_fu_579_p2 = (tmp_2_cast_reg_1300 + index_reg_293);

assign indvars_iv_next_fu_1237_p2 = (tmp_2_cast_reg_1300 + indvars_iv_reg_262);

assign lhs_V_3_fu_1154_p1 = $signed(p_Val2_29_reg_272);

assign lhs_V_7_cast_fu_453_p1 = width_V_read_reg_1242;

assign lhs_V_8_cast_fu_486_p1 = X0_V_read_reg_1256;

assign lhs_V_fu_365_p1 = $signed(X1_V);

assign line_V_fu_498_p2 = (t_V_1_reg_282 + 12'd1);

assign newIndex1_fu_1097_p1 = newIndex_fu_1087_p4;

assign newIndex3_fu_1064_p1 = newIndex2_reg_1345;

assign newIndex_fu_1087_p4 = {{i_op_assign_reg_326[11:2]}};

assign newsignbit_i_i_i_i_0_1_fu_869_p2 = (tmp_71_reg_1455 ^ 1'd1);

assign newsignbit_i_i_i_i_0_2_fu_939_p2 = (tmp_74_reg_1483 ^ 1'd1);

assign newsignbit_i_i_i_i_0_3_fu_1009_p2 = (tmp_77_reg_1511 ^ 1'd1);

assign newsignbit_i_i_i_i_fu_799_p2 = (tmp_68_reg_1427 ^ 1'd1);

assign overflow_7_1_fu_863_p2 = (tmp_75_1_fu_858_p2 & brmerge32_1_fu_854_p2);

assign overflow_7_2_fu_933_p2 = (tmp_75_2_fu_928_p2 & brmerge32_2_fu_924_p2);

assign overflow_7_3_fu_1003_p2 = (tmp_75_3_fu_998_p2 & brmerge32_3_fu_994_p2);

assign overflow_7_fu_793_p2 = (tmp_32_fu_788_p2 & brmerge1_fu_784_p2);

assign p_0285_2_fu_1229_p3 = ((brmerge6_fu_1207_p2[0:0] === 1'b1) ? p_mux8_fu_1213_p3 : p_2_fu_1221_p3);

assign p_0_1_fu_916_p3 = ((brmerge35_1_fu_896_p2[0:0] === 1'b1) ? p_mux7_1_fu_902_p3 : p_11_1_fu_909_p3);

assign p_0_2_fu_986_p3 = ((brmerge35_2_fu_966_p2[0:0] === 1'b1) ? p_mux7_2_fu_972_p3 : p_11_2_fu_979_p3);

assign p_0_3_fu_1056_p3 = ((brmerge35_3_fu_1036_p2[0:0] === 1'b1) ? p_mux7_3_fu_1042_p3 : p_11_3_fu_1049_p3);

assign p_0_fu_846_p3 = ((brmerge4_fu_826_p2[0:0] === 1'b1) ? p_mux7_fu_832_p3 : p_1_fu_839_p3);

assign p_11_1_fu_909_p3 = ((underflow_7_1_fu_879_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_13_1_reg_1449);

assign p_11_2_fu_979_p3 = ((underflow_7_2_fu_949_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_13_2_reg_1477);

assign p_11_3_fu_1049_p3 = ((underflow_7_3_fu_1019_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_13_3_reg_1505);

assign p_1_fu_839_p3 = ((underflow_7_fu_809_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_12_reg_1421);

assign p_2_fu_1221_p3 = ((underflow_8_fu_1189_p2[0:0] === 1'b1) ? 40'd549755813888 : y_V_fu_1171_p1);

assign p_707_not_1_fu_890_p2 = (underflow_7_1_fu_879_p2 ^ 1'd1);

assign p_707_not_2_fu_960_p2 = (underflow_7_2_fu_949_p2 ^ 1'd1);

assign p_707_not_3_fu_1030_p2 = (underflow_7_3_fu_1019_p2 ^ 1'd1);

assign p_707_not_fu_820_p2 = (underflow_7_fu_809_p2 ^ 1'd1);

assign p_Result_22_fu_1163_p3 = ret_V_15_fu_1158_p2[32'd40];

assign p_Result_23_fu_1175_p3 = ret_V_15_fu_1158_p2[32'd39];

assign p_Val2_12_fu_612_p2 = ($signed(X0_V_read_reg_1256) + $signed(tmp_66_reg_1380));

assign p_Val2_13_1_fu_658_p2 = ($signed(X0_V_read_reg_1256) + $signed(tmp_69_reg_1390));

assign p_Val2_13_2_fu_704_p2 = ($signed(X0_V_read_reg_1256) + $signed(tmp_72_reg_1400));

assign p_Val2_13_3_fu_750_p2 = ($signed(X0_V_read_reg_1256) + $signed(tmp_75_reg_1410));

assign p_Val2_28_fu_395_p1 = grp_fu_382_p2[39:0];

assign p_mux7_1_fu_902_p3 = ((brmerge34_1_fu_884_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_13_1_reg_1449);

assign p_mux7_2_fu_972_p3 = ((brmerge34_2_fu_954_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_13_2_reg_1477);

assign p_mux7_3_fu_1042_p3 = ((brmerge34_3_fu_1024_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_13_3_reg_1505);

assign p_mux7_fu_832_p3 = ((brmerge3_fu_814_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_12_reg_1421);

assign p_mux8_fu_1213_p3 = ((brmerge5_fu_1195_p2[0:0] === 1'b1) ? 40'd549755813887 : y_V_fu_1171_p1);

assign p_mux_fu_431_p3 = ((brmerge_fu_417_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_28_reg_1282);

assign p_not4_1_fu_686_p2 = ((tmp_34_fu_670_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not4_2_fu_732_p2 = ((tmp_35_fu_716_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not4_3_fu_778_p2 = ((tmp_36_fu_762_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not4_fu_640_p2 = ((tmp_31_fu_624_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not_1_fu_680_p2 = ((tmp_34_fu_670_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_not_2_fu_726_p2 = ((tmp_35_fu_716_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_not_3_fu_772_p2 = ((tmp_36_fu_762_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_not_fu_634_p2 = ((tmp_31_fu_624_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_s_fu_438_p3 = ((underflow_fu_412_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_28_reg_1282);

assign p_shl_fu_456_p3 = {{width_V_read_reg_1242}, {2'd0}};

assign pix_x_V_1_fu_543_p2 = (tmp_V_1_reg_305 | 12'd2);

assign pix_x_V_2_fu_558_p2 = (tmp_V_1_reg_305 | 12'd3);

assign pix_x_V_3_fu_573_p2 = (12'd4 + tmp_V_1_reg_305);

assign pix_x_V_s_fu_528_p2 = (tmp_V_1_reg_305 | 12'd1);

assign ret_V_14_fu_373_p2 = ($signed(lhs_V_fu_365_p1) - $signed(rhs_V_fu_369_p1));

assign ret_V_15_fu_1158_p2 = ($signed(lhs_V_3_fu_1154_p1) - $signed(rhs_V_4_reg_1323));

assign ret_V_21_1_fu_646_p2 = ($signed(lhs_V_8_cast_reg_1315) + $signed(r_V_25_1_reg_1385));

assign ret_V_21_2_fu_692_p2 = ($signed(lhs_V_8_cast_reg_1315) + $signed(r_V_25_2_reg_1395));

assign ret_V_21_3_fu_738_p2 = ($signed(lhs_V_8_cast_reg_1315) + $signed(r_V_25_3_reg_1405));

assign ret_V_fu_463_p2 = (p_shl_fu_456_p3 - lhs_V_7_cast_fu_453_p1);

assign ret_V_s_fu_600_p2 = ($signed(lhs_V_8_cast_reg_1315) + $signed(r_V_s_reg_1375));

assign rhs_V_4_fu_489_p1 = delta_V_fu_445_p3;

assign rhs_V_fu_369_p0 = X0_V;

assign rhs_V_fu_369_p1 = rhs_V_fu_369_p0;

assign signbit_i_i_0_not_fu_1201_p2 = (p_Result_22_fu_1163_p3 ^ 1'd1);

assign signbit_i_i_i_i27_0_s_fu_421_p2 = (p_Result_s_reg_1275 ^ 1'd1);

assign tmp_2_cast_fu_479_p1 = width_V_read_reg_1242;

assign tmp_30_fu_482_p1 = delta_V_fu_445_p3;

assign tmp_31_fu_624_p4 = {{ret_V_s_fu_600_p2[51:40]}};

assign tmp_32_fu_788_p2 = (tmp_67_reg_1415 ^ 1'd1);

assign tmp_34_fu_670_p4 = {{ret_V_21_1_fu_646_p2[51:40]}};

assign tmp_35_fu_716_p4 = {{ret_V_21_2_fu_692_p2[51:40]}};

assign tmp_36_fu_762_p4 = {{ret_V_21_3_fu_738_p2[51:40]}};

assign tmp_37_fu_1183_p2 = (p_Result_23_fu_1175_p3 ^ 1'd1);

assign tmp_38_fu_1140_p1 = mem_0_q0;

assign tmp_38_fu_1140_p2 = mem_1_q0;

assign tmp_38_fu_1140_p3 = mem_2_q0;

assign tmp_38_fu_1140_p4 = mem_3_q0;

assign tmp_38_fu_1140_p5 = tmp_81_reg_1576;

assign tmp_39_fu_1111_p1 = index_1_reg_316;

assign tmp_66_fu_584_p1 = grp_fu_513_p2[39:0];

assign tmp_69_fu_588_p1 = grp_fu_538_p2[39:0];

assign tmp_72_fu_592_p1 = grp_fu_553_p2[39:0];

assign tmp_75_1_fu_858_p2 = (tmp_70_reg_1443 ^ 1'd1);

assign tmp_75_2_fu_928_p2 = (tmp_73_reg_1471 ^ 1'd1);

assign tmp_75_3_fu_998_p2 = (tmp_76_reg_1499 ^ 1'd1);

assign tmp_75_fu_596_p1 = grp_fu_568_p2[39:0];

assign tmp_81_fu_1083_p1 = i_op_assign_reg_326[1:0];

assign tmp_s_fu_407_p2 = (p_Result_21_reg_1288 ^ 1'd1);

assign underflow_7_1_fu_879_p2 = (tmp_70_reg_1443 & brmerge33_1_fu_874_p2);

assign underflow_7_2_fu_949_p2 = (tmp_73_reg_1471 & brmerge33_2_fu_944_p2);

assign underflow_7_3_fu_1019_p2 = (tmp_76_reg_1499 & brmerge33_3_fu_1014_p2);

assign underflow_7_fu_809_p2 = (tmp_67_reg_1415 & brmerge2_fu_804_p2);

assign underflow_8_fu_1189_p2 = (tmp_37_fu_1183_p2 & p_Result_22_fu_1163_p3);

assign underflow_fu_412_p2 = (tmp_s_fu_407_p2 & p_Result_s_reg_1275);

assign y_V_fu_1171_p1 = ret_V_15_fu_1158_p2[39:0];

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_1300[23:12] <= 12'b000000000000;
    buf_addr_reg_1606[31:24] <= 8'b00000000;
end

endmodule //calc

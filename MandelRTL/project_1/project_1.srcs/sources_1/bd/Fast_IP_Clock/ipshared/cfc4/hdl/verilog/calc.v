// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="calc,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100tcsg324-1,HLS_INPUT_CLOCK=12.500000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=10.937000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=148,HLS_SYN_FF=8581,HLS_SYN_LUT=15317,HLS_VERSION=2018_3}" *)

module calc (
        ap_clk,
        ap_rst_n,
        m_axi_buf_r_AWVALID,
        m_axi_buf_r_AWREADY,
        m_axi_buf_r_AWADDR,
        m_axi_buf_r_AWID,
        m_axi_buf_r_AWLEN,
        m_axi_buf_r_AWSIZE,
        m_axi_buf_r_AWBURST,
        m_axi_buf_r_AWLOCK,
        m_axi_buf_r_AWCACHE,
        m_axi_buf_r_AWPROT,
        m_axi_buf_r_AWQOS,
        m_axi_buf_r_AWREGION,
        m_axi_buf_r_AWUSER,
        m_axi_buf_r_WVALID,
        m_axi_buf_r_WREADY,
        m_axi_buf_r_WDATA,
        m_axi_buf_r_WSTRB,
        m_axi_buf_r_WLAST,
        m_axi_buf_r_WID,
        m_axi_buf_r_WUSER,
        m_axi_buf_r_ARVALID,
        m_axi_buf_r_ARREADY,
        m_axi_buf_r_ARADDR,
        m_axi_buf_r_ARID,
        m_axi_buf_r_ARLEN,
        m_axi_buf_r_ARSIZE,
        m_axi_buf_r_ARBURST,
        m_axi_buf_r_ARLOCK,
        m_axi_buf_r_ARCACHE,
        m_axi_buf_r_ARPROT,
        m_axi_buf_r_ARQOS,
        m_axi_buf_r_ARREGION,
        m_axi_buf_r_ARUSER,
        m_axi_buf_r_RVALID,
        m_axi_buf_r_RREADY,
        m_axi_buf_r_RDATA,
        m_axi_buf_r_RLAST,
        m_axi_buf_r_RID,
        m_axi_buf_r_RUSER,
        m_axi_buf_r_RRESP,
        m_axi_buf_r_BVALID,
        m_axi_buf_r_BREADY,
        m_axi_buf_r_BRESP,
        m_axi_buf_r_BID,
        m_axi_buf_r_BUSER,
        s_axi_in_parms_AWVALID,
        s_axi_in_parms_AWREADY,
        s_axi_in_parms_AWADDR,
        s_axi_in_parms_WVALID,
        s_axi_in_parms_WREADY,
        s_axi_in_parms_WDATA,
        s_axi_in_parms_WSTRB,
        s_axi_in_parms_ARVALID,
        s_axi_in_parms_ARREADY,
        s_axi_in_parms_ARADDR,
        s_axi_in_parms_RVALID,
        s_axi_in_parms_RREADY,
        s_axi_in_parms_RDATA,
        s_axi_in_parms_RRESP,
        s_axi_in_parms_BVALID,
        s_axi_in_parms_BREADY,
        s_axi_in_parms_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 53'd1;
parameter    ap_ST_fsm_state2 = 53'd2;
parameter    ap_ST_fsm_state3 = 53'd4;
parameter    ap_ST_fsm_state4 = 53'd8;
parameter    ap_ST_fsm_state5 = 53'd16;
parameter    ap_ST_fsm_state6 = 53'd32;
parameter    ap_ST_fsm_state7 = 53'd64;
parameter    ap_ST_fsm_state8 = 53'd128;
parameter    ap_ST_fsm_state9 = 53'd256;
parameter    ap_ST_fsm_state10 = 53'd512;
parameter    ap_ST_fsm_state11 = 53'd1024;
parameter    ap_ST_fsm_state12 = 53'd2048;
parameter    ap_ST_fsm_state13 = 53'd4096;
parameter    ap_ST_fsm_state14 = 53'd8192;
parameter    ap_ST_fsm_state15 = 53'd16384;
parameter    ap_ST_fsm_state16 = 53'd32768;
parameter    ap_ST_fsm_state17 = 53'd65536;
parameter    ap_ST_fsm_state18 = 53'd131072;
parameter    ap_ST_fsm_state19 = 53'd262144;
parameter    ap_ST_fsm_state20 = 53'd524288;
parameter    ap_ST_fsm_state21 = 53'd1048576;
parameter    ap_ST_fsm_state22 = 53'd2097152;
parameter    ap_ST_fsm_state23 = 53'd4194304;
parameter    ap_ST_fsm_state24 = 53'd8388608;
parameter    ap_ST_fsm_state25 = 53'd16777216;
parameter    ap_ST_fsm_state26 = 53'd33554432;
parameter    ap_ST_fsm_state27 = 53'd67108864;
parameter    ap_ST_fsm_state28 = 53'd134217728;
parameter    ap_ST_fsm_state29 = 53'd268435456;
parameter    ap_ST_fsm_state30 = 53'd536870912;
parameter    ap_ST_fsm_state31 = 53'd1073741824;
parameter    ap_ST_fsm_state32 = 53'd2147483648;
parameter    ap_ST_fsm_state33 = 53'd4294967296;
parameter    ap_ST_fsm_state34 = 53'd8589934592;
parameter    ap_ST_fsm_state35 = 53'd17179869184;
parameter    ap_ST_fsm_state36 = 53'd34359738368;
parameter    ap_ST_fsm_state37 = 53'd68719476736;
parameter    ap_ST_fsm_state38 = 53'd137438953472;
parameter    ap_ST_fsm_state39 = 53'd274877906944;
parameter    ap_ST_fsm_state40 = 53'd549755813888;
parameter    ap_ST_fsm_state41 = 53'd1099511627776;
parameter    ap_ST_fsm_state42 = 53'd2199023255552;
parameter    ap_ST_fsm_state43 = 53'd4398046511104;
parameter    ap_ST_fsm_state44 = 53'd8796093022208;
parameter    ap_ST_fsm_state45 = 53'd17592186044416;
parameter    ap_ST_fsm_state46 = 53'd35184372088832;
parameter    ap_ST_fsm_state47 = 53'd70368744177664;
parameter    ap_ST_fsm_state48 = 53'd140737488355328;
parameter    ap_ST_fsm_state49 = 53'd281474976710656;
parameter    ap_ST_fsm_state50 = 53'd562949953421312;
parameter    ap_ST_fsm_state51 = 53'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage0 = 53'd2251799813685248;
parameter    ap_ST_fsm_state60 = 53'd4503599627370496;
parameter    C_S_AXI_IN_PARMS_DATA_WIDTH = 32;
parameter    C_S_AXI_IN_PARMS_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_ID_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ADDR_WIDTH = 32;
parameter    C_M_AXI_BUF_R_DATA_WIDTH = 32;
parameter    C_M_AXI_BUF_R_AWUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_ARUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_WUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_RUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_BUSER_WIDTH = 1;
parameter    C_M_AXI_BUF_R_TARGET_ADDR = 0;
parameter    C_M_AXI_BUF_R_USER_VALUE = 0;
parameter    C_M_AXI_BUF_R_PROT_VALUE = 0;
parameter    C_M_AXI_BUF_R_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_IN_PARMS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_BUF_R_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_buf_r_AWVALID;
input   m_axi_buf_r_AWREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_AWADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_AWID;
output  [7:0] m_axi_buf_r_AWLEN;
output  [2:0] m_axi_buf_r_AWSIZE;
output  [1:0] m_axi_buf_r_AWBURST;
output  [1:0] m_axi_buf_r_AWLOCK;
output  [3:0] m_axi_buf_r_AWCACHE;
output  [2:0] m_axi_buf_r_AWPROT;
output  [3:0] m_axi_buf_r_AWQOS;
output  [3:0] m_axi_buf_r_AWREGION;
output  [C_M_AXI_BUF_R_AWUSER_WIDTH - 1:0] m_axi_buf_r_AWUSER;
output   m_axi_buf_r_WVALID;
input   m_axi_buf_r_WREADY;
output  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_WDATA;
output  [C_M_AXI_BUF_R_WSTRB_WIDTH - 1:0] m_axi_buf_r_WSTRB;
output   m_axi_buf_r_WLAST;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_WID;
output  [C_M_AXI_BUF_R_WUSER_WIDTH - 1:0] m_axi_buf_r_WUSER;
output   m_axi_buf_r_ARVALID;
input   m_axi_buf_r_ARREADY;
output  [C_M_AXI_BUF_R_ADDR_WIDTH - 1:0] m_axi_buf_r_ARADDR;
output  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_ARID;
output  [7:0] m_axi_buf_r_ARLEN;
output  [2:0] m_axi_buf_r_ARSIZE;
output  [1:0] m_axi_buf_r_ARBURST;
output  [1:0] m_axi_buf_r_ARLOCK;
output  [3:0] m_axi_buf_r_ARCACHE;
output  [2:0] m_axi_buf_r_ARPROT;
output  [3:0] m_axi_buf_r_ARQOS;
output  [3:0] m_axi_buf_r_ARREGION;
output  [C_M_AXI_BUF_R_ARUSER_WIDTH - 1:0] m_axi_buf_r_ARUSER;
input   m_axi_buf_r_RVALID;
output   m_axi_buf_r_RREADY;
input  [C_M_AXI_BUF_R_DATA_WIDTH - 1:0] m_axi_buf_r_RDATA;
input   m_axi_buf_r_RLAST;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_RID;
input  [C_M_AXI_BUF_R_RUSER_WIDTH - 1:0] m_axi_buf_r_RUSER;
input  [1:0] m_axi_buf_r_RRESP;
input   m_axi_buf_r_BVALID;
output   m_axi_buf_r_BREADY;
input  [1:0] m_axi_buf_r_BRESP;
input  [C_M_AXI_BUF_R_ID_WIDTH - 1:0] m_axi_buf_r_BID;
input  [C_M_AXI_BUF_R_BUSER_WIDTH - 1:0] m_axi_buf_r_BUSER;
input   s_axi_in_parms_AWVALID;
output   s_axi_in_parms_AWREADY;
input  [C_S_AXI_IN_PARMS_ADDR_WIDTH - 1:0] s_axi_in_parms_AWADDR;
input   s_axi_in_parms_WVALID;
output   s_axi_in_parms_WREADY;
input  [C_S_AXI_IN_PARMS_DATA_WIDTH - 1:0] s_axi_in_parms_WDATA;
input  [C_S_AXI_IN_PARMS_WSTRB_WIDTH - 1:0] s_axi_in_parms_WSTRB;
input   s_axi_in_parms_ARVALID;
output   s_axi_in_parms_ARREADY;
input  [C_S_AXI_IN_PARMS_ADDR_WIDTH - 1:0] s_axi_in_parms_ARADDR;
output   s_axi_in_parms_RVALID;
input   s_axi_in_parms_RREADY;
output  [C_S_AXI_IN_PARMS_DATA_WIDTH - 1:0] s_axi_in_parms_RDATA;
output  [1:0] s_axi_in_parms_RRESP;
output   s_axi_in_parms_BVALID;
input   s_axi_in_parms_BREADY;
output  [1:0] s_axi_in_parms_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [52:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [39:0] X0_V;
wire   [39:0] Y0_V;
wire   [39:0] X1_V;
wire   [11:0] width_V;
reg    buf_r_blk_n_AW;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] exitcond2_reg_1456;
reg    buf_r_blk_n_W;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] exitcond2_reg_1456_pp0_iter1_reg;
reg    buf_r_blk_n_B;
reg    ap_enable_reg_pp0_iter7;
reg   [0:0] exitcond2_reg_1456_pp0_iter6_reg;
reg    buf_r_AWVALID;
wire    buf_r_AWREADY;
reg    buf_r_WVALID;
wire    buf_r_WREADY;
wire    buf_r_ARREADY;
wire    buf_r_RVALID;
wire   [15:0] buf_r_RDATA;
wire    buf_r_RLAST;
wire   [0:0] buf_r_RID;
wire   [0:0] buf_r_RUSER;
wire   [1:0] buf_r_RRESP;
wire    buf_r_BVALID;
reg    buf_r_BREADY;
wire   [1:0] buf_r_BRESP;
wire   [0:0] buf_r_BID;
wire   [0:0] buf_r_BUSER;
reg   [23:0] index_1_reg_316;
reg   [11:0] i_op_assign_reg_326;
reg   [11:0] width_V_read_reg_1284;
reg   [39:0] Y0_V_read_reg_1292;
reg  signed [39:0] X0_V_read_reg_1297;
reg   [11:0] height_V_reg_1316;
wire    ap_CS_fsm_state45;
wire   [23:0] tmp_2_cast_fu_489_p1;
reg   [23:0] tmp_2_cast_reg_1321;
wire  signed [51:0] tmp_31_fu_492_p1;
reg  signed [51:0] tmp_31_reg_1328;
wire  signed [51:0] lhs_V_8_cast_fu_496_p1;
reg  signed [51:0] lhs_V_8_cast_reg_1336;
wire  signed [40:0] rhs_V_4_fu_499_p1;
reg  signed [40:0] rhs_V_4_reg_1344;
wire   [11:0] line_V_fu_508_p2;
reg   [11:0] line_V_reg_1352;
wire    ap_CS_fsm_state46;
wire   [0:0] exitcond3_fu_514_p2;
wire    ap_CS_fsm_state47;
wire   [51:0] r_V_s_fu_523_p2;
reg   [51:0] r_V_s_reg_1361;
wire   [39:0] tmp_68_fu_528_p1;
reg   [39:0] tmp_68_reg_1366;
reg   [9:0] newIndex2_reg_1371;
wire   [51:0] r_V_23_1_fu_552_p2;
reg   [51:0] r_V_23_1_reg_1376;
wire   [39:0] tmp_71_fu_557_p1;
reg   [39:0] tmp_71_reg_1381;
wire   [51:0] r_V_23_2_fu_571_p2;
reg   [51:0] r_V_23_2_reg_1386;
wire   [39:0] tmp_74_fu_576_p1;
reg   [39:0] tmp_74_reg_1391;
wire   [51:0] r_V_23_3_fu_590_p2;
reg   [51:0] r_V_23_3_reg_1396;
wire   [39:0] tmp_77_fu_595_p1;
reg   [39:0] tmp_77_reg_1401;
wire   [11:0] pix_x_V_3_fu_599_p2;
reg   [11:0] pix_x_V_3_reg_1406;
wire   [23:0] index_3_fu_605_p2;
reg   [23:0] index_3_reg_1411;
wire   [39:0] p_0_fu_726_p3;
reg   [39:0] p_0_reg_1416;
wire    ap_CS_fsm_state48;
wire   [39:0] p_0_1_fu_850_p3;
reg   [39:0] p_0_1_reg_1421;
wire   [39:0] p_0_2_fu_974_p3;
reg   [39:0] p_0_2_reg_1426;
wire   [39:0] p_0_3_fu_1098_p3;
reg   [39:0] p_0_3_reg_1431;
wire   [10:0] grp_mandel_calc_fu_337_ap_return;
reg   [10:0] tmp_33_reg_1436;
wire    ap_CS_fsm_state50;
wire    grp_mandel_calc_fu_337_ap_ready;
wire    grp_mandel_calc_fu_337_ap_done;
wire    grp_mandel_calc_fu_344_ap_ready;
wire    grp_mandel_calc_fu_344_ap_done;
wire    grp_mandel_calc_fu_351_ap_ready;
wire    grp_mandel_calc_fu_351_ap_done;
wire    grp_mandel_calc_fu_358_ap_ready;
wire    grp_mandel_calc_fu_358_ap_done;
reg    ap_block_state50_on_subcall_done;
wire   [10:0] grp_mandel_calc_fu_344_ap_return;
reg   [10:0] tmp_80_1_reg_1441;
wire   [10:0] grp_mandel_calc_fu_351_ap_return;
reg   [10:0] tmp_80_2_reg_1446;
wire   [10:0] grp_mandel_calc_fu_358_ap_return;
reg   [10:0] tmp_80_3_reg_1451;
wire   [0:0] exitcond2_fu_1113_p2;
wire    ap_block_state52_pp0_stage0_iter0;
wire    ap_block_state53_pp0_stage0_iter1;
reg    ap_sig_ioackin_buf_r_AWREADY;
reg    ap_block_state53_io;
wire    ap_block_state54_pp0_stage0_iter2;
reg    ap_sig_ioackin_buf_r_WREADY;
reg    ap_block_state54_io;
wire    ap_block_state55_pp0_stage0_iter3;
wire    ap_block_state56_pp0_stage0_iter4;
wire    ap_block_state57_pp0_stage0_iter5;
wire    ap_block_state58_pp0_stage0_iter6;
reg    ap_block_state59_pp0_stage0_iter7;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] exitcond2_reg_1456_pp0_iter2_reg;
reg   [0:0] exitcond2_reg_1456_pp0_iter3_reg;
reg   [0:0] exitcond2_reg_1456_pp0_iter4_reg;
reg   [0:0] exitcond2_reg_1456_pp0_iter5_reg;
wire   [11:0] i_fu_1119_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] tmp_83_fu_1125_p1;
reg   [1:0] tmp_83_reg_1465;
wire   [23:0] index_2_fu_1147_p2;
reg   [31:0] buf_addr_reg_1495;
wire   [15:0] tmp_22_fu_1182_p6;
reg   [15:0] tmp_22_reg_1501;
wire   [39:0] p_0285_2_fu_1271_p3;
wire    ap_CS_fsm_state60;
wire   [23:0] indvars_iv_next_fu_1279_p2;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state52;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg   [8:0] mem_0_address0;
reg    mem_0_ce0;
reg    mem_0_we0;
wire   [10:0] mem_0_q0;
reg   [8:0] mem_1_address0;
reg    mem_1_ce0;
reg    mem_1_we0;
wire   [10:0] mem_1_q0;
reg   [8:0] mem_2_address0;
reg    mem_2_ce0;
reg    mem_2_we0;
wire   [10:0] mem_2_q0;
reg   [8:0] mem_3_address0;
reg    mem_3_ce0;
reg    mem_3_we0;
wire   [10:0] mem_3_q0;
wire    grp_mandel_calc_fu_337_ap_start;
wire    grp_mandel_calc_fu_337_ap_idle;
wire    grp_mandel_calc_fu_344_ap_start;
wire    grp_mandel_calc_fu_344_ap_idle;
wire    grp_mandel_calc_fu_351_ap_start;
wire    grp_mandel_calc_fu_351_ap_idle;
wire    grp_mandel_calc_fu_358_ap_start;
wire    grp_mandel_calc_fu_358_ap_idle;
reg   [23:0] indvars_iv_reg_262;
reg   [39:0] p_Val2_28_reg_272;
reg   [11:0] t_V_1_reg_282;
reg   [23:0] index_reg_293;
reg   [11:0] tmp_V_1_reg_305;
wire    ap_CS_fsm_state51;
wire   [0:0] exitcond_fu_503_p2;
reg    grp_mandel_calc_fu_337_ap_start_reg;
wire    ap_CS_fsm_state49;
reg    grp_mandel_calc_fu_344_ap_start_reg;
reg    grp_mandel_calc_fu_351_ap_start_reg;
reg    grp_mandel_calc_fu_358_ap_start_reg;
wire   [63:0] newIndex3_fu_1106_p1;
wire   [63:0] newIndex1_fu_1139_p1;
wire   [63:0] tmp_35_fu_1153_p1;
reg    ap_reg_ioackin_buf_r_AWREADY;
reg    ap_block_pp0_stage0_01001;
reg    ap_reg_ioackin_buf_r_WREADY;
wire  signed [39:0] rhs_V_fu_369_p0;
wire  signed [40:0] lhs_V_fu_365_p1;
wire  signed [40:0] rhs_V_fu_369_p1;
wire   [40:0] grp_fu_383_p0;
wire   [12:0] grp_fu_383_p1;
wire   [40:0] grp_fu_383_p2;
wire   [0:0] p_Result_20_fu_401_p3;
wire   [0:0] p_Result_s_fu_389_p3;
wire   [0:0] tmp_s_fu_409_p2;
wire   [0:0] signbit_i_i_i_i27_0_s_fu_427_p2;
wire   [0:0] brmerge_fu_421_p2;
wire   [39:0] p_Val2_27_fu_397_p1;
wire   [0:0] underflow_fu_415_p2;
wire   [0:0] brmerge1_fu_433_p2;
wire   [39:0] p_mux_fu_439_p3;
wire   [39:0] p_s_fu_447_p3;
wire   [13:0] p_shl_fu_466_p3;
wire   [13:0] lhs_V_7_cast_fu_463_p1;
wire   [13:0] ret_V_fu_473_p2;
wire  signed [39:0] delta_V_fu_455_p3;
wire   [11:0] r_V_s_fu_523_p0;
wire  signed [39:0] r_V_s_fu_523_p1;
wire   [11:0] pix_x_V_s_fu_542_p2;
wire   [11:0] r_V_23_1_fu_552_p0;
wire  signed [39:0] r_V_23_1_fu_552_p1;
wire   [11:0] pix_x_V_1_fu_561_p2;
wire   [11:0] r_V_23_2_fu_571_p0;
wire  signed [39:0] r_V_23_2_fu_571_p1;
wire   [11:0] pix_x_V_2_fu_580_p2;
wire   [11:0] r_V_23_3_fu_590_p0;
wire  signed [39:0] r_V_23_3_fu_590_p1;
wire   [51:0] ret_V_s_fu_610_p2;
wire   [39:0] p_Val2_8_fu_622_p2;
wire   [11:0] tmp_18_fu_634_p4;
wire   [0:0] tmp_70_fu_626_p3;
wire   [0:0] p_not_fu_644_p2;
wire   [0:0] tmp_69_fu_614_p3;
wire   [0:0] brmerge2_fu_650_p2;
wire   [0:0] tmp_32_fu_656_p2;
wire   [0:0] p_not2_fu_674_p2;
wire   [0:0] newsignbit_i_i_i_i_fu_668_p2;
wire   [0:0] brmerge3_fu_680_p2;
wire   [0:0] underflow_6_fu_686_p2;
wire   [0:0] overflow_6_fu_662_p2;
wire   [0:0] p_707_not_fu_698_p2;
wire   [0:0] brmerge4_fu_692_p2;
wire   [0:0] brmerge5_fu_704_p2;
wire   [39:0] p_mux6_fu_710_p3;
wire   [39:0] p_9_fu_718_p3;
wire   [51:0] ret_V_18_1_fu_734_p2;
wire   [39:0] p_Val2_8_1_fu_746_p2;
wire   [11:0] tmp_19_fu_758_p4;
wire   [0:0] tmp_73_fu_750_p3;
wire   [0:0] p_not_1_fu_768_p2;
wire   [0:0] tmp_72_fu_738_p3;
wire   [0:0] brmerge28_1_fu_774_p2;
wire   [0:0] tmp_77_1_fu_780_p2;
wire   [0:0] p_not2_1_fu_798_p2;
wire   [0:0] newsignbit_i_i_i_i_0_1_fu_792_p2;
wire   [0:0] brmerge29_1_fu_804_p2;
wire   [0:0] underflow_6_1_fu_810_p2;
wire   [0:0] overflow_6_1_fu_786_p2;
wire   [0:0] p_707_not_1_fu_822_p2;
wire   [0:0] brmerge30_1_fu_816_p2;
wire   [0:0] brmerge31_1_fu_828_p2;
wire   [39:0] p_mux6_1_fu_834_p3;
wire   [39:0] p_9_1_fu_842_p3;
wire   [51:0] ret_V_18_2_fu_858_p2;
wire   [39:0] p_Val2_8_2_fu_870_p2;
wire   [11:0] tmp_20_fu_882_p4;
wire   [0:0] tmp_76_fu_874_p3;
wire   [0:0] p_not_2_fu_892_p2;
wire   [0:0] tmp_75_fu_862_p3;
wire   [0:0] brmerge28_2_fu_898_p2;
wire   [0:0] tmp_77_2_fu_904_p2;
wire   [0:0] p_not2_2_fu_922_p2;
wire   [0:0] newsignbit_i_i_i_i_0_2_fu_916_p2;
wire   [0:0] brmerge29_2_fu_928_p2;
wire   [0:0] underflow_6_2_fu_934_p2;
wire   [0:0] overflow_6_2_fu_910_p2;
wire   [0:0] p_707_not_2_fu_946_p2;
wire   [0:0] brmerge30_2_fu_940_p2;
wire   [0:0] brmerge31_2_fu_952_p2;
wire   [39:0] p_mux6_2_fu_958_p3;
wire   [39:0] p_9_2_fu_966_p3;
wire   [51:0] ret_V_18_3_fu_982_p2;
wire   [39:0] p_Val2_8_3_fu_994_p2;
wire   [11:0] tmp_21_fu_1006_p4;
wire   [0:0] tmp_79_fu_998_p3;
wire   [0:0] p_not_3_fu_1016_p2;
wire   [0:0] tmp_78_fu_986_p3;
wire   [0:0] brmerge28_3_fu_1022_p2;
wire   [0:0] tmp_77_3_fu_1028_p2;
wire   [0:0] p_not2_3_fu_1046_p2;
wire   [0:0] newsignbit_i_i_i_i_0_3_fu_1040_p2;
wire   [0:0] brmerge29_3_fu_1052_p2;
wire   [0:0] underflow_6_3_fu_1058_p2;
wire   [0:0] overflow_6_3_fu_1034_p2;
wire   [0:0] p_707_not_3_fu_1070_p2;
wire   [0:0] brmerge30_3_fu_1064_p2;
wire   [0:0] brmerge31_3_fu_1076_p2;
wire   [39:0] p_mux6_3_fu_1082_p3;
wire   [39:0] p_9_3_fu_1090_p3;
wire   [9:0] newIndex_fu_1129_p4;
wire   [15:0] tmp_22_fu_1182_p1;
wire   [15:0] tmp_22_fu_1182_p2;
wire   [15:0] tmp_22_fu_1182_p3;
wire   [15:0] tmp_22_fu_1182_p4;
wire   [31:0] tmp_22_fu_1182_p5;
wire  signed [40:0] lhs_V_3_fu_1196_p1;
wire   [40:0] ret_V_14_fu_1200_p2;
wire   [0:0] p_Result_22_fu_1217_p3;
wire   [0:0] p_Result_21_fu_1205_p3;
wire   [0:0] tmp_34_fu_1225_p2;
wire   [0:0] signbit_i_i_0_not_fu_1243_p2;
wire   [0:0] brmerge6_fu_1237_p2;
wire   [39:0] y_V_fu_1213_p1;
wire   [0:0] underflow_7_fu_1231_p2;
wire   [0:0] brmerge7_fu_1249_p2;
wire   [39:0] p_mux7_fu_1255_p3;
wire   [39:0] p_2_fu_1263_p3;
reg    grp_fu_383_ap_start;
wire    grp_fu_383_ap_done;
reg   [52:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [40:0] grp_fu_383_p10;
wire   [51:0] r_V_23_1_fu_552_p00;
wire   [51:0] r_V_23_2_fu_571_p00;
wire   [51:0] r_V_23_3_fu_590_p00;
wire   [51:0] r_V_s_fu_523_p00;
reg    ap_condition_1513;

// power-on initialization
initial begin
#0 ap_CS_fsm = 53'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 grp_mandel_calc_fu_337_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_344_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_351_ap_start_reg = 1'b0;
#0 grp_mandel_calc_fu_358_ap_start_reg = 1'b0;
#0 ap_reg_ioackin_buf_r_AWREADY = 1'b0;
#0 ap_reg_ioackin_buf_r_WREADY = 1'b0;
end

calc_in_parms_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_IN_PARMS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_IN_PARMS_DATA_WIDTH ))
calc_in_parms_s_axi_U(
    .AWVALID(s_axi_in_parms_AWVALID),
    .AWREADY(s_axi_in_parms_AWREADY),
    .AWADDR(s_axi_in_parms_AWADDR),
    .WVALID(s_axi_in_parms_WVALID),
    .WREADY(s_axi_in_parms_WREADY),
    .WDATA(s_axi_in_parms_WDATA),
    .WSTRB(s_axi_in_parms_WSTRB),
    .ARVALID(s_axi_in_parms_ARVALID),
    .ARREADY(s_axi_in_parms_ARREADY),
    .ARADDR(s_axi_in_parms_ARADDR),
    .RVALID(s_axi_in_parms_RVALID),
    .RREADY(s_axi_in_parms_RREADY),
    .RDATA(s_axi_in_parms_RDATA),
    .RRESP(s_axi_in_parms_RRESP),
    .BVALID(s_axi_in_parms_BVALID),
    .BREADY(s_axi_in_parms_BREADY),
    .BRESP(s_axi_in_parms_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .X0_V(X0_V),
    .Y0_V(Y0_V),
    .X1_V(X1_V),
    .width_V(width_V)
);

calc_buf_r_m_axi #(
    .CONSERVATIVE( 0 ),
    .USER_DW( 16 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_BUF_R_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_BUF_R_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_BUF_R_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_BUF_R_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_BUF_R_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_BUF_R_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_BUF_R_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_BUF_R_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_BUF_R_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_BUF_R_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_BUF_R_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_BUF_R_CACHE_VALUE ))
calc_buf_r_m_axi_U(
    .AWVALID(m_axi_buf_r_AWVALID),
    .AWREADY(m_axi_buf_r_AWREADY),
    .AWADDR(m_axi_buf_r_AWADDR),
    .AWID(m_axi_buf_r_AWID),
    .AWLEN(m_axi_buf_r_AWLEN),
    .AWSIZE(m_axi_buf_r_AWSIZE),
    .AWBURST(m_axi_buf_r_AWBURST),
    .AWLOCK(m_axi_buf_r_AWLOCK),
    .AWCACHE(m_axi_buf_r_AWCACHE),
    .AWPROT(m_axi_buf_r_AWPROT),
    .AWQOS(m_axi_buf_r_AWQOS),
    .AWREGION(m_axi_buf_r_AWREGION),
    .AWUSER(m_axi_buf_r_AWUSER),
    .WVALID(m_axi_buf_r_WVALID),
    .WREADY(m_axi_buf_r_WREADY),
    .WDATA(m_axi_buf_r_WDATA),
    .WSTRB(m_axi_buf_r_WSTRB),
    .WLAST(m_axi_buf_r_WLAST),
    .WID(m_axi_buf_r_WID),
    .WUSER(m_axi_buf_r_WUSER),
    .ARVALID(m_axi_buf_r_ARVALID),
    .ARREADY(m_axi_buf_r_ARREADY),
    .ARADDR(m_axi_buf_r_ARADDR),
    .ARID(m_axi_buf_r_ARID),
    .ARLEN(m_axi_buf_r_ARLEN),
    .ARSIZE(m_axi_buf_r_ARSIZE),
    .ARBURST(m_axi_buf_r_ARBURST),
    .ARLOCK(m_axi_buf_r_ARLOCK),
    .ARCACHE(m_axi_buf_r_ARCACHE),
    .ARPROT(m_axi_buf_r_ARPROT),
    .ARQOS(m_axi_buf_r_ARQOS),
    .ARREGION(m_axi_buf_r_ARREGION),
    .ARUSER(m_axi_buf_r_ARUSER),
    .RVALID(m_axi_buf_r_RVALID),
    .RREADY(m_axi_buf_r_RREADY),
    .RDATA(m_axi_buf_r_RDATA),
    .RLAST(m_axi_buf_r_RLAST),
    .RID(m_axi_buf_r_RID),
    .RUSER(m_axi_buf_r_RUSER),
    .RRESP(m_axi_buf_r_RRESP),
    .BVALID(m_axi_buf_r_BVALID),
    .BREADY(m_axi_buf_r_BREADY),
    .BRESP(m_axi_buf_r_BRESP),
    .BID(m_axi_buf_r_BID),
    .BUSER(m_axi_buf_r_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(buf_r_ARREADY),
    .I_ARADDR(32'd0),
    .I_ARID(1'd0),
    .I_ARLEN(32'd0),
    .I_ARSIZE(3'd0),
    .I_ARLOCK(2'd0),
    .I_ARCACHE(4'd0),
    .I_ARQOS(4'd0),
    .I_ARPROT(3'd0),
    .I_ARUSER(1'd0),
    .I_ARBURST(2'd0),
    .I_ARREGION(4'd0),
    .I_RVALID(buf_r_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(buf_r_RDATA),
    .I_RID(buf_r_RID),
    .I_RUSER(buf_r_RUSER),
    .I_RRESP(buf_r_RRESP),
    .I_RLAST(buf_r_RLAST),
    .I_AWVALID(buf_r_AWVALID),
    .I_AWREADY(buf_r_AWREADY),
    .I_AWADDR(buf_addr_reg_1495),
    .I_AWID(1'd0),
    .I_AWLEN(32'd1),
    .I_AWSIZE(3'd0),
    .I_AWLOCK(2'd0),
    .I_AWCACHE(4'd0),
    .I_AWQOS(4'd0),
    .I_AWPROT(3'd0),
    .I_AWUSER(1'd0),
    .I_AWBURST(2'd0),
    .I_AWREGION(4'd0),
    .I_WVALID(buf_r_WVALID),
    .I_WREADY(buf_r_WREADY),
    .I_WDATA(tmp_22_reg_1501),
    .I_WID(1'd0),
    .I_WUSER(1'd0),
    .I_WLAST(1'b0),
    .I_WSTRB(2'd3),
    .I_BVALID(buf_r_BVALID),
    .I_BREADY(buf_r_BREADY),
    .I_BRESP(buf_r_BRESP),
    .I_BID(buf_r_BID),
    .I_BUSER(buf_r_BUSER)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_0_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_0_address0),
    .ce0(mem_0_ce0),
    .we0(mem_0_we0),
    .d0(tmp_33_reg_1436),
    .q0(mem_0_q0)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_1_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_1_address0),
    .ce0(mem_1_ce0),
    .we0(mem_1_we0),
    .d0(tmp_80_1_reg_1441),
    .q0(mem_1_q0)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_2_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_2_address0),
    .ce0(mem_2_ce0),
    .we0(mem_2_we0),
    .d0(tmp_80_2_reg_1446),
    .q0(mem_2_q0)
);

calc_mem_0 #(
    .DataWidth( 11 ),
    .AddressRange( 480 ),
    .AddressWidth( 9 ))
mem_3_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(mem_3_address0),
    .ce0(mem_3_ce0),
    .we0(mem_3_we0),
    .d0(tmp_80_3_reg_1451),
    .q0(mem_3_q0)
);

mandel_calc grp_mandel_calc_fu_337(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_337_ap_start),
    .ap_done(grp_mandel_calc_fu_337_ap_done),
    .ap_idle(grp_mandel_calc_fu_337_ap_idle),
    .ap_ready(grp_mandel_calc_fu_337_ap_ready),
    .x_in_V(p_0_reg_1416),
    .y_in_V(p_Val2_28_reg_272),
    .ap_return(grp_mandel_calc_fu_337_ap_return)
);

mandel_calc grp_mandel_calc_fu_344(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_344_ap_start),
    .ap_done(grp_mandel_calc_fu_344_ap_done),
    .ap_idle(grp_mandel_calc_fu_344_ap_idle),
    .ap_ready(grp_mandel_calc_fu_344_ap_ready),
    .x_in_V(p_0_1_reg_1421),
    .y_in_V(p_Val2_28_reg_272),
    .ap_return(grp_mandel_calc_fu_344_ap_return)
);

mandel_calc grp_mandel_calc_fu_351(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_351_ap_start),
    .ap_done(grp_mandel_calc_fu_351_ap_done),
    .ap_idle(grp_mandel_calc_fu_351_ap_idle),
    .ap_ready(grp_mandel_calc_fu_351_ap_ready),
    .x_in_V(p_0_2_reg_1426),
    .y_in_V(p_Val2_28_reg_272),
    .ap_return(grp_mandel_calc_fu_351_ap_return)
);

mandel_calc grp_mandel_calc_fu_358(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_mandel_calc_fu_358_ap_start),
    .ap_done(grp_mandel_calc_fu_358_ap_done),
    .ap_idle(grp_mandel_calc_fu_358_ap_idle),
    .ap_ready(grp_mandel_calc_fu_358_ap_ready),
    .x_in_V(p_0_3_reg_1431),
    .y_in_V(p_Val2_28_reg_272),
    .ap_return(grp_mandel_calc_fu_358_ap_return)
);

calc_sdiv_41ns_13bkb #(
    .ID( 1 ),
    .NUM_STAGE( 45 ),
    .din0_WIDTH( 41 ),
    .din1_WIDTH( 13 ),
    .dout_WIDTH( 41 ))
calc_sdiv_41ns_13bkb_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_383_ap_start),
    .done(grp_fu_383_ap_done),
    .din0(grp_fu_383_p0),
    .din1(grp_fu_383_p1),
    .ce(1'b1),
    .dout(grp_fu_383_p2)
);

calc_mux_432_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 32 ),
    .dout_WIDTH( 16 ))
calc_mux_432_16_1_1_U6(
    .din0(tmp_22_fu_1182_p1),
    .din1(tmp_22_fu_1182_p2),
    .din2(tmp_22_fu_1182_p3),
    .din3(tmp_22_fu_1182_p4),
    .din4(tmp_22_fu_1182_p5),
    .dout(tmp_22_fu_1182_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state52) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((exitcond3_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state52)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state52);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end else if (((exitcond3_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_buf_r_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_1513)) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_buf_r_AWREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (buf_r_AWREADY == 1'b1))) begin
                ap_reg_ioackin_buf_r_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_buf_r_WREADY <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_1456_pp0_iter1_reg == 1'd0))) begin
            if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_reg_ioackin_buf_r_WREADY <= 1'b0;
            end else if (((1'b0 == ap_block_pp0_stage0_01001) & (buf_r_WREADY == 1'b1))) begin
                ap_reg_ioackin_buf_r_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_337_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_337_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_337_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_337_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_344_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_344_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_344_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_344_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_351_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_351_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_351_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_351_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_mandel_calc_fu_358_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state49)) begin
            grp_mandel_calc_fu_358_ap_start_reg <= 1'b1;
        end else if ((grp_mandel_calc_fu_358_ap_ready == 1'b1)) begin
            grp_mandel_calc_fu_358_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        i_op_assign_reg_326 <= 12'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1113_p2 == 1'd0))) begin
        i_op_assign_reg_326 <= i_fu_1119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        index_1_reg_316 <= index_reg_293;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1113_p2 == 1'd0))) begin
        index_1_reg_316 <= index_2_fu_1147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        index_reg_293 <= index_3_reg_1411;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        index_reg_293 <= 24'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        indvars_iv_reg_262 <= indvars_iv_next_fu_1279_p2;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        indvars_iv_reg_262 <= tmp_2_cast_fu_489_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        p_Val2_28_reg_272 <= p_0285_2_fu_1271_p3;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        p_Val2_28_reg_272 <= Y0_V_read_reg_1292;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        t_V_1_reg_282 <= line_V_reg_1352;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        t_V_1_reg_282 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state46) & (exitcond_fu_503_p2 == 1'd0))) begin
        tmp_V_1_reg_305 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_V_1_reg_305 <= pix_x_V_3_reg_1406;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        X0_V_read_reg_1297 <= X0_V;
        Y0_V_read_reg_1292 <= Y0_V;
        width_V_read_reg_1284 <= width_V;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_fu_1113_p2 == 1'd0))) begin
        buf_addr_reg_1495[23 : 0] <= tmp_35_fu_1153_p1[23 : 0];
        tmp_83_reg_1465 <= tmp_83_fu_1125_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond2_reg_1456 <= exitcond2_fu_1113_p2;
        exitcond2_reg_1456_pp0_iter1_reg <= exitcond2_reg_1456;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exitcond2_reg_1456_pp0_iter2_reg <= exitcond2_reg_1456_pp0_iter1_reg;
        exitcond2_reg_1456_pp0_iter3_reg <= exitcond2_reg_1456_pp0_iter2_reg;
        exitcond2_reg_1456_pp0_iter4_reg <= exitcond2_reg_1456_pp0_iter3_reg;
        exitcond2_reg_1456_pp0_iter5_reg <= exitcond2_reg_1456_pp0_iter4_reg;
        exitcond2_reg_1456_pp0_iter6_reg <= exitcond2_reg_1456_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        height_V_reg_1316 <= {{ret_V_fu_473_p2[13:2]}};
        lhs_V_8_cast_reg_1336 <= lhs_V_8_cast_fu_496_p1;
        rhs_V_4_reg_1344 <= rhs_V_4_fu_499_p1;
        tmp_2_cast_reg_1321[11 : 0] <= tmp_2_cast_fu_489_p1[11 : 0];
        tmp_31_reg_1328 <= tmp_31_fu_492_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
        index_3_reg_1411 <= index_3_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        line_V_reg_1352 <= line_V_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state47) & (exitcond3_fu_514_p2 == 1'd0))) begin
        newIndex2_reg_1371 <= {{tmp_V_1_reg_305[11:2]}};
        pix_x_V_3_reg_1406 <= pix_x_V_3_fu_599_p2;
        r_V_23_1_reg_1376 <= r_V_23_1_fu_552_p2;
        r_V_23_2_reg_1386 <= r_V_23_2_fu_571_p2;
        r_V_23_3_reg_1396 <= r_V_23_3_fu_590_p2;
        r_V_s_reg_1361 <= r_V_s_fu_523_p2;
        tmp_68_reg_1366 <= tmp_68_fu_528_p1;
        tmp_71_reg_1381 <= tmp_71_fu_557_p1;
        tmp_74_reg_1391 <= tmp_74_fu_576_p1;
        tmp_77_reg_1401 <= tmp_77_fu_595_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        p_0_1_reg_1421 <= p_0_1_fu_850_p3;
        p_0_2_reg_1426 <= p_0_2_fu_974_p3;
        p_0_3_reg_1431 <= p_0_3_fu_1098_p3;
        p_0_reg_1416 <= p_0_fu_726_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1456 == 1'd0))) begin
        tmp_22_reg_1501 <= tmp_22_fu_1182_p6;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
        tmp_33_reg_1436 <= grp_mandel_calc_fu_337_ap_return;
        tmp_80_1_reg_1441 <= grp_mandel_calc_fu_344_ap_return;
        tmp_80_2_reg_1446 <= grp_mandel_calc_fu_351_ap_return;
        tmp_80_3_reg_1451 <= grp_mandel_calc_fu_358_ap_return;
    end
end

always @ (*) begin
    if ((exitcond2_fu_1113_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state52 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state52 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_buf_r_AWREADY == 1'b0)) begin
        ap_sig_ioackin_buf_r_AWREADY = buf_r_AWREADY;
    end else begin
        ap_sig_ioackin_buf_r_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_buf_r_WREADY == 1'b0)) begin
        ap_sig_ioackin_buf_r_WREADY = buf_r_WREADY;
    end else begin
        ap_sig_ioackin_buf_r_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_buf_r_AWREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1456 == 1'd0))) begin
        buf_r_AWVALID = 1'b1;
    end else begin
        buf_r_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1456_pp0_iter6_reg == 1'd0))) begin
        buf_r_BREADY = 1'b1;
    end else begin
        buf_r_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_01001) & (ap_reg_ioackin_buf_r_WREADY == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_1456_pp0_iter1_reg == 1'd0))) begin
        buf_r_WVALID = 1'b1;
    end else begin
        buf_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1456 == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_AW = m_axi_buf_r_AWREADY;
    end else begin
        buf_r_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1456_pp0_iter6_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_B = m_axi_buf_r_BVALID;
    end else begin
        buf_r_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (exitcond2_reg_1456_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0))) begin
        buf_r_blk_n_W = m_axi_buf_r_WREADY;
    end else begin
        buf_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        grp_fu_383_ap_start = 1'b1;
    end else begin
        grp_fu_383_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_0_address0 = newIndex1_fu_1139_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_0_address0 = newIndex3_fu_1106_p1;
    end else begin
        mem_0_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_0_ce0 = 1'b1;
    end else begin
        mem_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_0_we0 = 1'b1;
    end else begin
        mem_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_1_address0 = newIndex1_fu_1139_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_1_address0 = newIndex3_fu_1106_p1;
    end else begin
        mem_1_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_1_ce0 = 1'b1;
    end else begin
        mem_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_1_we0 = 1'b1;
    end else begin
        mem_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_2_address0 = newIndex1_fu_1139_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_2_address0 = newIndex3_fu_1106_p1;
    end else begin
        mem_2_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_2_ce0 = 1'b1;
    end else begin
        mem_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_2_we0 = 1'b1;
    end else begin
        mem_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        mem_3_address0 = newIndex1_fu_1139_p1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_3_address0 = newIndex3_fu_1106_p1;
    end else begin
        mem_3_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state51) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        mem_3_ce0 = 1'b1;
    end else begin
        mem_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        mem_3_we0 = 1'b1;
    end else begin
        mem_3_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            if (((exitcond_fu_503_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state46))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state47;
            end
        end
        ap_ST_fsm_state47 : begin
            if (((exitcond3_fu_514_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state47))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state48;
            end
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            if (((1'b0 == ap_block_state50_on_subcall_done) & (1'b1 == ap_CS_fsm_state50))) begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state50;
            end
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_1113_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond2_fu_1113_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd52];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1456_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1456_pp0_iter6_reg == 1'd0)) | ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((buf_r_BVALID == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b1) & (exitcond2_reg_1456_pp0_iter6_reg == 1'd0)) | ((1'b1 == ap_block_state54_io) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((1'b1 == ap_block_state53_io) & (ap_enable_reg_pp0_iter1 == 1'b1)));
end

always @ (*) begin
    ap_block_state50_on_subcall_done = ((grp_mandel_calc_fu_358_ap_done == 1'b0) | (grp_mandel_calc_fu_351_ap_done == 1'b0) | (grp_mandel_calc_fu_344_ap_done == 1'b0) | (grp_mandel_calc_fu_337_ap_done == 1'b0));
end

assign ap_block_state52_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state53_io = ((ap_sig_ioackin_buf_r_AWREADY == 1'b0) & (exitcond2_reg_1456 == 1'd0));
end

assign ap_block_state53_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state54_io = ((ap_sig_ioackin_buf_r_WREADY == 1'b0) & (exitcond2_reg_1456_pp0_iter1_reg == 1'd0));
end

assign ap_block_state54_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state59_pp0_stage0_iter7 = ((buf_r_BVALID == 1'b0) & (exitcond2_reg_1456_pp0_iter6_reg == 1'd0));
end

always @ (*) begin
    ap_condition_1513 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (exitcond2_reg_1456 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign brmerge1_fu_433_p2 = (signbit_i_i_i_i27_0_s_fu_427_p2 | p_Result_20_fu_401_p3);

assign brmerge28_1_fu_774_p2 = (tmp_73_fu_750_p3 | p_not_1_fu_768_p2);

assign brmerge28_2_fu_898_p2 = (tmp_76_fu_874_p3 | p_not_2_fu_892_p2);

assign brmerge28_3_fu_1022_p2 = (tmp_79_fu_998_p3 | p_not_3_fu_1016_p2);

assign brmerge29_1_fu_804_p2 = (p_not2_1_fu_798_p2 | newsignbit_i_i_i_i_0_1_fu_792_p2);

assign brmerge29_2_fu_928_p2 = (p_not2_2_fu_922_p2 | newsignbit_i_i_i_i_0_2_fu_916_p2);

assign brmerge29_3_fu_1052_p2 = (p_not2_3_fu_1046_p2 | newsignbit_i_i_i_i_0_3_fu_1040_p2);

assign brmerge2_fu_650_p2 = (tmp_70_fu_626_p3 | p_not_fu_644_p2);

assign brmerge30_1_fu_816_p2 = (underflow_6_1_fu_810_p2 | overflow_6_1_fu_786_p2);

assign brmerge30_2_fu_940_p2 = (underflow_6_2_fu_934_p2 | overflow_6_2_fu_910_p2);

assign brmerge30_3_fu_1064_p2 = (underflow_6_3_fu_1058_p2 | overflow_6_3_fu_1034_p2);

assign brmerge31_1_fu_828_p2 = (p_707_not_1_fu_822_p2 | overflow_6_1_fu_786_p2);

assign brmerge31_2_fu_952_p2 = (p_707_not_2_fu_946_p2 | overflow_6_2_fu_910_p2);

assign brmerge31_3_fu_1076_p2 = (p_707_not_3_fu_1070_p2 | overflow_6_3_fu_1034_p2);

assign brmerge3_fu_680_p2 = (p_not2_fu_674_p2 | newsignbit_i_i_i_i_fu_668_p2);

assign brmerge4_fu_692_p2 = (underflow_6_fu_686_p2 | overflow_6_fu_662_p2);

assign brmerge5_fu_704_p2 = (p_707_not_fu_698_p2 | overflow_6_fu_662_p2);

assign brmerge6_fu_1237_p2 = (p_Result_22_fu_1217_p3 ^ p_Result_21_fu_1205_p3);

assign brmerge7_fu_1249_p2 = (signbit_i_i_0_not_fu_1243_p2 | p_Result_22_fu_1217_p3);

assign brmerge_fu_421_p2 = (p_Result_s_fu_389_p3 ^ p_Result_20_fu_401_p3);

assign delta_V_fu_455_p3 = ((brmerge1_fu_433_p2[0:0] === 1'b1) ? p_mux_fu_439_p3 : p_s_fu_447_p3);

assign exitcond2_fu_1113_p2 = ((index_1_reg_316 == indvars_iv_reg_262) ? 1'b1 : 1'b0);

assign exitcond3_fu_514_p2 = ((tmp_V_1_reg_305 == width_V_read_reg_1284) ? 1'b1 : 1'b0);

assign exitcond_fu_503_p2 = ((t_V_1_reg_282 == height_V_reg_1316) ? 1'b1 : 1'b0);

assign grp_fu_383_p0 = ($signed(lhs_V_fu_365_p1) - $signed(rhs_V_fu_369_p1));

assign grp_fu_383_p1 = grp_fu_383_p10;

assign grp_fu_383_p10 = width_V;

assign grp_mandel_calc_fu_337_ap_start = grp_mandel_calc_fu_337_ap_start_reg;

assign grp_mandel_calc_fu_344_ap_start = grp_mandel_calc_fu_344_ap_start_reg;

assign grp_mandel_calc_fu_351_ap_start = grp_mandel_calc_fu_351_ap_start_reg;

assign grp_mandel_calc_fu_358_ap_start = grp_mandel_calc_fu_358_ap_start_reg;

assign i_fu_1119_p2 = (i_op_assign_reg_326 + 12'd1);

assign index_2_fu_1147_p2 = (24'd1 + index_1_reg_316);

assign index_3_fu_605_p2 = (tmp_2_cast_reg_1321 + index_reg_293);

assign indvars_iv_next_fu_1279_p2 = (tmp_2_cast_reg_1321 + indvars_iv_reg_262);

assign lhs_V_3_fu_1196_p1 = $signed(p_Val2_28_reg_272);

assign lhs_V_7_cast_fu_463_p1 = width_V_read_reg_1284;

assign lhs_V_8_cast_fu_496_p1 = X0_V_read_reg_1297;

assign lhs_V_fu_365_p1 = $signed(X1_V);

assign line_V_fu_508_p2 = (t_V_1_reg_282 + 12'd1);

assign newIndex1_fu_1139_p1 = newIndex_fu_1129_p4;

assign newIndex3_fu_1106_p1 = newIndex2_reg_1371;

assign newIndex_fu_1129_p4 = {{i_op_assign_reg_326[11:2]}};

assign newsignbit_i_i_i_i_0_1_fu_792_p2 = (tmp_73_fu_750_p3 ^ 1'd1);

assign newsignbit_i_i_i_i_0_2_fu_916_p2 = (tmp_76_fu_874_p3 ^ 1'd1);

assign newsignbit_i_i_i_i_0_3_fu_1040_p2 = (tmp_79_fu_998_p3 ^ 1'd1);

assign newsignbit_i_i_i_i_fu_668_p2 = (tmp_70_fu_626_p3 ^ 1'd1);

assign overflow_6_1_fu_786_p2 = (tmp_77_1_fu_780_p2 & brmerge28_1_fu_774_p2);

assign overflow_6_2_fu_910_p2 = (tmp_77_2_fu_904_p2 & brmerge28_2_fu_898_p2);

assign overflow_6_3_fu_1034_p2 = (tmp_77_3_fu_1028_p2 & brmerge28_3_fu_1022_p2);

assign overflow_6_fu_662_p2 = (tmp_32_fu_656_p2 & brmerge2_fu_650_p2);

assign p_0285_2_fu_1271_p3 = ((brmerge7_fu_1249_p2[0:0] === 1'b1) ? p_mux7_fu_1255_p3 : p_2_fu_1263_p3);

assign p_0_1_fu_850_p3 = ((brmerge31_1_fu_828_p2[0:0] === 1'b1) ? p_mux6_1_fu_834_p3 : p_9_1_fu_842_p3);

assign p_0_2_fu_974_p3 = ((brmerge31_2_fu_952_p2[0:0] === 1'b1) ? p_mux6_2_fu_958_p3 : p_9_2_fu_966_p3);

assign p_0_3_fu_1098_p3 = ((brmerge31_3_fu_1076_p2[0:0] === 1'b1) ? p_mux6_3_fu_1082_p3 : p_9_3_fu_1090_p3);

assign p_0_fu_726_p3 = ((brmerge5_fu_704_p2[0:0] === 1'b1) ? p_mux6_fu_710_p3 : p_9_fu_718_p3);

assign p_2_fu_1263_p3 = ((underflow_7_fu_1231_p2[0:0] === 1'b1) ? 40'd549755813888 : y_V_fu_1213_p1);

assign p_707_not_1_fu_822_p2 = (underflow_6_1_fu_810_p2 ^ 1'd1);

assign p_707_not_2_fu_946_p2 = (underflow_6_2_fu_934_p2 ^ 1'd1);

assign p_707_not_3_fu_1070_p2 = (underflow_6_3_fu_1058_p2 ^ 1'd1);

assign p_707_not_fu_698_p2 = (underflow_6_fu_686_p2 ^ 1'd1);

assign p_9_1_fu_842_p3 = ((underflow_6_1_fu_810_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_8_1_fu_746_p2);

assign p_9_2_fu_966_p3 = ((underflow_6_2_fu_934_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_8_2_fu_870_p2);

assign p_9_3_fu_1090_p3 = ((underflow_6_3_fu_1058_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_8_3_fu_994_p2);

assign p_9_fu_718_p3 = ((underflow_6_fu_686_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_8_fu_622_p2);

assign p_Result_20_fu_401_p3 = grp_fu_383_p2[32'd39];

assign p_Result_21_fu_1205_p3 = ret_V_14_fu_1200_p2[32'd40];

assign p_Result_22_fu_1217_p3 = ret_V_14_fu_1200_p2[32'd39];

assign p_Result_s_fu_389_p3 = grp_fu_383_p2[32'd40];

assign p_Val2_27_fu_397_p1 = grp_fu_383_p2[39:0];

assign p_Val2_8_1_fu_746_p2 = ($signed(X0_V_read_reg_1297) + $signed(tmp_71_reg_1381));

assign p_Val2_8_2_fu_870_p2 = ($signed(X0_V_read_reg_1297) + $signed(tmp_74_reg_1391));

assign p_Val2_8_3_fu_994_p2 = ($signed(X0_V_read_reg_1297) + $signed(tmp_77_reg_1401));

assign p_Val2_8_fu_622_p2 = ($signed(X0_V_read_reg_1297) + $signed(tmp_68_reg_1366));

assign p_mux6_1_fu_834_p3 = ((brmerge30_1_fu_816_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_8_1_fu_746_p2);

assign p_mux6_2_fu_958_p3 = ((brmerge30_2_fu_940_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_8_2_fu_870_p2);

assign p_mux6_3_fu_1082_p3 = ((brmerge30_3_fu_1064_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_8_3_fu_994_p2);

assign p_mux6_fu_710_p3 = ((brmerge4_fu_692_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_8_fu_622_p2);

assign p_mux7_fu_1255_p3 = ((brmerge6_fu_1237_p2[0:0] === 1'b1) ? 40'd549755813887 : y_V_fu_1213_p1);

assign p_mux_fu_439_p3 = ((brmerge_fu_421_p2[0:0] === 1'b1) ? 40'd549755813887 : p_Val2_27_fu_397_p1);

assign p_not2_1_fu_798_p2 = ((tmp_19_fu_758_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not2_2_fu_922_p2 = ((tmp_20_fu_882_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not2_3_fu_1046_p2 = ((tmp_21_fu_1006_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not2_fu_674_p2 = ((tmp_18_fu_634_p4 != 12'd4095) ? 1'b1 : 1'b0);

assign p_not_1_fu_768_p2 = ((tmp_19_fu_758_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_not_2_fu_892_p2 = ((tmp_20_fu_882_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_not_3_fu_1016_p2 = ((tmp_21_fu_1006_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_not_fu_644_p2 = ((tmp_18_fu_634_p4 != 12'd0) ? 1'b1 : 1'b0);

assign p_s_fu_447_p3 = ((underflow_fu_415_p2[0:0] === 1'b1) ? 40'd549755813888 : p_Val2_27_fu_397_p1);

assign p_shl_fu_466_p3 = {{width_V_read_reg_1284}, {2'd0}};

assign pix_x_V_1_fu_561_p2 = (tmp_V_1_reg_305 | 12'd2);

assign pix_x_V_2_fu_580_p2 = (tmp_V_1_reg_305 | 12'd3);

assign pix_x_V_3_fu_599_p2 = (12'd4 + tmp_V_1_reg_305);

assign pix_x_V_s_fu_542_p2 = (tmp_V_1_reg_305 | 12'd1);

assign r_V_23_1_fu_552_p0 = r_V_23_1_fu_552_p00;

assign r_V_23_1_fu_552_p00 = pix_x_V_s_fu_542_p2;

assign r_V_23_1_fu_552_p1 = tmp_31_reg_1328;

assign r_V_23_1_fu_552_p2 = ($signed({{1'b0}, {r_V_23_1_fu_552_p0}}) * $signed(r_V_23_1_fu_552_p1));

assign r_V_23_2_fu_571_p0 = r_V_23_2_fu_571_p00;

assign r_V_23_2_fu_571_p00 = pix_x_V_1_fu_561_p2;

assign r_V_23_2_fu_571_p1 = tmp_31_reg_1328;

assign r_V_23_2_fu_571_p2 = ($signed({{1'b0}, {r_V_23_2_fu_571_p0}}) * $signed(r_V_23_2_fu_571_p1));

assign r_V_23_3_fu_590_p0 = r_V_23_3_fu_590_p00;

assign r_V_23_3_fu_590_p00 = pix_x_V_2_fu_580_p2;

assign r_V_23_3_fu_590_p1 = tmp_31_reg_1328;

assign r_V_23_3_fu_590_p2 = ($signed({{1'b0}, {r_V_23_3_fu_590_p0}}) * $signed(r_V_23_3_fu_590_p1));

assign r_V_s_fu_523_p0 = r_V_s_fu_523_p00;

assign r_V_s_fu_523_p00 = tmp_V_1_reg_305;

assign r_V_s_fu_523_p1 = tmp_31_reg_1328;

assign r_V_s_fu_523_p2 = ($signed({{1'b0}, {r_V_s_fu_523_p0}}) * $signed(r_V_s_fu_523_p1));

assign ret_V_14_fu_1200_p2 = ($signed(lhs_V_3_fu_1196_p1) - $signed(rhs_V_4_reg_1344));

assign ret_V_18_1_fu_734_p2 = ($signed(lhs_V_8_cast_reg_1336) + $signed(r_V_23_1_reg_1376));

assign ret_V_18_2_fu_858_p2 = ($signed(lhs_V_8_cast_reg_1336) + $signed(r_V_23_2_reg_1386));

assign ret_V_18_3_fu_982_p2 = ($signed(lhs_V_8_cast_reg_1336) + $signed(r_V_23_3_reg_1396));

assign ret_V_fu_473_p2 = (p_shl_fu_466_p3 - lhs_V_7_cast_fu_463_p1);

assign ret_V_s_fu_610_p2 = ($signed(lhs_V_8_cast_reg_1336) + $signed(r_V_s_reg_1361));

assign rhs_V_4_fu_499_p1 = delta_V_fu_455_p3;

assign rhs_V_fu_369_p0 = X0_V;

assign rhs_V_fu_369_p1 = rhs_V_fu_369_p0;

assign signbit_i_i_0_not_fu_1243_p2 = (p_Result_21_fu_1205_p3 ^ 1'd1);

assign signbit_i_i_i_i27_0_s_fu_427_p2 = (p_Result_s_fu_389_p3 ^ 1'd1);

assign tmp_18_fu_634_p4 = {{ret_V_s_fu_610_p2[51:40]}};

assign tmp_19_fu_758_p4 = {{ret_V_18_1_fu_734_p2[51:40]}};

assign tmp_20_fu_882_p4 = {{ret_V_18_2_fu_858_p2[51:40]}};

assign tmp_21_fu_1006_p4 = {{ret_V_18_3_fu_982_p2[51:40]}};

assign tmp_22_fu_1182_p1 = mem_0_q0;

assign tmp_22_fu_1182_p2 = mem_1_q0;

assign tmp_22_fu_1182_p3 = mem_2_q0;

assign tmp_22_fu_1182_p4 = mem_3_q0;

assign tmp_22_fu_1182_p5 = tmp_83_reg_1465;

assign tmp_2_cast_fu_489_p1 = width_V_read_reg_1284;

assign tmp_31_fu_492_p1 = delta_V_fu_455_p3;

assign tmp_32_fu_656_p2 = (tmp_69_fu_614_p3 ^ 1'd1);

assign tmp_34_fu_1225_p2 = (p_Result_22_fu_1217_p3 ^ 1'd1);

assign tmp_35_fu_1153_p1 = index_1_reg_316;

assign tmp_68_fu_528_p1 = r_V_s_fu_523_p2[39:0];

assign tmp_69_fu_614_p3 = ret_V_s_fu_610_p2[32'd51];

assign tmp_70_fu_626_p3 = p_Val2_8_fu_622_p2[32'd39];

assign tmp_71_fu_557_p1 = r_V_23_1_fu_552_p2[39:0];

assign tmp_72_fu_738_p3 = ret_V_18_1_fu_734_p2[32'd51];

assign tmp_73_fu_750_p3 = p_Val2_8_1_fu_746_p2[32'd39];

assign tmp_74_fu_576_p1 = r_V_23_2_fu_571_p2[39:0];

assign tmp_75_fu_862_p3 = ret_V_18_2_fu_858_p2[32'd51];

assign tmp_76_fu_874_p3 = p_Val2_8_2_fu_870_p2[32'd39];

assign tmp_77_1_fu_780_p2 = (tmp_72_fu_738_p3 ^ 1'd1);

assign tmp_77_2_fu_904_p2 = (tmp_75_fu_862_p3 ^ 1'd1);

assign tmp_77_3_fu_1028_p2 = (tmp_78_fu_986_p3 ^ 1'd1);

assign tmp_77_fu_595_p1 = r_V_23_3_fu_590_p2[39:0];

assign tmp_78_fu_986_p3 = ret_V_18_3_fu_982_p2[32'd51];

assign tmp_79_fu_998_p3 = p_Val2_8_3_fu_994_p2[32'd39];

assign tmp_83_fu_1125_p1 = i_op_assign_reg_326[1:0];

assign tmp_s_fu_409_p2 = (p_Result_20_fu_401_p3 ^ 1'd1);

assign underflow_6_1_fu_810_p2 = (tmp_72_fu_738_p3 & brmerge29_1_fu_804_p2);

assign underflow_6_2_fu_934_p2 = (tmp_75_fu_862_p3 & brmerge29_2_fu_928_p2);

assign underflow_6_3_fu_1058_p2 = (tmp_78_fu_986_p3 & brmerge29_3_fu_1052_p2);

assign underflow_6_fu_686_p2 = (tmp_69_fu_614_p3 & brmerge3_fu_680_p2);

assign underflow_7_fu_1231_p2 = (tmp_34_fu_1225_p2 & p_Result_21_fu_1205_p3);

assign underflow_fu_415_p2 = (tmp_s_fu_409_p2 & p_Result_s_fu_389_p3);

assign y_V_fu_1213_p1 = ret_V_14_fu_1200_p2[39:0];

always @ (posedge ap_clk) begin
    tmp_2_cast_reg_1321[23:12] <= 12'b000000000000;
    buf_addr_reg_1495[31:24] <= 8'b00000000;
end

endmodule //calc

// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2019.1 (win64) Build 2552052 Fri May 24 14:49:42 MDT 2019
// Date        : Wed Jun 26 10:02:10 2019
// Host        : AndrewSi64 running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               c:/Users/andrewsi/Documents/GitHub/MandelViewer/MandelRTL/project_1/project_1.srcs/sources_1/bd/Fast_IP_Clock/ip/Fast_IP_Clock_system_cache_0_0/Fast_IP_Clock_system_cache_0_0_sim_netlist.v
// Design      : Fast_IP_Clock_system_cache_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7a100tcsg324-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "Fast_IP_Clock_system_cache_0_0,system_cache,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "system_cache,Vivado 2019.1" *) 
(* NotValidForBitStream *)
module Fast_IP_Clock_system_cache_0_0
   (ACLK,
    ARESETN,
    S0_AXI_AWID,
    S0_AXI_AWADDR,
    S0_AXI_AWLEN,
    S0_AXI_AWSIZE,
    S0_AXI_AWBURST,
    S0_AXI_AWLOCK,
    S0_AXI_AWCACHE,
    S0_AXI_AWPROT,
    S0_AXI_AWQOS,
    S0_AXI_AWVALID,
    S0_AXI_AWREADY,
    S0_AXI_WDATA,
    S0_AXI_WSTRB,
    S0_AXI_WLAST,
    S0_AXI_WVALID,
    S0_AXI_WREADY,
    S0_AXI_BRESP,
    S0_AXI_BID,
    S0_AXI_BVALID,
    S0_AXI_BREADY,
    S0_AXI_ARID,
    S0_AXI_ARADDR,
    S0_AXI_ARLEN,
    S0_AXI_ARSIZE,
    S0_AXI_ARBURST,
    S0_AXI_ARLOCK,
    S0_AXI_ARCACHE,
    S0_AXI_ARPROT,
    S0_AXI_ARQOS,
    S0_AXI_ARVALID,
    S0_AXI_ARREADY,
    S0_AXI_RID,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    S0_AXI_RLAST,
    S0_AXI_RVALID,
    S0_AXI_RREADY,
    S0_AXI_GEN_AWID,
    S0_AXI_GEN_AWADDR,
    S0_AXI_GEN_AWLEN,
    S0_AXI_GEN_AWSIZE,
    S0_AXI_GEN_AWBURST,
    S0_AXI_GEN_AWLOCK,
    S0_AXI_GEN_AWCACHE,
    S0_AXI_GEN_AWPROT,
    S0_AXI_GEN_AWQOS,
    S0_AXI_GEN_AWVALID,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_WDATA,
    S0_AXI_GEN_WSTRB,
    S0_AXI_GEN_WLAST,
    S0_AXI_GEN_WVALID,
    S0_AXI_GEN_WREADY,
    S0_AXI_GEN_BRESP,
    S0_AXI_GEN_BID,
    S0_AXI_GEN_BVALID,
    S0_AXI_GEN_BREADY,
    S0_AXI_GEN_ARID,
    S0_AXI_GEN_ARADDR,
    S0_AXI_GEN_ARLEN,
    S0_AXI_GEN_ARSIZE,
    S0_AXI_GEN_ARBURST,
    S0_AXI_GEN_ARLOCK,
    S0_AXI_GEN_ARCACHE,
    S0_AXI_GEN_ARPROT,
    S0_AXI_GEN_ARQOS,
    S0_AXI_GEN_ARVALID,
    S0_AXI_GEN_ARREADY,
    S0_AXI_GEN_RID,
    S0_AXI_GEN_RDATA,
    S0_AXI_GEN_RRESP,
    S0_AXI_GEN_RLAST,
    S0_AXI_GEN_RVALID,
    S0_AXI_GEN_RREADY,
    M0_AXI_AWID,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_AWLOCK,
    M0_AXI_AWCACHE,
    M0_AXI_AWPROT,
    M0_AXI_AWQOS,
    M0_AXI_AWVALID,
    M0_AXI_AWREADY,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_WLAST,
    M0_AXI_WVALID,
    M0_AXI_WREADY,
    M0_AXI_BRESP,
    M0_AXI_BID,
    M0_AXI_BVALID,
    M0_AXI_BREADY,
    M0_AXI_ARID,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    M0_AXI_ARLOCK,
    M0_AXI_ARCACHE,
    M0_AXI_ARPROT,
    M0_AXI_ARQOS,
    M0_AXI_ARVALID,
    M0_AXI_ARREADY,
    M0_AXI_RID,
    M0_AXI_RDATA,
    M0_AXI_RRESP,
    M0_AXI_RLAST,
    M0_AXI_RVALID,
    M0_AXI_RREADY);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.ACLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME CLK.ACLK, ASSOCIATED_BUSIF S0_AXI:S0_ACE:S1_AXI:S1_ACE:S2_AXI:S2_ACE:S3_AXI:S3_ACE:S4_AXI:S4_ACE:S5_AXI:S5_ACE:S6_AXI:S6_ACE:S7_AXI:S7_ACE:S8_AXI:S8_ACE:S9_AXI:S9_ACE:S10_AXI:S10_ACE:S11_AXI:S11_ACE:S12_AXI:S12_ACE:S13_AXI:S13_ACE:S14_AXI:S14_ACE:S15_AXI:S15_ACE:S0_AXI_GEN:S1_AXI_GEN:S2_AXI_GEN:S3_AXI_GEN:S4_AXI_GEN:S5_AXI_GEN:S6_AXI_GEN:S7_AXI_GEN:S8_AXI_GEN:S9_AXI_GEN:S10_AXI_GEN:S11_AXI_GEN:S12_AXI_GEN:S13_AXI_GEN:S14_AXI_GEN:S15_AXI_GEN:S_AXI_CTRL:M0_AXI:M1_AXI:M2_AXI:M3_AXI:M0_ACE, ASSOCIATED_RESET ARESETN, FREQ_HZ 100000000, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, INSERT_VIP 0" *) input ACLK;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.ARESETN RST" *) (* x_interface_parameter = "XIL_INTERFACENAME RST.ARESETN, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input ARESETN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME S0_AXI, ADDR_WIDTH 24, ID_WIDTH 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, MAX_BURST_LENGTH 256, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [0:0]S0_AXI_AWID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWADDR" *) input [23:0]S0_AXI_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWLEN" *) input [7:0]S0_AXI_AWLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWSIZE" *) input [2:0]S0_AXI_AWSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWBURST" *) input [1:0]S0_AXI_AWBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWLOCK" *) input S0_AXI_AWLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWCACHE" *) input [3:0]S0_AXI_AWCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWPROT" *) input [2:0]S0_AXI_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWQOS" *) input [3:0]S0_AXI_AWQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWVALID" *) input S0_AXI_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWREADY" *) output S0_AXI_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WDATA" *) input [31:0]S0_AXI_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WSTRB" *) input [3:0]S0_AXI_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WLAST" *) input S0_AXI_WLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WVALID" *) input S0_AXI_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WREADY" *) output S0_AXI_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BRESP" *) output [1:0]S0_AXI_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BID" *) output [0:0]S0_AXI_BID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BVALID" *) output S0_AXI_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BREADY" *) input S0_AXI_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARID" *) input [0:0]S0_AXI_ARID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARADDR" *) input [23:0]S0_AXI_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARLEN" *) input [7:0]S0_AXI_ARLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARSIZE" *) input [2:0]S0_AXI_ARSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARBURST" *) input [1:0]S0_AXI_ARBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARLOCK" *) input S0_AXI_ARLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARCACHE" *) input [3:0]S0_AXI_ARCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARPROT" *) input [2:0]S0_AXI_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARQOS" *) input [3:0]S0_AXI_ARQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARVALID" *) input S0_AXI_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARREADY" *) output S0_AXI_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RID" *) output [0:0]S0_AXI_RID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RDATA" *) output [31:0]S0_AXI_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RRESP" *) output [1:0]S0_AXI_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RLAST" *) output S0_AXI_RLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RVALID" *) output S0_AXI_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RREADY" *) input S0_AXI_RREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME S0_AXI_GEN, ADDR_WIDTH 24, ID_WIDTH 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, MAX_BURST_LENGTH 256, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) input [0:0]S0_AXI_GEN_AWID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWADDR" *) input [23:0]S0_AXI_GEN_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWLEN" *) input [7:0]S0_AXI_GEN_AWLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWSIZE" *) input [2:0]S0_AXI_GEN_AWSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWBURST" *) input [1:0]S0_AXI_GEN_AWBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWLOCK" *) input S0_AXI_GEN_AWLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWCACHE" *) input [3:0]S0_AXI_GEN_AWCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWPROT" *) input [2:0]S0_AXI_GEN_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWQOS" *) input [3:0]S0_AXI_GEN_AWQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWVALID" *) input S0_AXI_GEN_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN AWREADY" *) output S0_AXI_GEN_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN WDATA" *) input [31:0]S0_AXI_GEN_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN WSTRB" *) input [3:0]S0_AXI_GEN_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN WLAST" *) input S0_AXI_GEN_WLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN WVALID" *) input S0_AXI_GEN_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN WREADY" *) output S0_AXI_GEN_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN BRESP" *) output [1:0]S0_AXI_GEN_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN BID" *) output [0:0]S0_AXI_GEN_BID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN BVALID" *) output S0_AXI_GEN_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN BREADY" *) input S0_AXI_GEN_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARID" *) input [0:0]S0_AXI_GEN_ARID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARADDR" *) input [23:0]S0_AXI_GEN_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARLEN" *) input [7:0]S0_AXI_GEN_ARLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARSIZE" *) input [2:0]S0_AXI_GEN_ARSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARBURST" *) input [1:0]S0_AXI_GEN_ARBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARLOCK" *) input S0_AXI_GEN_ARLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARCACHE" *) input [3:0]S0_AXI_GEN_ARCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARPROT" *) input [2:0]S0_AXI_GEN_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARQOS" *) input [3:0]S0_AXI_GEN_ARQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARVALID" *) input S0_AXI_GEN_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN ARREADY" *) output S0_AXI_GEN_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN RID" *) output [0:0]S0_AXI_GEN_RID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN RDATA" *) output [31:0]S0_AXI_GEN_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN RRESP" *) output [1:0]S0_AXI_GEN_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN RLAST" *) output S0_AXI_GEN_RLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN RVALID" *) output S0_AXI_GEN_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI_GEN RREADY" *) input S0_AXI_GEN_RREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME M0_AXI, ADDR_WIDTH 24, ID_WIDTH 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, MAX_BURST_LENGTH 16, HAS_BURST 1, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 100000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, PHASE 0.0, CLK_DOMAIN /clk_wiz_0_clk_out1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0, INSERT_VIP 0" *) output [0:0]M0_AXI_AWID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWADDR" *) output [23:0]M0_AXI_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWLEN" *) output [7:0]M0_AXI_AWLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWSIZE" *) output [2:0]M0_AXI_AWSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWBURST" *) output [1:0]M0_AXI_AWBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWLOCK" *) output M0_AXI_AWLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWCACHE" *) output [3:0]M0_AXI_AWCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWPROT" *) output [2:0]M0_AXI_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWQOS" *) output [3:0]M0_AXI_AWQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWVALID" *) output M0_AXI_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWREADY" *) input M0_AXI_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WDATA" *) output [31:0]M0_AXI_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WSTRB" *) output [3:0]M0_AXI_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WLAST" *) output M0_AXI_WLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WVALID" *) output M0_AXI_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WREADY" *) input M0_AXI_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BRESP" *) input [1:0]M0_AXI_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BID" *) input [0:0]M0_AXI_BID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BVALID" *) input M0_AXI_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BREADY" *) output M0_AXI_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARID" *) output [0:0]M0_AXI_ARID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARADDR" *) output [23:0]M0_AXI_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARLEN" *) output [7:0]M0_AXI_ARLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARSIZE" *) output [2:0]M0_AXI_ARSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARBURST" *) output [1:0]M0_AXI_ARBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARLOCK" *) output M0_AXI_ARLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARCACHE" *) output [3:0]M0_AXI_ARCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARPROT" *) output [2:0]M0_AXI_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARQOS" *) output [3:0]M0_AXI_ARQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARVALID" *) output M0_AXI_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARREADY" *) input M0_AXI_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RID" *) input [0:0]M0_AXI_RID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RDATA" *) input [31:0]M0_AXI_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RRESP" *) input [1:0]M0_AXI_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RLAST" *) input M0_AXI_RLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RVALID" *) input M0_AXI_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RREADY" *) output M0_AXI_RREADY;

  wire ACLK;
  wire ARESETN;
  wire [23:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [3:0]M0_AXI_ARCACHE;
  wire [0:0]M0_AXI_ARID;
  wire [7:0]M0_AXI_ARLEN;
  wire M0_AXI_ARLOCK;
  wire [2:0]M0_AXI_ARPROT;
  wire [3:0]M0_AXI_ARQOS;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire M0_AXI_ARVALID;
  wire [23:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [3:0]M0_AXI_AWCACHE;
  wire [0:0]M0_AXI_AWID;
  wire [7:0]M0_AXI_AWLEN;
  wire M0_AXI_AWLOCK;
  wire [2:0]M0_AXI_AWPROT;
  wire [3:0]M0_AXI_AWQOS;
  wire M0_AXI_AWREADY;
  wire [2:0]M0_AXI_AWSIZE;
  wire M0_AXI_AWVALID;
  wire [0:0]M0_AXI_BID;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire [0:0]M0_AXI_RID;
  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire [1:0]M0_AXI_RRESP;
  wire M0_AXI_RVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire M0_AXI_WVALID;
  wire [23:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [3:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARID;
  wire [7:0]S0_AXI_ARLEN;
  wire S0_AXI_ARLOCK;
  wire [2:0]S0_AXI_ARPROT;
  wire [3:0]S0_AXI_ARQOS;
  wire S0_AXI_ARREADY;
  wire [2:0]S0_AXI_ARSIZE;
  wire S0_AXI_ARVALID;
  wire [23:0]S0_AXI_AWADDR;
  wire [1:0]S0_AXI_AWBURST;
  wire [3:0]S0_AXI_AWCACHE;
  wire [0:0]S0_AXI_AWID;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWLOCK;
  wire [2:0]S0_AXI_AWPROT;
  wire [3:0]S0_AXI_AWQOS;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire S0_AXI_BVALID;
  wire [23:0]S0_AXI_GEN_ARADDR;
  wire [1:0]S0_AXI_GEN_ARBURST;
  wire [3:0]S0_AXI_GEN_ARCACHE;
  wire [0:0]S0_AXI_GEN_ARID;
  wire [7:0]S0_AXI_GEN_ARLEN;
  wire S0_AXI_GEN_ARLOCK;
  wire [2:0]S0_AXI_GEN_ARPROT;
  wire [3:0]S0_AXI_GEN_ARQOS;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARVALID;
  wire [23:0]S0_AXI_GEN_AWADDR;
  wire [1:0]S0_AXI_GEN_AWBURST;
  wire [3:0]S0_AXI_GEN_AWCACHE;
  wire [0:0]S0_AXI_GEN_AWID;
  wire [7:0]S0_AXI_GEN_AWLEN;
  wire S0_AXI_GEN_AWLOCK;
  wire [2:0]S0_AXI_GEN_AWPROT;
  wire [3:0]S0_AXI_GEN_AWQOS;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWVALID;
  wire [0:0]S0_AXI_GEN_BID;
  wire S0_AXI_GEN_BREADY;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire S0_AXI_GEN_BVALID;
  wire [31:0]S0_AXI_GEN_RDATA;
  wire [0:0]S0_AXI_GEN_RID;
  wire S0_AXI_GEN_RLAST;
  wire S0_AXI_GEN_RREADY;
  wire [1:0]S0_AXI_GEN_RRESP;
  wire S0_AXI_GEN_RVALID;
  wire [31:0]S0_AXI_GEN_WDATA;
  wire S0_AXI_GEN_WLAST;
  wire S0_AXI_GEN_WREADY;
  wire [3:0]S0_AXI_GEN_WSTRB;
  wire S0_AXI_GEN_WVALID;
  wire [31:0]S0_AXI_RDATA;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire NLW_U0_M0_AXI_ACREADY_UNCONNECTED;
  wire NLW_U0_M0_AXI_CDLAST_UNCONNECTED;
  wire NLW_U0_M0_AXI_CDVALID_UNCONNECTED;
  wire NLW_U0_M0_AXI_CRVALID_UNCONNECTED;
  wire NLW_U0_M0_AXI_RACK_UNCONNECTED;
  wire NLW_U0_M0_AXI_WACK_UNCONNECTED;
  wire NLW_U0_M1_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M1_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M1_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M1_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M1_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M1_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M1_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M1_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_M2_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M2_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M2_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M2_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M2_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M2_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M2_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M2_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_M3_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M3_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M3_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M3_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M3_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M3_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M3_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M3_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_S0_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S0_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S0_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S10_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S11_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S12_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S13_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S14_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S15_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S1_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S2_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S3_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S4_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S5_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S6_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S7_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S8_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S9_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_ARREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_AWREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_BVALID_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_RVALID_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_WREADY_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_ARDOMAIN_UNCONNECTED;
  wire [3:0]NLW_U0_M0_AXI_ARSNOOP_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_AWDOMAIN_UNCONNECTED;
  wire [2:0]NLW_U0_M0_AXI_AWSNOOP_UNCONNECTED;
  wire [31:0]NLW_U0_M0_AXI_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M0_AXI_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M1_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M1_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M1_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M1_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M1_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M1_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M2_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M2_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M2_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M2_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M2_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M2_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M3_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M3_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M3_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M3_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M3_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M3_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_WSTRB_UNCONNECTED;
  wire [23:0]NLW_U0_S0_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S0_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S0_AXI_ACSNOOP_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S10_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S10_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S11_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S11_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S12_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S12_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S13_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S13_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S14_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S14_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S15_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S15_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S1_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S1_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S1_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S1_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S1_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S1_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S1_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S1_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S1_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S1_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S1_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S1_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S1_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S2_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S2_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S3_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S3_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S4_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S4_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S5_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S5_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S6_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S6_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S7_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S7_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S8_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S8_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S9_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S9_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_RRESP_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_CTRL_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S_AXI_CTRL_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_CTRL_RRESP_UNCONNECTED;

  (* C_BASEADDR = "64'b0000000000000000000000000000000010000000000000000000000000000000" *) 
  (* C_CACHE_BLOCKS = "1" *) 
  (* C_CACHE_DATA_WIDTH = "32" *) 
  (* C_CACHE_LINE_LENGTH = "16" *) 
  (* C_CACHE_SIZE = "32768" *) 
  (* C_ENABLE_COHERENCY = "0" *) 
  (* C_ENABLE_CTRL = "0" *) 
  (* C_ENABLE_ERROR_HANDLING = "0" *) 
  (* C_ENABLE_EXCLUSIVE = "0" *) 
  (* C_ENABLE_NON_SECURE = "0" *) 
  (* C_ENABLE_PEER_PORT_DATA = "0" *) 
  (* C_ENABLE_STATISTICS = "0" *) 
  (* C_ENABLE_VERSION_REGISTER = "0" *) 
  (* C_FAMILY = "artix7" *) 
  (* C_FREQ = "0" *) 
  (* C_GEN_MATCH_Lx_CACHE = "0" *) 
  (* C_HIGHADDR = "64'b0000000000000000000000000000000010000000111111111111111111111111" *) 
  (* C_INSTANCE = "system_cache" *) 
  (* C_KEEP_SHARED_WRITE = "1" *) 
  (* C_Lx_CACHE_LINE_LENGTH = "8" *) 
  (* C_Lx_CACHE_SIZE = "8192" *) 
  (* C_Lx_NUM_WAYS = "1" *) 
  (* C_M0_AXI_ADDR_WIDTH = "24" *) 
  (* C_M0_AXI_DATA_WIDTH = "32" *) 
  (* C_M0_AXI_RRESP_WIDTH = "2" *) 
  (* C_M0_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_M1_AXI_ADDR_WIDTH = "32" *) 
  (* C_M1_AXI_DATA_WIDTH = "32" *) 
  (* C_M1_AXI_RRESP_WIDTH = "2" *) 
  (* C_M1_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_M2_AXI_ADDR_WIDTH = "32" *) 
  (* C_M2_AXI_DATA_WIDTH = "32" *) 
  (* C_M2_AXI_RRESP_WIDTH = "2" *) 
  (* C_M2_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_M3_AXI_ADDR_WIDTH = "32" *) 
  (* C_M3_AXI_DATA_WIDTH = "32" *) 
  (* C_M3_AXI_RRESP_WIDTH = "2" *) 
  (* C_M3_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_NUM_GENERIC_PORTS = "1" *) 
  (* C_NUM_MASTER_PORTS = "1" *) 
  (* C_NUM_OPTIMIZED_PORTS = "1" *) 
  (* C_NUM_WAYS = "4" *) 
  (* C_READ_EXCLUSIVE_CLEAN = "1" *) 
  (* C_READ_ONLY_UNIQUE = "0" *) 
  (* C_S0_AXI_ADDR_WIDTH = "24" *) 
  (* C_S0_AXI_DATA_WIDTH = "32" *) 
  (* C_S0_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S0_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S0_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_ADDR_WIDTH = "24" *) 
  (* C_S0_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S0_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S0_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S0_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S0_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S0_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S0_AXI_ID_WIDTH = "1" *) 
  (* C_S0_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S0_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S0_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_RRESP_WIDTH = "2" *) 
  (* C_S0_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S0_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S10_AXI_ADDR_WIDTH = "32" *) 
  (* C_S10_AXI_DATA_WIDTH = "32" *) 
  (* C_S10_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S10_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S10_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S10_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S10_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S10_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S10_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S10_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S10_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S10_AXI_ID_WIDTH = "1" *) 
  (* C_S10_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S10_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S10_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_RRESP_WIDTH = "2" *) 
  (* C_S10_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S10_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S11_AXI_ADDR_WIDTH = "32" *) 
  (* C_S11_AXI_DATA_WIDTH = "32" *) 
  (* C_S11_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S11_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S11_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S11_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S11_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S11_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S11_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S11_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S11_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S11_AXI_ID_WIDTH = "1" *) 
  (* C_S11_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S11_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S11_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_RRESP_WIDTH = "2" *) 
  (* C_S11_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S11_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S12_AXI_ADDR_WIDTH = "32" *) 
  (* C_S12_AXI_DATA_WIDTH = "32" *) 
  (* C_S12_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S12_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S12_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S12_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S12_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S12_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S12_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S12_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S12_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S12_AXI_ID_WIDTH = "1" *) 
  (* C_S12_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S12_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S12_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_RRESP_WIDTH = "2" *) 
  (* C_S12_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S12_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S13_AXI_ADDR_WIDTH = "32" *) 
  (* C_S13_AXI_DATA_WIDTH = "32" *) 
  (* C_S13_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S13_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S13_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S13_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S13_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S13_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S13_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S13_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S13_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S13_AXI_ID_WIDTH = "1" *) 
  (* C_S13_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S13_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S13_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_RRESP_WIDTH = "2" *) 
  (* C_S13_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S13_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S14_AXI_ADDR_WIDTH = "32" *) 
  (* C_S14_AXI_DATA_WIDTH = "32" *) 
  (* C_S14_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S14_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S14_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S14_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S14_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S14_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S14_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S14_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S14_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S14_AXI_ID_WIDTH = "1" *) 
  (* C_S14_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S14_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S14_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_RRESP_WIDTH = "2" *) 
  (* C_S14_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S14_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S15_AXI_ADDR_WIDTH = "32" *) 
  (* C_S15_AXI_DATA_WIDTH = "32" *) 
  (* C_S15_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S15_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S15_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S15_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S15_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S15_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S15_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S15_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S15_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S15_AXI_ID_WIDTH = "1" *) 
  (* C_S15_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S15_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S15_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_RRESP_WIDTH = "2" *) 
  (* C_S15_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S15_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S1_AXI_ADDR_WIDTH = "32" *) 
  (* C_S1_AXI_DATA_WIDTH = "32" *) 
  (* C_S1_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S1_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S1_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S1_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S1_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S1_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S1_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S1_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S1_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S1_AXI_ID_WIDTH = "1" *) 
  (* C_S1_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S1_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S1_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_RRESP_WIDTH = "2" *) 
  (* C_S1_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S1_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S2_AXI_ADDR_WIDTH = "32" *) 
  (* C_S2_AXI_DATA_WIDTH = "32" *) 
  (* C_S2_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S2_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S2_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S2_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S2_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S2_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S2_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S2_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S2_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S2_AXI_ID_WIDTH = "1" *) 
  (* C_S2_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S2_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S2_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_RRESP_WIDTH = "2" *) 
  (* C_S2_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S2_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S3_AXI_ADDR_WIDTH = "32" *) 
  (* C_S3_AXI_DATA_WIDTH = "32" *) 
  (* C_S3_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S3_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S3_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S3_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S3_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S3_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S3_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S3_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S3_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S3_AXI_ID_WIDTH = "1" *) 
  (* C_S3_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S3_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S3_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_RRESP_WIDTH = "2" *) 
  (* C_S3_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S3_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S4_AXI_ADDR_WIDTH = "32" *) 
  (* C_S4_AXI_DATA_WIDTH = "32" *) 
  (* C_S4_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S4_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S4_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S4_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S4_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S4_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S4_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S4_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S4_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S4_AXI_ID_WIDTH = "1" *) 
  (* C_S4_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S4_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S4_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_RRESP_WIDTH = "2" *) 
  (* C_S4_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S4_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S5_AXI_ADDR_WIDTH = "32" *) 
  (* C_S5_AXI_DATA_WIDTH = "32" *) 
  (* C_S5_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S5_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S5_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S5_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S5_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S5_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S5_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S5_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S5_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S5_AXI_ID_WIDTH = "1" *) 
  (* C_S5_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S5_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S5_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_RRESP_WIDTH = "2" *) 
  (* C_S5_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S5_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S6_AXI_ADDR_WIDTH = "32" *) 
  (* C_S6_AXI_DATA_WIDTH = "32" *) 
  (* C_S6_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S6_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S6_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S6_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S6_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S6_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S6_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S6_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S6_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S6_AXI_ID_WIDTH = "1" *) 
  (* C_S6_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S6_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S6_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_RRESP_WIDTH = "2" *) 
  (* C_S6_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S6_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S7_AXI_ADDR_WIDTH = "32" *) 
  (* C_S7_AXI_DATA_WIDTH = "32" *) 
  (* C_S7_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S7_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S7_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S7_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S7_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S7_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S7_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S7_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S7_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S7_AXI_ID_WIDTH = "1" *) 
  (* C_S7_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S7_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S7_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_RRESP_WIDTH = "2" *) 
  (* C_S7_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S7_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S8_AXI_ADDR_WIDTH = "32" *) 
  (* C_S8_AXI_DATA_WIDTH = "32" *) 
  (* C_S8_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S8_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S8_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S8_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S8_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S8_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S8_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S8_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S8_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S8_AXI_ID_WIDTH = "1" *) 
  (* C_S8_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S8_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S8_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_RRESP_WIDTH = "2" *) 
  (* C_S8_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S8_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S9_AXI_ADDR_WIDTH = "32" *) 
  (* C_S9_AXI_DATA_WIDTH = "32" *) 
  (* C_S9_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S9_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S9_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S9_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S9_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S9_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S9_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S9_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S9_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S9_AXI_ID_WIDTH = "1" *) 
  (* C_S9_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S9_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S9_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_RRESP_WIDTH = "2" *) 
  (* C_S9_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S9_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_SNOOP_KEEP_CLEAN_SHARED = "0" *) 
  (* C_SNOOP_KEEP_READ_CLEAN = "0" *) 
  (* C_SNOOP_KEEP_READ_NSD = "0" *) 
  (* C_SNOOP_KEEP_READ_SHARED = "0" *) 
  (* C_SUPPORT_SNOOP_FILTER = "0" *) 
  (* C_S_AXI_CTRL_ADDR_WIDTH = "17" *) 
  (* C_S_AXI_CTRL_DATA_WIDTH = "32" *) 
  Fast_IP_Clock_system_cache_0_0_system_cache U0
       (.ACLK(ACLK),
        .ARESETN(ARESETN),
        .M0_AXI_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M0_AXI_ACPROT({1'b0,1'b0,1'b0}),
        .M0_AXI_ACREADY(NLW_U0_M0_AXI_ACREADY_UNCONNECTED),
        .M0_AXI_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M0_AXI_ACVALID(1'b0),
        .M0_AXI_ARADDR(M0_AXI_ARADDR),
        .M0_AXI_ARBAR(NLW_U0_M0_AXI_ARBAR_UNCONNECTED[1:0]),
        .M0_AXI_ARBURST(M0_AXI_ARBURST),
        .M0_AXI_ARCACHE(M0_AXI_ARCACHE),
        .M0_AXI_ARDOMAIN(NLW_U0_M0_AXI_ARDOMAIN_UNCONNECTED[1:0]),
        .M0_AXI_ARID(M0_AXI_ARID),
        .M0_AXI_ARLEN(M0_AXI_ARLEN),
        .M0_AXI_ARLOCK(M0_AXI_ARLOCK),
        .M0_AXI_ARPROT(M0_AXI_ARPROT),
        .M0_AXI_ARQOS(M0_AXI_ARQOS),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_ARSIZE(M0_AXI_ARSIZE),
        .M0_AXI_ARSNOOP(NLW_U0_M0_AXI_ARSNOOP_UNCONNECTED[3:0]),
        .M0_AXI_ARVALID(M0_AXI_ARVALID),
        .M0_AXI_AWADDR(M0_AXI_AWADDR),
        .M0_AXI_AWBAR(NLW_U0_M0_AXI_AWBAR_UNCONNECTED[1:0]),
        .M0_AXI_AWBURST(M0_AXI_AWBURST),
        .M0_AXI_AWCACHE(M0_AXI_AWCACHE),
        .M0_AXI_AWDOMAIN(NLW_U0_M0_AXI_AWDOMAIN_UNCONNECTED[1:0]),
        .M0_AXI_AWID(M0_AXI_AWID),
        .M0_AXI_AWLEN(M0_AXI_AWLEN),
        .M0_AXI_AWLOCK(M0_AXI_AWLOCK),
        .M0_AXI_AWPROT(M0_AXI_AWPROT),
        .M0_AXI_AWQOS(M0_AXI_AWQOS),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_AWSIZE(M0_AXI_AWSIZE),
        .M0_AXI_AWSNOOP(NLW_U0_M0_AXI_AWSNOOP_UNCONNECTED[2:0]),
        .M0_AXI_AWVALID(M0_AXI_AWVALID),
        .M0_AXI_BID(M0_AXI_BID),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BRESP(M0_AXI_BRESP),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_CDDATA(NLW_U0_M0_AXI_CDDATA_UNCONNECTED[31:0]),
        .M0_AXI_CDLAST(NLW_U0_M0_AXI_CDLAST_UNCONNECTED),
        .M0_AXI_CDREADY(1'b0),
        .M0_AXI_CDVALID(NLW_U0_M0_AXI_CDVALID_UNCONNECTED),
        .M0_AXI_CRREADY(1'b0),
        .M0_AXI_CRRESP(NLW_U0_M0_AXI_CRRESP_UNCONNECTED[4:0]),
        .M0_AXI_CRVALID(NLW_U0_M0_AXI_CRVALID_UNCONNECTED),
        .M0_AXI_RACK(NLW_U0_M0_AXI_RACK_UNCONNECTED),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RID(M0_AXI_RID),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RREADY(M0_AXI_RREADY),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .M0_AXI_WACK(NLW_U0_M0_AXI_WACK_UNCONNECTED),
        .M0_AXI_WDATA(M0_AXI_WDATA),
        .M0_AXI_WLAST(M0_AXI_WLAST),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M0_AXI_WSTRB(M0_AXI_WSTRB),
        .M0_AXI_WVALID(M0_AXI_WVALID),
        .M1_AXI_ARADDR(NLW_U0_M1_AXI_ARADDR_UNCONNECTED[31:0]),
        .M1_AXI_ARBURST(NLW_U0_M1_AXI_ARBURST_UNCONNECTED[1:0]),
        .M1_AXI_ARCACHE(NLW_U0_M1_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M1_AXI_ARID(NLW_U0_M1_AXI_ARID_UNCONNECTED[0]),
        .M1_AXI_ARLEN(NLW_U0_M1_AXI_ARLEN_UNCONNECTED[7:0]),
        .M1_AXI_ARLOCK(NLW_U0_M1_AXI_ARLOCK_UNCONNECTED),
        .M1_AXI_ARPROT(NLW_U0_M1_AXI_ARPROT_UNCONNECTED[2:0]),
        .M1_AXI_ARQOS(NLW_U0_M1_AXI_ARQOS_UNCONNECTED[3:0]),
        .M1_AXI_ARREADY(1'b0),
        .M1_AXI_ARSIZE(NLW_U0_M1_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M1_AXI_ARVALID(NLW_U0_M1_AXI_ARVALID_UNCONNECTED),
        .M1_AXI_AWADDR(NLW_U0_M1_AXI_AWADDR_UNCONNECTED[31:0]),
        .M1_AXI_AWBURST(NLW_U0_M1_AXI_AWBURST_UNCONNECTED[1:0]),
        .M1_AXI_AWCACHE(NLW_U0_M1_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M1_AXI_AWID(NLW_U0_M1_AXI_AWID_UNCONNECTED[0]),
        .M1_AXI_AWLEN(NLW_U0_M1_AXI_AWLEN_UNCONNECTED[7:0]),
        .M1_AXI_AWLOCK(NLW_U0_M1_AXI_AWLOCK_UNCONNECTED),
        .M1_AXI_AWPROT(NLW_U0_M1_AXI_AWPROT_UNCONNECTED[2:0]),
        .M1_AXI_AWQOS(NLW_U0_M1_AXI_AWQOS_UNCONNECTED[3:0]),
        .M1_AXI_AWREADY(1'b0),
        .M1_AXI_AWSIZE(NLW_U0_M1_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M1_AXI_AWVALID(NLW_U0_M1_AXI_AWVALID_UNCONNECTED),
        .M1_AXI_BID(1'b0),
        .M1_AXI_BREADY(NLW_U0_M1_AXI_BREADY_UNCONNECTED),
        .M1_AXI_BRESP({1'b0,1'b0}),
        .M1_AXI_BVALID(1'b0),
        .M1_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M1_AXI_RID(1'b0),
        .M1_AXI_RLAST(1'b0),
        .M1_AXI_RREADY(NLW_U0_M1_AXI_RREADY_UNCONNECTED),
        .M1_AXI_RRESP({1'b0,1'b0}),
        .M1_AXI_RVALID(1'b0),
        .M1_AXI_WDATA(NLW_U0_M1_AXI_WDATA_UNCONNECTED[31:0]),
        .M1_AXI_WLAST(NLW_U0_M1_AXI_WLAST_UNCONNECTED),
        .M1_AXI_WREADY(1'b0),
        .M1_AXI_WSTRB(NLW_U0_M1_AXI_WSTRB_UNCONNECTED[3:0]),
        .M1_AXI_WVALID(NLW_U0_M1_AXI_WVALID_UNCONNECTED),
        .M2_AXI_ARADDR(NLW_U0_M2_AXI_ARADDR_UNCONNECTED[31:0]),
        .M2_AXI_ARBURST(NLW_U0_M2_AXI_ARBURST_UNCONNECTED[1:0]),
        .M2_AXI_ARCACHE(NLW_U0_M2_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M2_AXI_ARID(NLW_U0_M2_AXI_ARID_UNCONNECTED[0]),
        .M2_AXI_ARLEN(NLW_U0_M2_AXI_ARLEN_UNCONNECTED[7:0]),
        .M2_AXI_ARLOCK(NLW_U0_M2_AXI_ARLOCK_UNCONNECTED),
        .M2_AXI_ARPROT(NLW_U0_M2_AXI_ARPROT_UNCONNECTED[2:0]),
        .M2_AXI_ARQOS(NLW_U0_M2_AXI_ARQOS_UNCONNECTED[3:0]),
        .M2_AXI_ARREADY(1'b0),
        .M2_AXI_ARSIZE(NLW_U0_M2_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M2_AXI_ARVALID(NLW_U0_M2_AXI_ARVALID_UNCONNECTED),
        .M2_AXI_AWADDR(NLW_U0_M2_AXI_AWADDR_UNCONNECTED[31:0]),
        .M2_AXI_AWBURST(NLW_U0_M2_AXI_AWBURST_UNCONNECTED[1:0]),
        .M2_AXI_AWCACHE(NLW_U0_M2_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M2_AXI_AWID(NLW_U0_M2_AXI_AWID_UNCONNECTED[0]),
        .M2_AXI_AWLEN(NLW_U0_M2_AXI_AWLEN_UNCONNECTED[7:0]),
        .M2_AXI_AWLOCK(NLW_U0_M2_AXI_AWLOCK_UNCONNECTED),
        .M2_AXI_AWPROT(NLW_U0_M2_AXI_AWPROT_UNCONNECTED[2:0]),
        .M2_AXI_AWQOS(NLW_U0_M2_AXI_AWQOS_UNCONNECTED[3:0]),
        .M2_AXI_AWREADY(1'b0),
        .M2_AXI_AWSIZE(NLW_U0_M2_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M2_AXI_AWVALID(NLW_U0_M2_AXI_AWVALID_UNCONNECTED),
        .M2_AXI_BID(1'b0),
        .M2_AXI_BREADY(NLW_U0_M2_AXI_BREADY_UNCONNECTED),
        .M2_AXI_BRESP({1'b0,1'b0}),
        .M2_AXI_BVALID(1'b0),
        .M2_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M2_AXI_RID(1'b0),
        .M2_AXI_RLAST(1'b0),
        .M2_AXI_RREADY(NLW_U0_M2_AXI_RREADY_UNCONNECTED),
        .M2_AXI_RRESP({1'b0,1'b0}),
        .M2_AXI_RVALID(1'b0),
        .M2_AXI_WDATA(NLW_U0_M2_AXI_WDATA_UNCONNECTED[31:0]),
        .M2_AXI_WLAST(NLW_U0_M2_AXI_WLAST_UNCONNECTED),
        .M2_AXI_WREADY(1'b0),
        .M2_AXI_WSTRB(NLW_U0_M2_AXI_WSTRB_UNCONNECTED[3:0]),
        .M2_AXI_WVALID(NLW_U0_M2_AXI_WVALID_UNCONNECTED),
        .M3_AXI_ARADDR(NLW_U0_M3_AXI_ARADDR_UNCONNECTED[31:0]),
        .M3_AXI_ARBURST(NLW_U0_M3_AXI_ARBURST_UNCONNECTED[1:0]),
        .M3_AXI_ARCACHE(NLW_U0_M3_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M3_AXI_ARID(NLW_U0_M3_AXI_ARID_UNCONNECTED[0]),
        .M3_AXI_ARLEN(NLW_U0_M3_AXI_ARLEN_UNCONNECTED[7:0]),
        .M3_AXI_ARLOCK(NLW_U0_M3_AXI_ARLOCK_UNCONNECTED),
        .M3_AXI_ARPROT(NLW_U0_M3_AXI_ARPROT_UNCONNECTED[2:0]),
        .M3_AXI_ARQOS(NLW_U0_M3_AXI_ARQOS_UNCONNECTED[3:0]),
        .M3_AXI_ARREADY(1'b0),
        .M3_AXI_ARSIZE(NLW_U0_M3_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M3_AXI_ARVALID(NLW_U0_M3_AXI_ARVALID_UNCONNECTED),
        .M3_AXI_AWADDR(NLW_U0_M3_AXI_AWADDR_UNCONNECTED[31:0]),
        .M3_AXI_AWBURST(NLW_U0_M3_AXI_AWBURST_UNCONNECTED[1:0]),
        .M3_AXI_AWCACHE(NLW_U0_M3_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M3_AXI_AWID(NLW_U0_M3_AXI_AWID_UNCONNECTED[0]),
        .M3_AXI_AWLEN(NLW_U0_M3_AXI_AWLEN_UNCONNECTED[7:0]),
        .M3_AXI_AWLOCK(NLW_U0_M3_AXI_AWLOCK_UNCONNECTED),
        .M3_AXI_AWPROT(NLW_U0_M3_AXI_AWPROT_UNCONNECTED[2:0]),
        .M3_AXI_AWQOS(NLW_U0_M3_AXI_AWQOS_UNCONNECTED[3:0]),
        .M3_AXI_AWREADY(1'b0),
        .M3_AXI_AWSIZE(NLW_U0_M3_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M3_AXI_AWVALID(NLW_U0_M3_AXI_AWVALID_UNCONNECTED),
        .M3_AXI_BID(1'b0),
        .M3_AXI_BREADY(NLW_U0_M3_AXI_BREADY_UNCONNECTED),
        .M3_AXI_BRESP({1'b0,1'b0}),
        .M3_AXI_BVALID(1'b0),
        .M3_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M3_AXI_RID(1'b0),
        .M3_AXI_RLAST(1'b0),
        .M3_AXI_RREADY(NLW_U0_M3_AXI_RREADY_UNCONNECTED),
        .M3_AXI_RRESP({1'b0,1'b0}),
        .M3_AXI_RVALID(1'b0),
        .M3_AXI_WDATA(NLW_U0_M3_AXI_WDATA_UNCONNECTED[31:0]),
        .M3_AXI_WLAST(NLW_U0_M3_AXI_WLAST_UNCONNECTED),
        .M3_AXI_WREADY(1'b0),
        .M3_AXI_WSTRB(NLW_U0_M3_AXI_WSTRB_UNCONNECTED[3:0]),
        .M3_AXI_WVALID(NLW_U0_M3_AXI_WVALID_UNCONNECTED),
        .S0_AXI_ACADDR(NLW_U0_S0_AXI_ACADDR_UNCONNECTED[23:0]),
        .S0_AXI_ACPROT(NLW_U0_S0_AXI_ACPROT_UNCONNECTED[2:0]),
        .S0_AXI_ACREADY(1'b0),
        .S0_AXI_ACSNOOP(NLW_U0_S0_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S0_AXI_ACVALID(NLW_U0_S0_AXI_ACVALID_UNCONNECTED),
        .S0_AXI_ARADDR(S0_AXI_ARADDR),
        .S0_AXI_ARBAR({1'b0,1'b0}),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE),
        .S0_AXI_ARDOMAIN({1'b0,1'b0}),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARLOCK(S0_AXI_ARLOCK),
        .S0_AXI_ARPROT(S0_AXI_ARPROT),
        .S0_AXI_ARQOS(S0_AXI_ARQOS),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .S0_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBAR({1'b0,1'b0}),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWCACHE(S0_AXI_AWCACHE),
        .S0_AXI_AWDOMAIN({1'b0,1'b0}),
        .S0_AXI_AWID(S0_AXI_AWID),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWLOCK(S0_AXI_AWLOCK),
        .S0_AXI_AWPROT(S0_AXI_AWPROT),
        .S0_AXI_AWQOS(S0_AXI_AWQOS),
        .S0_AXI_AWREADY(S0_AXI_AWREADY),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S0_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S0_AXI_BID(S0_AXI_BID),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .S0_AXI_BVALID(S0_AXI_BVALID),
        .S0_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_CDLAST(1'b0),
        .S0_AXI_CDREADY(NLW_U0_S0_AXI_CDREADY_UNCONNECTED),
        .S0_AXI_CDVALID(1'b0),
        .S0_AXI_CRREADY(NLW_U0_S0_AXI_CRREADY_UNCONNECTED),
        .S0_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_CRVALID(1'b0),
        .S0_AXI_GEN_ARADDR(S0_AXI_GEN_ARADDR),
        .S0_AXI_GEN_ARBURST(S0_AXI_GEN_ARBURST),
        .S0_AXI_GEN_ARCACHE(S0_AXI_GEN_ARCACHE),
        .S0_AXI_GEN_ARID(S0_AXI_GEN_ARID),
        .S0_AXI_GEN_ARLEN(S0_AXI_GEN_ARLEN),
        .S0_AXI_GEN_ARLOCK(S0_AXI_GEN_ARLOCK),
        .S0_AXI_GEN_ARPROT(S0_AXI_GEN_ARPROT),
        .S0_AXI_GEN_ARQOS(S0_AXI_GEN_ARQOS),
        .S0_AXI_GEN_ARREADY(S0_AXI_GEN_ARREADY),
        .S0_AXI_GEN_ARSIZE(S0_AXI_GEN_ARSIZE),
        .S0_AXI_GEN_ARVALID(S0_AXI_GEN_ARVALID),
        .S0_AXI_GEN_AWADDR(S0_AXI_GEN_AWADDR),
        .S0_AXI_GEN_AWBURST(S0_AXI_GEN_AWBURST),
        .S0_AXI_GEN_AWCACHE(S0_AXI_GEN_AWCACHE),
        .S0_AXI_GEN_AWID(S0_AXI_GEN_AWID),
        .S0_AXI_GEN_AWLEN(S0_AXI_GEN_AWLEN),
        .S0_AXI_GEN_AWLOCK(S0_AXI_GEN_AWLOCK),
        .S0_AXI_GEN_AWPROT(S0_AXI_GEN_AWPROT),
        .S0_AXI_GEN_AWQOS(S0_AXI_GEN_AWQOS),
        .S0_AXI_GEN_AWREADY(S0_AXI_GEN_AWREADY),
        .S0_AXI_GEN_AWSIZE(S0_AXI_GEN_AWSIZE),
        .S0_AXI_GEN_AWVALID(S0_AXI_GEN_AWVALID),
        .S0_AXI_GEN_BID(S0_AXI_GEN_BID),
        .S0_AXI_GEN_BREADY(S0_AXI_GEN_BREADY),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S0_AXI_GEN_BVALID(S0_AXI_GEN_BVALID),
        .S0_AXI_GEN_RDATA(S0_AXI_GEN_RDATA),
        .S0_AXI_GEN_RID(S0_AXI_GEN_RID),
        .S0_AXI_GEN_RLAST(S0_AXI_GEN_RLAST),
        .S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .S0_AXI_GEN_RRESP(S0_AXI_GEN_RRESP),
        .S0_AXI_GEN_RVALID(S0_AXI_GEN_RVALID),
        .S0_AXI_GEN_WDATA(S0_AXI_GEN_WDATA),
        .S0_AXI_GEN_WLAST(S0_AXI_GEN_WLAST),
        .S0_AXI_GEN_WREADY(S0_AXI_GEN_WREADY),
        .S0_AXI_GEN_WSTRB(S0_AXI_GEN_WSTRB),
        .S0_AXI_GEN_WVALID(S0_AXI_GEN_WVALID),
        .S0_AXI_RACK(1'b0),
        .S0_AXI_RDATA(S0_AXI_RDATA),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RLAST(S0_AXI_RLAST),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RRESP(S0_AXI_RRESP),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .S0_AXI_WACK(1'b0),
        .S0_AXI_WDATA(S0_AXI_WDATA),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WSTRB(S0_AXI_WSTRB),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .S10_AXI_ACADDR(NLW_U0_S10_AXI_ACADDR_UNCONNECTED[31:0]),
        .S10_AXI_ACPROT(NLW_U0_S10_AXI_ACPROT_UNCONNECTED[2:0]),
        .S10_AXI_ACREADY(1'b0),
        .S10_AXI_ACSNOOP(NLW_U0_S10_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S10_AXI_ACVALID(NLW_U0_S10_AXI_ACVALID_UNCONNECTED),
        .S10_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARBAR({1'b0,1'b0}),
        .S10_AXI_ARBURST({1'b0,1'b0}),
        .S10_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARDOMAIN({1'b0,1'b0}),
        .S10_AXI_ARID(1'b0),
        .S10_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARLOCK(1'b0),
        .S10_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARREADY(NLW_U0_S10_AXI_ARREADY_UNCONNECTED),
        .S10_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARVALID(1'b0),
        .S10_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWBAR({1'b0,1'b0}),
        .S10_AXI_AWBURST({1'b0,1'b0}),
        .S10_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWDOMAIN({1'b0,1'b0}),
        .S10_AXI_AWID(1'b0),
        .S10_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWLOCK(1'b0),
        .S10_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWREADY(NLW_U0_S10_AXI_AWREADY_UNCONNECTED),
        .S10_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S10_AXI_AWVALID(1'b0),
        .S10_AXI_BID(NLW_U0_S10_AXI_BID_UNCONNECTED[0]),
        .S10_AXI_BREADY(1'b0),
        .S10_AXI_BRESP(NLW_U0_S10_AXI_BRESP_UNCONNECTED[1:0]),
        .S10_AXI_BVALID(NLW_U0_S10_AXI_BVALID_UNCONNECTED),
        .S10_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_CDLAST(1'b0),
        .S10_AXI_CDREADY(NLW_U0_S10_AXI_CDREADY_UNCONNECTED),
        .S10_AXI_CDVALID(1'b0),
        .S10_AXI_CRREADY(NLW_U0_S10_AXI_CRREADY_UNCONNECTED),
        .S10_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_CRVALID(1'b0),
        .S10_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S10_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARID(1'b0),
        .S10_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARLOCK(1'b0),
        .S10_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARREADY(NLW_U0_S10_AXI_GEN_ARREADY_UNCONNECTED),
        .S10_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARVALID(1'b0),
        .S10_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S10_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWID(1'b0),
        .S10_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWLOCK(1'b0),
        .S10_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWREADY(NLW_U0_S10_AXI_GEN_AWREADY_UNCONNECTED),
        .S10_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWVALID(1'b0),
        .S10_AXI_GEN_BID(NLW_U0_S10_AXI_GEN_BID_UNCONNECTED[0]),
        .S10_AXI_GEN_BREADY(1'b0),
        .S10_AXI_GEN_BRESP(NLW_U0_S10_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S10_AXI_GEN_BVALID(NLW_U0_S10_AXI_GEN_BVALID_UNCONNECTED),
        .S10_AXI_GEN_RDATA(NLW_U0_S10_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S10_AXI_GEN_RID(NLW_U0_S10_AXI_GEN_RID_UNCONNECTED[0]),
        .S10_AXI_GEN_RLAST(NLW_U0_S10_AXI_GEN_RLAST_UNCONNECTED),
        .S10_AXI_GEN_RREADY(1'b0),
        .S10_AXI_GEN_RRESP(NLW_U0_S10_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S10_AXI_GEN_RVALID(NLW_U0_S10_AXI_GEN_RVALID_UNCONNECTED),
        .S10_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_WLAST(1'b0),
        .S10_AXI_GEN_WREADY(NLW_U0_S10_AXI_GEN_WREADY_UNCONNECTED),
        .S10_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_WVALID(1'b0),
        .S10_AXI_RACK(1'b0),
        .S10_AXI_RDATA(NLW_U0_S10_AXI_RDATA_UNCONNECTED[31:0]),
        .S10_AXI_RID(NLW_U0_S10_AXI_RID_UNCONNECTED[0]),
        .S10_AXI_RLAST(NLW_U0_S10_AXI_RLAST_UNCONNECTED),
        .S10_AXI_RREADY(1'b0),
        .S10_AXI_RRESP(NLW_U0_S10_AXI_RRESP_UNCONNECTED[1:0]),
        .S10_AXI_RVALID(NLW_U0_S10_AXI_RVALID_UNCONNECTED),
        .S10_AXI_WACK(1'b0),
        .S10_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_WLAST(1'b0),
        .S10_AXI_WREADY(NLW_U0_S10_AXI_WREADY_UNCONNECTED),
        .S10_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_WVALID(1'b0),
        .S11_AXI_ACADDR(NLW_U0_S11_AXI_ACADDR_UNCONNECTED[31:0]),
        .S11_AXI_ACPROT(NLW_U0_S11_AXI_ACPROT_UNCONNECTED[2:0]),
        .S11_AXI_ACREADY(1'b0),
        .S11_AXI_ACSNOOP(NLW_U0_S11_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S11_AXI_ACVALID(NLW_U0_S11_AXI_ACVALID_UNCONNECTED),
        .S11_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARBAR({1'b0,1'b0}),
        .S11_AXI_ARBURST({1'b0,1'b0}),
        .S11_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARDOMAIN({1'b0,1'b0}),
        .S11_AXI_ARID(1'b0),
        .S11_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARLOCK(1'b0),
        .S11_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARREADY(NLW_U0_S11_AXI_ARREADY_UNCONNECTED),
        .S11_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARVALID(1'b0),
        .S11_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWBAR({1'b0,1'b0}),
        .S11_AXI_AWBURST({1'b0,1'b0}),
        .S11_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWDOMAIN({1'b0,1'b0}),
        .S11_AXI_AWID(1'b0),
        .S11_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWLOCK(1'b0),
        .S11_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWREADY(NLW_U0_S11_AXI_AWREADY_UNCONNECTED),
        .S11_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S11_AXI_AWVALID(1'b0),
        .S11_AXI_BID(NLW_U0_S11_AXI_BID_UNCONNECTED[0]),
        .S11_AXI_BREADY(1'b0),
        .S11_AXI_BRESP(NLW_U0_S11_AXI_BRESP_UNCONNECTED[1:0]),
        .S11_AXI_BVALID(NLW_U0_S11_AXI_BVALID_UNCONNECTED),
        .S11_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_CDLAST(1'b0),
        .S11_AXI_CDREADY(NLW_U0_S11_AXI_CDREADY_UNCONNECTED),
        .S11_AXI_CDVALID(1'b0),
        .S11_AXI_CRREADY(NLW_U0_S11_AXI_CRREADY_UNCONNECTED),
        .S11_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_CRVALID(1'b0),
        .S11_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S11_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARID(1'b0),
        .S11_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARLOCK(1'b0),
        .S11_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARREADY(NLW_U0_S11_AXI_GEN_ARREADY_UNCONNECTED),
        .S11_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARVALID(1'b0),
        .S11_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S11_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWID(1'b0),
        .S11_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWLOCK(1'b0),
        .S11_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWREADY(NLW_U0_S11_AXI_GEN_AWREADY_UNCONNECTED),
        .S11_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWVALID(1'b0),
        .S11_AXI_GEN_BID(NLW_U0_S11_AXI_GEN_BID_UNCONNECTED[0]),
        .S11_AXI_GEN_BREADY(1'b0),
        .S11_AXI_GEN_BRESP(NLW_U0_S11_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S11_AXI_GEN_BVALID(NLW_U0_S11_AXI_GEN_BVALID_UNCONNECTED),
        .S11_AXI_GEN_RDATA(NLW_U0_S11_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S11_AXI_GEN_RID(NLW_U0_S11_AXI_GEN_RID_UNCONNECTED[0]),
        .S11_AXI_GEN_RLAST(NLW_U0_S11_AXI_GEN_RLAST_UNCONNECTED),
        .S11_AXI_GEN_RREADY(1'b0),
        .S11_AXI_GEN_RRESP(NLW_U0_S11_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S11_AXI_GEN_RVALID(NLW_U0_S11_AXI_GEN_RVALID_UNCONNECTED),
        .S11_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_WLAST(1'b0),
        .S11_AXI_GEN_WREADY(NLW_U0_S11_AXI_GEN_WREADY_UNCONNECTED),
        .S11_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_WVALID(1'b0),
        .S11_AXI_RACK(1'b0),
        .S11_AXI_RDATA(NLW_U0_S11_AXI_RDATA_UNCONNECTED[31:0]),
        .S11_AXI_RID(NLW_U0_S11_AXI_RID_UNCONNECTED[0]),
        .S11_AXI_RLAST(NLW_U0_S11_AXI_RLAST_UNCONNECTED),
        .S11_AXI_RREADY(1'b0),
        .S11_AXI_RRESP(NLW_U0_S11_AXI_RRESP_UNCONNECTED[1:0]),
        .S11_AXI_RVALID(NLW_U0_S11_AXI_RVALID_UNCONNECTED),
        .S11_AXI_WACK(1'b0),
        .S11_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_WLAST(1'b0),
        .S11_AXI_WREADY(NLW_U0_S11_AXI_WREADY_UNCONNECTED),
        .S11_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_WVALID(1'b0),
        .S12_AXI_ACADDR(NLW_U0_S12_AXI_ACADDR_UNCONNECTED[31:0]),
        .S12_AXI_ACPROT(NLW_U0_S12_AXI_ACPROT_UNCONNECTED[2:0]),
        .S12_AXI_ACREADY(1'b0),
        .S12_AXI_ACSNOOP(NLW_U0_S12_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S12_AXI_ACVALID(NLW_U0_S12_AXI_ACVALID_UNCONNECTED),
        .S12_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARBAR({1'b0,1'b0}),
        .S12_AXI_ARBURST({1'b0,1'b0}),
        .S12_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARDOMAIN({1'b0,1'b0}),
        .S12_AXI_ARID(1'b0),
        .S12_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARLOCK(1'b0),
        .S12_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARREADY(NLW_U0_S12_AXI_ARREADY_UNCONNECTED),
        .S12_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARVALID(1'b0),
        .S12_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWBAR({1'b0,1'b0}),
        .S12_AXI_AWBURST({1'b0,1'b0}),
        .S12_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWDOMAIN({1'b0,1'b0}),
        .S12_AXI_AWID(1'b0),
        .S12_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWLOCK(1'b0),
        .S12_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWREADY(NLW_U0_S12_AXI_AWREADY_UNCONNECTED),
        .S12_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S12_AXI_AWVALID(1'b0),
        .S12_AXI_BID(NLW_U0_S12_AXI_BID_UNCONNECTED[0]),
        .S12_AXI_BREADY(1'b0),
        .S12_AXI_BRESP(NLW_U0_S12_AXI_BRESP_UNCONNECTED[1:0]),
        .S12_AXI_BVALID(NLW_U0_S12_AXI_BVALID_UNCONNECTED),
        .S12_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_CDLAST(1'b0),
        .S12_AXI_CDREADY(NLW_U0_S12_AXI_CDREADY_UNCONNECTED),
        .S12_AXI_CDVALID(1'b0),
        .S12_AXI_CRREADY(NLW_U0_S12_AXI_CRREADY_UNCONNECTED),
        .S12_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_CRVALID(1'b0),
        .S12_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S12_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARID(1'b0),
        .S12_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARLOCK(1'b0),
        .S12_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARREADY(NLW_U0_S12_AXI_GEN_ARREADY_UNCONNECTED),
        .S12_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARVALID(1'b0),
        .S12_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S12_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWID(1'b0),
        .S12_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWLOCK(1'b0),
        .S12_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWREADY(NLW_U0_S12_AXI_GEN_AWREADY_UNCONNECTED),
        .S12_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWVALID(1'b0),
        .S12_AXI_GEN_BID(NLW_U0_S12_AXI_GEN_BID_UNCONNECTED[0]),
        .S12_AXI_GEN_BREADY(1'b0),
        .S12_AXI_GEN_BRESP(NLW_U0_S12_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S12_AXI_GEN_BVALID(NLW_U0_S12_AXI_GEN_BVALID_UNCONNECTED),
        .S12_AXI_GEN_RDATA(NLW_U0_S12_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S12_AXI_GEN_RID(NLW_U0_S12_AXI_GEN_RID_UNCONNECTED[0]),
        .S12_AXI_GEN_RLAST(NLW_U0_S12_AXI_GEN_RLAST_UNCONNECTED),
        .S12_AXI_GEN_RREADY(1'b0),
        .S12_AXI_GEN_RRESP(NLW_U0_S12_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S12_AXI_GEN_RVALID(NLW_U0_S12_AXI_GEN_RVALID_UNCONNECTED),
        .S12_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_WLAST(1'b0),
        .S12_AXI_GEN_WREADY(NLW_U0_S12_AXI_GEN_WREADY_UNCONNECTED),
        .S12_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_WVALID(1'b0),
        .S12_AXI_RACK(1'b0),
        .S12_AXI_RDATA(NLW_U0_S12_AXI_RDATA_UNCONNECTED[31:0]),
        .S12_AXI_RID(NLW_U0_S12_AXI_RID_UNCONNECTED[0]),
        .S12_AXI_RLAST(NLW_U0_S12_AXI_RLAST_UNCONNECTED),
        .S12_AXI_RREADY(1'b0),
        .S12_AXI_RRESP(NLW_U0_S12_AXI_RRESP_UNCONNECTED[1:0]),
        .S12_AXI_RVALID(NLW_U0_S12_AXI_RVALID_UNCONNECTED),
        .S12_AXI_WACK(1'b0),
        .S12_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_WLAST(1'b0),
        .S12_AXI_WREADY(NLW_U0_S12_AXI_WREADY_UNCONNECTED),
        .S12_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_WVALID(1'b0),
        .S13_AXI_ACADDR(NLW_U0_S13_AXI_ACADDR_UNCONNECTED[31:0]),
        .S13_AXI_ACPROT(NLW_U0_S13_AXI_ACPROT_UNCONNECTED[2:0]),
        .S13_AXI_ACREADY(1'b0),
        .S13_AXI_ACSNOOP(NLW_U0_S13_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S13_AXI_ACVALID(NLW_U0_S13_AXI_ACVALID_UNCONNECTED),
        .S13_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARBAR({1'b0,1'b0}),
        .S13_AXI_ARBURST({1'b0,1'b0}),
        .S13_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARDOMAIN({1'b0,1'b0}),
        .S13_AXI_ARID(1'b0),
        .S13_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARLOCK(1'b0),
        .S13_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARREADY(NLW_U0_S13_AXI_ARREADY_UNCONNECTED),
        .S13_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARVALID(1'b0),
        .S13_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWBAR({1'b0,1'b0}),
        .S13_AXI_AWBURST({1'b0,1'b0}),
        .S13_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWDOMAIN({1'b0,1'b0}),
        .S13_AXI_AWID(1'b0),
        .S13_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWLOCK(1'b0),
        .S13_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWREADY(NLW_U0_S13_AXI_AWREADY_UNCONNECTED),
        .S13_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S13_AXI_AWVALID(1'b0),
        .S13_AXI_BID(NLW_U0_S13_AXI_BID_UNCONNECTED[0]),
        .S13_AXI_BREADY(1'b0),
        .S13_AXI_BRESP(NLW_U0_S13_AXI_BRESP_UNCONNECTED[1:0]),
        .S13_AXI_BVALID(NLW_U0_S13_AXI_BVALID_UNCONNECTED),
        .S13_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_CDLAST(1'b0),
        .S13_AXI_CDREADY(NLW_U0_S13_AXI_CDREADY_UNCONNECTED),
        .S13_AXI_CDVALID(1'b0),
        .S13_AXI_CRREADY(NLW_U0_S13_AXI_CRREADY_UNCONNECTED),
        .S13_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_CRVALID(1'b0),
        .S13_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S13_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARID(1'b0),
        .S13_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARLOCK(1'b0),
        .S13_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARREADY(NLW_U0_S13_AXI_GEN_ARREADY_UNCONNECTED),
        .S13_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARVALID(1'b0),
        .S13_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S13_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWID(1'b0),
        .S13_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWLOCK(1'b0),
        .S13_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWREADY(NLW_U0_S13_AXI_GEN_AWREADY_UNCONNECTED),
        .S13_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWVALID(1'b0),
        .S13_AXI_GEN_BID(NLW_U0_S13_AXI_GEN_BID_UNCONNECTED[0]),
        .S13_AXI_GEN_BREADY(1'b0),
        .S13_AXI_GEN_BRESP(NLW_U0_S13_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S13_AXI_GEN_BVALID(NLW_U0_S13_AXI_GEN_BVALID_UNCONNECTED),
        .S13_AXI_GEN_RDATA(NLW_U0_S13_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S13_AXI_GEN_RID(NLW_U0_S13_AXI_GEN_RID_UNCONNECTED[0]),
        .S13_AXI_GEN_RLAST(NLW_U0_S13_AXI_GEN_RLAST_UNCONNECTED),
        .S13_AXI_GEN_RREADY(1'b0),
        .S13_AXI_GEN_RRESP(NLW_U0_S13_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S13_AXI_GEN_RVALID(NLW_U0_S13_AXI_GEN_RVALID_UNCONNECTED),
        .S13_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_WLAST(1'b0),
        .S13_AXI_GEN_WREADY(NLW_U0_S13_AXI_GEN_WREADY_UNCONNECTED),
        .S13_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_WVALID(1'b0),
        .S13_AXI_RACK(1'b0),
        .S13_AXI_RDATA(NLW_U0_S13_AXI_RDATA_UNCONNECTED[31:0]),
        .S13_AXI_RID(NLW_U0_S13_AXI_RID_UNCONNECTED[0]),
        .S13_AXI_RLAST(NLW_U0_S13_AXI_RLAST_UNCONNECTED),
        .S13_AXI_RREADY(1'b0),
        .S13_AXI_RRESP(NLW_U0_S13_AXI_RRESP_UNCONNECTED[1:0]),
        .S13_AXI_RVALID(NLW_U0_S13_AXI_RVALID_UNCONNECTED),
        .S13_AXI_WACK(1'b0),
        .S13_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_WLAST(1'b0),
        .S13_AXI_WREADY(NLW_U0_S13_AXI_WREADY_UNCONNECTED),
        .S13_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_WVALID(1'b0),
        .S14_AXI_ACADDR(NLW_U0_S14_AXI_ACADDR_UNCONNECTED[31:0]),
        .S14_AXI_ACPROT(NLW_U0_S14_AXI_ACPROT_UNCONNECTED[2:0]),
        .S14_AXI_ACREADY(1'b0),
        .S14_AXI_ACSNOOP(NLW_U0_S14_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S14_AXI_ACVALID(NLW_U0_S14_AXI_ACVALID_UNCONNECTED),
        .S14_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARBAR({1'b0,1'b0}),
        .S14_AXI_ARBURST({1'b0,1'b0}),
        .S14_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARDOMAIN({1'b0,1'b0}),
        .S14_AXI_ARID(1'b0),
        .S14_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARLOCK(1'b0),
        .S14_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARREADY(NLW_U0_S14_AXI_ARREADY_UNCONNECTED),
        .S14_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARVALID(1'b0),
        .S14_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWBAR({1'b0,1'b0}),
        .S14_AXI_AWBURST({1'b0,1'b0}),
        .S14_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWDOMAIN({1'b0,1'b0}),
        .S14_AXI_AWID(1'b0),
        .S14_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWLOCK(1'b0),
        .S14_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWREADY(NLW_U0_S14_AXI_AWREADY_UNCONNECTED),
        .S14_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S14_AXI_AWVALID(1'b0),
        .S14_AXI_BID(NLW_U0_S14_AXI_BID_UNCONNECTED[0]),
        .S14_AXI_BREADY(1'b0),
        .S14_AXI_BRESP(NLW_U0_S14_AXI_BRESP_UNCONNECTED[1:0]),
        .S14_AXI_BVALID(NLW_U0_S14_AXI_BVALID_UNCONNECTED),
        .S14_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_CDLAST(1'b0),
        .S14_AXI_CDREADY(NLW_U0_S14_AXI_CDREADY_UNCONNECTED),
        .S14_AXI_CDVALID(1'b0),
        .S14_AXI_CRREADY(NLW_U0_S14_AXI_CRREADY_UNCONNECTED),
        .S14_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_CRVALID(1'b0),
        .S14_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S14_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARID(1'b0),
        .S14_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARLOCK(1'b0),
        .S14_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARREADY(NLW_U0_S14_AXI_GEN_ARREADY_UNCONNECTED),
        .S14_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARVALID(1'b0),
        .S14_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S14_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWID(1'b0),
        .S14_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWLOCK(1'b0),
        .S14_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWREADY(NLW_U0_S14_AXI_GEN_AWREADY_UNCONNECTED),
        .S14_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWVALID(1'b0),
        .S14_AXI_GEN_BID(NLW_U0_S14_AXI_GEN_BID_UNCONNECTED[0]),
        .S14_AXI_GEN_BREADY(1'b0),
        .S14_AXI_GEN_BRESP(NLW_U0_S14_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S14_AXI_GEN_BVALID(NLW_U0_S14_AXI_GEN_BVALID_UNCONNECTED),
        .S14_AXI_GEN_RDATA(NLW_U0_S14_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S14_AXI_GEN_RID(NLW_U0_S14_AXI_GEN_RID_UNCONNECTED[0]),
        .S14_AXI_GEN_RLAST(NLW_U0_S14_AXI_GEN_RLAST_UNCONNECTED),
        .S14_AXI_GEN_RREADY(1'b0),
        .S14_AXI_GEN_RRESP(NLW_U0_S14_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S14_AXI_GEN_RVALID(NLW_U0_S14_AXI_GEN_RVALID_UNCONNECTED),
        .S14_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_WLAST(1'b0),
        .S14_AXI_GEN_WREADY(NLW_U0_S14_AXI_GEN_WREADY_UNCONNECTED),
        .S14_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_WVALID(1'b0),
        .S14_AXI_RACK(1'b0),
        .S14_AXI_RDATA(NLW_U0_S14_AXI_RDATA_UNCONNECTED[31:0]),
        .S14_AXI_RID(NLW_U0_S14_AXI_RID_UNCONNECTED[0]),
        .S14_AXI_RLAST(NLW_U0_S14_AXI_RLAST_UNCONNECTED),
        .S14_AXI_RREADY(1'b0),
        .S14_AXI_RRESP(NLW_U0_S14_AXI_RRESP_UNCONNECTED[1:0]),
        .S14_AXI_RVALID(NLW_U0_S14_AXI_RVALID_UNCONNECTED),
        .S14_AXI_WACK(1'b0),
        .S14_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_WLAST(1'b0),
        .S14_AXI_WREADY(NLW_U0_S14_AXI_WREADY_UNCONNECTED),
        .S14_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_WVALID(1'b0),
        .S15_AXI_ACADDR(NLW_U0_S15_AXI_ACADDR_UNCONNECTED[31:0]),
        .S15_AXI_ACPROT(NLW_U0_S15_AXI_ACPROT_UNCONNECTED[2:0]),
        .S15_AXI_ACREADY(1'b0),
        .S15_AXI_ACSNOOP(NLW_U0_S15_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S15_AXI_ACVALID(NLW_U0_S15_AXI_ACVALID_UNCONNECTED),
        .S15_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARBAR({1'b0,1'b0}),
        .S15_AXI_ARBURST({1'b0,1'b0}),
        .S15_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARDOMAIN({1'b0,1'b0}),
        .S15_AXI_ARID(1'b0),
        .S15_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARLOCK(1'b0),
        .S15_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARREADY(NLW_U0_S15_AXI_ARREADY_UNCONNECTED),
        .S15_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARVALID(1'b0),
        .S15_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWBAR({1'b0,1'b0}),
        .S15_AXI_AWBURST({1'b0,1'b0}),
        .S15_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWDOMAIN({1'b0,1'b0}),
        .S15_AXI_AWID(1'b0),
        .S15_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWLOCK(1'b0),
        .S15_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWREADY(NLW_U0_S15_AXI_AWREADY_UNCONNECTED),
        .S15_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S15_AXI_AWVALID(1'b0),
        .S15_AXI_BID(NLW_U0_S15_AXI_BID_UNCONNECTED[0]),
        .S15_AXI_BREADY(1'b0),
        .S15_AXI_BRESP(NLW_U0_S15_AXI_BRESP_UNCONNECTED[1:0]),
        .S15_AXI_BVALID(NLW_U0_S15_AXI_BVALID_UNCONNECTED),
        .S15_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_CDLAST(1'b0),
        .S15_AXI_CDREADY(NLW_U0_S15_AXI_CDREADY_UNCONNECTED),
        .S15_AXI_CDVALID(1'b0),
        .S15_AXI_CRREADY(NLW_U0_S15_AXI_CRREADY_UNCONNECTED),
        .S15_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_CRVALID(1'b0),
        .S15_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S15_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARID(1'b0),
        .S15_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARLOCK(1'b0),
        .S15_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARREADY(NLW_U0_S15_AXI_GEN_ARREADY_UNCONNECTED),
        .S15_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARVALID(1'b0),
        .S15_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S15_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWID(1'b0),
        .S15_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWLOCK(1'b0),
        .S15_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWREADY(NLW_U0_S15_AXI_GEN_AWREADY_UNCONNECTED),
        .S15_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWVALID(1'b0),
        .S15_AXI_GEN_BID(NLW_U0_S15_AXI_GEN_BID_UNCONNECTED[0]),
        .S15_AXI_GEN_BREADY(1'b0),
        .S15_AXI_GEN_BRESP(NLW_U0_S15_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S15_AXI_GEN_BVALID(NLW_U0_S15_AXI_GEN_BVALID_UNCONNECTED),
        .S15_AXI_GEN_RDATA(NLW_U0_S15_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S15_AXI_GEN_RID(NLW_U0_S15_AXI_GEN_RID_UNCONNECTED[0]),
        .S15_AXI_GEN_RLAST(NLW_U0_S15_AXI_GEN_RLAST_UNCONNECTED),
        .S15_AXI_GEN_RREADY(1'b0),
        .S15_AXI_GEN_RRESP(NLW_U0_S15_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S15_AXI_GEN_RVALID(NLW_U0_S15_AXI_GEN_RVALID_UNCONNECTED),
        .S15_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_WLAST(1'b0),
        .S15_AXI_GEN_WREADY(NLW_U0_S15_AXI_GEN_WREADY_UNCONNECTED),
        .S15_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_WVALID(1'b0),
        .S15_AXI_RACK(1'b0),
        .S15_AXI_RDATA(NLW_U0_S15_AXI_RDATA_UNCONNECTED[31:0]),
        .S15_AXI_RID(NLW_U0_S15_AXI_RID_UNCONNECTED[0]),
        .S15_AXI_RLAST(NLW_U0_S15_AXI_RLAST_UNCONNECTED),
        .S15_AXI_RREADY(1'b0),
        .S15_AXI_RRESP(NLW_U0_S15_AXI_RRESP_UNCONNECTED[1:0]),
        .S15_AXI_RVALID(NLW_U0_S15_AXI_RVALID_UNCONNECTED),
        .S15_AXI_WACK(1'b0),
        .S15_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_WLAST(1'b0),
        .S15_AXI_WREADY(NLW_U0_S15_AXI_WREADY_UNCONNECTED),
        .S15_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_WVALID(1'b0),
        .S1_AXI_ACADDR(NLW_U0_S1_AXI_ACADDR_UNCONNECTED[31:0]),
        .S1_AXI_ACPROT(NLW_U0_S1_AXI_ACPROT_UNCONNECTED[2:0]),
        .S1_AXI_ACREADY(1'b0),
        .S1_AXI_ACSNOOP(NLW_U0_S1_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S1_AXI_ACVALID(NLW_U0_S1_AXI_ACVALID_UNCONNECTED),
        .S1_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_ARBAR({1'b0,1'b0}),
        .S1_AXI_ARBURST({1'b0,1'b0}),
        .S1_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_ARDOMAIN({1'b0,1'b0}),
        .S1_AXI_ARID(1'b0),
        .S1_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_ARLOCK(1'b0),
        .S1_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S1_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_ARREADY(NLW_U0_S1_AXI_ARREADY_UNCONNECTED),
        .S1_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S1_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_ARVALID(1'b0),
        .S1_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_AWBAR({1'b0,1'b0}),
        .S1_AXI_AWBURST({1'b0,1'b0}),
        .S1_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_AWDOMAIN({1'b0,1'b0}),
        .S1_AXI_AWID(1'b0),
        .S1_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_AWLOCK(1'b0),
        .S1_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S1_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_AWREADY(NLW_U0_S1_AXI_AWREADY_UNCONNECTED),
        .S1_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S1_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S1_AXI_AWVALID(1'b0),
        .S1_AXI_BID(NLW_U0_S1_AXI_BID_UNCONNECTED[0]),
        .S1_AXI_BREADY(1'b0),
        .S1_AXI_BRESP(NLW_U0_S1_AXI_BRESP_UNCONNECTED[1:0]),
        .S1_AXI_BVALID(NLW_U0_S1_AXI_BVALID_UNCONNECTED),
        .S1_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_CDLAST(1'b0),
        .S1_AXI_CDREADY(NLW_U0_S1_AXI_CDREADY_UNCONNECTED),
        .S1_AXI_CDVALID(1'b0),
        .S1_AXI_CRREADY(NLW_U0_S1_AXI_CRREADY_UNCONNECTED),
        .S1_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_CRVALID(1'b0),
        .S1_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S1_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARID(1'b0),
        .S1_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARLOCK(1'b0),
        .S1_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARREADY(NLW_U0_S1_AXI_GEN_ARREADY_UNCONNECTED),
        .S1_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARVALID(1'b0),
        .S1_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S1_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWID(1'b0),
        .S1_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWLOCK(1'b0),
        .S1_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWREADY(NLW_U0_S1_AXI_GEN_AWREADY_UNCONNECTED),
        .S1_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWVALID(1'b0),
        .S1_AXI_GEN_BID(NLW_U0_S1_AXI_GEN_BID_UNCONNECTED[0]),
        .S1_AXI_GEN_BREADY(1'b0),
        .S1_AXI_GEN_BRESP(NLW_U0_S1_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S1_AXI_GEN_BVALID(NLW_U0_S1_AXI_GEN_BVALID_UNCONNECTED),
        .S1_AXI_GEN_RDATA(NLW_U0_S1_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S1_AXI_GEN_RID(NLW_U0_S1_AXI_GEN_RID_UNCONNECTED[0]),
        .S1_AXI_GEN_RLAST(NLW_U0_S1_AXI_GEN_RLAST_UNCONNECTED),
        .S1_AXI_GEN_RREADY(1'b0),
        .S1_AXI_GEN_RRESP(NLW_U0_S1_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S1_AXI_GEN_RVALID(NLW_U0_S1_AXI_GEN_RVALID_UNCONNECTED),
        .S1_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_WLAST(1'b0),
        .S1_AXI_GEN_WREADY(NLW_U0_S1_AXI_GEN_WREADY_UNCONNECTED),
        .S1_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_WVALID(1'b0),
        .S1_AXI_RACK(1'b0),
        .S1_AXI_RDATA(NLW_U0_S1_AXI_RDATA_UNCONNECTED[31:0]),
        .S1_AXI_RID(NLW_U0_S1_AXI_RID_UNCONNECTED[0]),
        .S1_AXI_RLAST(NLW_U0_S1_AXI_RLAST_UNCONNECTED),
        .S1_AXI_RREADY(1'b0),
        .S1_AXI_RRESP(NLW_U0_S1_AXI_RRESP_UNCONNECTED[1:0]),
        .S1_AXI_RVALID(NLW_U0_S1_AXI_RVALID_UNCONNECTED),
        .S1_AXI_WACK(1'b0),
        .S1_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_WLAST(1'b0),
        .S1_AXI_WREADY(NLW_U0_S1_AXI_WREADY_UNCONNECTED),
        .S1_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_WVALID(1'b0),
        .S2_AXI_ACADDR(NLW_U0_S2_AXI_ACADDR_UNCONNECTED[31:0]),
        .S2_AXI_ACPROT(NLW_U0_S2_AXI_ACPROT_UNCONNECTED[2:0]),
        .S2_AXI_ACREADY(1'b0),
        .S2_AXI_ACSNOOP(NLW_U0_S2_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S2_AXI_ACVALID(NLW_U0_S2_AXI_ACVALID_UNCONNECTED),
        .S2_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARBAR({1'b0,1'b0}),
        .S2_AXI_ARBURST({1'b0,1'b0}),
        .S2_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARDOMAIN({1'b0,1'b0}),
        .S2_AXI_ARID(1'b0),
        .S2_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARLOCK(1'b0),
        .S2_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARREADY(NLW_U0_S2_AXI_ARREADY_UNCONNECTED),
        .S2_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARVALID(1'b0),
        .S2_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWBAR({1'b0,1'b0}),
        .S2_AXI_AWBURST({1'b0,1'b0}),
        .S2_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWDOMAIN({1'b0,1'b0}),
        .S2_AXI_AWID(1'b0),
        .S2_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWLOCK(1'b0),
        .S2_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWREADY(NLW_U0_S2_AXI_AWREADY_UNCONNECTED),
        .S2_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S2_AXI_AWVALID(1'b0),
        .S2_AXI_BID(NLW_U0_S2_AXI_BID_UNCONNECTED[0]),
        .S2_AXI_BREADY(1'b0),
        .S2_AXI_BRESP(NLW_U0_S2_AXI_BRESP_UNCONNECTED[1:0]),
        .S2_AXI_BVALID(NLW_U0_S2_AXI_BVALID_UNCONNECTED),
        .S2_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_CDLAST(1'b0),
        .S2_AXI_CDREADY(NLW_U0_S2_AXI_CDREADY_UNCONNECTED),
        .S2_AXI_CDVALID(1'b0),
        .S2_AXI_CRREADY(NLW_U0_S2_AXI_CRREADY_UNCONNECTED),
        .S2_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_CRVALID(1'b0),
        .S2_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S2_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARID(1'b0),
        .S2_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARLOCK(1'b0),
        .S2_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARREADY(NLW_U0_S2_AXI_GEN_ARREADY_UNCONNECTED),
        .S2_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARVALID(1'b0),
        .S2_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S2_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWID(1'b0),
        .S2_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWLOCK(1'b0),
        .S2_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWREADY(NLW_U0_S2_AXI_GEN_AWREADY_UNCONNECTED),
        .S2_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWVALID(1'b0),
        .S2_AXI_GEN_BID(NLW_U0_S2_AXI_GEN_BID_UNCONNECTED[0]),
        .S2_AXI_GEN_BREADY(1'b0),
        .S2_AXI_GEN_BRESP(NLW_U0_S2_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S2_AXI_GEN_BVALID(NLW_U0_S2_AXI_GEN_BVALID_UNCONNECTED),
        .S2_AXI_GEN_RDATA(NLW_U0_S2_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S2_AXI_GEN_RID(NLW_U0_S2_AXI_GEN_RID_UNCONNECTED[0]),
        .S2_AXI_GEN_RLAST(NLW_U0_S2_AXI_GEN_RLAST_UNCONNECTED),
        .S2_AXI_GEN_RREADY(1'b0),
        .S2_AXI_GEN_RRESP(NLW_U0_S2_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S2_AXI_GEN_RVALID(NLW_U0_S2_AXI_GEN_RVALID_UNCONNECTED),
        .S2_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_WLAST(1'b0),
        .S2_AXI_GEN_WREADY(NLW_U0_S2_AXI_GEN_WREADY_UNCONNECTED),
        .S2_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_WVALID(1'b0),
        .S2_AXI_RACK(1'b0),
        .S2_AXI_RDATA(NLW_U0_S2_AXI_RDATA_UNCONNECTED[31:0]),
        .S2_AXI_RID(NLW_U0_S2_AXI_RID_UNCONNECTED[0]),
        .S2_AXI_RLAST(NLW_U0_S2_AXI_RLAST_UNCONNECTED),
        .S2_AXI_RREADY(1'b0),
        .S2_AXI_RRESP(NLW_U0_S2_AXI_RRESP_UNCONNECTED[1:0]),
        .S2_AXI_RVALID(NLW_U0_S2_AXI_RVALID_UNCONNECTED),
        .S2_AXI_WACK(1'b0),
        .S2_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_WLAST(1'b0),
        .S2_AXI_WREADY(NLW_U0_S2_AXI_WREADY_UNCONNECTED),
        .S2_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_WVALID(1'b0),
        .S3_AXI_ACADDR(NLW_U0_S3_AXI_ACADDR_UNCONNECTED[31:0]),
        .S3_AXI_ACPROT(NLW_U0_S3_AXI_ACPROT_UNCONNECTED[2:0]),
        .S3_AXI_ACREADY(1'b0),
        .S3_AXI_ACSNOOP(NLW_U0_S3_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S3_AXI_ACVALID(NLW_U0_S3_AXI_ACVALID_UNCONNECTED),
        .S3_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARBAR({1'b0,1'b0}),
        .S3_AXI_ARBURST({1'b0,1'b0}),
        .S3_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARDOMAIN({1'b0,1'b0}),
        .S3_AXI_ARID(1'b0),
        .S3_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARLOCK(1'b0),
        .S3_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARREADY(NLW_U0_S3_AXI_ARREADY_UNCONNECTED),
        .S3_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARVALID(1'b0),
        .S3_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWBAR({1'b0,1'b0}),
        .S3_AXI_AWBURST({1'b0,1'b0}),
        .S3_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWDOMAIN({1'b0,1'b0}),
        .S3_AXI_AWID(1'b0),
        .S3_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWLOCK(1'b0),
        .S3_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWREADY(NLW_U0_S3_AXI_AWREADY_UNCONNECTED),
        .S3_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S3_AXI_AWVALID(1'b0),
        .S3_AXI_BID(NLW_U0_S3_AXI_BID_UNCONNECTED[0]),
        .S3_AXI_BREADY(1'b0),
        .S3_AXI_BRESP(NLW_U0_S3_AXI_BRESP_UNCONNECTED[1:0]),
        .S3_AXI_BVALID(NLW_U0_S3_AXI_BVALID_UNCONNECTED),
        .S3_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_CDLAST(1'b0),
        .S3_AXI_CDREADY(NLW_U0_S3_AXI_CDREADY_UNCONNECTED),
        .S3_AXI_CDVALID(1'b0),
        .S3_AXI_CRREADY(NLW_U0_S3_AXI_CRREADY_UNCONNECTED),
        .S3_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_CRVALID(1'b0),
        .S3_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S3_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARID(1'b0),
        .S3_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARLOCK(1'b0),
        .S3_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARREADY(NLW_U0_S3_AXI_GEN_ARREADY_UNCONNECTED),
        .S3_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARVALID(1'b0),
        .S3_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S3_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWID(1'b0),
        .S3_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWLOCK(1'b0),
        .S3_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWREADY(NLW_U0_S3_AXI_GEN_AWREADY_UNCONNECTED),
        .S3_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWVALID(1'b0),
        .S3_AXI_GEN_BID(NLW_U0_S3_AXI_GEN_BID_UNCONNECTED[0]),
        .S3_AXI_GEN_BREADY(1'b0),
        .S3_AXI_GEN_BRESP(NLW_U0_S3_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S3_AXI_GEN_BVALID(NLW_U0_S3_AXI_GEN_BVALID_UNCONNECTED),
        .S3_AXI_GEN_RDATA(NLW_U0_S3_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S3_AXI_GEN_RID(NLW_U0_S3_AXI_GEN_RID_UNCONNECTED[0]),
        .S3_AXI_GEN_RLAST(NLW_U0_S3_AXI_GEN_RLAST_UNCONNECTED),
        .S3_AXI_GEN_RREADY(1'b0),
        .S3_AXI_GEN_RRESP(NLW_U0_S3_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S3_AXI_GEN_RVALID(NLW_U0_S3_AXI_GEN_RVALID_UNCONNECTED),
        .S3_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_WLAST(1'b0),
        .S3_AXI_GEN_WREADY(NLW_U0_S3_AXI_GEN_WREADY_UNCONNECTED),
        .S3_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_WVALID(1'b0),
        .S3_AXI_RACK(1'b0),
        .S3_AXI_RDATA(NLW_U0_S3_AXI_RDATA_UNCONNECTED[31:0]),
        .S3_AXI_RID(NLW_U0_S3_AXI_RID_UNCONNECTED[0]),
        .S3_AXI_RLAST(NLW_U0_S3_AXI_RLAST_UNCONNECTED),
        .S3_AXI_RREADY(1'b0),
        .S3_AXI_RRESP(NLW_U0_S3_AXI_RRESP_UNCONNECTED[1:0]),
        .S3_AXI_RVALID(NLW_U0_S3_AXI_RVALID_UNCONNECTED),
        .S3_AXI_WACK(1'b0),
        .S3_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_WLAST(1'b0),
        .S3_AXI_WREADY(NLW_U0_S3_AXI_WREADY_UNCONNECTED),
        .S3_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_WVALID(1'b0),
        .S4_AXI_ACADDR(NLW_U0_S4_AXI_ACADDR_UNCONNECTED[31:0]),
        .S4_AXI_ACPROT(NLW_U0_S4_AXI_ACPROT_UNCONNECTED[2:0]),
        .S4_AXI_ACREADY(1'b0),
        .S4_AXI_ACSNOOP(NLW_U0_S4_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S4_AXI_ACVALID(NLW_U0_S4_AXI_ACVALID_UNCONNECTED),
        .S4_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARBAR({1'b0,1'b0}),
        .S4_AXI_ARBURST({1'b0,1'b0}),
        .S4_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARDOMAIN({1'b0,1'b0}),
        .S4_AXI_ARID(1'b0),
        .S4_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARLOCK(1'b0),
        .S4_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARREADY(NLW_U0_S4_AXI_ARREADY_UNCONNECTED),
        .S4_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARVALID(1'b0),
        .S4_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWBAR({1'b0,1'b0}),
        .S4_AXI_AWBURST({1'b0,1'b0}),
        .S4_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWDOMAIN({1'b0,1'b0}),
        .S4_AXI_AWID(1'b0),
        .S4_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWLOCK(1'b0),
        .S4_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWREADY(NLW_U0_S4_AXI_AWREADY_UNCONNECTED),
        .S4_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S4_AXI_AWVALID(1'b0),
        .S4_AXI_BID(NLW_U0_S4_AXI_BID_UNCONNECTED[0]),
        .S4_AXI_BREADY(1'b0),
        .S4_AXI_BRESP(NLW_U0_S4_AXI_BRESP_UNCONNECTED[1:0]),
        .S4_AXI_BVALID(NLW_U0_S4_AXI_BVALID_UNCONNECTED),
        .S4_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_CDLAST(1'b0),
        .S4_AXI_CDREADY(NLW_U0_S4_AXI_CDREADY_UNCONNECTED),
        .S4_AXI_CDVALID(1'b0),
        .S4_AXI_CRREADY(NLW_U0_S4_AXI_CRREADY_UNCONNECTED),
        .S4_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_CRVALID(1'b0),
        .S4_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S4_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARID(1'b0),
        .S4_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARLOCK(1'b0),
        .S4_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARREADY(NLW_U0_S4_AXI_GEN_ARREADY_UNCONNECTED),
        .S4_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARVALID(1'b0),
        .S4_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S4_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWID(1'b0),
        .S4_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWLOCK(1'b0),
        .S4_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWREADY(NLW_U0_S4_AXI_GEN_AWREADY_UNCONNECTED),
        .S4_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWVALID(1'b0),
        .S4_AXI_GEN_BID(NLW_U0_S4_AXI_GEN_BID_UNCONNECTED[0]),
        .S4_AXI_GEN_BREADY(1'b0),
        .S4_AXI_GEN_BRESP(NLW_U0_S4_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S4_AXI_GEN_BVALID(NLW_U0_S4_AXI_GEN_BVALID_UNCONNECTED),
        .S4_AXI_GEN_RDATA(NLW_U0_S4_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S4_AXI_GEN_RID(NLW_U0_S4_AXI_GEN_RID_UNCONNECTED[0]),
        .S4_AXI_GEN_RLAST(NLW_U0_S4_AXI_GEN_RLAST_UNCONNECTED),
        .S4_AXI_GEN_RREADY(1'b0),
        .S4_AXI_GEN_RRESP(NLW_U0_S4_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S4_AXI_GEN_RVALID(NLW_U0_S4_AXI_GEN_RVALID_UNCONNECTED),
        .S4_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_WLAST(1'b0),
        .S4_AXI_GEN_WREADY(NLW_U0_S4_AXI_GEN_WREADY_UNCONNECTED),
        .S4_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_WVALID(1'b0),
        .S4_AXI_RACK(1'b0),
        .S4_AXI_RDATA(NLW_U0_S4_AXI_RDATA_UNCONNECTED[31:0]),
        .S4_AXI_RID(NLW_U0_S4_AXI_RID_UNCONNECTED[0]),
        .S4_AXI_RLAST(NLW_U0_S4_AXI_RLAST_UNCONNECTED),
        .S4_AXI_RREADY(1'b0),
        .S4_AXI_RRESP(NLW_U0_S4_AXI_RRESP_UNCONNECTED[1:0]),
        .S4_AXI_RVALID(NLW_U0_S4_AXI_RVALID_UNCONNECTED),
        .S4_AXI_WACK(1'b0),
        .S4_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_WLAST(1'b0),
        .S4_AXI_WREADY(NLW_U0_S4_AXI_WREADY_UNCONNECTED),
        .S4_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_WVALID(1'b0),
        .S5_AXI_ACADDR(NLW_U0_S5_AXI_ACADDR_UNCONNECTED[31:0]),
        .S5_AXI_ACPROT(NLW_U0_S5_AXI_ACPROT_UNCONNECTED[2:0]),
        .S5_AXI_ACREADY(1'b0),
        .S5_AXI_ACSNOOP(NLW_U0_S5_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S5_AXI_ACVALID(NLW_U0_S5_AXI_ACVALID_UNCONNECTED),
        .S5_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARBAR({1'b0,1'b0}),
        .S5_AXI_ARBURST({1'b0,1'b0}),
        .S5_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARDOMAIN({1'b0,1'b0}),
        .S5_AXI_ARID(1'b0),
        .S5_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARLOCK(1'b0),
        .S5_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARREADY(NLW_U0_S5_AXI_ARREADY_UNCONNECTED),
        .S5_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARVALID(1'b0),
        .S5_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWBAR({1'b0,1'b0}),
        .S5_AXI_AWBURST({1'b0,1'b0}),
        .S5_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWDOMAIN({1'b0,1'b0}),
        .S5_AXI_AWID(1'b0),
        .S5_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWLOCK(1'b0),
        .S5_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWREADY(NLW_U0_S5_AXI_AWREADY_UNCONNECTED),
        .S5_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S5_AXI_AWVALID(1'b0),
        .S5_AXI_BID(NLW_U0_S5_AXI_BID_UNCONNECTED[0]),
        .S5_AXI_BREADY(1'b0),
        .S5_AXI_BRESP(NLW_U0_S5_AXI_BRESP_UNCONNECTED[1:0]),
        .S5_AXI_BVALID(NLW_U0_S5_AXI_BVALID_UNCONNECTED),
        .S5_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_CDLAST(1'b0),
        .S5_AXI_CDREADY(NLW_U0_S5_AXI_CDREADY_UNCONNECTED),
        .S5_AXI_CDVALID(1'b0),
        .S5_AXI_CRREADY(NLW_U0_S5_AXI_CRREADY_UNCONNECTED),
        .S5_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_CRVALID(1'b0),
        .S5_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S5_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARID(1'b0),
        .S5_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARLOCK(1'b0),
        .S5_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARREADY(NLW_U0_S5_AXI_GEN_ARREADY_UNCONNECTED),
        .S5_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARVALID(1'b0),
        .S5_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S5_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWID(1'b0),
        .S5_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWLOCK(1'b0),
        .S5_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWREADY(NLW_U0_S5_AXI_GEN_AWREADY_UNCONNECTED),
        .S5_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWVALID(1'b0),
        .S5_AXI_GEN_BID(NLW_U0_S5_AXI_GEN_BID_UNCONNECTED[0]),
        .S5_AXI_GEN_BREADY(1'b0),
        .S5_AXI_GEN_BRESP(NLW_U0_S5_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S5_AXI_GEN_BVALID(NLW_U0_S5_AXI_GEN_BVALID_UNCONNECTED),
        .S5_AXI_GEN_RDATA(NLW_U0_S5_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S5_AXI_GEN_RID(NLW_U0_S5_AXI_GEN_RID_UNCONNECTED[0]),
        .S5_AXI_GEN_RLAST(NLW_U0_S5_AXI_GEN_RLAST_UNCONNECTED),
        .S5_AXI_GEN_RREADY(1'b0),
        .S5_AXI_GEN_RRESP(NLW_U0_S5_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S5_AXI_GEN_RVALID(NLW_U0_S5_AXI_GEN_RVALID_UNCONNECTED),
        .S5_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_WLAST(1'b0),
        .S5_AXI_GEN_WREADY(NLW_U0_S5_AXI_GEN_WREADY_UNCONNECTED),
        .S5_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_WVALID(1'b0),
        .S5_AXI_RACK(1'b0),
        .S5_AXI_RDATA(NLW_U0_S5_AXI_RDATA_UNCONNECTED[31:0]),
        .S5_AXI_RID(NLW_U0_S5_AXI_RID_UNCONNECTED[0]),
        .S5_AXI_RLAST(NLW_U0_S5_AXI_RLAST_UNCONNECTED),
        .S5_AXI_RREADY(1'b0),
        .S5_AXI_RRESP(NLW_U0_S5_AXI_RRESP_UNCONNECTED[1:0]),
        .S5_AXI_RVALID(NLW_U0_S5_AXI_RVALID_UNCONNECTED),
        .S5_AXI_WACK(1'b0),
        .S5_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_WLAST(1'b0),
        .S5_AXI_WREADY(NLW_U0_S5_AXI_WREADY_UNCONNECTED),
        .S5_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_WVALID(1'b0),
        .S6_AXI_ACADDR(NLW_U0_S6_AXI_ACADDR_UNCONNECTED[31:0]),
        .S6_AXI_ACPROT(NLW_U0_S6_AXI_ACPROT_UNCONNECTED[2:0]),
        .S6_AXI_ACREADY(1'b0),
        .S6_AXI_ACSNOOP(NLW_U0_S6_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S6_AXI_ACVALID(NLW_U0_S6_AXI_ACVALID_UNCONNECTED),
        .S6_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARBAR({1'b0,1'b0}),
        .S6_AXI_ARBURST({1'b0,1'b0}),
        .S6_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARDOMAIN({1'b0,1'b0}),
        .S6_AXI_ARID(1'b0),
        .S6_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARLOCK(1'b0),
        .S6_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARREADY(NLW_U0_S6_AXI_ARREADY_UNCONNECTED),
        .S6_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARVALID(1'b0),
        .S6_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWBAR({1'b0,1'b0}),
        .S6_AXI_AWBURST({1'b0,1'b0}),
        .S6_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWDOMAIN({1'b0,1'b0}),
        .S6_AXI_AWID(1'b0),
        .S6_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWLOCK(1'b0),
        .S6_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWREADY(NLW_U0_S6_AXI_AWREADY_UNCONNECTED),
        .S6_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S6_AXI_AWVALID(1'b0),
        .S6_AXI_BID(NLW_U0_S6_AXI_BID_UNCONNECTED[0]),
        .S6_AXI_BREADY(1'b0),
        .S6_AXI_BRESP(NLW_U0_S6_AXI_BRESP_UNCONNECTED[1:0]),
        .S6_AXI_BVALID(NLW_U0_S6_AXI_BVALID_UNCONNECTED),
        .S6_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_CDLAST(1'b0),
        .S6_AXI_CDREADY(NLW_U0_S6_AXI_CDREADY_UNCONNECTED),
        .S6_AXI_CDVALID(1'b0),
        .S6_AXI_CRREADY(NLW_U0_S6_AXI_CRREADY_UNCONNECTED),
        .S6_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_CRVALID(1'b0),
        .S6_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S6_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARID(1'b0),
        .S6_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARLOCK(1'b0),
        .S6_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARREADY(NLW_U0_S6_AXI_GEN_ARREADY_UNCONNECTED),
        .S6_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARVALID(1'b0),
        .S6_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S6_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWID(1'b0),
        .S6_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWLOCK(1'b0),
        .S6_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWREADY(NLW_U0_S6_AXI_GEN_AWREADY_UNCONNECTED),
        .S6_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWVALID(1'b0),
        .S6_AXI_GEN_BID(NLW_U0_S6_AXI_GEN_BID_UNCONNECTED[0]),
        .S6_AXI_GEN_BREADY(1'b0),
        .S6_AXI_GEN_BRESP(NLW_U0_S6_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S6_AXI_GEN_BVALID(NLW_U0_S6_AXI_GEN_BVALID_UNCONNECTED),
        .S6_AXI_GEN_RDATA(NLW_U0_S6_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S6_AXI_GEN_RID(NLW_U0_S6_AXI_GEN_RID_UNCONNECTED[0]),
        .S6_AXI_GEN_RLAST(NLW_U0_S6_AXI_GEN_RLAST_UNCONNECTED),
        .S6_AXI_GEN_RREADY(1'b0),
        .S6_AXI_GEN_RRESP(NLW_U0_S6_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S6_AXI_GEN_RVALID(NLW_U0_S6_AXI_GEN_RVALID_UNCONNECTED),
        .S6_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_WLAST(1'b0),
        .S6_AXI_GEN_WREADY(NLW_U0_S6_AXI_GEN_WREADY_UNCONNECTED),
        .S6_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_WVALID(1'b0),
        .S6_AXI_RACK(1'b0),
        .S6_AXI_RDATA(NLW_U0_S6_AXI_RDATA_UNCONNECTED[31:0]),
        .S6_AXI_RID(NLW_U0_S6_AXI_RID_UNCONNECTED[0]),
        .S6_AXI_RLAST(NLW_U0_S6_AXI_RLAST_UNCONNECTED),
        .S6_AXI_RREADY(1'b0),
        .S6_AXI_RRESP(NLW_U0_S6_AXI_RRESP_UNCONNECTED[1:0]),
        .S6_AXI_RVALID(NLW_U0_S6_AXI_RVALID_UNCONNECTED),
        .S6_AXI_WACK(1'b0),
        .S6_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_WLAST(1'b0),
        .S6_AXI_WREADY(NLW_U0_S6_AXI_WREADY_UNCONNECTED),
        .S6_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_WVALID(1'b0),
        .S7_AXI_ACADDR(NLW_U0_S7_AXI_ACADDR_UNCONNECTED[31:0]),
        .S7_AXI_ACPROT(NLW_U0_S7_AXI_ACPROT_UNCONNECTED[2:0]),
        .S7_AXI_ACREADY(1'b0),
        .S7_AXI_ACSNOOP(NLW_U0_S7_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S7_AXI_ACVALID(NLW_U0_S7_AXI_ACVALID_UNCONNECTED),
        .S7_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARBAR({1'b0,1'b0}),
        .S7_AXI_ARBURST({1'b0,1'b0}),
        .S7_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARDOMAIN({1'b0,1'b0}),
        .S7_AXI_ARID(1'b0),
        .S7_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARLOCK(1'b0),
        .S7_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARREADY(NLW_U0_S7_AXI_ARREADY_UNCONNECTED),
        .S7_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARVALID(1'b0),
        .S7_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWBAR({1'b0,1'b0}),
        .S7_AXI_AWBURST({1'b0,1'b0}),
        .S7_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWDOMAIN({1'b0,1'b0}),
        .S7_AXI_AWID(1'b0),
        .S7_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWLOCK(1'b0),
        .S7_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWREADY(NLW_U0_S7_AXI_AWREADY_UNCONNECTED),
        .S7_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S7_AXI_AWVALID(1'b0),
        .S7_AXI_BID(NLW_U0_S7_AXI_BID_UNCONNECTED[0]),
        .S7_AXI_BREADY(1'b0),
        .S7_AXI_BRESP(NLW_U0_S7_AXI_BRESP_UNCONNECTED[1:0]),
        .S7_AXI_BVALID(NLW_U0_S7_AXI_BVALID_UNCONNECTED),
        .S7_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_CDLAST(1'b0),
        .S7_AXI_CDREADY(NLW_U0_S7_AXI_CDREADY_UNCONNECTED),
        .S7_AXI_CDVALID(1'b0),
        .S7_AXI_CRREADY(NLW_U0_S7_AXI_CRREADY_UNCONNECTED),
        .S7_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_CRVALID(1'b0),
        .S7_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S7_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARID(1'b0),
        .S7_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARLOCK(1'b0),
        .S7_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARREADY(NLW_U0_S7_AXI_GEN_ARREADY_UNCONNECTED),
        .S7_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARVALID(1'b0),
        .S7_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S7_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWID(1'b0),
        .S7_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWLOCK(1'b0),
        .S7_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWREADY(NLW_U0_S7_AXI_GEN_AWREADY_UNCONNECTED),
        .S7_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWVALID(1'b0),
        .S7_AXI_GEN_BID(NLW_U0_S7_AXI_GEN_BID_UNCONNECTED[0]),
        .S7_AXI_GEN_BREADY(1'b0),
        .S7_AXI_GEN_BRESP(NLW_U0_S7_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S7_AXI_GEN_BVALID(NLW_U0_S7_AXI_GEN_BVALID_UNCONNECTED),
        .S7_AXI_GEN_RDATA(NLW_U0_S7_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S7_AXI_GEN_RID(NLW_U0_S7_AXI_GEN_RID_UNCONNECTED[0]),
        .S7_AXI_GEN_RLAST(NLW_U0_S7_AXI_GEN_RLAST_UNCONNECTED),
        .S7_AXI_GEN_RREADY(1'b0),
        .S7_AXI_GEN_RRESP(NLW_U0_S7_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S7_AXI_GEN_RVALID(NLW_U0_S7_AXI_GEN_RVALID_UNCONNECTED),
        .S7_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_WLAST(1'b0),
        .S7_AXI_GEN_WREADY(NLW_U0_S7_AXI_GEN_WREADY_UNCONNECTED),
        .S7_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_WVALID(1'b0),
        .S7_AXI_RACK(1'b0),
        .S7_AXI_RDATA(NLW_U0_S7_AXI_RDATA_UNCONNECTED[31:0]),
        .S7_AXI_RID(NLW_U0_S7_AXI_RID_UNCONNECTED[0]),
        .S7_AXI_RLAST(NLW_U0_S7_AXI_RLAST_UNCONNECTED),
        .S7_AXI_RREADY(1'b0),
        .S7_AXI_RRESP(NLW_U0_S7_AXI_RRESP_UNCONNECTED[1:0]),
        .S7_AXI_RVALID(NLW_U0_S7_AXI_RVALID_UNCONNECTED),
        .S7_AXI_WACK(1'b0),
        .S7_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_WLAST(1'b0),
        .S7_AXI_WREADY(NLW_U0_S7_AXI_WREADY_UNCONNECTED),
        .S7_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_WVALID(1'b0),
        .S8_AXI_ACADDR(NLW_U0_S8_AXI_ACADDR_UNCONNECTED[31:0]),
        .S8_AXI_ACPROT(NLW_U0_S8_AXI_ACPROT_UNCONNECTED[2:0]),
        .S8_AXI_ACREADY(1'b0),
        .S8_AXI_ACSNOOP(NLW_U0_S8_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S8_AXI_ACVALID(NLW_U0_S8_AXI_ACVALID_UNCONNECTED),
        .S8_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARBAR({1'b0,1'b0}),
        .S8_AXI_ARBURST({1'b0,1'b0}),
        .S8_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARDOMAIN({1'b0,1'b0}),
        .S8_AXI_ARID(1'b0),
        .S8_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARLOCK(1'b0),
        .S8_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARREADY(NLW_U0_S8_AXI_ARREADY_UNCONNECTED),
        .S8_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARVALID(1'b0),
        .S8_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWBAR({1'b0,1'b0}),
        .S8_AXI_AWBURST({1'b0,1'b0}),
        .S8_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWDOMAIN({1'b0,1'b0}),
        .S8_AXI_AWID(1'b0),
        .S8_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWLOCK(1'b0),
        .S8_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWREADY(NLW_U0_S8_AXI_AWREADY_UNCONNECTED),
        .S8_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S8_AXI_AWVALID(1'b0),
        .S8_AXI_BID(NLW_U0_S8_AXI_BID_UNCONNECTED[0]),
        .S8_AXI_BREADY(1'b0),
        .S8_AXI_BRESP(NLW_U0_S8_AXI_BRESP_UNCONNECTED[1:0]),
        .S8_AXI_BVALID(NLW_U0_S8_AXI_BVALID_UNCONNECTED),
        .S8_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_CDLAST(1'b0),
        .S8_AXI_CDREADY(NLW_U0_S8_AXI_CDREADY_UNCONNECTED),
        .S8_AXI_CDVALID(1'b0),
        .S8_AXI_CRREADY(NLW_U0_S8_AXI_CRREADY_UNCONNECTED),
        .S8_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_CRVALID(1'b0),
        .S8_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S8_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARID(1'b0),
        .S8_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARLOCK(1'b0),
        .S8_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARREADY(NLW_U0_S8_AXI_GEN_ARREADY_UNCONNECTED),
        .S8_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARVALID(1'b0),
        .S8_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S8_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWID(1'b0),
        .S8_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWLOCK(1'b0),
        .S8_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWREADY(NLW_U0_S8_AXI_GEN_AWREADY_UNCONNECTED),
        .S8_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWVALID(1'b0),
        .S8_AXI_GEN_BID(NLW_U0_S8_AXI_GEN_BID_UNCONNECTED[0]),
        .S8_AXI_GEN_BREADY(1'b0),
        .S8_AXI_GEN_BRESP(NLW_U0_S8_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S8_AXI_GEN_BVALID(NLW_U0_S8_AXI_GEN_BVALID_UNCONNECTED),
        .S8_AXI_GEN_RDATA(NLW_U0_S8_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S8_AXI_GEN_RID(NLW_U0_S8_AXI_GEN_RID_UNCONNECTED[0]),
        .S8_AXI_GEN_RLAST(NLW_U0_S8_AXI_GEN_RLAST_UNCONNECTED),
        .S8_AXI_GEN_RREADY(1'b0),
        .S8_AXI_GEN_RRESP(NLW_U0_S8_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S8_AXI_GEN_RVALID(NLW_U0_S8_AXI_GEN_RVALID_UNCONNECTED),
        .S8_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_WLAST(1'b0),
        .S8_AXI_GEN_WREADY(NLW_U0_S8_AXI_GEN_WREADY_UNCONNECTED),
        .S8_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_WVALID(1'b0),
        .S8_AXI_RACK(1'b0),
        .S8_AXI_RDATA(NLW_U0_S8_AXI_RDATA_UNCONNECTED[31:0]),
        .S8_AXI_RID(NLW_U0_S8_AXI_RID_UNCONNECTED[0]),
        .S8_AXI_RLAST(NLW_U0_S8_AXI_RLAST_UNCONNECTED),
        .S8_AXI_RREADY(1'b0),
        .S8_AXI_RRESP(NLW_U0_S8_AXI_RRESP_UNCONNECTED[1:0]),
        .S8_AXI_RVALID(NLW_U0_S8_AXI_RVALID_UNCONNECTED),
        .S8_AXI_WACK(1'b0),
        .S8_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_WLAST(1'b0),
        .S8_AXI_WREADY(NLW_U0_S8_AXI_WREADY_UNCONNECTED),
        .S8_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_WVALID(1'b0),
        .S9_AXI_ACADDR(NLW_U0_S9_AXI_ACADDR_UNCONNECTED[31:0]),
        .S9_AXI_ACPROT(NLW_U0_S9_AXI_ACPROT_UNCONNECTED[2:0]),
        .S9_AXI_ACREADY(1'b0),
        .S9_AXI_ACSNOOP(NLW_U0_S9_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S9_AXI_ACVALID(NLW_U0_S9_AXI_ACVALID_UNCONNECTED),
        .S9_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARBAR({1'b0,1'b0}),
        .S9_AXI_ARBURST({1'b0,1'b0}),
        .S9_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARDOMAIN({1'b0,1'b0}),
        .S9_AXI_ARID(1'b0),
        .S9_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARLOCK(1'b0),
        .S9_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARREADY(NLW_U0_S9_AXI_ARREADY_UNCONNECTED),
        .S9_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARVALID(1'b0),
        .S9_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWBAR({1'b0,1'b0}),
        .S9_AXI_AWBURST({1'b0,1'b0}),
        .S9_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWDOMAIN({1'b0,1'b0}),
        .S9_AXI_AWID(1'b0),
        .S9_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWLOCK(1'b0),
        .S9_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWREADY(NLW_U0_S9_AXI_AWREADY_UNCONNECTED),
        .S9_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S9_AXI_AWVALID(1'b0),
        .S9_AXI_BID(NLW_U0_S9_AXI_BID_UNCONNECTED[0]),
        .S9_AXI_BREADY(1'b0),
        .S9_AXI_BRESP(NLW_U0_S9_AXI_BRESP_UNCONNECTED[1:0]),
        .S9_AXI_BVALID(NLW_U0_S9_AXI_BVALID_UNCONNECTED),
        .S9_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_CDLAST(1'b0),
        .S9_AXI_CDREADY(NLW_U0_S9_AXI_CDREADY_UNCONNECTED),
        .S9_AXI_CDVALID(1'b0),
        .S9_AXI_CRREADY(NLW_U0_S9_AXI_CRREADY_UNCONNECTED),
        .S9_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_CRVALID(1'b0),
        .S9_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S9_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARID(1'b0),
        .S9_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARLOCK(1'b0),
        .S9_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARREADY(NLW_U0_S9_AXI_GEN_ARREADY_UNCONNECTED),
        .S9_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARVALID(1'b0),
        .S9_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S9_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWID(1'b0),
        .S9_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWLOCK(1'b0),
        .S9_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWREADY(NLW_U0_S9_AXI_GEN_AWREADY_UNCONNECTED),
        .S9_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWVALID(1'b0),
        .S9_AXI_GEN_BID(NLW_U0_S9_AXI_GEN_BID_UNCONNECTED[0]),
        .S9_AXI_GEN_BREADY(1'b0),
        .S9_AXI_GEN_BRESP(NLW_U0_S9_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S9_AXI_GEN_BVALID(NLW_U0_S9_AXI_GEN_BVALID_UNCONNECTED),
        .S9_AXI_GEN_RDATA(NLW_U0_S9_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S9_AXI_GEN_RID(NLW_U0_S9_AXI_GEN_RID_UNCONNECTED[0]),
        .S9_AXI_GEN_RLAST(NLW_U0_S9_AXI_GEN_RLAST_UNCONNECTED),
        .S9_AXI_GEN_RREADY(1'b0),
        .S9_AXI_GEN_RRESP(NLW_U0_S9_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S9_AXI_GEN_RVALID(NLW_U0_S9_AXI_GEN_RVALID_UNCONNECTED),
        .S9_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_WLAST(1'b0),
        .S9_AXI_GEN_WREADY(NLW_U0_S9_AXI_GEN_WREADY_UNCONNECTED),
        .S9_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_WVALID(1'b0),
        .S9_AXI_RACK(1'b0),
        .S9_AXI_RDATA(NLW_U0_S9_AXI_RDATA_UNCONNECTED[31:0]),
        .S9_AXI_RID(NLW_U0_S9_AXI_RID_UNCONNECTED[0]),
        .S9_AXI_RLAST(NLW_U0_S9_AXI_RLAST_UNCONNECTED),
        .S9_AXI_RREADY(1'b0),
        .S9_AXI_RRESP(NLW_U0_S9_AXI_RRESP_UNCONNECTED[1:0]),
        .S9_AXI_RVALID(NLW_U0_S9_AXI_RVALID_UNCONNECTED),
        .S9_AXI_WACK(1'b0),
        .S9_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_WLAST(1'b0),
        .S9_AXI_WREADY(NLW_U0_S9_AXI_WREADY_UNCONNECTED),
        .S9_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_WVALID(1'b0),
        .S_AXI_CTRL_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S_AXI_CTRL_ARPROT({1'b0,1'b1,1'b0}),
        .S_AXI_CTRL_ARREADY(NLW_U0_S_AXI_CTRL_ARREADY_UNCONNECTED),
        .S_AXI_CTRL_ARVALID(1'b0),
        .S_AXI_CTRL_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S_AXI_CTRL_AWPROT({1'b0,1'b1,1'b0}),
        .S_AXI_CTRL_AWREADY(NLW_U0_S_AXI_CTRL_AWREADY_UNCONNECTED),
        .S_AXI_CTRL_AWVALID(1'b0),
        .S_AXI_CTRL_BREADY(1'b0),
        .S_AXI_CTRL_BRESP(NLW_U0_S_AXI_CTRL_BRESP_UNCONNECTED[1:0]),
        .S_AXI_CTRL_BVALID(NLW_U0_S_AXI_CTRL_BVALID_UNCONNECTED),
        .S_AXI_CTRL_RDATA(NLW_U0_S_AXI_CTRL_RDATA_UNCONNECTED[31:0]),
        .S_AXI_CTRL_RREADY(1'b0),
        .S_AXI_CTRL_RRESP(NLW_U0_S_AXI_CTRL_RRESP_UNCONNECTED[1:0]),
        .S_AXI_CTRL_RVALID(NLW_U0_S_AXI_CTRL_RVALID_UNCONNECTED),
        .S_AXI_CTRL_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S_AXI_CTRL_WREADY(NLW_U0_S_AXI_CTRL_WREADY_UNCONNECTED),
        .S_AXI_CTRL_WVALID(1'b0));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_416 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_105
   (in0,
    ARESET,
    ACLK);
  output in0;
  input ARESET;
  input ACLK;

  wire ACLK;
  wire ARESET;
  wire in0;

  Fast_IP_Clock_system_cache_0_0_reg_ce_106 Inst
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .in0(in0));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_183
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  Fast_IP_Clock_system_cache_0_0_reg_ce_403 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_184
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \bs_fifo_mem_reg[0][Src][1] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    ACLK,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    new_bs_src,
    update_write_hit,
    \bs_fifo_mem_reg[0][Src][1]_1 ,
    \update_info[Keep] ,
    update_piperun,
    lu_check_piperun,
    aw_fifo_full,
    update_done_aw_reg,
    update_done_aw_reg_0);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \bs_fifo_mem_reg[0][Src][1] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input ACLK;
  input [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  input [0:0]new_bs_src;
  input update_write_hit;
  input \bs_fifo_mem_reg[0][Src][1]_1 ;
  input \update_info[Keep] ;
  input update_piperun;
  input lu_check_piperun;
  input aw_fifo_full;
  input update_done_aw_reg;
  input update_done_aw_reg_0;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire aw_fifo_full;
  wire \bs_fifo_mem_reg[0][Src][1] ;
  wire [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  wire \bs_fifo_mem_reg[0][Src][1]_1 ;
  wire lu_check_piperun;
  wire [0:0]new_bs_src;
  wire update_done_aw_reg;
  wire update_done_aw_reg_0;
  wire \update_info[Keep] ;
  wire update_piperun;
  wire update_write_hit;

  Fast_IP_Clock_system_cache_0_0_reg_ce_402 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .aw_fifo_full(aw_fifo_full),
        .\bs_fifo_mem_reg[0][Src][1] (\bs_fifo_mem_reg[0][Src][1] ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\bs_fifo_mem_reg[0][Src][1]_0 ),
        .\bs_fifo_mem_reg[0][Src][1]_1 (\bs_fifo_mem_reg[0][Src][1]_1 ),
        .lu_check_piperun(lu_check_piperun),
        .new_bs_src(new_bs_src),
        .update_done_aw_reg(update_done_aw_reg),
        .update_done_aw_reg_0(update_done_aw_reg_0),
        .\update_info[Keep] (\update_info[Keep] ),
        .update_piperun(update_piperun),
        .update_write_hit(update_write_hit));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_185
   (update_need_bs,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    update_piperun,
    \lu_check_info_reg[Early]__0 ,
    lu_check_piperun,
    \lu_check_info_reg[Wr]__0 ,
    lu_check_valid);
  output update_need_bs;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input update_piperun;
  input \lu_check_info_reg[Early]__0 ;
  input lu_check_piperun;
  input \lu_check_info_reg[Wr]__0 ;
  input lu_check_valid;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \lu_check_info_reg[Early]__0 ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_piperun;
  wire lu_check_valid;
  wire update_need_bs;
  wire update_piperun;

  Fast_IP_Clock_system_cache_0_0_reg_ce_401 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\lu_check_info_reg[Early]__0 (\lu_check_info_reg[Early]__0 ),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_piperun(lu_check_piperun),
        .lu_check_valid(lu_check_valid),
        .update_need_bs(update_need_bs),
        .update_piperun(update_piperun));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_186
   (lu_check_valid,
    lud_reg_valid_reg,
    lud_mem_keep_single_during_stall_reg,
    lud_mem_already_used_reg,
    lud_step_delayed_restart_reg,
    S_0,
    lu_mem_protect_conflict_reg,
    lookup_miss,
    \lu_check_info_reg[Allocate] ,
    lookup_write_miss,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \lu_check_info_reg[Allocate]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \lu_check_info_reg[Evict] ,
    S_1,
    \lu_check_locked_hit_reg[0] ,
    lookup_read_miss,
    lookup_push_write_miss,
    lu_check_done0,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    S_2,
    \lu_check_locked_hit_reg[3] ,
    lud_mem_delayed_read_data0,
    lookup_last_beat,
    lu_check_wait_for_update_reg,
    lud_mem_keep_single_during_stall0,
    p_223_in,
    \lu_check_info_reg[Evict]_0 ,
    DI,
    \lu_check_info_reg[Wr] ,
    lu_mem_valid_reg,
    ADDRA,
    lu_ds_last_beat_next_last_n,
    minusOp,
    lookup_next_is_last_beat,
    \lu_check_tag_hit_reg[3] ,
    \lu_check_info_reg[Evict]_1 ,
    SRI,
    \lu_check_info_reg[Addr_Use][5] ,
    \lu_check_info_reg[Port_Num][0] ,
    \lu_mem_info_reg[Port_Num][0] ,
    S_3,
    \lu_mem_info_reg[Wr] ,
    lookup_wm_will_use,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    lookup_first_write_hit,
    \lu_check_info_reg[Keep] ,
    \lru_check_next_way_i_reg[1] ,
    \lru_check_next_way_i_reg[0] ,
    S,
    \lu_check_tag_reg[0][Addr][23] ,
    lookup_write_hit,
    \lookup_read_data_new[0,0][Valid] ,
    DIBDI,
    lru_check_used_way,
    S_4,
    S_5,
    A159_out,
    A187_out,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    A172_out,
    \Use_FPGA.Full_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    lud_mem_speculative_valid_reg,
    \lu_check_info_reg[Addr_Stp][3] ,
    \lu_check_info_reg[Addr_Stp][5] ,
    lu_check_wr_already_pushed_reg,
    \lookup_offset_len_cnt_reg[0] ,
    lu_check_read_info_done_reg,
    \lu_check_info_reg[Evict]_2 ,
    SRI_6,
    SRI_7,
    SRI_8,
    SRI_9,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    Q,
    ACLK,
    lud_reg_valid_reg_0,
    lud_reg_piperun,
    lud_mem_piperun,
    lud_mem_already_used,
    lud_mem_already_used_reg_0,
    lud_step_offset,
    lud_write_hit_done,
    lud_step_delayed_restart,
    lud_step_delayed_restart_reg_0,
    lud_step_delayed_restart_reg_1,
    \lookup_offset_len_cnt_reg[0]_0 ,
    \Using_FPGA.MUXCY_I ,
    update_miss_reg,
    \lu_check_info_reg[Evict]__0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ,
    lu_check_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ,
    update_piperun,
    S_10,
    \lu_check_info_reg[Wr]__0 ,
    CO,
    lookup_restart_mem,
    \lu_mem_info_reg[Wr]__0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ,
    lookup_push_write_miss_pre,
    update_write_miss_full,
    lu_check_wr_already_pushed,
    lookup_protect_conflict,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ,
    lookup_push_wm_stall,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 ,
    lookup_access_data_late,
    I5,
    S_12,
    lud_mem_speculative_valid,
    \lud_mem_way_d1_reg[0] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ,
    D,
    p_200_in,
    lud_addr_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ,
    lud_mem_last_reg,
    lud_mem_last_reg_0,
    lu_check_single_beat,
    \lookup_offset_len_cnt_reg[7] ,
    \lookup_offset_len_cnt_reg[7]_0 ,
    \lookup_offset_len_cnt_reg[7]_1 ,
    \lookup_offset_len_cnt_reg[0]_1 ,
    lookup_offset_first,
    \lu_check_info_reg[Allocate]__0 ,
    O,
    \lookup_offset_cnt_reg[5] ,
    \lookup_offset_cnt_reg[5]_0 ,
    \lookup_offset_cnt_reg[5]_1 ,
    \lookup_offset_cnt_reg[5]_2 ,
    \lookup_offset_cnt_reg[5]_3 ,
    \lud_mem_port_one_hot_reg[1] ,
    \lud_mem_port_one_hot_reg[1]_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ,
    \Using_FPGA.MUXCY_I_0 ,
    lud_mem_use_speculative,
    lu_check_wait_for_update,
    \update_info_reg[Evict] ,
    \update_way_reg[1] ,
    \update_old_tag_reg[Addr][23] ,
    \update_old_tag_reg[Addr][23]_0 ,
    \update_old_tag_reg[Addr][23]_1 ,
    \update_old_tag_reg[Addr][23]_2 ,
    hit_way_i,
    lru_check_next_way,
    update_first_write_hit_reg,
    lookup_data_hit_stall,
    \Use_FPGA.Empty_Inst ,
    lu_check_read_info_done,
    \lu_check_protected_way_reg[0] ,
    \update_way_reg[1]_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ,
    access_valid,
    lookup_offset_cnt_cmb0_carry__0,
    lookup_offset_cnt_cmb0_carry__0_0,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ,
    lu_check_protected_way);
  output lu_check_valid;
  output lud_reg_valid_reg;
  output lud_mem_keep_single_during_stall_reg;
  output lud_mem_already_used_reg;
  output lud_step_delayed_restart_reg;
  output S_0;
  output lu_mem_protect_conflict_reg;
  output lookup_miss;
  output \lu_check_info_reg[Allocate] ;
  output lookup_write_miss;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \lu_check_info_reg[Allocate]_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \lu_check_info_reg[Evict] ;
  output S_1;
  output \lu_check_locked_hit_reg[0] ;
  output lookup_read_miss;
  output lookup_push_write_miss;
  output lu_check_done0;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output S_2;
  output \lu_check_locked_hit_reg[3] ;
  output lud_mem_delayed_read_data0;
  output lookup_last_beat;
  output lu_check_wait_for_update_reg;
  output lud_mem_keep_single_during_stall0;
  output p_223_in;
  output \lu_check_info_reg[Evict]_0 ;
  output [3:0]DI;
  output \lu_check_info_reg[Wr] ;
  output lu_mem_valid_reg;
  output [8:0]ADDRA;
  output lu_ds_last_beat_next_last_n;
  output [6:0]minusOp;
  output lookup_next_is_last_beat;
  output \lu_check_tag_hit_reg[3] ;
  output \lu_check_info_reg[Evict]_1 ;
  output SRI;
  output [5:0]\lu_check_info_reg[Addr_Use][5] ;
  output \lu_check_info_reg[Port_Num][0] ;
  output \lu_mem_info_reg[Port_Num][0] ;
  output S_3;
  output \lu_mem_info_reg[Wr] ;
  output lookup_wm_will_use;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output lookup_first_write_hit;
  output \lu_check_info_reg[Keep] ;
  output \lru_check_next_way_i_reg[1] ;
  output \lru_check_next_way_i_reg[0] ;
  output [3:0]S;
  output [10:0]\lu_check_tag_reg[0][Addr][23] ;
  output lookup_write_hit;
  output \lookup_read_data_new[0,0][Valid] ;
  output [2:0]DIBDI;
  output [1:0]lru_check_used_way;
  output S_4;
  output S_5;
  output A159_out;
  output A187_out;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output A172_out;
  output \Use_FPGA.Full_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  output lud_mem_speculative_valid_reg;
  output [3:0]\lu_check_info_reg[Addr_Stp][3] ;
  output [1:0]\lu_check_info_reg[Addr_Stp][5] ;
  output lu_check_wr_already_pushed_reg;
  output [0:0]\lookup_offset_len_cnt_reg[0] ;
  output lu_check_read_info_done_reg;
  output \lu_check_info_reg[Evict]_2 ;
  output SRI_6;
  output SRI_7;
  output SRI_8;
  output SRI_9;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  input Q;
  input ACLK;
  input lud_reg_valid_reg_0;
  input lud_reg_piperun;
  input lud_mem_piperun;
  input lud_mem_already_used;
  input lud_mem_already_used_reg_0;
  input lud_step_offset;
  input lud_write_hit_done;
  input lud_step_delayed_restart;
  input lud_step_delayed_restart_reg_0;
  input lud_step_delayed_restart_reg_1;
  input \lookup_offset_len_cnt_reg[0]_0 ;
  input \Using_FPGA.MUXCY_I ;
  input [3:0]update_miss_reg;
  input \lu_check_info_reg[Evict]__0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ;
  input lu_check_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ;
  input update_piperun;
  input S_10;
  input \lu_check_info_reg[Wr]__0 ;
  input [0:0]CO;
  input lookup_restart_mem;
  input \lu_mem_info_reg[Wr]__0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ;
  input lookup_push_write_miss_pre;
  input update_write_miss_full;
  input lu_check_wr_already_pushed;
  input lookup_protect_conflict;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ;
  input lookup_push_wm_stall;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 ;
  input lookup_access_data_late;
  input I5;
  input S_12;
  input lud_mem_speculative_valid;
  input \lud_mem_way_d1_reg[0] ;
  input [3:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ;
  input [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ;
  input [23:0]D;
  input p_200_in;
  input lud_addr_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ;
  input lud_mem_last_reg;
  input lud_mem_last_reg_0;
  input lu_check_single_beat;
  input [7:0]\lookup_offset_len_cnt_reg[7] ;
  input [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  input [7:0]\lookup_offset_len_cnt_reg[7]_1 ;
  input \lookup_offset_len_cnt_reg[0]_1 ;
  input lookup_offset_first;
  input \lu_check_info_reg[Allocate]__0 ;
  input [3:0]O;
  input [5:0]\lookup_offset_cnt_reg[5] ;
  input [5:0]\lookup_offset_cnt_reg[5]_0 ;
  input [1:0]\lookup_offset_cnt_reg[5]_1 ;
  input \lookup_offset_cnt_reg[5]_2 ;
  input \lookup_offset_cnt_reg[5]_3 ;
  input \lud_mem_port_one_hot_reg[1] ;
  input \lud_mem_port_one_hot_reg[1]_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ;
  input \Using_FPGA.MUXCY_I_0 ;
  input lud_mem_use_speculative;
  input lu_check_wait_for_update;
  input \update_info_reg[Evict] ;
  input [3:0]\update_way_reg[1] ;
  input [10:0]\update_old_tag_reg[Addr][23] ;
  input [10:0]\update_old_tag_reg[Addr][23]_0 ;
  input [10:0]\update_old_tag_reg[Addr][23]_1 ;
  input [10:0]\update_old_tag_reg[Addr][23]_2 ;
  input [1:0]hit_way_i;
  input [1:0]lru_check_next_way;
  input update_first_write_hit_reg;
  input lookup_data_hit_stall;
  input \Use_FPGA.Empty_Inst ;
  input lu_check_read_info_done;
  input \lu_check_protected_way_reg[0] ;
  input \update_way_reg[1]_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ;
  input access_valid;
  input [5:0]lookup_offset_cnt_cmb0_carry__0;
  input [5:0]lookup_offset_cnt_cmb0_carry__0_0;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ;
  input [0:0]lu_check_protected_way;

  wire A159_out;
  wire A172_out;
  wire A187_out;
  wire ACLK;
  wire [8:0]ADDRA;
  wire [0:0]CO;
  wire [23:0]D;
  wire [3:0]DI;
  wire [2:0]DIBDI;
  wire I5;
  wire [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ;
  wire [3:0]O;
  wire Q;
  wire [3:0]S;
  wire SRI;
  wire SRI_6;
  wire SRI_7;
  wire SRI_8;
  wire SRI_9;
  wire S_0;
  wire S_1;
  wire S_10;
  wire S_12;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ;
  wire [3:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire access_valid;
  wire [1:0]hit_way_i;
  wire lookup_access_data_late;
  wire lookup_data_hit_stall;
  wire lookup_first_write_hit;
  wire lookup_last_beat;
  wire lookup_miss;
  wire lookup_next_is_last_beat;
  wire [5:0]lookup_offset_cnt_cmb0_carry__0;
  wire [5:0]lookup_offset_cnt_cmb0_carry__0_0;
  wire [5:0]\lookup_offset_cnt_reg[5] ;
  wire [5:0]\lookup_offset_cnt_reg[5]_0 ;
  wire [1:0]\lookup_offset_cnt_reg[5]_1 ;
  wire \lookup_offset_cnt_reg[5]_2 ;
  wire \lookup_offset_cnt_reg[5]_3 ;
  wire lookup_offset_first;
  wire [0:0]\lookup_offset_len_cnt_reg[0] ;
  wire \lookup_offset_len_cnt_reg[0]_0 ;
  wire \lookup_offset_len_cnt_reg[0]_1 ;
  wire [7:0]\lookup_offset_len_cnt_reg[7] ;
  wire [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  wire [7:0]\lookup_offset_len_cnt_reg[7]_1 ;
  wire lookup_protect_conflict;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss;
  wire lookup_push_write_miss_pre;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lookup_read_miss;
  wire lookup_restart_mem;
  wire lookup_wm_will_use;
  wire lookup_write_hit;
  wire lookup_write_miss;
  wire [1:0]lru_check_next_way;
  wire \lru_check_next_way_i_reg[0] ;
  wire \lru_check_next_way_i_reg[1] ;
  wire [1:0]lru_check_used_way;
  wire lu_check_done0;
  wire [3:0]\lu_check_info_reg[Addr_Stp][3] ;
  wire [1:0]\lu_check_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_check_info_reg[Addr_Use][5] ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[Allocate]_0 ;
  wire \lu_check_info_reg[Allocate]__0 ;
  wire \lu_check_info_reg[Evict] ;
  wire \lu_check_info_reg[Evict]_0 ;
  wire \lu_check_info_reg[Evict]_1 ;
  wire \lu_check_info_reg[Evict]_2 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire \lu_check_info_reg[Keep] ;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire \lu_check_locked_hit_reg[0] ;
  wire \lu_check_locked_hit_reg[3] ;
  wire lu_check_piperun;
  wire [0:0]lu_check_protected_way;
  wire \lu_check_protected_way_reg[0] ;
  wire lu_check_read_info_done;
  wire lu_check_read_info_done_reg;
  wire lu_check_single_beat;
  wire \lu_check_tag_hit_reg[3] ;
  wire [10:0]\lu_check_tag_reg[0][Addr][23] ;
  wire lu_check_valid;
  wire lu_check_wait_for_update;
  wire lu_check_wait_for_update_reg;
  wire lu_check_wr_already_pushed;
  wire lu_check_wr_already_pushed_reg;
  wire lu_ds_last_beat_next_last_n;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire \lu_mem_info_reg[Wr] ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lud_addr_piperun;
  wire lud_mem_already_used;
  wire lud_mem_already_used_reg;
  wire lud_mem_already_used_reg_0;
  wire lud_mem_delayed_read_data0;
  wire lud_mem_keep_single_during_stall0;
  wire lud_mem_keep_single_during_stall_reg;
  wire lud_mem_last_reg;
  wire lud_mem_last_reg_0;
  wire lud_mem_piperun;
  wire \lud_mem_port_one_hot_reg[1] ;
  wire \lud_mem_port_one_hot_reg[1]_0 ;
  wire lud_mem_speculative_valid;
  wire lud_mem_speculative_valid_reg;
  wire lud_mem_use_speculative;
  wire \lud_mem_way_d1_reg[0] ;
  wire lud_reg_piperun;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire lud_step_delayed_restart;
  wire lud_step_delayed_restart_reg;
  wire lud_step_delayed_restart_reg_0;
  wire lud_step_delayed_restart_reg_1;
  wire lud_step_offset;
  wire lud_write_hit_done;
  wire [6:0]minusOp;
  wire p_200_in;
  wire p_223_in;
  wire update_first_write_hit_reg;
  wire \update_info_reg[Evict] ;
  wire [3:0]update_miss_reg;
  wire [10:0]\update_old_tag_reg[Addr][23] ;
  wire [10:0]\update_old_tag_reg[Addr][23]_0 ;
  wire [10:0]\update_old_tag_reg[Addr][23]_1 ;
  wire [10:0]\update_old_tag_reg[Addr][23]_2 ;
  wire update_piperun;
  wire [3:0]\update_way_reg[1] ;
  wire \update_way_reg[1]_0 ;
  wire update_write_miss_full;

  Fast_IP_Clock_system_cache_0_0_reg_ce_400 Inst
       (.A159_out(A159_out),
        .A172_out(A172_out),
        .A187_out(A187_out),
        .ACLK(ACLK),
        .ADDRA(ADDRA),
        .CO(CO),
        .D(D),
        .DI(DI),
        .DIBDI(DIBDI),
        .I5(I5),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ),
        .O(O),
        .Q(Q),
        .S(S),
        .SRI(SRI),
        .SRI_6(SRI_6),
        .SRI_7(SRI_7),
        .SRI_8(SRI_8),
        .SRI_9(SRI_9),
        .S_0(S_0),
        .S_1(S_1),
        .S_10(S_10),
        .S_12(S_12),
        .S_2(S_2),
        .S_3(S_3),
        .S_4(S_4),
        .S_5(S_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (lu_check_valid),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (lookup_write_miss),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_17 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_19 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (lookup_first_write_hit),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 (\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_1 (\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ),
        .\Use_FPGA.Empty_Inst (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst ),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_1 ),
        .access_valid(access_valid),
        .hit_way_i(hit_way_i),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_data_hit_stall(lookup_data_hit_stall),
        .lookup_last_beat(lookup_last_beat),
        .lookup_miss(lookup_miss),
        .lookup_next_is_last_beat(lookup_next_is_last_beat),
        .lookup_offset_cnt_cmb0_carry__0(lookup_offset_cnt_cmb0_carry__0),
        .lookup_offset_cnt_cmb0_carry__0_0(lookup_offset_cnt_cmb0_carry__0_0),
        .\lookup_offset_cnt_reg[5] (\lookup_offset_cnt_reg[5] ),
        .\lookup_offset_cnt_reg[5]_0 (\lookup_offset_cnt_reg[5]_0 ),
        .\lookup_offset_cnt_reg[5]_1 (\lookup_offset_cnt_reg[5]_1 ),
        .\lookup_offset_cnt_reg[5]_2 (\lookup_offset_cnt_reg[5]_2 ),
        .\lookup_offset_cnt_reg[5]_3 (\lookup_offset_cnt_reg[5]_3 ),
        .lookup_offset_first(lookup_offset_first),
        .\lookup_offset_len_cnt_reg[0] (minusOp[0]),
        .\lookup_offset_len_cnt_reg[0]_0 (\lookup_offset_len_cnt_reg[0] ),
        .\lookup_offset_len_cnt_reg[0]_1 (\lookup_offset_len_cnt_reg[0]_0 ),
        .\lookup_offset_len_cnt_reg[0]_2 (\lookup_offset_len_cnt_reg[0]_1 ),
        .\lookup_offset_len_cnt_reg[7] (\lookup_offset_len_cnt_reg[7] ),
        .\lookup_offset_len_cnt_reg[7]_0 (\lookup_offset_len_cnt_reg[7]_0 ),
        .\lookup_offset_len_cnt_reg[7]_1 (\lookup_offset_len_cnt_reg[7]_1 ),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_push_wm_stall(lookup_push_wm_stall),
        .lookup_push_write_miss(lookup_push_write_miss),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .lookup_read_miss(lookup_read_miss),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lookup_write_hit(lookup_write_hit),
        .lru_check_next_way(lru_check_next_way),
        .\lru_check_next_way_i_reg[0] (\lru_check_next_way_i_reg[0] ),
        .\lru_check_next_way_i_reg[1] (\lru_check_next_way_i_reg[1] ),
        .lru_check_used_way(lru_check_used_way),
        .lu_check_done0(lu_check_done0),
        .\lu_check_info_reg[Addr_Stp][3] (\lu_check_info_reg[Addr_Stp][3] ),
        .\lu_check_info_reg[Addr_Stp][5] (\lu_check_info_reg[Addr_Stp][5] ),
        .\lu_check_info_reg[Addr_Use][5] (\lu_check_info_reg[Addr_Use][5] ),
        .\lu_check_info_reg[Allocate] (\lu_check_info_reg[Allocate] ),
        .\lu_check_info_reg[Allocate]_0 (\lu_check_info_reg[Allocate]_0 ),
        .\lu_check_info_reg[Allocate]__0 (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_info_reg[Evict] (\lu_check_info_reg[Evict] ),
        .\lu_check_info_reg[Evict]_0 (\lu_check_info_reg[Evict]_0 ),
        .\lu_check_info_reg[Evict]_1 (\lu_check_info_reg[Evict]_1 ),
        .\lu_check_info_reg[Evict]_2 (\lu_check_info_reg[Evict]_2 ),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_info_reg[Keep] (\lu_check_info_reg[Keep] ),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_locked_hit_reg[0] (\lu_check_locked_hit_reg[0] ),
        .\lu_check_locked_hit_reg[3] (\lu_check_locked_hit_reg[3] ),
        .lu_check_piperun(lu_check_piperun),
        .lu_check_protected_way(lu_check_protected_way),
        .\lu_check_protected_way_reg[0] (\lu_check_protected_way_reg[0] ),
        .lu_check_read_info_done(lu_check_read_info_done),
        .lu_check_read_info_done_reg(lu_check_read_info_done_reg),
        .lu_check_single_beat(lu_check_single_beat),
        .\lu_check_tag_hit_reg[3] (\lu_check_tag_hit_reg[3] ),
        .\lu_check_tag_reg[0][Addr][23] (\lu_check_tag_reg[0][Addr][23] ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_check_wait_for_update_reg(lu_check_wait_for_update_reg),
        .lu_check_wr_already_pushed(lu_check_wr_already_pushed),
        .lu_check_wr_already_pushed_reg(lu_check_wr_already_pushed_reg),
        .lu_ds_last_beat_next_last_n(lu_ds_last_beat_next_last_n),
        .\lu_mem_info_reg[Port_Num][0] (\lu_mem_info_reg[Port_Num][0] ),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr] ),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg),
        .lu_mem_valid_reg(lu_mem_valid_reg),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_already_used_reg(lud_mem_already_used_reg),
        .lud_mem_already_used_reg_0(lud_mem_already_used_reg_0),
        .lud_mem_delayed_read_data0(lud_mem_delayed_read_data0),
        .lud_mem_keep_single_during_stall0(lud_mem_keep_single_during_stall0),
        .lud_mem_keep_single_during_stall_reg(lud_mem_keep_single_during_stall_reg),
        .lud_mem_last_reg(lud_mem_last_reg),
        .lud_mem_last_reg_0(lud_mem_last_reg_0),
        .lud_mem_piperun(lud_mem_piperun),
        .\lud_mem_port_one_hot_reg[1] (\lud_mem_port_one_hot_reg[1] ),
        .\lud_mem_port_one_hot_reg[1]_0 (\lud_mem_port_one_hot_reg[1]_0 ),
        .lud_mem_speculative_valid(lud_mem_speculative_valid),
        .lud_mem_speculative_valid_reg(lud_mem_speculative_valid_reg),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .\lud_mem_way_d1_reg[0] (\lud_mem_way_d1_reg[0] ),
        .lud_reg_piperun(lud_reg_piperun),
        .lud_reg_valid_reg(lud_reg_valid_reg),
        .lud_reg_valid_reg_0(lud_reg_valid_reg_0),
        .lud_step_delayed_restart(lud_step_delayed_restart),
        .lud_step_delayed_restart_reg(lud_step_delayed_restart_reg),
        .lud_step_delayed_restart_reg_0(lud_step_delayed_restart_reg_0),
        .lud_step_delayed_restart_reg_1(lud_step_delayed_restart_reg_1),
        .lud_step_offset(lud_step_offset),
        .lud_write_hit_done(lud_write_hit_done),
        .minusOp(minusOp[6:1]),
        .p_200_in(p_200_in),
        .p_223_in(p_223_in),
        .update_first_write_hit_reg(update_first_write_hit_reg),
        .\update_info_reg[Evict] (\update_info_reg[Evict] ),
        .update_miss_reg(update_miss_reg),
        .\update_old_tag_reg[Addr][23] (\update_old_tag_reg[Addr][23] ),
        .\update_old_tag_reg[Addr][23]_0 (\update_old_tag_reg[Addr][23]_0 ),
        .\update_old_tag_reg[Addr][23]_1 (\update_old_tag_reg[Addr][23]_1 ),
        .\update_old_tag_reg[Addr][23]_2 (\update_old_tag_reg[Addr][23]_2 ),
        .update_piperun(update_piperun),
        .\update_way_reg[1] (\update_way_reg[1] ),
        .\update_way_reg[1]_0 (\update_way_reg[1]_0 ),
        .update_write_miss_full(update_write_miss_full));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_187
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \write_req_info[0][Kind] ,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][1] ,
    \update_info_reg[Addr][23] ,
    S,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ,
    \M_AXI_AWLEN_reg[3] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWLEN_reg[7]_0 ,
    \M_AXI_AWLEN_reg[6] ,
    \M_AXI_AWLEN_reg[6]_0 ,
    \M_AXI_AWLEN_reg[7]_1 ,
    \M_AXI_AWLEN_reg[7]_2 ,
    \M_AXI_AWLEN_reg[7]_3 ,
    \M_AXI_AWADDR_reg[23] ,
    \M_AXI_AWADDR_reg[23]_0 ,
    \M_AXI_AWADDR_reg[23]_1 ,
    \M_AXI_AWLEN_reg[3]_0 ,
    \lu_check_protected_way_reg[0] ,
    \M_AXI_AWLEN_reg[4] ,
    \M_AXI_AWLEN_reg[4]_0 ,
    \M_AXI_AWLEN_reg[5] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \write_req_info[0][Kind] ;
  output [7:0]\update_info_reg[Len][7] ;
  output [1:0]\update_info_reg[Size][1] ;
  output [16:0]\update_info_reg[Addr][23] ;
  output S;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ;
  input [2:0]\M_AXI_AWLEN_reg[3] ;
  input [6:0]\M_AXI_AWLEN_reg[7] ;
  input \M_AXI_AWLEN_reg[7]_0 ;
  input \M_AXI_AWLEN_reg[6] ;
  input \M_AXI_AWLEN_reg[6]_0 ;
  input \M_AXI_AWLEN_reg[7]_1 ;
  input \M_AXI_AWLEN_reg[7]_2 ;
  input \M_AXI_AWLEN_reg[7]_3 ;
  input [16:0]\M_AXI_AWADDR_reg[23] ;
  input \M_AXI_AWADDR_reg[23]_0 ;
  input [10:0]\M_AXI_AWADDR_reg[23]_1 ;
  input \M_AXI_AWLEN_reg[3]_0 ;
  input [3:0]\lu_check_protected_way_reg[0] ;
  input \M_AXI_AWLEN_reg[4] ;
  input \M_AXI_AWLEN_reg[4]_0 ;
  input \M_AXI_AWLEN_reg[5] ;

  wire ACLK;
  wire [16:0]\M_AXI_AWADDR_reg[23] ;
  wire \M_AXI_AWADDR_reg[23]_0 ;
  wire [10:0]\M_AXI_AWADDR_reg[23]_1 ;
  wire [2:0]\M_AXI_AWLEN_reg[3] ;
  wire \M_AXI_AWLEN_reg[3]_0 ;
  wire \M_AXI_AWLEN_reg[4] ;
  wire \M_AXI_AWLEN_reg[4]_0 ;
  wire \M_AXI_AWLEN_reg[5] ;
  wire \M_AXI_AWLEN_reg[6] ;
  wire \M_AXI_AWLEN_reg[6]_0 ;
  wire [6:0]\M_AXI_AWLEN_reg[7] ;
  wire \M_AXI_AWLEN_reg[7]_0 ;
  wire \M_AXI_AWLEN_reg[7]_1 ;
  wire \M_AXI_AWLEN_reg[7]_2 ;
  wire \M_AXI_AWLEN_reg[7]_3 ;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ;
  wire [3:0]\lu_check_protected_way_reg[0] ;
  wire [16:0]\update_info_reg[Addr][23] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [1:0]\update_info_reg[Size][1] ;
  wire \write_req_info[0][Kind] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce_399 Inst
       (.ACLK(ACLK),
        .\M_AXI_AWADDR_reg[23] (\M_AXI_AWADDR_reg[23] ),
        .\M_AXI_AWADDR_reg[23]_0 (\M_AXI_AWADDR_reg[23]_0 ),
        .\M_AXI_AWADDR_reg[23]_1 (\M_AXI_AWADDR_reg[23]_1 ),
        .\M_AXI_AWLEN_reg[3] (\M_AXI_AWLEN_reg[3] ),
        .\M_AXI_AWLEN_reg[3]_0 (\M_AXI_AWLEN_reg[3]_0 ),
        .\M_AXI_AWLEN_reg[4] (\M_AXI_AWLEN_reg[4] ),
        .\M_AXI_AWLEN_reg[4]_0 (\M_AXI_AWLEN_reg[4]_0 ),
        .\M_AXI_AWLEN_reg[5] (\M_AXI_AWLEN_reg[5] ),
        .\M_AXI_AWLEN_reg[6] (\M_AXI_AWLEN_reg[6] ),
        .\M_AXI_AWLEN_reg[6]_0 (\M_AXI_AWLEN_reg[6]_0 ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWLEN_reg[7]_0 (\M_AXI_AWLEN_reg[7]_0 ),
        .\M_AXI_AWLEN_reg[7]_1 (\M_AXI_AWLEN_reg[7]_1 ),
        .\M_AXI_AWLEN_reg[7]_2 (\M_AXI_AWLEN_reg[7]_2 ),
        .\M_AXI_AWLEN_reg[7]_3 (\M_AXI_AWLEN_reg[7]_3 ),
        .Q(Q),
        .S(S),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 (\aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ),
        .\lu_check_protected_way_reg[0] (\lu_check_protected_way_reg[0] ),
        .\update_info_reg[Addr][23] (\update_info_reg[Addr][23] ),
        .\update_info_reg[Len][7] (\update_info_reg[Len][7] ),
        .\update_info_reg[Size][1] (\update_info_reg[Size][1] ),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_327
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    I206,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ,
    update_readback_available,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ,
    update_first_write_hit,
    update_write_miss,
    update_miss,
    update_reused_tag);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output [3:0]I206;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  input update_readback_available;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ;
  input update_first_write_hit;
  input update_write_miss;
  input update_miss;
  input update_reused_tag;

  wire ACLK;
  wire [3:0]I206;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire update_first_write_hit;
  wire update_miss;
  wire update_readback_available;
  wire update_reused_tag;
  wire update_write_miss;

  Fast_IP_Clock_system_cache_0_0_reg_ce_332 Inst
       (.ACLK(ACLK),
        .I206(I206),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .update_first_write_hit(update_first_write_hit),
        .update_miss(update_miss),
        .update_readback_available(update_readback_available),
        .update_reused_tag(update_reused_tag),
        .update_write_miss(update_write_miss));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_328
   (lud_mem_use_speculative,
    p_200_in,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \lu_mem_info_reg[Wr]__0 );
  output lud_mem_use_speculative;
  output p_200_in;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \lu_mem_info_reg[Wr]__0 ;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lud_mem_use_speculative;
  wire p_200_in;

  Fast_IP_Clock_system_cache_0_0_reg_ce_331 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .p_200_in(p_200_in));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_329
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  Fast_IP_Clock_system_cache_0_0_reg_ce_330 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_46
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    E,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_AWSIZE_2_sp_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    S0_AXI_GEN_AWSIZE,
    allowed_max_wrap_len);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output [0:0]E;
  output S0_AXI_GEN_AWREADY;
  output S0_AXI_GEN_AWSIZE_2_sp_1;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [1:0]allowed_max_wrap_len;

  wire ACLK;
  wire [0:0]E;
  wire Q;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWSIZE_2_sn_1;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [1:0]allowed_max_wrap_len;

  assign S0_AXI_GEN_AWSIZE_2_sp_1 = S0_AXI_GEN_AWSIZE_2_sn_1;
  Fast_IP_Clock_system_cache_0_0_reg_ce_47 Inst
       (.ACLK(ACLK),
        .E(E),
        .Q(Q),
        .S0_AXI_GEN_AWREADY(S0_AXI_GEN_AWREADY),
        .S0_AXI_GEN_AWSIZE(S0_AXI_GEN_AWSIZE),
        .S0_AXI_GEN_AWSIZE_2_sp_1(S0_AXI_GEN_AWSIZE_2_sn_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .allowed_max_wrap_len(allowed_max_wrap_len));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_72
   (S_AXI_AVALID_q,
    A,
    E,
    S0_AXI_GEN_ARREADY,
    S0_AXI_GEN_ARSIZE_2_sp_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    read_req_ready,
    S0_AXI_GEN_ARSIZE,
    allowed_max_wrap_len);
  output S_AXI_AVALID_q;
  output A;
  output [0:0]E;
  output S0_AXI_GEN_ARREADY;
  output S0_AXI_GEN_ARSIZE_2_sp_1;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input read_req_ready;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [1:0]allowed_max_wrap_len;

  wire A;
  wire ACLK;
  wire [0:0]E;
  wire Q;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARSIZE_2_sn_1;
  wire S_AXI_AVALID_q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [1:0]allowed_max_wrap_len;
  wire read_req_ready;

  assign S0_AXI_GEN_ARSIZE_2_sp_1 = S0_AXI_GEN_ARSIZE_2_sn_1;
  Fast_IP_Clock_system_cache_0_0_reg_ce_73 Inst
       (.A(A),
        .ACLK(ACLK),
        .E(E),
        .Q(Q),
        .S0_AXI_GEN_ARREADY(S0_AXI_GEN_ARREADY),
        .S0_AXI_GEN_ARSIZE(S0_AXI_GEN_ARSIZE),
        .S0_AXI_GEN_ARSIZE_2_sp_1(S0_AXI_GEN_ARSIZE_2_sn_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (S_AXI_AVALID_q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .allowed_max_wrap_len(allowed_max_wrap_len),
        .read_req_ready(read_req_ready));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__13
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__14
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_85 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__15
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_102 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__16
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_404 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__17
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_182 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__18
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_415 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "0" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__19
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  Fast_IP_Clock_system_cache_0_0_reg_ce_405 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__20
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    A_3,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    D_0,
    ACLK,
    wm_port,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \Using_FPGA.MUXCY_I ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \access_data_info[0,0][Last] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output A_3;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input D_0;
  input ACLK;
  input wm_port;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input \Using_FPGA.MUXCY_I ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input \access_data_info[0,0][Last] ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;

  wire ACLK;
  wire A_3;
  wire D_0;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Using_FPGA.MUXCY_I ;
  wire \access_data_info[0,0][Last] ;
  wire wm_port;

  Fast_IP_Clock_system_cache_0_0_reg_ce_17 Inst
       (.ACLK(ACLK),
        .A_3(A_3),
        .D_0(D_0),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .wm_port(wm_port));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2
   (queue_done,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    ACLK,
    wip_fifo_full,
    queue_full);
  output queue_done;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input ACLK;
  input wip_fifo_full;
  input queue_full;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire queue_done;
  wire queue_full;
  wire wip_fifo_full;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_55 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .queue_done(queue_done),
        .queue_full(queue_full),
        .wip_fifo_full(wip_fifo_full));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_324
   (lookup_access_data_late,
    A46_out,
    lud_mem_already_used_reg,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    lu_mem_protect_conflict_d1,
    lookup_offset_first,
    lu_check_valid_delayed,
    \Using_FPGA.MUXCY_I ,
    lookup_read_hit_d1,
    lud_mem_already_used,
    lud_mem_speculative_valid,
    lud_mem_last,
    \lu_check_info_reg[Wr]__0 );
  output lookup_access_data_late;
  output A46_out;
  output lud_mem_already_used_reg;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input lu_mem_protect_conflict_d1;
  input lookup_offset_first;
  input lu_check_valid_delayed;
  input \Using_FPGA.MUXCY_I ;
  input lookup_read_hit_d1;
  input lud_mem_already_used;
  input lud_mem_speculative_valid;
  input lud_mem_last;
  input \lu_check_info_reg[Wr]__0 ;

  wire A46_out;
  wire ACLK;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \Using_FPGA.MUXCY_I ;
  wire lookup_access_data_late;
  wire lookup_offset_first;
  wire lookup_read_hit_d1;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_valid_delayed;
  wire lu_mem_protect_conflict_d1;
  wire lud_mem_already_used;
  wire lud_mem_already_used_reg;
  wire lud_mem_last;
  wire lud_mem_speculative_valid;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_333 Inst
       (.A46_out(A46_out),
        .ACLK(ACLK),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_offset_first(lookup_offset_first),
        .lookup_read_hit_d1(lookup_read_hit_d1),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_valid_delayed(lu_check_valid_delayed),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_already_used_reg(lud_mem_already_used_reg),
        .lud_mem_last(lud_mem_last),
        .lud_mem_speculative_valid(lud_mem_speculative_valid));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_36
   (first_part,
    \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ,
    S,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    D,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \wr_port_access[1][Addr] ,
    \sequential_addr_i_reg[11] ,
    aligned_addr,
    access_is_wrap,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 );
  output first_part;
  output \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  output S;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output [5:0]D;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [11:0]\wr_port_access[1][Addr] ;
  input [9:0]\sequential_addr_i_reg[11] ;
  input [4:0]aligned_addr;
  input access_is_wrap;
  input [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  wire ACLK;
  wire [5:0]D;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire access_is_wrap;
  wire [4:0]aligned_addr;
  wire first_part;
  wire [9:0]\sequential_addr_i_reg[11] ;
  wire [11:0]\wr_port_access[1][Addr] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1 Inst
       (.ACLK(ACLK),
        .D(D),
        .Q(Q),
        .S(S),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (first_part),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .access_is_wrap(access_is_wrap),
        .aligned_addr(aligned_addr),
        .\sequential_addr_i_reg[11] (\sequential_addr_i_reg[11] ),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_59
   (Q0_in,
    read_req_valid,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    ACLK,
    \rip_stp_reg[0] );
  output Q0_in;
  output read_req_valid;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input ACLK;
  input \rip_stp_reg[0] ;

  wire ACLK;
  wire Q;
  wire Q0_in;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire read_req_valid;
  wire \rip_stp_reg[0] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_83 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .Q0_in(Q0_in),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .read_req_valid(read_req_valid),
        .\rip_stp_reg[0] (\rip_stp_reg[0] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_61
   (first_part,
    access_is_wrap_reg,
    S,
    \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    D,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    ACLK,
    req_last,
    access_is_wrap,
    incr_need_extra_q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \rd_port_access[1][Addr] ,
    \sequential_addr_i_reg[11] ,
    aligned_addr,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    O);
  output first_part;
  output access_is_wrap_reg;
  output S;
  output \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output [5:0]D;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input ACLK;
  input req_last;
  input access_is_wrap;
  input incr_need_extra_q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [11:0]\rd_port_access[1][Addr] ;
  input [9:0]\sequential_addr_i_reg[11] ;
  input [4:0]aligned_addr;
  input [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [1:0]O;

  wire ACLK;
  wire [5:0]D;
  wire [1:0]O;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire access_is_wrap;
  wire access_is_wrap_reg;
  wire [4:0]aligned_addr;
  wire first_part;
  wire incr_need_extra_q;
  wire [11:0]\rd_port_access[1][Addr] ;
  wire req_last;
  wire [9:0]\sequential_addr_i_reg[11] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_81 Inst
       (.ACLK(ACLK),
        .D(D),
        .O(O),
        .Q(Q),
        .S(S),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (first_part),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .access_is_wrap(access_is_wrap),
        .access_is_wrap_reg(access_is_wrap_reg),
        .aligned_addr(aligned_addr),
        .incr_need_extra_q(incr_need_extra_q),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] ),
        .req_last(req_last),
        .\sequential_addr_i_reg[11] (\sequential_addr_i_reg[11] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    wr_port_early011_out,
    Q,
    O,
    ACLK,
    \arbiter_bp_push_i_reg[1][Early] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output wr_port_early011_out;
  input Q;
  input O;
  input ACLK;
  input \arbiter_bp_push_i_reg[1][Early] ;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \arbiter_bp_push_i_reg[1][Early] ;
  wire wr_port_early011_out;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_56 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\arbiter_bp_push_i_reg[1][Early] (\arbiter_bp_push_i_reg[1][Early] ),
        .wr_port_early011_out(wr_port_early011_out));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_37
   (\wr_port_access[1][Kind] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output \wr_port_access[1][Kind] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \wr_port_access[1][Kind] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_54 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_38
   (\wr_port_access[1][Modifiable] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output \wr_port_access[1][Modifiable] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \wr_port_access[1][Modifiable] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_51 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\wr_port_access[1][Modifiable] (\wr_port_access[1][Modifiable] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_39
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \arb_access_i[Allocate]1__0 ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    \arb_access_i_reg[Keep] ,
    \wr_port_access[1][Modifiable] ,
    port_ready_1,
    wr_port_keep);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \arb_access_i[Allocate]1__0 ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input \arb_access_i_reg[Keep] ;
  input \wr_port_access[1][Modifiable] ;
  input port_ready_1;
  input [0:0]wr_port_keep;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i_reg[Keep] ;
  wire port_ready_1;
  wire \wr_port_access[1][Modifiable] ;
  wire [0:0]wr_port_keep;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_50 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arb_access_i_reg[Keep] (\arb_access_i_reg[Keep] ),
        .port_ready_1(port_ready_1),
        .\wr_port_access[1][Modifiable] (\wr_port_access[1][Modifiable] ),
        .wr_port_keep(wr_port_keep));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_40
   (write_req_last,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output write_req_last;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire write_req_last;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_49 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .write_req_last(write_req_last));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_41
   (write_req_failed,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output write_req_failed;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire write_req_failed;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_48 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .write_req_failed(write_req_failed));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_58
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    read_req_single,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    \port_access_q[Size] ,
    port_ready_1,
    S0_AXI_ARSIZE,
    reduce_or,
    \ctrl_access[Size] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output read_req_single;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input [0:0]\port_access_q[Size] ;
  input port_ready_1;
  input [0:0]S0_AXI_ARSIZE;
  input reduce_or;
  input [0:0]\ctrl_access[Size] ;

  wire ACLK;
  wire O;
  wire Q;
  wire [0:0]S0_AXI_ARSIZE;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [0:0]\ctrl_access[Size] ;
  wire [0:0]\port_access_q[Size] ;
  wire port_ready_1;
  wire read_req_single;
  wire reduce_or;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_84 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .\port_access_q[Size] (\port_access_q[Size] ),
        .port_ready_1(port_ready_1),
        .read_req_single(read_req_single),
        .reduce_or(reduce_or));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_60
   (incr_need_extra_q,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output incr_need_extra_q;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire incr_need_extra_q;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_82 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .incr_need_extra_q(incr_need_extra_q));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_63
   (\rd_port_access[1][Kind] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output \rd_port_access[1][Kind] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \rd_port_access[1][Kind] ;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_80 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_66
   (read_req_last,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output read_req_last;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire read_req_last;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_74 Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .read_req_last(read_req_last));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce_kill" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_kill
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  Fast_IP_Clock_system_cache_0_0_reg_ce_kill Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce_kill" *) 
module Fast_IP_Clock_system_cache_0_0_bit_reg_ce_kill_65
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    SRI,
    A_0,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    rd_port_multi_part_1,
    any_port_forbid_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output SRI;
  output A_0;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input rd_port_multi_part_1;
  input any_port_forbid_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  wire ACLK;
  wire A_0;
  wire O;
  wire Q;
  wire SRI;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire any_port_forbid_1;
  wire rd_port_multi_part_1;

  Fast_IP_Clock_system_cache_0_0_reg_ce_kill_75 Inst
       (.ACLK(ACLK),
        .A_0(A_0),
        .O(O),
        .Q(Q),
        .SRI(SRI),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .any_port_forbid_1(any_port_forbid_1),
        .rd_port_multi_part_1(rd_port_multi_part_1));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and
   (E,
    w_pop_part,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  input w_pop_part;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]E;
  wire w_pop_part;

  assign E = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_1
   (r_pop_valid,
    A22_out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output r_pop_valid;
  input A22_out;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A22_out;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire r_pop_valid;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,r_pop_valid}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A22_out}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_101
   (port_ready_no_init_1,
    port_allow_ready_1,
    rd_port_multi_part_1,
    \wr_port_access[1][Valid] ,
    rd_port_ready_block_1,
    \Using_FPGA.MUXCY_I_0 ,
    \rd_port_access[1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output port_ready_no_init_1;
  input port_allow_ready_1;
  input rd_port_multi_part_1;
  input \wr_port_access[1][Valid] ;
  input rd_port_ready_block_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input \rd_port_access[1][Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire A15_out;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire port_allow_ready_1;
  wire port_ready_no_init_1;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire rd_port_ready_block_1;
  wire \wr_port_access[1][Valid] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(port_allow_ready_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,port_ready_no_init_1}),
        .CYINIT(1'b0),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\rd_port_access[1][Valid] ,\^lopt_6 ,\^lopt_3 ,A15_out}));
  LUT5 #(
    .INIT(32'h000F0044)) 
    \Using_FPGA.MUXCY_I_i_1__159 
       (.I0(rd_port_multi_part_1),
        .I1(\wr_port_access[1][Valid] ),
        .I2(rd_port_ready_block_1),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .I4(\rd_port_access[1][Valid] ),
        .O(A15_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_119
   (update_sel_readback_tag_0,
    ri_allocate,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_sel_readback_tag_0;
  input ri_allocate;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Gen_Set_Tag[0].update_select_readback_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ri_allocate;
  wire update_sel_readback_tag_0;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_sel_readback_tag_0}),
        .CYINIT(ri_allocate),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Gen_Set_Tag[0].update_select_readback_reg }));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_1__14 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .O(\Gen_Set_Tag[0].update_select_readback_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_120
   (update_tag_is_alive_0,
    \Using_FPGA.MUXCY_I_0 ,
    update_tag_match_pre_0,
    lopt,
    lopt_1);
  output update_tag_is_alive_0;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_tag_match_pre_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire update_tag_is_alive_0;
  wire update_tag_match_pre_0;

  assign lopt_1 = \<const0> ;
  assign update_tag_is_alive_0 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_121
   (update_tag_remove_lock_0,
    backend_rd_data_pop,
    update_tag_is_alive_0,
    lopt,
    lopt_1);
  output update_tag_remove_lock_0;
  input backend_rd_data_pop;
  input update_tag_is_alive_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire backend_rd_data_pop;
  wire update_tag_is_alive_0;
  wire update_tag_remove_lock_0;

  assign lopt_1 = \<const0> ;
  assign update_tag_remove_lock_0 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_123
   (update_sel_readback_tag_1,
    ri_allocate,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_sel_readback_tag_1;
  input ri_allocate;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A_0;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ri_allocate;
  wire update_sel_readback_tag_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_sel_readback_tag_1}),
        .CYINIT(ri_allocate),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A_0}));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__16 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .O(A_0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_124
   (update_tag_is_alive_1,
    \Using_FPGA.MUXCY_I_0 ,
    update_tag_match_pre_1,
    lopt,
    lopt_1);
  output update_tag_is_alive_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_tag_match_pre_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire update_tag_is_alive_1;
  wire update_tag_match_pre_1;

  assign lopt_1 = \<const0> ;
  assign update_tag_is_alive_1 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_125
   (update_tag_remove_lock_1,
    backend_rd_data_pop,
    update_tag_is_alive_1,
    lopt,
    lopt_1);
  output update_tag_remove_lock_1;
  input backend_rd_data_pop;
  input update_tag_is_alive_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire backend_rd_data_pop;
  wire update_tag_is_alive_1;
  wire update_tag_remove_lock_1;

  assign lopt_1 = \<const0> ;
  assign update_tag_remove_lock_1 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_128
   (update_sel_readback_tag_2,
    ri_allocate,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_sel_readback_tag_2;
  input ri_allocate;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Gen_Set_Tag[2].update_select_readback_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ri_allocate;
  wire update_sel_readback_tag_2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_sel_readback_tag_2}),
        .CYINIT(ri_allocate),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Gen_Set_Tag[2].update_select_readback_reg }));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__13 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .O(\Gen_Set_Tag[2].update_select_readback_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_129
   (update_tag_is_alive_2,
    \Using_FPGA.MUXCY_I_0 ,
    update_tag_match_pre_2,
    lopt,
    lopt_1);
  output update_tag_is_alive_2;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_tag_match_pre_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire update_tag_is_alive_2;
  wire update_tag_match_pre_2;

  assign lopt_1 = \<const0> ;
  assign update_tag_is_alive_2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_13
   (carry_1,
    w_pop_safe,
    len_cnt_reg,
    Q,
    first_wr_word,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input w_pop_safe;
  input [1:0]len_cnt_reg;
  input [1:0]Q;
  input first_wr_word;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__179_n_0 ;
  wire carry_1;
  wire first_wr_word;
  wire [1:0]len_cnt_reg;
  wire w_pop_safe;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__179_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h00053035)) 
    \Using_FPGA.MUXCY_I_i_1__179 
       (.I0(len_cnt_reg[0]),
        .I1(Q[0]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[1]),
        .I4(Q[1]),
        .O(\Using_FPGA.MUXCY_I_i_1__179_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_130
   (update_tag_remove_lock_2,
    backend_rd_data_pop,
    update_tag_is_alive_2,
    lopt,
    lopt_1);
  output update_tag_remove_lock_2;
  input backend_rd_data_pop;
  input update_tag_is_alive_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire backend_rd_data_pop;
  wire update_tag_is_alive_2;
  wire update_tag_remove_lock_2;

  assign lopt_1 = \<const0> ;
  assign update_tag_remove_lock_2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_133
   (update_sel_readback_tag_3,
    ri_allocate,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_sel_readback_tag_3;
  input ri_allocate;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Gen_Set_Tag[3].update_select_readback_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ri_allocate;
  wire update_sel_readback_tag_3;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_sel_readback_tag_3}),
        .CYINIT(ri_allocate),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Gen_Set_Tag[3].update_select_readback_reg }));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__15 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .O(\Gen_Set_Tag[3].update_select_readback_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_134
   (update_tag_is_alive_3,
    \Using_FPGA.MUXCY_I_0 ,
    update_tag_match_pre_3,
    lopt,
    lopt_1);
  output update_tag_is_alive_3;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_tag_match_pre_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire update_tag_is_alive_3;
  wire update_tag_match_pre_3;

  assign lopt_1 = \<const0> ;
  assign update_tag_is_alive_3 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_135
   (update_tag_remove_lock_3,
    backend_rd_data_pop,
    update_tag_is_alive_3,
    lopt,
    lopt_1);
  output update_tag_remove_lock_3;
  input backend_rd_data_pop;
  input update_tag_is_alive_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire backend_rd_data_pop;
  wire update_tag_is_alive_3;
  wire update_tag_remove_lock_3;

  assign lopt_1 = \<const0> ;
  assign update_tag_remove_lock_3 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_138
   (ud_rm_use_resize_part_ok,
    update_read_miss_use_ok,
    lopt,
    lopt_1,
    lopt_2);
  output ud_rm_use_resize_part_ok;
  input update_read_miss_use_ok;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire ud_rm_use_resize_part_ok;
  wire update_read_miss_use_ok;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign ud_rm_use_resize_part_ok = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_14
   (carry_2,
    carry_1,
    len_cnt_reg,
    Q,
    first_wr_word,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  input carry_1;
  input [1:0]len_cnt_reg;
  input [1:0]Q;
  input first_wr_word;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [1:0]Q;
  wire carry_1;
  wire carry_2;
  wire first_wr_word;
  wire [1:0]len_cnt_reg;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h00053035)) 
    \Using_FPGA.MUXCY_I_i_1__154 
       (.I0(len_cnt_reg[0]),
        .I1(Q[0]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[1]),
        .I4(Q[1]),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_144
   (ud_rm_available,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ud_rm_available;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ud_rm_available;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,ud_rm_available}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_145
   (ud_rm_use_pre_safe,
    A18_out,
    update_read_miss_resize_ok,
    lopt,
    lopt_1);
  output ud_rm_use_pre_safe;
  input A18_out;
  input update_read_miss_resize_ok;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A18_out;
  wire ud_rm_use_pre_safe;
  wire update_read_miss_resize_ok;

  assign lopt_1 = \<const0> ;
  assign ud_rm_use_pre_safe = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_146
   (ud_rm_use_safe,
    A17_out,
    ud_rm_use_pre_safe,
    lopt,
    lopt_1);
  output ud_rm_use_safe;
  input A17_out;
  input ud_rm_use_pre_safe;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A17_out;
  wire ud_rm_use_pre_safe;
  wire ud_rm_use_safe;

  assign lopt_1 = \<const0> ;
  assign ud_rm_use_safe = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_147
   (ud_rm_use_and_lock_safe,
    ud_rm_use_safe,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    update_valid,
    update_word_cnt_almost_last,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output ud_rm_use_and_lock_safe;
  input ud_rm_use_safe;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input update_valid;
  input update_word_cnt_almost_last;
  input \Using_FPGA.MUXCY_I_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_i_1__36_n_0 ;
  wire ud_rm_use_and_lock_safe;
  wire ud_rm_use_safe;
  wire update_valid;
  wire update_word_cnt_almost_last;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__36_n_0 ;
  assign ud_rm_use_and_lock_safe = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hDDFDFFFFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__36 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\Using_FPGA.MUXCY_I_2 ),
        .I3(update_valid),
        .I4(update_word_cnt_almost_last),
        .I5(\Using_FPGA.MUXCY_I_3 ),
        .O(\Using_FPGA.MUXCY_I_i_1__36_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_149
   (Carry_IN,
    M0_AXI_RVALID,
    \Using_FPGA.AND2B1L_Inst1 ,
    lopt,
    lopt_1);
  output Carry_IN;
  input M0_AXI_RVALID;
  input \Using_FPGA.AND2B1L_Inst1 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_IN;
  wire M0_AXI_RVALID;
  wire \Using_FPGA.AND2B1L_Inst1 ;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_15
   (carry_3,
    carry_2,
    len_cnt_reg,
    Q,
    first_wr_word,
    lopt,
    lopt_1,
    lopt_2);
  output carry_3;
  input carry_2;
  input [1:0]len_cnt_reg;
  input [1:0]Q;
  input first_wr_word;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__180_n_0 ;
  wire carry_2;
  wire carry_3;
  wire first_wr_word;
  wire [1:0]len_cnt_reg;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__180_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h00053035)) 
    \Using_FPGA.MUXCY_I_i_1__180 
       (.I0(len_cnt_reg[0]),
        .I1(Q[0]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[1]),
        .I4(Q[1]),
        .O(\Using_FPGA.MUXCY_I_i_1__180_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_151
   (ri_allocate_reg,
    Carry_OUT,
    ri_allocate,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    lopt,
    lopt_1,
    lopt_2);
  output ri_allocate_reg;
  input Carry_OUT;
  input ri_allocate;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_OUT;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire p_125_in;
  wire ri_allocate;
  wire ri_allocate_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = p_125_in;
  assign ri_allocate_reg = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__2 
       (.I0(ri_allocate),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .O(p_125_in));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_154
   (update_tag_conflict,
    access_valid,
    update_match_addr,
    lopt,
    lopt_1);
  output update_tag_conflict;
  input access_valid;
  input update_match_addr;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire access_valid;
  wire update_match_addr;
  wire update_tag_conflict;

  assign lopt_1 = \<const0> ;
  assign update_tag_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_155
   (update_need_tag_write_pre4,
    update_read_miss,
    update_need_tag_write_pre5,
    lopt,
    lopt_1);
  output update_need_tag_write_pre4;
  input update_read_miss;
  input update_need_tag_write_pre5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire update_need_tag_write_pre4;
  wire update_need_tag_write_pre5;
  wire update_read_miss;

  assign lopt_1 = \<const0> ;
  assign update_need_tag_write_pre4 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_156
   (update_need_tag_write_carry,
    update_valid,
    update_need_tag_write_pre1,
    lopt,
    lopt_1);
  output update_need_tag_write_carry;
  input update_valid;
  input update_need_tag_write_pre1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire update_need_tag_write_carry;
  wire update_need_tag_write_pre1;
  wire update_valid;

  assign lopt_1 = \<const0> ;
  assign update_need_tag_write_carry = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_16
   (wip_pop,
    write_fail_completed0,
    carry_3,
    wip_failed,
    len_cnt_reg,
    Q,
    first_wr_word,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output wip_pop;
  output write_fail_completed0;
  input carry_3;
  input wip_failed;
  input [1:0]len_cnt_reg;
  input [1:0]Q;
  input first_wr_word;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__181_n_0 ;
  wire carry_3;
  wire first_wr_word;
  wire [1:0]len_cnt_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire wip_failed;
  wire wip_pop;
  wire write_fail_completed0;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,wip_pop}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__181_n_0 }));
  LUT5 #(
    .INIT(32'h00053035)) 
    \Using_FPGA.MUXCY_I_i_1__181 
       (.I0(len_cnt_reg[0]),
        .I1(Q[0]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[1]),
        .I4(Q[1]),
        .O(\Using_FPGA.MUXCY_I_i_1__181_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    write_fail_completed_i_1
       (.I0(wip_pop),
        .I1(wip_failed),
        .O(write_fail_completed0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_161
   (carry_1,
    \The_Compare[0].sel_reg_3 ,
    update_need_tag_write_carry,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_3 ;
  input update_need_tag_write_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_3 ;
  wire carry_1;
  wire update_need_tag_write_carry;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_162
   (carry_2,
    A_4,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_4;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_4;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_163
   (update_match_addr,
    \Using_FPGA.MUXCY_I_0 ,
    carry_2,
    lopt,
    lopt_1,
    lopt_2);
  output update_match_addr;
  input \Using_FPGA.MUXCY_I_0 ;
  input carry_2;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire update_match_addr;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_2),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,update_match_addr}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_164
   (carry_1,
    ud_rm_use_resize_part_ok,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \lookup_read_data_info[0,0][Valid] ,
    \read_data_status[0,0][Hit_Full] ,
    r_miss_fifo_full,
    ri_port,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input ud_rm_use_resize_part_ok;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \lookup_read_data_info[0,0][Valid] ;
  input \read_data_status[0,0][Hit_Full] ;
  input r_miss_fifo_full;
  input ri_port;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire carry_1;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire r_miss_fifo_full;
  wire \read_data_status[0,0][Hit_Full] ;
  wire ri_port;
  wire ud_rm_use_resize_part_ok;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[0].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFFFFDDDDFFDF)) 
    \Using_FPGA.MUXCY_I_i_1__0 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\lookup_read_data_info[0,0][Valid] ),
        .I3(\read_data_status[0,0][Hit_Full] ),
        .I4(r_miss_fifo_full),
        .I5(ri_port),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_165
   (update_read_miss_resize_ok,
    carry_1,
    r_miss_fifo_full_6,
    \read_data_status[0,1][Hit_Full] ,
    \lookup_read_data_info[0,1][Valid] ,
    ri_port,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_read_miss_resize_ok;
  input carry_1;
  input r_miss_fifo_full_6;
  input \read_data_status[0,1][Hit_Full] ;
  input \lookup_read_data_info[0,1][Valid] ;
  input ri_port;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__37_n_0 ;
  wire carry_1;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire r_miss_fifo_full_6;
  wire \read_data_status[0,1][Hit_Full] ;
  wire ri_port;
  wire update_read_miss_resize_ok;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_read_miss_resize_ok}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__37_n_0 }));
  LUT6 #(
    .INIT(64'hFFFF45FFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__37 
       (.I0(r_miss_fifo_full_6),
        .I1(\read_data_status[0,1][Hit_Full] ),
        .I2(\lookup_read_data_info[0,1][Valid] ),
        .I3(ri_port),
        .I4(\Using_FPGA.MUXCY_I_0 ),
        .I5(\Using_FPGA.MUXCY_I_1 ),
        .O(\Using_FPGA.MUXCY_I_i_1__37_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_166
   (carry_1,
    \The_Compare[0].sel_reg_12 ,
    update_sel_readback_tag_3,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_12 ;
  input update_sel_readback_tag_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_12 ;
  wire carry_1;
  wire update_sel_readback_tag_3;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_167
   (carry_2,
    A_13,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_13;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_13;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_168
   (carry_3,
    \The_Compare[2].sel_reg_14 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_14 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_14 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_169
   (update_tag_match_pre_3,
    \The_Compare[3].sel_reg_15 ,
    carry_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_tag_match_pre_3;
  input \The_Compare[3].sel_reg_15 ;
  input carry_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[3].sel_reg_15 ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_tag_match_pre_3;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_tag_match_pre_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg_15 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_170
   (carry_1,
    \The_Compare[0].sel_reg_8 ,
    update_sel_readback_tag_2,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_8 ;
  input update_sel_readback_tag_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_8 ;
  wire carry_1;
  wire update_sel_readback_tag_2;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_171
   (carry_2,
    A_9,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_9;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_9;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_172
   (carry_3,
    \The_Compare[2].sel_reg_10 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_10 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_10 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_173
   (update_tag_match_pre_2,
    \The_Compare[3].sel_reg_11 ,
    carry_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_tag_match_pre_2;
  input \The_Compare[3].sel_reg_11 ;
  input carry_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[3].sel_reg_11 ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_tag_match_pre_2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_tag_match_pre_2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg_11 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_174
   (carry_1,
    \The_Compare[0].sel_reg_4 ,
    update_sel_readback_tag_1,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_4 ;
  input update_sel_readback_tag_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_4 ;
  wire carry_1;
  wire update_sel_readback_tag_1;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_175
   (carry_2,
    A_5,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_5;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_5;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_176
   (carry_3,
    \The_Compare[2].sel_reg_6 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_6 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_6 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_177
   (update_tag_match_pre_1,
    \The_Compare[3].sel_reg_7 ,
    carry_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_tag_match_pre_1;
  input \The_Compare[3].sel_reg_7 ;
  input carry_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[3].sel_reg_7 ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_tag_match_pre_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_tag_match_pre_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg_7 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_178
   (carry_1,
    \The_Compare[0].sel_reg ,
    update_sel_readback_tag_0,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg ;
  input update_sel_readback_tag_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire update_sel_readback_tag_0;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_179
   (carry_2,
    A_2,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_2;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_2;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_180
   (carry_3,
    \The_Compare[2].sel_reg ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_181
   (update_tag_match_pre_0,
    \The_Compare[3].sel_reg ,
    carry_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_tag_match_pre_0;
  input \The_Compare[3].sel_reg ;
  input carry_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[3].sel_reg ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_tag_match_pre_0;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_tag_match_pre_0}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_188
   (lu_mem_valid_carry_0,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_carry_0;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_valid_carry_0;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_carry_0}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_190
   (D,
    lu_mem_valid_tag_0,
    \lu_check_tag_hit_reg[0] ,
    \lu_check_tag_hit_reg[0]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input lu_mem_valid_tag_0;
  input \lu_check_tag_hit_reg[0] ;
  input \lu_check_tag_hit_reg[0]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__135_n_0 ;
  wire \lu_check_tag_hit_reg[0] ;
  wire \lu_check_tag_hit_reg[0]_0 ;
  wire lu_mem_valid_tag_0;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__135_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__135 
       (.I0(\lu_check_tag_hit_reg[0] ),
        .I1(\lu_check_tag_hit_reg[0]_0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__135_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_191
   (D,
    \lu_check_tag_hit_copy_pc_reg[0] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_pc_reg[0] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_pc_reg[0] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_pc_reg[0] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_192
   (D,
    \lu_check_tag_hit_copy_md_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_md_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_md_reg[0] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_193
   (D,
    \lu_check_tag_hit_copy_wm_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_wm_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_wm_reg[0] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_194
   (D,
    \lu_check_tag_hit_copy_ds_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_ds_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_ds_reg[0] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_195
   (D,
    \lu_check_tag_hit_copy_lb_reg[0] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_lb_reg[0] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_lb_reg[0] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_lb_reg[0] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_196
   (D,
    \lu_check_tag_hit_copy_rs_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_rs_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_rs_reg[0] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_197
   (D,
    \lu_check_locked_hit_reg[0] ,
    \lu_check_locked_hit_reg[0]_0 ,
    \lu_check_locked_hit_reg[0]_1 ,
    \lu_check_locked_hit_reg[0]_2 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_reg[0] ;
  input \lu_check_locked_hit_reg[0]_0 ;
  input \lu_check_locked_hit_reg[0]_1 ;
  input \lu_check_locked_hit_reg[0]_2 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__136_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [0:0]\lu_check_locked_hit_reg[0] ;
  wire \lu_check_locked_hit_reg[0]_0 ;
  wire \lu_check_locked_hit_reg[0]_1 ;
  wire \lu_check_locked_hit_reg[0]_2 ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__136_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h02A2)) 
    \Using_FPGA.MUXCY_I_i_1__136 
       (.I0(\lu_check_locked_hit_reg[0]_0 ),
        .I1(\lu_check_locked_hit_reg[0]_1 ),
        .I2(\lu_check_locked_hit_reg[0]_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__136_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_198
   (D,
    \lu_check_locked_hit_copy_lb_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_copy_lb_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_locked_hit_copy_lb_reg[0] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_199
   (D,
    \lu_check_locked_write_reg[0] ,
    \lu_check_info_reg[Wr]__0 ,
    \lu_check_locked_write_reg[0]_0 ,
    \lu_mem_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output [0:0]D;
  input [0:0]\lu_check_locked_write_reg[0] ;
  input \lu_check_info_reg[Wr]__0 ;
  input \lu_check_locked_write_reg[0]_0 ;
  input \lu_mem_info_reg[Wr]__0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__137_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire \lu_check_info_reg[Wr]__0 ;
  wire [0:0]\lu_check_locked_write_reg[0] ;
  wire \lu_check_locked_write_reg[0]_0 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_locked_write_reg[0] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__137_n_0 }));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__137 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_locked_write_reg[0]_0 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__137_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_2
   (r_pop,
    S0_AXI_RREADY,
    r_pop_valid,
    lopt,
    lopt_1);
  output r_pop;
  input S0_AXI_RREADY;
  input r_pop_valid;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S0_AXI_RREADY;
  wire r_pop;
  wire r_pop_valid;

  assign lopt_1 = \<const0> ;
  assign r_pop = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_205
   (lu_mem_valid_carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_valid_carry_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_207
   (D,
    lu_mem_valid_tag_1,
    \lu_check_tag_hit_reg[1] ,
    \lu_check_tag_hit_reg[1]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input lu_mem_valid_tag_1;
  input \lu_check_tag_hit_reg[1] ;
  input \lu_check_tag_hit_reg[1]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__139_n_0 ;
  wire \lu_check_tag_hit_reg[1] ;
  wire \lu_check_tag_hit_reg[1]_0 ;
  wire lu_mem_valid_tag_1;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__139_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__139 
       (.I0(\lu_check_tag_hit_reg[1] ),
        .I1(\lu_check_tag_hit_reg[1]_0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__139_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_208
   (D,
    \lu_check_tag_hit_copy_pc_reg[1] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_pc_reg[1] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_pc_reg[1] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_pc_reg[1] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_209
   (D,
    \lu_check_tag_hit_copy_md_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_md_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_md_reg[1] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_210
   (D,
    \lu_check_tag_hit_copy_wm_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_wm_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_wm_reg[1] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_211
   (D,
    \lu_check_tag_hit_copy_ds_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_ds_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_ds_reg[1] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_212
   (D,
    \lu_check_tag_hit_copy_lb_reg[1] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_lb_reg[1] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_lb_reg[1] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_lb_reg[1] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_213
   (D,
    \lu_check_tag_hit_copy_rs_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_rs_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_rs_reg[1] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_214
   (D,
    \lu_check_locked_hit_reg[1] ,
    \lu_check_locked_hit_reg[1]_0 ,
    \lu_check_locked_hit_reg[1]_1 ,
    \lu_check_locked_hit_reg[1]_2 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_reg[1] ;
  input \lu_check_locked_hit_reg[1]_0 ;
  input \lu_check_locked_hit_reg[1]_1 ;
  input \lu_check_locked_hit_reg[1]_2 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__140_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [0:0]\lu_check_locked_hit_reg[1] ;
  wire \lu_check_locked_hit_reg[1]_0 ;
  wire \lu_check_locked_hit_reg[1]_1 ;
  wire \lu_check_locked_hit_reg[1]_2 ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__140_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h02A2)) 
    \Using_FPGA.MUXCY_I_i_1__140 
       (.I0(\lu_check_locked_hit_reg[1]_0 ),
        .I1(\lu_check_locked_hit_reg[1]_1 ),
        .I2(\lu_check_locked_hit_reg[1]_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__140_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_215
   (D,
    \lu_check_locked_hit_copy_lb_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_copy_lb_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_locked_hit_copy_lb_reg[1] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_216
   (D,
    \lu_check_locked_write_reg[1] ,
    \lu_check_info_reg[Wr]__0 ,
    \lu_check_locked_write_reg[1]_0 ,
    \lu_mem_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output [0:0]D;
  input [0:0]\lu_check_locked_write_reg[1] ;
  input \lu_check_info_reg[Wr]__0 ;
  input \lu_check_locked_write_reg[1]_0 ;
  input \lu_mem_info_reg[Wr]__0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__141_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire \lu_check_info_reg[Wr]__0 ;
  wire [0:0]\lu_check_locked_write_reg[1] ;
  wire \lu_check_locked_write_reg[1]_0 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_locked_write_reg[1] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__141_n_0 }));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__141 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_locked_write_reg[1]_0 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__141_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_22
   (r_pop_valid,
    A29_out,
    rd_done,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output r_pop_valid;
  input A29_out;
  input rd_done;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A29_out;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire r_pop_valid;
  wire rd_done;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(rd_done),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,r_pop_valid}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A29_out}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_222
   (lu_mem_valid_carry_2,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_carry_2;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_valid_carry_2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_carry_2}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_224
   (D,
    lu_mem_valid_tag_2,
    \lu_check_tag_hit_reg[2] ,
    \lu_check_tag_hit_reg[2]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input lu_mem_valid_tag_2;
  input \lu_check_tag_hit_reg[2] ;
  input \lu_check_tag_hit_reg[2]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__143_n_0 ;
  wire \lu_check_tag_hit_reg[2] ;
  wire \lu_check_tag_hit_reg[2]_0 ;
  wire lu_mem_valid_tag_2;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__143_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__143 
       (.I0(\lu_check_tag_hit_reg[2] ),
        .I1(\lu_check_tag_hit_reg[2]_0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__143_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_225
   (D,
    \lu_check_tag_hit_copy_pc_reg[2] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_pc_reg[2] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_pc_reg[2] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_pc_reg[2] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_226
   (D,
    \lu_check_tag_hit_copy_md_reg[2] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_md_reg[2] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_md_reg[2] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_227
   (D,
    \lu_check_tag_hit_copy_wm_reg[2] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_wm_reg[2] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_wm_reg[2] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_228
   (D,
    \lu_check_tag_hit_copy_ds_reg[2] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_ds_reg[2] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_ds_reg[2] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_229
   (D,
    \lu_check_tag_hit_copy_lb_reg[2] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_lb_reg[2] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_lb_reg[2] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_lb_reg[2] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_23
   (r_pop,
    S0_AXI_GEN_RREADY,
    r_pop_valid,
    lopt,
    lopt_1);
  output r_pop;
  input S0_AXI_GEN_RREADY;
  input r_pop_valid;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S0_AXI_GEN_RREADY;
  wire r_pop;
  wire r_pop_valid;

  assign lopt_1 = \<const0> ;
  assign r_pop = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_230
   (D,
    \lu_check_tag_hit_copy_rs_reg[2] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_rs_reg[2] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_rs_reg[2] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_231
   (D,
    \lu_check_locked_hit_reg[2] ,
    \lu_check_locked_hit_reg[2]_0 ,
    \lu_check_locked_hit_reg[2]_1 ,
    \lu_check_locked_hit_reg[2]_2 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_reg[2] ;
  input \lu_check_locked_hit_reg[2]_0 ;
  input \lu_check_locked_hit_reg[2]_1 ;
  input \lu_check_locked_hit_reg[2]_2 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__144_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [0:0]\lu_check_locked_hit_reg[2] ;
  wire \lu_check_locked_hit_reg[2]_0 ;
  wire \lu_check_locked_hit_reg[2]_1 ;
  wire \lu_check_locked_hit_reg[2]_2 ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__144_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h02A2)) 
    \Using_FPGA.MUXCY_I_i_1__144 
       (.I0(\lu_check_locked_hit_reg[2]_0 ),
        .I1(\lu_check_locked_hit_reg[2]_1 ),
        .I2(\lu_check_locked_hit_reg[2]_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__144_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_232
   (D,
    \lu_check_locked_hit_copy_lb_reg[2] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_copy_lb_reg[2] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_locked_hit_copy_lb_reg[2] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_233
   (D,
    \lu_check_locked_write_reg[2] ,
    \lu_check_info_reg[Wr]__0 ,
    \lu_check_locked_write_reg[2]_0 ,
    \lu_mem_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output [0:0]D;
  input [0:0]\lu_check_locked_write_reg[2] ;
  input \lu_check_info_reg[Wr]__0 ;
  input \lu_check_locked_write_reg[2]_0 ;
  input \lu_mem_info_reg[Wr]__0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__145_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire \lu_check_info_reg[Wr]__0 ;
  wire [0:0]\lu_check_locked_write_reg[2] ;
  wire \lu_check_locked_write_reg[2]_0 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_locked_write_reg[2] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__145_n_0 }));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__145 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_locked_write_reg[2]_0 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__145_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_239
   (lu_mem_valid_carry_3,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_carry_3;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_valid_carry_3;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_carry_3}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_241
   (D,
    lu_mem_valid_tag_3,
    \lu_check_tag_hit_reg[3] ,
    \lu_check_tag_hit_reg[3]_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input lu_mem_valid_tag_3;
  input \lu_check_tag_hit_reg[3] ;
  input \lu_check_tag_hit_reg[3]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__65_n_0 ;
  wire \lu_check_tag_hit_reg[3] ;
  wire \lu_check_tag_hit_reg[3]_0 ;
  wire lu_mem_valid_tag_3;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__65_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__65 
       (.I0(\lu_check_tag_hit_reg[3] ),
        .I1(\lu_check_tag_hit_reg[3]_0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__65_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_242
   (D,
    \lu_check_tag_hit_copy_pc_reg[3] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_pc_reg[3] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_pc_reg[3] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_pc_reg[3] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_243
   (D,
    \lu_check_tag_hit_copy_md_reg[3] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_md_reg[3] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_md_reg[3] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_244
   (D,
    \lu_check_tag_hit_copy_wm_reg[3] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_wm_reg[3] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_wm_reg[3] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_245
   (D,
    \lu_check_tag_hit_copy_ds_reg[3] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_ds_reg[3] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_ds_reg[3] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_246
   (D,
    \lu_check_tag_hit_copy_lb_reg[3] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_lb_reg[3] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]\lu_check_tag_hit_copy_lb_reg[3] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_tag_hit_copy_lb_reg[3] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_247
   (D,
    \lu_check_tag_hit_copy_rs_reg[3] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_tag_hit_copy_rs_reg[3] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_tag_hit_copy_rs_reg[3] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_248
   (D,
    \lu_check_locked_hit_reg[3] ,
    \lu_check_locked_hit_reg[3]_0 ,
    \lu_check_locked_hit_reg[3]_1 ,
    \lu_check_locked_hit_reg[3]_2 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_reg[3] ;
  input \lu_check_locked_hit_reg[3]_0 ;
  input \lu_check_locked_hit_reg[3]_1 ;
  input \lu_check_locked_hit_reg[3]_2 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__146_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [0:0]\lu_check_locked_hit_reg[3] ;
  wire \lu_check_locked_hit_reg[3]_0 ;
  wire \lu_check_locked_hit_reg[3]_1 ;
  wire \lu_check_locked_hit_reg[3]_2 ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__146_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h02A2)) 
    \Using_FPGA.MUXCY_I_i_1__146 
       (.I0(\lu_check_locked_hit_reg[3]_0 ),
        .I1(\lu_check_locked_hit_reg[3]_1 ),
        .I2(\lu_check_locked_hit_reg[3]_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__146_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_249
   (D,
    \lu_check_locked_hit_copy_lb_reg[3] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\lu_check_locked_hit_copy_lb_reg[3] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\lu_check_locked_hit_copy_lb_reg[3] ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_25
   (rip_pop,
    \Use_FPGA.Empty_Inst ,
    ri_refresh_reg,
    r_pop_safe_i,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    ri_exist,
    Q,
    \Use_FPGA_2.S_AXI_RVALID_reg_0 ,
    p_4_out__2,
    I5,
    p_3_out__2,
    r_hit_last,
    r_miss_last,
    lopt,
    lopt_1,
    lopt_2);
  output rip_pop;
  output \Use_FPGA.Empty_Inst ;
  output ri_refresh_reg;
  input r_pop_safe_i;
  input \Use_FPGA_2.S_AXI_RVALID_reg ;
  input ri_exist;
  input Q;
  input \Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  input p_4_out__2;
  input I5;
  input p_3_out__2;
  input r_hit_last;
  input r_miss_last;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire I5;
  wire Q;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA_2.S_AXI_RVALID_i_2__0_n_0 ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  wire p_3_out__2;
  wire p_4_out__2;
  wire r_hit_last;
  wire r_miss_last;
  wire r_pop_safe_i;
  wire ri_exist;
  wire ri_refresh_reg;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  assign rip_pop = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT5 #(
    .INIT(32'h000022A2)) 
    \Use_FPGA_2.S_AXI_RVALID_i_1__0 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_i_2__0_n_0 ),
        .I1(\Use_FPGA_2.S_AXI_RVALID_reg ),
        .I2(ri_exist),
        .I3(rip_pop),
        .I4(Q),
        .O(\Use_FPGA.Empty_Inst ));
  LUT6 #(
    .INIT(64'hFF45FF75BA008A00)) 
    \Use_FPGA_2.S_AXI_RVALID_i_2__0 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_reg_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(p_4_out__2),
        .I4(I5),
        .I5(p_3_out__2),
        .O(\Use_FPGA_2.S_AXI_RVALID_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Rd_Ctrl_Pipeline.ri_hit_i_1__0 
       (.I0(rip_pop),
        .I1(ri_exist),
        .O(ri_refresh_reg));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__176 
       (.I0(r_hit_last),
        .I1(I5),
        .I2(r_miss_last),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_250
   (D,
    \lu_check_locked_write_reg[3] ,
    \lu_check_info_reg[Wr]__0 ,
    \lu_check_locked_write_reg[3]_0 ,
    \lu_mem_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output [0:0]D;
  input [0:0]\lu_check_locked_write_reg[3] ;
  input \lu_check_info_reg[Wr]__0 ;
  input \lu_check_locked_write_reg[3]_0 ;
  input \lu_mem_info_reg[Wr]__0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__71_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire \lu_check_info_reg[Wr]__0 ;
  wire [0:0]\lu_check_locked_write_reg[3] ;
  wire \lu_check_locked_write_reg[3]_0 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\lu_check_locked_write_reg[3] ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__71_n_0 }));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__71 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_locked_write_reg[3]_0 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__71_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_263
   (\lu_check_locked_hit_reg[3] ,
    lud_addr_pipeline_full_i_2_0,
    lud_step_offset,
    lud_addr_pipeline_full_reg,
    lud_addr_pipeline_full_reg_0,
    lopt,
    lopt_1);
  output \lu_check_locked_hit_reg[3] ;
  input lud_addr_pipeline_full_i_2_0;
  input lud_step_offset;
  input lud_addr_pipeline_full_reg;
  input lud_addr_pipeline_full_reg_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \lu_check_locked_hit_reg[3] ;
  wire lud_addr_pipeline_full_i_2_0;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_step_offset;
  wire lud_step_offset_is_read;

  assign lopt_1 = \<const0> ;
  assign lud_step_offset_is_read = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h57)) 
    lud_addr_pipeline_full_i_2
       (.I0(lud_step_offset_is_read),
        .I1(lud_addr_pipeline_full_reg),
        .I2(lud_addr_pipeline_full_reg_0),
        .O(\lu_check_locked_hit_reg[3] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_270
   (lu_check_tag_conflict,
    A159_out,
    lu_check_match_addr,
    lopt,
    lopt_1);
  output lu_check_tag_conflict;
  input A159_out;
  input lu_check_match_addr;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A159_out;
  wire lu_check_match_addr;
  wire lu_check_tag_conflict;

  assign lopt_1 = \<const0> ;
  assign lu_check_tag_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_273
   (lu_io_full_block_read,
    lu_io_selected_full,
    \Using_FPGA.MUXCY_I_0 ,
    I5,
    \Using_FPGA.MUXCY_I_1 ,
    \lu_check_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_io_full_block_read;
  input lu_io_selected_full;
  input \Using_FPGA.MUXCY_I_0 ;
  input I5;
  input \Using_FPGA.MUXCY_I_1 ;
  input \lu_check_info_reg[Wr]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A175_out;
  wire I5;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_io_full_block_read;
  wire lu_io_selected_full;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A175_out;
  assign lu_io_full_block_read = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h00D0)) 
    \Using_FPGA.MUXCY_I_i_1__124 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(I5),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .O(A175_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_276
   (lookup_io_stall_pre_valid,
    A172_out,
    lookup_io_stall_hit_carry_no_last,
    lopt,
    lopt_1);
  output lookup_io_stall_pre_valid;
  input A172_out;
  input lookup_io_stall_hit_carry_no_last;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A172_out;
  wire lookup_io_stall_hit_carry_no_last;
  wire lookup_io_stall_pre_valid;

  assign lookup_io_stall_pre_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_282
   (lu_ds_last_beat_multi_start,
    lu_check_multi_beat,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_ds_last_beat_multi_start;
  input lu_check_multi_beat;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_check_multi_beat;
  wire lu_ds_last_beat_multi_start;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_ds_last_beat_multi_start}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,lu_check_multi_beat}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_285
   (lu_ds_last_beat_valid_hit,
    lu_check_valid,
    Carry_OUT,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_ds_last_beat_valid_hit;
  input lu_check_valid;
  input Carry_OUT;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_OUT;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_check_valid;
  wire lu_ds_last_beat_valid_hit;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_OUT),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_ds_last_beat_valid_hit}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,lu_check_valid}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_287
   (lu_ds_rs_read_miss,
    \Using_FPGA.MUXCY_I_0 ,
    Carry_Out,
    lopt,
    lopt_1);
  output lu_ds_rs_read_miss;
  input \Using_FPGA.MUXCY_I_0 ;
  input Carry_Out;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_Out;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire lu_ds_rs_read_miss;

  assign lopt_1 = \<const0> ;
  assign lu_ds_rs_read_miss = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_288
   (lu_ds_rs_new_read_no_rs,
    lu_ds_rs_read_miss,
    \Using_FPGA.MUXCY_I_0 ,
    \lu_mem_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_ds_rs_new_read_no_rs;
  input lu_ds_rs_read_miss;
  input \Using_FPGA.MUXCY_I_0 ;
  input \lu_mem_info_reg[Wr]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__130_n_0 ;
  wire lu_ds_rs_new_read_no_rs;
  wire lu_ds_rs_read_miss;
  wire \lu_mem_info_reg[Wr]__0 ;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__130_n_0 ;
  assign lu_ds_rs_new_read_no_rs = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__130 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\lu_mem_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__130_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_289
   (lu_ds_rs_del_restart_no_rs,
    lu_ds_rs_new_read_no_rs,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_ds_rs_del_restart_no_rs;
  input lu_ds_rs_new_read_no_rs;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A177_out;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire lu_ds_rs_del_restart_no_rs;
  wire lu_ds_rs_new_read_no_rs;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A177_out;
  assign lu_ds_rs_del_restart_no_rs = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__56 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .O(A177_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_29
   (carry_1,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input [5:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [5:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.MUXCY_I_i_1__175 
       (.I0(Q[5]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(Q[1]),
        .I4(Q[4]),
        .I5(Q[3]),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_290
   (lu_ds_lb_delayed_restart_conflict,
    lu_ds_rs_del_restart_no_rs,
    \Using_FPGA.MUXCY_I_0 ,
    lookup_restart_mem_done);
  output lu_ds_lb_delayed_restart_conflict;
  input lu_ds_rs_del_restart_no_rs;
  input \Using_FPGA.MUXCY_I_0 ;
  input lookup_restart_mem_done;

  wire A176_out;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire lookup_restart_mem_done;
  wire lu_ds_lb_delayed_restart_conflict;
  wire lu_ds_rs_del_restart_no_rs;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_ds_rs_del_restart_no_rs),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:1],lu_ds_lb_delayed_restart_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:1],A176_out}));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__55 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(lookup_restart_mem_done),
        .O(A176_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_291
   (lookup_raw_hit_carry2,
    lu_check_valid,
    lu_check_tag_hit_all_carry,
    lopt,
    lopt_1);
  output lookup_raw_hit_carry2;
  input lu_check_valid;
  input lu_check_tag_hit_all_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lookup_raw_hit_carry2;
  wire lu_check_tag_hit_all_carry;
  wire lu_check_valid;

  assign lookup_raw_hit_carry2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_293
   (lookup_write_hit_carry,
    \lu_check_info_reg[Wr]__0 ,
    lookup_hit_carry,
    lopt,
    lopt_1);
  output lookup_write_hit_carry;
  input \lu_check_info_reg[Wr]__0 ;
  input lookup_hit_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lookup_hit_carry;
  wire lookup_write_hit_carry;
  wire \lu_check_info_reg[Wr]__0 ;

  assign lookup_write_hit_carry = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_295
   (lu_fetch_piperun_pre2,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_fetch_piperun_pre2;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_fetch_piperun_pre2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\Using_FPGA.MUXCY_I_0 ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_fetch_piperun_pre2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_3
   (rip_pop,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    ri_refresh_reg,
    r_pop_safe_i,
    ri_exist,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    Q,
    \Use_FPGA_2.S_AXI_RVALID_reg_0 ,
    p_4_out__2,
    I5,
    p_3_out__2,
    r_hit_last,
    r_miss_last,
    lopt,
    lopt_1,
    lopt_2);
  output rip_pop;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output ri_refresh_reg;
  input r_pop_safe_i;
  input ri_exist;
  input \Use_FPGA_2.S_AXI_RVALID_reg ;
  input Q;
  input \Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  input p_4_out__2;
  input I5;
  input p_3_out__2;
  input r_hit_last;
  input r_miss_last;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire I5;
  wire Q;
  wire \Use_FPGA_2.S_AXI_RVALID_i_2_n_0 ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire p_3_out__2;
  wire p_4_out__2;
  wire r_hit_last;
  wire r_miss_last;
  wire r_pop_safe_i;
  wire ri_exist;
  wire ri_refresh_reg;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  assign rip_pop = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT5 #(
    .INIT(32'h000008AA)) 
    \Use_FPGA_2.S_AXI_RVALID_i_1 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_i_2_n_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA_2.S_AXI_RVALID_reg ),
        .I4(Q),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  LUT6 #(
    .INIT(64'hFF45FF75BA008A00)) 
    \Use_FPGA_2.S_AXI_RVALID_i_2 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_reg_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(p_4_out__2),
        .I4(I5),
        .I5(p_3_out__2),
        .O(\Use_FPGA_2.S_AXI_RVALID_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Rd_Ctrl_Pipeline.ri_hit_i_1 
       (.I0(rip_pop),
        .I1(ri_exist),
        .O(ri_refresh_reg));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__169 
       (.I0(r_hit_last),
        .I1(I5),
        .I2(r_miss_last),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_30
   (rd_length_zero,
    carry_1,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output rd_length_zero;
  input carry_1;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [1:0]Q;
  wire carry_1;
  wire rd_length_zero;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  assign rd_length_zero = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_1__156 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_300
   (dirty_miss_valid,
    \Using_FPGA.MUXCY_I_0 ,
    Carry_OUT,
    lopt,
    lopt_1);
  output dirty_miss_valid;
  input \Using_FPGA.MUXCY_I_0 ;
  input Carry_OUT;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_OUT;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire dirty_miss_valid;

  assign dirty_miss_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_302
   (lookup_miss_dirty_pre,
    dirty_bit_valid,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_miss_dirty_pre;
  input dirty_bit_valid;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire dirty_bit_valid;
  wire lookup_miss_dirty_pre;

  assign lookup_miss_dirty_pre = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_303
   (lookup_miss_dirty,
    lookup_wm_evict,
    \lu_check_info_reg[Evict] ,
    lu_check_valid,
    lookup_miss_dirty_pre,
    wm_evict_reg,
    \lu_check_info_reg[Wr]__0 ,
    \lu_check_info_reg[Evict]__0 ,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lookup_miss_dirty;
  output lookup_wm_evict;
  output \lu_check_info_reg[Evict] ;
  input lu_check_valid;
  input lookup_miss_dirty_pre;
  input wm_evict_reg;
  input \lu_check_info_reg[Wr]__0 ;
  input \lu_check_info_reg[Evict]__0 ;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire lookup_miss_dirty;
  wire lookup_miss_dirty_pre;
  wire lookup_wm_evict;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Evict] ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_valid;
  wire wm_evict_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  LUT3 #(
    .INIT(8'h5D)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4 
       (.I0(lookup_miss_dirty),
        .I1(\lu_check_info_reg[Evict]__0 ),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .O(\lu_check_info_reg[Evict] ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_miss_dirty_pre),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lookup_miss_dirty}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,lu_check_valid}));
  LUT6 #(
    .INIT(64'hAAAAAAAAAABAAAAA)) 
    \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_i_1 
       (.I0(lookup_miss_dirty),
        .I1(wm_evict_reg),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .I4(lu_check_valid),
        .I5(S),
        .O(lookup_wm_evict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_307
   (lu_mem_tag_conflict,
    A161_out,
    lu_mem_match_addr,
    lopt,
    lopt_1);
  output lu_mem_tag_conflict;
  input A161_out;
  input lu_mem_match_addr;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A161_out;
  wire lu_mem_match_addr;
  wire lu_mem_tag_conflict;

  assign lopt_1 = \<const0> ;
  assign lu_mem_tag_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_311
   (protected_miss_valid,
    A187_out,
    Carry_Out,
    lopt,
    lopt_1);
  output protected_miss_valid;
  input A187_out;
  input Carry_Out;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A187_out;
  wire Carry_Out;
  wire protected_miss_valid;

  assign lopt_1 = \<const0> ;
  assign protected_miss_valid = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_312
   (lookup_protect_conflict,
    lud_mem_completed_reg,
    lu_mem_valid_reg,
    \lu_check_locked_hit_reg[3] ,
    lookup_read_done_i,
    S,
    DPRA,
    lookup_restart_mem,
    S_0,
    A35_out,
    lud_addr_pipeline_full_reg,
    lu_mem_protect_conflict_reg,
    lookup_restart_mem_done_reg,
    \lu_check_locked_hit_reg[3]_0 ,
    lu_check_valid,
    protection_with_coherency,
    lookup_last_beat,
    lud_addr_piperun,
    lud_mem_completed_reg_0,
    Q,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    p_223_in,
    S_1,
    lu_check_wait_for_update,
    lu_check_read_info_done,
    lu_check_read_info_done_reg,
    lud_mem_completed_reg_1,
    \lu_mem_info_reg[Wr]__0 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    lookup_restart_mem_done_reg_0,
    lookup_restart_mem_done,
    D,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_1 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_2 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_3 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_4 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_5 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_6 ,
    update_tag_conflict,
    lu_check_tag_conflict,
    lu_mem_tag_conflict,
    lud_mem_piperun,
    lu_ds_lb_delayed_restart_conflict,
    Carry_OUT,
    lookup_io_data_stall,
    \Using_FPGA.MUXCY_I_i_2__3 ,
    lud_step_delayed_restart,
    lookup_restart_mem_done_reg_1,
    lud_mem_completed_reg_2,
    lopt,
    lopt_1);
  output lookup_protect_conflict;
  output lud_mem_completed_reg;
  output lu_mem_valid_reg;
  output \lu_check_locked_hit_reg[3] ;
  output lookup_read_done_i;
  output S;
  output [6:0]DPRA;
  output lookup_restart_mem;
  output S_0;
  output A35_out;
  output lud_addr_pipeline_full_reg;
  output lu_mem_protect_conflict_reg;
  output lookup_restart_mem_done_reg;
  output \lu_check_locked_hit_reg[3]_0 ;
  input lu_check_valid;
  input protection_with_coherency;
  input lookup_last_beat;
  input lud_addr_piperun;
  input lud_mem_completed_reg_0;
  input Q;
  input [3:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input p_223_in;
  input S_1;
  input lu_check_wait_for_update;
  input lu_check_read_info_done;
  input lu_check_read_info_done_reg;
  input lud_mem_completed_reg_1;
  input \lu_mem_info_reg[Wr]__0 ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input lookup_restart_mem_done_reg_0;
  input lookup_restart_mem_done;
  input [6:0]D;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ;
  input [6:0]\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_1 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_2 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_3 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_4 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_5 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_6 ;
  input update_tag_conflict;
  input lu_check_tag_conflict;
  input lu_mem_tag_conflict;
  input lud_mem_piperun;
  input lu_ds_lb_delayed_restart_conflict;
  input Carry_OUT;
  input lookup_io_data_stall;
  input \Using_FPGA.MUXCY_I_i_2__3 ;
  input lud_step_delayed_restart;
  input lookup_restart_mem_done_reg_1;
  input lud_mem_completed_reg_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A35_out;
  wire Carry_OUT;
  wire [6:0]D;
  wire [6:0]DPRA;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ;
  wire [6:0]\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_2 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_3 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_4 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_5 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_6 ;
  wire Q;
  wire S;
  wire S_0;
  wire S_1;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire [3:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__3 ;
  wire lookup_io_data_stall;
  wire lookup_last_beat;
  wire lookup_protect_conflict;
  wire lookup_read_done_i;
  wire lookup_restart_mem;
  wire lookup_restart_mem_done;
  wire lookup_restart_mem_done_reg;
  wire lookup_restart_mem_done_reg_0;
  wire lookup_restart_mem_done_reg_1;
  wire \lu_check_locked_hit_reg[3] ;
  wire \lu_check_locked_hit_reg[3]_0 ;
  wire lu_check_read_info_done;
  wire lu_check_read_info_done_reg;
  wire lu_check_tag_conflict;
  wire lu_check_valid;
  wire lu_check_wait_for_update;
  wire lu_ds_lb_delayed_restart_conflict;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_tag_conflict;
  wire lu_mem_valid_reg;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_piperun;
  wire lud_mem_completed_i_2_n_0;
  wire lud_mem_completed_reg;
  wire lud_mem_completed_reg_0;
  wire lud_mem_completed_reg_1;
  wire lud_mem_completed_reg_2;
  wire lud_mem_piperun;
  wire lud_step_delayed_restart;
  wire p_223_in;
  wire protection_with_coherency;
  wire update_tag_conflict;

  assign lookup_protect_conflict = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_10 
       (.I0(D[6]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [6]),
        .O(DPRA[6]));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_11 
       (.I0(D[5]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_1 ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [5]),
        .O(DPRA[5]));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_12 
       (.I0(D[4]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_2 ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [4]),
        .O(DPRA[4]));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_13 
       (.I0(D[3]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_3 ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [3]),
        .O(DPRA[3]));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_14 
       (.I0(D[2]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_4 ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [2]),
        .O(DPRA[2]));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_15 
       (.I0(D[1]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_5 ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [1]),
        .O(DPRA[1]));
  LUT6 #(
    .INIT(64'hBBB8BBBB88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_16 
       (.I0(D[0]),
        .I1(lookup_protect_conflict),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_6 ),
        .I3(lookup_restart_mem_done),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 [0]),
        .O(DPRA[0]));
  LUT6 #(
    .INIT(64'h000000000000000D)) 
    \Using_FPGA.MUXCY_I_i_1__125 
       (.I0(lookup_restart_mem_done_reg_0),
        .I1(lookup_restart_mem_done),
        .I2(lookup_protect_conflict),
        .I3(update_tag_conflict),
        .I4(lu_check_tag_conflict),
        .I5(lu_mem_tag_conflict),
        .O(lu_mem_protect_conflict_reg));
  LUT6 #(
    .INIT(64'hFDFDFDFDFD00FDFD)) 
    \Using_FPGA.MUXCY_I_i_1__54 
       (.I0(lud_mem_completed_reg_1),
        .I1(\lu_mem_info_reg[Wr]__0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(lookup_protect_conflict),
        .I4(lookup_restart_mem_done_reg_0),
        .I5(lookup_restart_mem_done),
        .O(S));
  LUT6 #(
    .INIT(64'hFFFFFFF4FFF4FFF4)) 
    \Using_FPGA.MUXCY_I_i_4__0 
       (.I0(lookup_protect_conflict),
        .I1(lu_ds_lb_delayed_restart_conflict),
        .I2(Carry_OUT),
        .I3(lookup_io_data_stall),
        .I4(\Using_FPGA.MUXCY_I_i_2__3 ),
        .I5(lud_step_delayed_restart),
        .O(lud_addr_pipeline_full_reg));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.MUXCY_I_i_7 
       (.I0(lookup_restart_mem_done),
        .I1(lookup_restart_mem_done_reg_0),
        .I2(lookup_protect_conflict),
        .O(lookup_restart_mem));
  LUT3 #(
    .INIT(8'hBA)) 
    \Using_FPGA.OR2L_Inst1_i_1 
       (.I0(lookup_protect_conflict),
        .I1(lookup_restart_mem_done),
        .I2(lookup_restart_mem_done_reg_0),
        .O(A35_out));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFF)) 
    lookup_next_is_last_beat_i_3
       (.I0(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [3]),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [1]),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [2]),
        .I3(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [0]),
        .I4(lookup_protect_conflict),
        .I5(p_223_in),
        .O(\lu_check_locked_hit_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT5 #(
    .INIT(32'h000000AE)) 
    lookup_restart_mem_done_i_1
       (.I0(lookup_restart_mem_done),
        .I1(lookup_restart_mem_done_reg_0),
        .I2(lookup_protect_conflict),
        .I3(Q),
        .I4(lookup_restart_mem_done_reg_1),
        .O(lookup_restart_mem_done_reg));
  LUT5 #(
    .INIT(32'h000B0000)) 
    lu_check_read_info_done_i_2
       (.I0(S_1),
        .I1(lookup_protect_conflict),
        .I2(lu_check_wait_for_update),
        .I3(lu_check_read_info_done),
        .I4(lu_check_read_info_done_reg),
        .O(lookup_read_done_i));
  LUT6 #(
    .INIT(64'h000000000000000D)) 
    lu_mem_valid_i_2
       (.I0(lookup_restart_mem_done_reg_0),
        .I1(lookup_restart_mem_done),
        .I2(lookup_protect_conflict),
        .I3(update_tag_conflict),
        .I4(lu_check_tag_conflict),
        .I5(lu_mem_tag_conflict),
        .O(S_0));
  LUT6 #(
    .INIT(64'h00000000C0AAC000)) 
    lud_mem_completed_i_1
       (.I0(lud_mem_completed_i_2_n_0),
        .I1(lu_mem_valid_reg),
        .I2(lookup_last_beat),
        .I3(lud_addr_piperun),
        .I4(lud_mem_completed_reg_0),
        .I5(Q),
        .O(lud_mem_completed_reg));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'h1)) 
    lud_mem_completed_i_2
       (.I0(lookup_protect_conflict),
        .I1(lud_mem_piperun),
        .O(lud_mem_completed_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    lud_mem_waiting_for_pipe_i_2
       (.I0(lookup_protect_conflict),
        .I1(lud_mem_completed_reg_2),
        .I2(lud_mem_completed_reg_1),
        .I3(\lu_mem_info_reg[Wr]__0 ),
        .O(lu_mem_valid_reg));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_i_1 
       (.I0(lookup_protect_conflict),
        .I1(p_223_in),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [3]),
        .I3(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [1]),
        .I4(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [2]),
        .I5(\Use_Rd_Ctrl_Pipeline.ri_hit_reg [0]),
        .O(\lu_check_locked_hit_reg[3]_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_318
   (lookup_push_wm_stall,
    update_write_miss_full,
    lookup_push_write_miss_pre,
    lopt,
    lopt_1);
  output lookup_push_wm_stall;
  input update_write_miss_full;
  input lookup_push_write_miss_pre;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss_pre;
  wire update_write_miss_full;

  assign lookup_push_wm_stall = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_320
   (lookup_md_wm_whne_valid,
    lu_check_valid,
    lookup_md_or_wm_or_whne2,
    lopt,
    lopt_1);
  output lookup_md_wm_whne_valid;
  input lu_check_valid;
  input lookup_md_or_wm_or_whne2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lookup_md_or_wm_or_whne2;
  wire lookup_md_wm_whne_valid;
  wire lu_check_valid;

  assign lookup_md_wm_whne_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_345
   (Carry_IN,
    lru_protected_bit,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_IN;
  input lru_protected_bit;
  input [3:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire [3:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__100_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lru_protected_bit;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lru_protected_bit),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_IN}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__100_n_0 }));
  LUT4 #(
    .INIT(16'h8000)) 
    \Using_FPGA.MUXCY_I_i_1__100 
       (.I0(Q[3]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\Using_FPGA.MUXCY_I_i_1__100_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_346
   (carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    Q,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input [2:0]Q;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [2:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__101 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(\Using_FPGA.MUXCY_I_2 ),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_347
   (carry_2,
    carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    Q,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  input carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input [2:0]Q;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [2:0]Q;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__102 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(Q[1]),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(\Using_FPGA.MUXCY_I_2 ),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_348
   (lu_mem_match_addr,
    \Using_FPGA.MUXCY_I_0 ,
    carry_2,
    lopt,
    lopt_1);
  output lu_mem_match_addr;
  input \Using_FPGA.MUXCY_I_0 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_2;
  wire lu_mem_match_addr;

  assign lopt_1 = \<const0> ;
  assign lu_mem_match_addr = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_35
   (exclusive_too_long,
    \Using_FPGA.Using_Inv.No_Pad.MUXCY_Inst1 ,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output exclusive_too_long;
  input \Using_FPGA.Using_Inv.No_Pad.MUXCY_Inst1 ;
  input Carry_IN;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire \Using_FPGA.Using_Inv.No_Pad.MUXCY_Inst1 ;
  wire exclusive_too_long;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_IN),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,exclusive_too_long}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.Using_Inv.No_Pad.MUXCY_Inst1 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_355
   (carry_1,
    dirty_bit,
    \lu_check_info_reg[Evict]__0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input dirty_bit;
  input \lu_check_info_reg[Evict]__0 ;
  input [2:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire dirty_bit;
  wire \lu_check_info_reg[Evict]__0 ;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[0].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hAAAB)) 
    \Using_FPGA.MUXCY_I_i_1__49 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_356
   (dirty_bit_valid,
    carry_1,
    \lu_check_info_reg[Evict]__0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output dirty_bit_valid;
  input carry_1;
  input \lu_check_info_reg[Evict]__0 ;
  input [0:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [0:0]Q;
  wire carry_1;
  wire dirty_bit_valid;
  wire \lu_check_info_reg[Evict]__0 ;

  assign dirty_bit_valid = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__42 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(Q),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_358
   (Carry_IN,
    \Using_FPGA_Keep.MUXCY_I ,
    lru_dirty_bit,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_IN;
  input \Using_FPGA_Keep.MUXCY_I ;
  input lru_dirty_bit;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire \Using_FPGA_Keep.MUXCY_I ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lru_dirty_bit;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lru_dirty_bit),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_IN}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA_Keep.MUXCY_I }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_360
   (Carry_Out,
    \Using_FPGA.MUXCY_I_0 ,
    Carry_In,
    lopt,
    lopt_1);
  output Carry_Out;
  input \Using_FPGA.MUXCY_I_0 ;
  input Carry_In;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_In;
  wire Carry_Out;
  wire \Using_FPGA.MUXCY_I_0 ;

  assign Carry_Out = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_361
   (carry_1,
    \The_Compare[0].sel_reg ,
    Carry_Out,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg ;
  input Carry_Out;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_Out;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_362
   (WEA,
    A,
    carry_1,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    lu_check_wait_for_update);
  output [3:0]WEA;
  input A;
  input carry_1;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input lu_check_wait_for_update;

  wire A;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire [3:0]WEA;
  wire carry_1;
  wire lookup_write_hit_valid;
  wire lu_check_wait_for_update;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_55 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [1]),
        .I3(lookup_write_hit_valid),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .I5(lu_check_wait_for_update),
        .O(WEA[1]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_56 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [0]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [0]),
        .I3(lookup_write_hit_valid),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .I5(lu_check_wait_for_update),
        .O(WEA[0]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_33 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [3]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [3]),
        .I3(lookup_write_hit_valid),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .I5(lu_check_wait_for_update),
        .O(WEA[3]));
  LUT6 #(
    .INIT(64'h00000000E2000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_34 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [2]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [2]),
        .I3(lookup_write_hit_valid),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .I5(lu_check_wait_for_update),
        .O(WEA[2]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:1],lookup_write_hit_valid}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:1],A}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_374
   (carry_1,
    lookup_io_stall_valid,
    \lu_check_info_reg[Wr]__0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input lookup_io_stall_valid;
  input \lu_check_info_reg[Wr]__0 ;
  input [2:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__195_n_0 ;
  wire carry_1;
  wire lookup_io_stall_valid;
  wire \lu_check_info_reg[Wr]__0 ;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__195_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hAAAB)) 
    \Using_FPGA.MUXCY_I_i_1__195 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(Q[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__195_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_375
   (lookup_io_data_stall,
    carry_1,
    \lu_check_info_reg[Wr]__0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_data_stall;
  input carry_1;
  input \lu_check_info_reg[Wr]__0 ;
  input [0:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [0:0]Q;
  wire carry_1;
  wire lookup_io_data_stall;
  wire \lu_check_info_reg[Wr]__0 ;

  assign lookup_io_data_stall = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__38 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(Q),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_378
   (carry_1,
    D,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input [2:0]D;
  input [2:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [2:0]D;
  wire [2:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__103 
       (.I0(D[1]),
        .I1(Q[1]),
        .I2(D[0]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(D[2]),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_379
   (carry_2,
    carry_1,
    D,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  input carry_1;
  input [2:0]D;
  input [2:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [2:0]D;
  wire [2:0]Q;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__104 
       (.I0(D[1]),
        .I1(Q[1]),
        .I2(D[0]),
        .I3(Q[0]),
        .I4(Q[2]),
        .I5(D[2]),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_380
   (lu_check_match_addr,
    \Using_FPGA.MUXCY_I_0 ,
    carry_2,
    lopt,
    lopt_1);
  output lu_check_match_addr;
  input \Using_FPGA.MUXCY_I_0 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_2;
  wire lu_check_match_addr;

  assign lopt_1 = \<const0> ;
  assign lu_check_match_addr = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_383
   (carry_1,
    \The_Compare[0].sel_reg_20 ,
    lu_mem_valid_carry_3,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_20 ;
  input lu_mem_valid_carry_3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_20 ;
  wire carry_1;
  wire lu_mem_valid_carry_3;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_384
   (carry_2,
    A_21,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_21;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_21;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_385
   (carry_3,
    \The_Compare[2].sel_reg_22 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_22 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_22 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_386
   (lu_mem_pre_pure_valid_tag_3,
    carry_3,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lookup_tag_current_word_i,
    \Using_FPGA.MUXCY_I_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_pre_pure_valid_tag_3;
  input carry_3;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input [1:0]lookup_tag_current_word_i;
  input \Using_FPGA.MUXCY_I_2 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \The_Compare[3].sel_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire carry_3;
  wire [1:0]lookup_tag_current_word_i;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_pre_pure_valid_tag_3;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_pre_pure_valid_tag_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
  LUT6 #(
    .INIT(64'hB84700000000B847)) 
    \Using_FPGA.MUXCY_I_i_1__118 
       (.I0(Q),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(lookup_tag_current_word_i[1]),
        .I4(\Using_FPGA.MUXCY_I_2 ),
        .I5(lookup_tag_current_word_i[0]),
        .O(\The_Compare[3].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_387
   (carry_1,
    \The_Compare[0].sel_reg_17 ,
    lu_mem_valid_carry_2,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_17 ;
  input lu_mem_valid_carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_17 ;
  wire carry_1;
  wire lu_mem_valid_carry_2;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_388
   (carry_2,
    A_18,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_18;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_18;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_389
   (carry_3,
    \The_Compare[2].sel_reg_19 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_19 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_19 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_390
   (lu_mem_pre_pure_valid_tag_2,
    carry_3,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_pre_pure_valid_tag_2;
  input carry_3;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input [1:0]\Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \The_Compare[3].sel_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire [1:0]\Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_pre_pure_valid_tag_2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_pre_pure_valid_tag_2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
  LUT6 #(
    .INIT(64'hB84700000000B847)) 
    \Using_FPGA.MUXCY_I_i_1__119 
       (.I0(Q),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(\Using_FPGA.MUXCY_I_2 [1]),
        .I4(\Using_FPGA.MUXCY_I_3 ),
        .I5(\Using_FPGA.MUXCY_I_2 [0]),
        .O(\The_Compare[3].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_391
   (carry_1,
    \The_Compare[0].sel_reg_14 ,
    lu_mem_valid_carry_1,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_14 ;
  input lu_mem_valid_carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_14 ;
  wire carry_1;
  wire lu_mem_valid_carry_1;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_392
   (carry_2,
    A_15,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_15;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_15;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_393
   (carry_3,
    \The_Compare[2].sel_reg_16 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_16 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_16 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_394
   (lu_mem_pre_pure_valid_tag_1,
    carry_3,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_pre_pure_valid_tag_1;
  input carry_3;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input [1:0]\Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \The_Compare[3].sel_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire [1:0]\Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_pre_pure_valid_tag_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_pre_pure_valid_tag_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
  LUT6 #(
    .INIT(64'hB84700000000B847)) 
    \Using_FPGA.MUXCY_I_i_1__120 
       (.I0(Q),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(\Using_FPGA.MUXCY_I_2 [1]),
        .I4(\Using_FPGA.MUXCY_I_3 ),
        .I5(\Using_FPGA.MUXCY_I_2 [0]),
        .O(\The_Compare[3].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_395
   (carry_1,
    \lu_check_info_reg[Addr][13] ,
    \lu_check_info_reg[Addr][14] ,
    \lu_check_info_reg[Addr][15] ,
    \The_Compare[0].sel_reg_12 ,
    lu_mem_valid_carry_0,
    Q,
    \Using_FPGA.MUXCY_I_i_1__109 ,
    lu_mem_force_way,
    \Using_FPGA.MUXCY_I_i_1__109_0 ,
    lopt,
    lopt_1);
  output carry_1;
  output \lu_check_info_reg[Addr][13] ;
  output \lu_check_info_reg[Addr][14] ;
  output \lu_check_info_reg[Addr][15] ;
  input \The_Compare[0].sel_reg_12 ;
  input lu_mem_valid_carry_0;
  input [2:0]Q;
  input \Using_FPGA.MUXCY_I_i_1__109 ;
  input [1:0]lu_mem_force_way;
  input [0:0]\Using_FPGA.MUXCY_I_i_1__109_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire [2:0]Q;
  wire \The_Compare[0].sel_reg_12 ;
  wire \Using_FPGA.MUXCY_I_i_1__109 ;
  wire [0:0]\Using_FPGA.MUXCY_I_i_1__109_0 ;
  wire carry_1;
  wire \lu_check_info_reg[Addr][13] ;
  wire \lu_check_info_reg[Addr][14] ;
  wire \lu_check_info_reg[Addr][15] ;
  wire [1:0]lu_mem_force_way;
  wire lu_mem_valid_carry_0;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_2__10 
       (.I0(Q[1]),
        .I1(\Using_FPGA.MUXCY_I_i_1__109 ),
        .I2(lu_mem_force_way[1]),
        .O(\lu_check_info_reg[Addr][14] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__5 
       (.I0(Q[2]),
        .I1(\Using_FPGA.MUXCY_I_i_1__109 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__109_0 ),
        .O(\lu_check_info_reg[Addr][15] ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_4__1 
       (.I0(Q[0]),
        .I1(\Using_FPGA.MUXCY_I_i_1__109 ),
        .I2(lu_mem_force_way[0]),
        .O(\lu_check_info_reg[Addr][13] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_396
   (carry_2,
    \lu_check_info_reg[Addr][16] ,
    \lu_check_info_reg[Addr][17] ,
    \lu_check_info_reg[Addr][18] ,
    A_13,
    carry_1,
    Q,
    \Using_FPGA.MUXCY_I_i_1__113 ,
    \Using_FPGA.MUXCY_I_i_1__113_0 ,
    lopt,
    lopt_1);
  output carry_2;
  output \lu_check_info_reg[Addr][16] ;
  output \lu_check_info_reg[Addr][17] ;
  output \lu_check_info_reg[Addr][18] ;
  input A_13;
  input carry_1;
  input [2:0]Q;
  input \Using_FPGA.MUXCY_I_i_1__113 ;
  input [2:0]\Using_FPGA.MUXCY_I_i_1__113_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_13;
  wire [2:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__113 ;
  wire [2:0]\Using_FPGA.MUXCY_I_i_1__113_0 ;
  wire carry_1;
  wire carry_2;
  wire \lu_check_info_reg[Addr][16] ;
  wire \lu_check_info_reg[Addr][17] ;
  wire \lu_check_info_reg[Addr][18] ;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_2__11 
       (.I0(Q[1]),
        .I1(\Using_FPGA.MUXCY_I_i_1__113 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__113_0 [1]),
        .O(\lu_check_info_reg[Addr][17] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__6 
       (.I0(Q[2]),
        .I1(\Using_FPGA.MUXCY_I_i_1__113 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__113_0 [2]),
        .O(\lu_check_info_reg[Addr][18] ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_4__2 
       (.I0(Q[0]),
        .I1(\Using_FPGA.MUXCY_I_i_1__113 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__113_0 [0]),
        .O(\lu_check_info_reg[Addr][16] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_397
   (carry_3,
    \lu_check_info_reg[Addr][19] ,
    \lu_check_info_reg[Addr][20] ,
    \lu_check_info_reg[Addr][21] ,
    \The_Compare[2].sel_reg ,
    carry_2,
    Q,
    \Using_FPGA.MUXCY_I_i_1__117 ,
    \Using_FPGA.MUXCY_I_i_1__117_0 ,
    lopt,
    lopt_1);
  output carry_3;
  output \lu_check_info_reg[Addr][19] ;
  output \lu_check_info_reg[Addr][20] ;
  output \lu_check_info_reg[Addr][21] ;
  input \The_Compare[2].sel_reg ;
  input carry_2;
  input [2:0]Q;
  input \Using_FPGA.MUXCY_I_i_1__117 ;
  input [2:0]\Using_FPGA.MUXCY_I_i_1__117_0 ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire [2:0]Q;
  wire \The_Compare[2].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_1__117 ;
  wire [2:0]\Using_FPGA.MUXCY_I_i_1__117_0 ;
  wire carry_2;
  wire carry_3;
  wire \lu_check_info_reg[Addr][19] ;
  wire \lu_check_info_reg[Addr][20] ;
  wire \lu_check_info_reg[Addr][21] ;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_2__12 
       (.I0(Q[1]),
        .I1(\Using_FPGA.MUXCY_I_i_1__117 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__117_0 [1]),
        .O(\lu_check_info_reg[Addr][20] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__7 
       (.I0(Q[2]),
        .I1(\Using_FPGA.MUXCY_I_i_1__117 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__117_0 [2]),
        .O(\lu_check_info_reg[Addr][21] ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_4__3 
       (.I0(Q[0]),
        .I1(\Using_FPGA.MUXCY_I_i_1__117 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__117_0 [0]),
        .O(\lu_check_info_reg[Addr][19] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_398
   (lu_mem_pre_pure_valid_tag_0,
    \lu_check_info_reg[Addr][22] ,
    carry_3,
    Q,
    \Using_FPGA.MUXCY_I_i_1__120 ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_pre_pure_valid_tag_0;
  output \lu_check_info_reg[Addr][22] ;
  input carry_3;
  input [1:0]Q;
  input \Using_FPGA.MUXCY_I_i_1__120 ;
  input [1:0]\Using_FPGA.MUXCY_I_0 ;
  input [1:0]\Using_FPGA.MUXCY_I_1 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [1:0]Q;
  wire \The_Compare[3].sel_reg ;
  wire [1:0]\Using_FPGA.MUXCY_I_0 ;
  wire [1:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__120 ;
  wire carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Addr][22] ;
  wire lu_mem_pre_pure_valid_tag_0;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_pre_pure_valid_tag_0}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
  LUT6 #(
    .INIT(64'hB84700000000B847)) 
    \Using_FPGA.MUXCY_I_i_1__121 
       (.I0(Q[1]),
        .I1(\Using_FPGA.MUXCY_I_i_1__120 ),
        .I2(\Using_FPGA.MUXCY_I_0 [1]),
        .I3(\Using_FPGA.MUXCY_I_1 [1]),
        .I4(\lu_check_info_reg[Addr][22] ),
        .I5(\Using_FPGA.MUXCY_I_1 [0]),
        .O(\The_Compare[3].sel_reg ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_2__13 
       (.I0(Q[0]),
        .I1(\Using_FPGA.MUXCY_I_i_1__120 ),
        .I2(\Using_FPGA.MUXCY_I_0 [0]),
        .O(\lu_check_info_reg[Addr][22] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_406
   (\read_req_ordered_info[0][Valid] ,
    A,
    no_write_blocking_read,
    lopt,
    lopt_1);
  output \read_req_ordered_info[0][Valid] ;
  input A;
  input no_write_blocking_read;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A;
  wire no_write_blocking_read;
  wire \read_req_ordered_info[0][Valid] ;

  assign lopt_1 = \<const0> ;
  assign \read_req_ordered_info[0][Valid]  = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_407
   (ar_pop_i,
    \Order_Optimization_4.buffer_addr_reg[0] ,
    \read_req_ordered_info[0][Valid] ,
    lopt,
    lopt_1);
  output ar_pop_i;
  input \Order_Optimization_4.buffer_addr_reg[0] ;
  input \read_req_ordered_info[0][Valid] ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Order_Optimization_4.buffer_addr_reg[0] ;
  wire ar_pop_i;
  wire \read_req_ordered_info[0][Valid] ;

  assign ar_pop_i = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_42
   (port_ready_with_valid,
    \Using_FPGA.MUXCY_I_0 ,
    port_ready,
    lopt,
    lopt_1);
  output port_ready_with_valid;
  input \Using_FPGA.MUXCY_I_0 ;
  input port_ready;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire port_ready;
  wire port_ready_with_valid;

  assign lopt_1 = \<const0> ;
  assign port_ready_with_valid = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_43
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \S_AXI_ACACHE_q_reg[2] ,
    \S_AXI_ACACHE_q_reg[1] ,
    A,
    port_want_new_access,
    req_last,
    O,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    S0_AXI_GEN_AWVALID,
    first_part,
    p_0_in,
    \wr_port_access[1][Addr] ,
    Q,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \wr_port_access[1][Size] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \wr_port_access[1][Modifiable] ,
    lopt,
    lopt_1);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  output \S_AXI_ACACHE_q_reg[2] ;
  output \S_AXI_ACACHE_q_reg[1] ;
  input A;
  input port_want_new_access;
  input req_last;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input S0_AXI_GEN_AWVALID;
  input first_part;
  input [0:0]p_0_in;
  input [11:0]\wr_port_access[1][Addr] ;
  input [10:0]Q;
  input [1:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\wr_port_access[1][Size] ;
  input [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input \wr_port_access[1][Modifiable] ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A;
  wire O;
  wire [10:0]Q;
  wire S0_AXI_GEN_AWVALID;
  wire \S_AXI_ACACHE_q_reg[1] ;
  wire \S_AXI_ACACHE_q_reg[2] ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire first_part;
  wire [0:0]p_0_in;
  wire port_want_new_access;
  wire req_last;
  wire [11:0]\wr_port_access[1][Addr] ;
  wire \wr_port_access[1][Modifiable] ;
  wire [1:0]\wr_port_access[1][Size] ;

  assign \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h7FFF7F00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__11 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(req_last),
        .I2(O),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I4(S0_AXI_GEN_AWVALID),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__13 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 [1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\S_AXI_ACACHE_q_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__14 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Modifiable] ),
        .O(\S_AXI_ACACHE_q_reg[1] ));
  LUT5 #(
    .INIT(32'h70FF7000)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(O),
        .I2(first_part),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I4(S0_AXI_GEN_AWVALID),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[12].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(p_0_in),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [0]),
        .O(\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[13].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [1]),
        .O(\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[14].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [2]),
        .O(\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[15].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[2]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [3]),
        .O(\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[16].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [4]),
        .O(\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[17].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[4]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [5]),
        .O(\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[18].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[5]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [6]),
        .O(\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[19].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[6]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [7]),
        .O(\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__3 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Size] [0]),
        .O(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[20].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[7]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [8]),
        .O(\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[21].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[8]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [9]),
        .O(\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[22].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[9]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [10]),
        .O(\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(Q[10]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [11]),
        .O(\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1__3 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Size] [1]),
        .O(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_52
   (carry_1,
    p_0_in,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    DI,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input [0:0]p_0_in;
  input [2:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input [0:0]DI;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [0:0]DI;
  wire \The_Compare[0].sel_reg ;
  wire [2:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire [0:0]p_0_in;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\The_Compare[0].sel_reg }));
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_FPGA.MUXCY_I_i_1__170 
       (.I0(p_0_in),
        .I1(\Using_FPGA.MUXCY_I_0 [0]),
        .I2(\Using_FPGA.MUXCY_I_0 [1]),
        .I3(\Using_FPGA.MUXCY_I_1 ),
        .I4(\Using_FPGA.MUXCY_I_0 [2]),
        .I5(DI),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_53
   (\S_AXI_AADDR_q_reg[3] ,
    req_last,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    carry_1,
    port_access_kind,
    access_is_wrap,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    first_part,
    use_full_length,
    DI,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    write_req_last,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output \S_AXI_AADDR_q_reg[3] ;
  output req_last;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input carry_1;
  input port_access_kind;
  input access_is_wrap;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input first_part;
  input use_full_length;
  input [0:0]DI;
  input [2:0]\Using_FPGA.MUXCY_I_0 ;
  input [1:0]\Using_FPGA.MUXCY_I_1 ;
  input write_req_last;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [0:0]DI;
  wire \S_AXI_AADDR_q_reg[3] ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [2:0]\Using_FPGA.MUXCY_I_0 ;
  wire [1:0]\Using_FPGA.MUXCY_I_1 ;
  wire access_is_wrap;
  wire carry_1;
  wire first_part;
  wire port_access_kind;
  wire req_last;
  wire use_full_length;
  wire write_req_last;

  assign \S_AXI_AADDR_q_reg[3]  = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__31 
       (.I0(req_last),
        .I1(write_req_last),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'h00EF000000EFFFFF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__8 
       (.I0(\S_AXI_AADDR_q_reg[3] ),
        .I1(port_access_kind),
        .I2(access_is_wrap),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(first_part),
        .I5(use_full_length),
        .O(req_last));
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_FPGA.MUXCY_I_i_1__171 
       (.I0(DI),
        .I1(\Using_FPGA.MUXCY_I_0 [0]),
        .I2(\Using_FPGA.MUXCY_I_0 [1]),
        .I3(\Using_FPGA.MUXCY_I_1 [0]),
        .I4(\Using_FPGA.MUXCY_I_0 [2]),
        .I5(\Using_FPGA.MUXCY_I_1 [1]),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_68
   (port_ready_with_valid,
    \Using_FPGA.MUXCY_I_0 ,
    rd_port_ready,
    lopt,
    lopt_1);
  output port_ready_with_valid;
  input \Using_FPGA.MUXCY_I_0 ;
  input rd_port_ready;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire port_ready_with_valid;
  wire rd_port_ready;

  assign lopt_1 = \<const0> ;
  assign port_ready_with_valid = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_69
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \S_AXI_ACACHE_q_reg[2] ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ,
    A,
    port_want_new_access,
    req_last,
    O,
    S_AXI_AVALID_q,
    S0_AXI_GEN_ARVALID,
    first_part,
    p_0_in,
    \rd_port_access[1][Addr] ,
    Q,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \port_access_q[Size] ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    S_AXI_ACACHE_q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    access_stp_bits,
    in,
    lopt,
    lopt_1);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  output \S_AXI_ACACHE_q_reg[2] ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ;
  input A;
  input port_want_new_access;
  input req_last;
  input O;
  input S_AXI_AVALID_q;
  input S0_AXI_GEN_ARVALID;
  input first_part;
  input [0:0]p_0_in;
  input [11:0]\rd_port_access[1][Addr] ;
  input [10:0]Q;
  input [1:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input [0:0]\port_access_q[Size] ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [0:0]S_AXI_ACACHE_q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input [0:0]access_stp_bits;
  input [0:0]in;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A;
  wire O;
  wire [10:0]Q;
  wire S0_AXI_GEN_ARVALID;
  wire [0:0]S_AXI_ACACHE_q;
  wire \S_AXI_ACACHE_q_reg[2] ;
  wire S_AXI_AVALID_q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ;
  wire \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [0:0]access_stp_bits;
  wire first_part;
  wire [0:0]in;
  wire [0:0]p_0_in;
  wire [0:0]\port_access_q[Size] ;
  wire port_want_new_access;
  wire [11:0]\rd_port_access[1][Addr] ;
  wire req_last;

  assign \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h7FFF7F00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__16 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(req_last),
        .I2(O),
        .I3(S_AXI_AVALID_q),
        .I4(S0_AXI_GEN_ARVALID),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__19 
       (.I0(S_AXI_ACACHE_q),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\S_AXI_ACACHE_q_reg[2] ));
  LUT5 #(
    .INIT(32'h70FF7000)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_1__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(O),
        .I2(first_part),
        .I3(S_AXI_AVALID_q),
        .I4(S0_AXI_GEN_ARVALID),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[12].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(p_0_in),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [0]),
        .O(\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[13].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [1]),
        .O(\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[14].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [2]),
        .O(\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[15].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[2]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [3]),
        .O(\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[16].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [4]),
        .O(\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[17].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[4]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [5]),
        .O(\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[18].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[5]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [6]),
        .O(\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[19].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[6]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [7]),
        .O(\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__6 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\port_access_q[Size] ),
        .O(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__7 
       (.I0(access_stp_bits),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(in),
        .O(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[20].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[7]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [8]),
        .O(\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[21].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[8]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [9]),
        .O(\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[22].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[9]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [10]),
        .O(\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(Q[10]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [11]),
        .O(\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1__5 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_78
   (carry_1,
    p_0_in,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    DI,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input [0:0]p_0_in;
  input [2:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input [0:0]DI;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [0:0]DI;
  wire \The_Compare[0].sel_reg ;
  wire [2:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire [0:0]p_0_in;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\The_Compare[0].sel_reg }));
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_FPGA.MUXCY_I_i_1__173 
       (.I0(p_0_in),
        .I1(\Using_FPGA.MUXCY_I_0 [0]),
        .I2(\Using_FPGA.MUXCY_I_0 [1]),
        .I3(\Using_FPGA.MUXCY_I_1 ),
        .I4(\Using_FPGA.MUXCY_I_0 [2]),
        .I5(DI),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_79
   (\S_AXI_AADDR_q_reg[3] ,
    req_last,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    carry_1,
    port_access_kind,
    access_is_wrap,
    Carry_IN,
    first_part,
    use_full_length,
    full_line_beats,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \Using_FPGA.MUXCY_I_0 ,
    p_0_in,
    DI,
    \Using_FPGA.MUXCY_I_1 ,
    read_req_last,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output \S_AXI_AADDR_q_reg[3] ;
  output req_last;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input carry_1;
  input port_access_kind;
  input access_is_wrap;
  input Carry_IN;
  input first_part;
  input use_full_length;
  input [1:0]full_line_beats;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [4:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]p_0_in;
  input [0:0]DI;
  input [1:0]\Using_FPGA.MUXCY_I_1 ;
  input read_req_last;
  input [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire Carry_IN;
  wire [0:0]DI;
  wire \S_AXI_AADDR_q_reg[3] ;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__10_n_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2__1_n_0 ;
  wire [4:0]\Using_FPGA.MUXCY_I_0 ;
  wire [1:0]\Using_FPGA.MUXCY_I_1 ;
  wire access_is_wrap;
  wire carry_1;
  wire first_part;
  wire [1:0]full_line_beats;
  wire [0:0]p_0_in;
  wire port_access_kind;
  wire read_req_last;
  wire req_last;
  wire use_full_length;

  assign \S_AXI_AADDR_q_reg[3]  = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hB8B8FF00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__18 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__10_n_0 ),
        .I1(first_part),
        .I2(full_line_beats[1]),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__32 
       (.I0(req_last),
        .I1(read_req_last),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'hA8000000ABFF0000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__10 
       (.I0(\Using_FPGA.MUXCY_I_0 [0]),
        .I1(\S_AXI_AADDR_q_reg[3] ),
        .I2(port_access_kind),
        .I3(access_is_wrap),
        .I4(full_line_beats[1]),
        .I5(p_0_in),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__10_n_0 ));
  LUT6 #(
    .INIT(64'h00EF000000EFFFFF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__9 
       (.I0(\S_AXI_AADDR_q_reg[3] ),
        .I1(port_access_kind),
        .I2(access_is_wrap),
        .I3(Carry_IN),
        .I4(first_part),
        .I5(use_full_length),
        .O(req_last));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__4 
       (.I0(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2__1_n_0 ),
        .I1(first_part),
        .I2(full_line_beats[0]),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .O(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hE000FF1F00000000)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2__1 
       (.I0(\S_AXI_AADDR_q_reg[3] ),
        .I1(port_access_kind),
        .I2(access_is_wrap),
        .I3(\Using_FPGA.MUXCY_I_0 [1]),
        .I4(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I5(full_line_beats[0]),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_FPGA.MUXCY_I_i_1__174 
       (.I0(DI),
        .I1(\Using_FPGA.MUXCY_I_0 [2]),
        .I2(\Using_FPGA.MUXCY_I_0 [3]),
        .I3(\Using_FPGA.MUXCY_I_1 [0]),
        .I4(\Using_FPGA.MUXCY_I_0 [4]),
        .I5(\Using_FPGA.MUXCY_I_1 [1]),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_8
   (w_fail_ready,
    wip_exist,
    wip_failed,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output w_fail_ready;
  input wip_exist;
  input wip_failed;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire w_fail_ready;
  wire wip_exist;
  wire wip_failed;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,w_fail_ready}),
        .CYINIT(wip_failed),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({wip_exist,\^lopt_6 ,\^lopt_3 ,wip_exist}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_86
   (arbiter_piperun_and_valid,
    reduce_or7_out,
    access_piperun,
    lopt,
    lopt_1);
  output arbiter_piperun_and_valid;
  input reduce_or7_out;
  input access_piperun;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire access_piperun;
  wire arbiter_piperun_and_valid;
  wire reduce_or7_out;

  assign arbiter_piperun_and_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_88
   (port_ready_0,
    \arb_access_i_reg[Valid] ,
    port_ready_no_init_0,
    lopt,
    lopt_1,
    lopt_2);
  output port_ready_0;
  input \arb_access_i_reg[Valid] ;
  input port_ready_no_init_0;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \arb_access_i_reg[Valid] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire port_ready_0;
  wire port_ready_no_init_0;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(port_ready_no_init_0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,port_ready_0}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\arb_access_i_reg[Valid] }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_9
   (w_pop,
    \wr_port_data_info_reg[0][Last] ,
    wip_exist,
    w_pop_part,
    \wr_port_data_info_reg[0][Last]_0 ,
    \wr_port_data_info_reg[0][Last]_1 ,
    \The_Compare[3].sel_reg ,
    \The_Compare[2].sel_reg ,
    Q,
    lopt,
    lopt_1);
  output w_pop;
  output \wr_port_data_info_reg[0][Last] ;
  input wip_exist;
  input w_pop_part;
  input \wr_port_data_info_reg[0][Last]_0 ;
  input \wr_port_data_info_reg[0][Last]_1 ;
  input \The_Compare[3].sel_reg ;
  input \The_Compare[2].sel_reg ;
  input Q;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Q;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[3].sel_reg ;
  wire w_pop;
  wire w_pop_part;
  wire wip_exist;
  wire \wr_port_data_info_reg[0][Last] ;
  wire \wr_port_data_info_reg[0][Last]_0 ;
  wire \wr_port_data_info_reg[0][Last]_1 ;

  assign lopt_1 = \<const0> ;
  assign w_pop = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFFFF2E222222)) 
    \wr_port_data_info[0][Last]_i_1 
       (.I0(\wr_port_data_info_reg[0][Last]_0 ),
        .I1(w_pop),
        .I2(\wr_port_data_info_reg[0][Last]_1 ),
        .I3(\The_Compare[3].sel_reg ),
        .I4(\The_Compare[2].sel_reg ),
        .I5(Q),
        .O(\wr_port_data_info_reg[0][Last] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_91
   (port_ready_no_init_0,
    port_allow_ready_0,
    \Using_FPGA.MUXCY_I_0 ,
    any_port_forbid_0,
    S0_AXI_ARVALID,
    read_req_ready,
    queue_full,
    S0_AXI_AWVALID,
    \rd_port_access[0][Valid] ,
    rd_port_multi_part_0,
    \Using_FPGA.MUXCY_I_i_1__150_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output port_ready_no_init_0;
  input port_allow_ready_0;
  input \Using_FPGA.MUXCY_I_0 ;
  input any_port_forbid_0;
  input S0_AXI_ARVALID;
  input read_req_ready;
  input queue_full;
  input S0_AXI_AWVALID;
  input \rd_port_access[0][Valid] ;
  input rd_port_multi_part_0;
  input \Using_FPGA.MUXCY_I_i_1__150_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A18_out;
  wire \Gen_Port_Ready[0].wr_port_exist_reg ;
  wire S0_AXI_ARVALID;
  wire S0_AXI_AWVALID;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__150_0 ;
  wire any_port_forbid_0;
  wire port_allow_ready_0;
  wire port_ready_no_init_0;
  wire queue_full;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_multi_part_0;
  wire read_req_ready;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A18_out;
  assign port_ready_no_init_0 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hABAAAAAA)) 
    \Using_FPGA.MUXCY_I_i_1__150 
       (.I0(\Gen_Port_Ready[0].wr_port_exist_reg ),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(any_port_forbid_0),
        .I3(S0_AXI_ARVALID),
        .I4(read_req_ready),
        .O(A18_out));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \Using_FPGA.MUXCY_I_i_2__15 
       (.I0(queue_full),
        .I1(S0_AXI_AWVALID),
        .I2(\rd_port_access[0][Valid] ),
        .I3(rd_port_multi_part_0),
        .I4(any_port_forbid_0),
        .I5(\Using_FPGA.MUXCY_I_i_1__150_0 ),
        .O(\Gen_Port_Ready[0].wr_port_exist_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_93
   (wr_port_ready_cmb_0,
    \arbiter_bp_push_i[0][Valid] ,
    port_ready_0,
    access_piperun,
    queue_full,
    S0_AXI_AWVALID,
    \rd_port_access[0][Valid] ,
    rd_port_multi_part_0,
    any_port_forbid_0,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output wr_port_ready_cmb_0;
  output \arbiter_bp_push_i[0][Valid] ;
  input port_ready_0;
  input access_piperun;
  input queue_full;
  input S0_AXI_AWVALID;
  input \rd_port_access[0][Valid] ;
  input rd_port_multi_part_0;
  input any_port_forbid_0;
  input \Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S0_AXI_AWVALID;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__185_n_0 ;
  wire access_piperun;
  wire any_port_forbid_0;
  wire \arbiter_bp_push_i[0][Valid] ;
  wire port_ready_0;
  wire queue_full;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_multi_part_0;
  wire wr_port_ready_cmb_0;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__185_n_0 ;
  assign wr_port_ready_cmb_0 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_i_1 
       (.I0(wr_port_ready_cmb_0),
        .I1(access_piperun),
        .O(\arbiter_bp_push_i[0][Valid] ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \Using_FPGA.MUXCY_I_i_1__185 
       (.I0(queue_full),
        .I1(S0_AXI_AWVALID),
        .I2(\rd_port_access[0][Valid] ),
        .I3(rd_port_multi_part_0),
        .I4(any_port_forbid_0),
        .I5(\Using_FPGA.MUXCY_I_0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__185_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_96
   (ctrl_init_done_i_reg,
    D,
    \The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    reduce_or7_out,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    rd_port_multi_part_cmb,
    dvm_2nd_part0,
    dvm_2nd_part_reg,
    port_ready_no_init_1,
    \wr_port_access[1][Bufferable] ,
    \wr_port_access[1][Other_Allocate] ,
    \Gen_Port_Ready[0].wr_port_early_reg ,
    reduce_or4_out,
    \arb_access_i_reg[Allocate] ,
    \arb_access_i_reg[Len][5] ,
    S0_AXI_AWLEN,
    \arb_access_i_reg[Len][0] ,
    \arb_access_i_reg[Len][1] ,
    \arb_access_i_reg[Len][2] ,
    \arb_access_i_reg[Len][3] ,
    \arb_access_i_reg[Len][4] ,
    \arb_access_i_reg[Len][5]_0 ,
    \wr_port_access[1][Addr] ,
    S0_AXI_AWADDR,
    \arb_access_i_reg[Allocate]_0 ,
    wr_port_ready_cmb_0,
    \rd_port_access[1][Addr] ,
    S0_AXI_ARADDR,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst ,
    dvm_2nd_part_reg_0,
    \ctrl_access[Addr] ,
    \arb_access_i_reg[Addr][23] ,
    \arb_access_i_reg[Addr][22] ,
    \arb_access_i_reg[Addr][19] ,
    \arb_access_i_reg[Addr][20] ,
    \arb_access_i_reg[Addr][21] ,
    \arb_access_i_reg[Addr][16] ,
    \arb_access_i_reg[Addr][17] ,
    \arb_access_i_reg[Addr][18] ,
    \arb_access_i_reg[Addr][15] ,
    \arb_access_i_reg[Addr][5] ,
    \arb_access_i_reg[Addr][4] ,
    \arb_access_i_reg[Addr][3] ,
    \arb_access_i_reg[Addr][2] ,
    \arb_access_i_reg[Addr][1] ,
    \arb_access_i_reg[Addr][0] ,
    \wr_port_access[1][Size] ,
    S0_AXI_AWSIZE,
    \arb_access_i_reg[Size][1] ,
    \arb_access_i_reg[Size][2] ,
    \arb_access_i_reg[Size][0] ,
    \wr_port_access[1][Kind] ,
    S0_AXI_AWBURST,
    \rd_port_access[1][Kind] ,
    S0_AXI_ARBURST,
    \ctrl_access[Internal_Cmd] ,
    port_ready_0,
    access_piperun,
    Q,
    \access_info[0][Early] ,
    \rd_port_access[1][Allocate] ,
    S0_AXI_ARCACHE,
    arb_want_multi_part__3,
    lopt,
    lopt_1);
  output ctrl_init_done_i_reg;
  output [5:0]D;
  output [23:0]\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst ;
  output [2:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output reduce_or7_out;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output [0:0]rd_port_multi_part_cmb;
  output dvm_2nd_part0;
  input dvm_2nd_part_reg;
  input port_ready_no_init_1;
  input \wr_port_access[1][Bufferable] ;
  input \wr_port_access[1][Other_Allocate] ;
  input \Gen_Port_Ready[0].wr_port_early_reg ;
  input reduce_or4_out;
  input \arb_access_i_reg[Allocate] ;
  input [5:0]\arb_access_i_reg[Len][5] ;
  input [5:0]S0_AXI_AWLEN;
  input \arb_access_i_reg[Len][0] ;
  input \arb_access_i_reg[Len][1] ;
  input \arb_access_i_reg[Len][2] ;
  input \arb_access_i_reg[Len][3] ;
  input \arb_access_i_reg[Len][4] ;
  input \arb_access_i_reg[Len][5]_0 ;
  input [23:0]\wr_port_access[1][Addr] ;
  input [23:0]S0_AXI_AWADDR;
  input \arb_access_i_reg[Allocate]_0 ;
  input wr_port_ready_cmb_0;
  input [8:0]\rd_port_access[1][Addr] ;
  input [8:0]S0_AXI_ARADDR;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  input dvm_2nd_part_reg_0;
  input [8:0]\ctrl_access[Addr] ;
  input \arb_access_i_reg[Addr][23] ;
  input \arb_access_i_reg[Addr][22] ;
  input \arb_access_i_reg[Addr][19] ;
  input \arb_access_i_reg[Addr][20] ;
  input \arb_access_i_reg[Addr][21] ;
  input \arb_access_i_reg[Addr][16] ;
  input \arb_access_i_reg[Addr][17] ;
  input \arb_access_i_reg[Addr][18] ;
  input \arb_access_i_reg[Addr][15] ;
  input \arb_access_i_reg[Addr][5] ;
  input \arb_access_i_reg[Addr][4] ;
  input \arb_access_i_reg[Addr][3] ;
  input \arb_access_i_reg[Addr][2] ;
  input \arb_access_i_reg[Addr][1] ;
  input \arb_access_i_reg[Addr][0] ;
  input [2:0]\wr_port_access[1][Size] ;
  input [2:0]S0_AXI_AWSIZE;
  input \arb_access_i_reg[Size][1] ;
  input \arb_access_i_reg[Size][2] ;
  input \arb_access_i_reg[Size][0] ;
  input \wr_port_access[1][Kind] ;
  input [1:0]S0_AXI_AWBURST;
  input \rd_port_access[1][Kind] ;
  input [1:0]S0_AXI_ARBURST;
  input \ctrl_access[Internal_Cmd] ;
  input port_ready_0;
  input access_piperun;
  input Q;
  input \access_info[0][Early] ;
  input \rd_port_access[1][Allocate] ;
  input [0:0]S0_AXI_ARCACHE;
  input [0:0]arb_want_multi_part__3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire [5:0]D;
  wire \Gen_Port_Ready[0].wr_port_early_reg ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  wire Q;
  wire [8:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [0:0]S0_AXI_ARCACHE;
  wire [23:0]S0_AXI_AWADDR;
  wire [1:0]S0_AXI_AWBURST;
  wire [5:0]S0_AXI_AWLEN;
  wire [2:0]S0_AXI_AWSIZE;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [23:0]\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [2:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \access_info[0][Early] ;
  wire access_piperun;
  wire \arb_access_i[Addr][10]_i_2_n_0 ;
  wire \arb_access_i[Addr][11]_i_2_n_0 ;
  wire \arb_access_i[Addr][12]_i_2_n_0 ;
  wire \arb_access_i[Addr][13]_i_2_n_0 ;
  wire \arb_access_i[Addr][14]_i_2_n_0 ;
  wire \arb_access_i[Addr][6]_i_2_n_0 ;
  wire \arb_access_i[Addr][7]_i_2_n_0 ;
  wire \arb_access_i[Addr][8]_i_2_n_0 ;
  wire \arb_access_i[Addr][9]_i_2_n_0 ;
  wire \arb_access_i[Early]__0 ;
  wire \arb_access_i[Kind]_i_2_n_0 ;
  wire \arb_access_i_reg[Addr][0] ;
  wire \arb_access_i_reg[Addr][15] ;
  wire \arb_access_i_reg[Addr][16] ;
  wire \arb_access_i_reg[Addr][17] ;
  wire \arb_access_i_reg[Addr][18] ;
  wire \arb_access_i_reg[Addr][19] ;
  wire \arb_access_i_reg[Addr][1] ;
  wire \arb_access_i_reg[Addr][20] ;
  wire \arb_access_i_reg[Addr][21] ;
  wire \arb_access_i_reg[Addr][22] ;
  wire \arb_access_i_reg[Addr][23] ;
  wire \arb_access_i_reg[Addr][2] ;
  wire \arb_access_i_reg[Addr][3] ;
  wire \arb_access_i_reg[Addr][4] ;
  wire \arb_access_i_reg[Addr][5] ;
  wire \arb_access_i_reg[Allocate] ;
  wire \arb_access_i_reg[Allocate]_0 ;
  wire \arb_access_i_reg[Len][0] ;
  wire \arb_access_i_reg[Len][1] ;
  wire \arb_access_i_reg[Len][2] ;
  wire \arb_access_i_reg[Len][3] ;
  wire \arb_access_i_reg[Len][4] ;
  wire [5:0]\arb_access_i_reg[Len][5] ;
  wire \arb_access_i_reg[Len][5]_0 ;
  wire \arb_access_i_reg[Size][0] ;
  wire \arb_access_i_reg[Size][1] ;
  wire \arb_access_i_reg[Size][2] ;
  wire [0:0]arb_want_multi_part__3;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire ctrl_init_done_i_reg;
  wire dvm_2nd_part0;
  wire dvm_2nd_part_reg;
  wire dvm_2nd_part_reg_0;
  wire port_ready_0;
  wire port_ready_no_init_1;
  wire [8:0]\rd_port_access[1][Addr] ;
  wire \rd_port_access[1][Allocate] ;
  wire \rd_port_access[1][Kind] ;
  wire [0:0]rd_port_multi_part_cmb;
  wire reduce_or4_out;
  wire reduce_or7_out;
  wire [23:0]\wr_port_access[1][Addr] ;
  wire \wr_port_access[1][Bufferable] ;
  wire \wr_port_access[1][Kind] ;
  wire \wr_port_access[1][Other_Allocate] ;
  wire [2:0]\wr_port_access[1][Size] ;
  wire wr_port_ready_cmb_0;

  assign ctrl_init_done_i_reg = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h2220)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst_i_1 
       (.I0(arb_want_multi_part__3),
        .I1(ctrl_init_done_i_reg),
        .I2(dvm_2nd_part_reg_0),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .O(rd_port_multi_part_cmb));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__164 
       (.I0(ctrl_init_done_i_reg),
        .I1(port_ready_0),
        .O(reduce_or7_out));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][0]_i_1 
       (.I0(\wr_port_access[1][Addr] [0]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[0]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][0] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [0]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][10]_i_1 
       (.I0(\wr_port_access[1][Addr] [10]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[10]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][10]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [10]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][10]_i_2 
       (.I0(\rd_port_access[1][Addr] [4]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[4]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [4]),
        .O(\arb_access_i[Addr][10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][11]_i_1 
       (.I0(\wr_port_access[1][Addr] [11]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[11]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][11]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [11]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][11]_i_2 
       (.I0(\rd_port_access[1][Addr] [5]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[5]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [5]),
        .O(\arb_access_i[Addr][11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][12]_i_1 
       (.I0(\wr_port_access[1][Addr] [12]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[12]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][12]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [12]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][12]_i_2 
       (.I0(\rd_port_access[1][Addr] [6]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[6]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [6]),
        .O(\arb_access_i[Addr][12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][13]_i_1 
       (.I0(\wr_port_access[1][Addr] [13]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[13]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][13]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [13]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][13]_i_2 
       (.I0(\rd_port_access[1][Addr] [7]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[7]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [7]),
        .O(\arb_access_i[Addr][13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][14]_i_1 
       (.I0(\wr_port_access[1][Addr] [14]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[14]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][14]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [14]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][14]_i_2 
       (.I0(\rd_port_access[1][Addr] [8]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[8]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [8]),
        .O(\arb_access_i[Addr][14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][15]_i_1 
       (.I0(\wr_port_access[1][Addr] [15]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[15]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][15] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [15]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][16]_i_1 
       (.I0(\wr_port_access[1][Addr] [16]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[16]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][16] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [16]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][17]_i_1 
       (.I0(\wr_port_access[1][Addr] [17]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[17]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][17] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [17]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][18]_i_1 
       (.I0(\wr_port_access[1][Addr] [18]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[18]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][18] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [18]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][19]_i_1 
       (.I0(\wr_port_access[1][Addr] [19]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[19]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][19] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [19]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][1]_i_1 
       (.I0(\wr_port_access[1][Addr] [1]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[1]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][1] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [1]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][20]_i_1 
       (.I0(\wr_port_access[1][Addr] [20]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[20]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][20] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [20]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][21]_i_1 
       (.I0(\wr_port_access[1][Addr] [21]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[21]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][21] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [21]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][22]_i_1 
       (.I0(\wr_port_access[1][Addr] [22]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[22]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][22] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [22]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][23]_i_1 
       (.I0(\wr_port_access[1][Addr] [23]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[23]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][23] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [23]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][2]_i_1 
       (.I0(\wr_port_access[1][Addr] [2]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[2]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][2] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [2]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][3]_i_1 
       (.I0(\wr_port_access[1][Addr] [3]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[3]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][3] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [3]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][4]_i_1 
       (.I0(\wr_port_access[1][Addr] [4]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[4]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][4] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [4]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][5]_i_1 
       (.I0(\wr_port_access[1][Addr] [5]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[5]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Addr][5] ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [5]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][6]_i_1 
       (.I0(\wr_port_access[1][Addr] [6]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[6]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][6]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [6]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][6]_i_2 
       (.I0(\rd_port_access[1][Addr] [0]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[0]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [0]),
        .O(\arb_access_i[Addr][6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][7]_i_1 
       (.I0(\wr_port_access[1][Addr] [7]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[7]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][7]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [7]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][7]_i_2 
       (.I0(\rd_port_access[1][Addr] [1]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[1]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [1]),
        .O(\arb_access_i[Addr][7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][8]_i_1 
       (.I0(\wr_port_access[1][Addr] [8]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[8]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][8]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [8]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][8]_i_2 
       (.I0(\rd_port_access[1][Addr] [2]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[2]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [2]),
        .O(\arb_access_i[Addr][8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][9]_i_1 
       (.I0(\wr_port_access[1][Addr] [9]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWADDR[9]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i[Addr][9]_i_2_n_0 ),
        .O(\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst [9]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][9]_i_2 
       (.I0(\rd_port_access[1][Addr] [3]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARADDR[3]),
        .I3(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I4(dvm_2nd_part_reg_0),
        .I5(\ctrl_access[Addr] [3]),
        .O(\arb_access_i[Addr][9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000B800)) 
    \arb_access_i[Allocate]_i_1 
       (.I0(\rd_port_access[1][Allocate] ),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARCACHE),
        .I3(\arb_access_i_reg[Allocate] ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Allocate]_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT4 #(
    .INIT(16'h0B08)) 
    \arb_access_i[Early]_i_1 
       (.I0(\arb_access_i[Early]__0 ),
        .I1(access_piperun),
        .I2(Q),
        .I3(\access_info[0][Early] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    \arb_access_i[Early]_i_2 
       (.I0(\wr_port_access[1][Bufferable] ),
        .I1(\wr_port_access[1][Other_Allocate] ),
        .I2(ctrl_init_done_i_reg),
        .I3(\Gen_Port_Ready[0].wr_port_early_reg ),
        .I4(reduce_or4_out),
        .I5(\arb_access_i_reg[Allocate] ),
        .O(\arb_access_i[Early]__0 ));
  LUT6 #(
    .INIT(64'h88B8FFFF88B80000)) 
    \arb_access_i[Kind]_i_1 
       (.I0(\wr_port_access[1][Kind] ),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWBURST[1]),
        .I3(S0_AXI_AWBURST[0]),
        .I4(reduce_or4_out),
        .I5(\arb_access_i[Kind]_i_2_n_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'h88B8FFFF88B80000)) 
    \arb_access_i[Kind]_i_2 
       (.I0(\rd_port_access[1][Kind] ),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_ARBURST[1]),
        .I3(S0_AXI_ARBURST[0]),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\ctrl_access[Internal_Cmd] ),
        .O(\arb_access_i[Kind]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    \arb_access_i[Len][0]_i_1 
       (.I0(\arb_access_i_reg[Len][5] [0]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWLEN[0]),
        .I3(reduce_or4_out),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\arb_access_i_reg[Len][0] ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    \arb_access_i[Len][1]_i_1 
       (.I0(\arb_access_i_reg[Len][5] [1]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWLEN[1]),
        .I3(reduce_or4_out),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\arb_access_i_reg[Len][1] ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    \arb_access_i[Len][2]_i_1 
       (.I0(\arb_access_i_reg[Len][5] [2]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWLEN[2]),
        .I3(reduce_or4_out),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\arb_access_i_reg[Len][2] ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    \arb_access_i[Len][3]_i_1 
       (.I0(\arb_access_i_reg[Len][5] [3]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWLEN[3]),
        .I3(reduce_or4_out),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\arb_access_i_reg[Len][3] ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    \arb_access_i[Len][4]_i_1 
       (.I0(\arb_access_i_reg[Len][5] [4]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWLEN[4]),
        .I3(reduce_or4_out),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\arb_access_i_reg[Len][4] ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'hB8FFB800B800B800)) 
    \arb_access_i[Len][5]_i_1 
       (.I0(\arb_access_i_reg[Len][5] [5]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWLEN[5]),
        .I3(reduce_or4_out),
        .I4(\arb_access_i_reg[Allocate] ),
        .I5(\arb_access_i_reg[Len][5]_0 ),
        .O(D[5]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][0]_i_1 
       (.I0(\wr_port_access[1][Size] [0]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWSIZE[0]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Size][0] ),
        .O(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [0]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][1]_i_1 
       (.I0(\wr_port_access[1][Size] [1]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWSIZE[1]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Size][1] ),
        .O(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [1]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][2]_i_1 
       (.I0(\wr_port_access[1][Size] [2]),
        .I1(ctrl_init_done_i_reg),
        .I2(S0_AXI_AWSIZE[2]),
        .I3(\arb_access_i_reg[Allocate]_0 ),
        .I4(wr_port_ready_cmb_0),
        .I5(\arb_access_i_reg[Size][2] ),
        .O(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [2]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'h20)) 
    dvm_2nd_part_i_1
       (.I0(arb_want_multi_part__3),
        .I1(ctrl_init_done_i_reg),
        .I2(dvm_2nd_part_reg_0),
        .O(dvm_2nd_part0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_99
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \arb_access_i_reg[Evict] ,
    \Using_FPGA.AND2B1L_Inst1 ,
    \arb_access_i_reg[Valid] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \arb_access_i_reg[Evict]_0 ,
    \ctrl_access[Internal_Cmd] ,
    access_piperun,
    reduce_or4_out,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \rd_port_access[1][Valid] ,
    CE,
    \arb_access_i_reg[Keep] ,
    \Using_FPGA.MUXCY_I_0 ,
    rd_port_ready_block_1,
    \arb_access_i[Allocate]1__0 ,
    \access_info[0][Keep] ,
    lopt,
    lopt_1,
    lopt_2);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \arb_access_i_reg[Evict] ;
  output \Using_FPGA.AND2B1L_Inst1 ;
  output \arb_access_i_reg[Valid] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \arb_access_i_reg[Evict]_0 ;
  input \ctrl_access[Internal_Cmd] ;
  input access_piperun;
  input reduce_or4_out;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input \rd_port_access[1][Valid] ;
  input [0:0]CE;
  input \arb_access_i_reg[Keep] ;
  input \Using_FPGA.MUXCY_I_0 ;
  input rd_port_ready_block_1;
  input \arb_access_i[Allocate]1__0 ;
  input \access_info[0][Keep] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A_0;
  wire [0:0]CE;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \Using_FPGA.AND2B1L_Inst1 ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \access_info[0][Keep] ;
  wire access_piperun;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i_reg[Evict] ;
  wire \arb_access_i_reg[Evict]_0 ;
  wire \arb_access_i_reg[Keep] ;
  wire \arb_access_i_reg[Valid] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_ready_block_1;
  wire reduce_or4_out;

  assign \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst  = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A_0;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hFFFF5D00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__17 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I2(access_piperun),
        .I3(\rd_port_access[1][Valid] ),
        .I4(CE),
        .O(\arb_access_i_reg[Valid] ));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.MUXCY_I_i_1__177 
       (.I0(\rd_port_access[1][Valid] ),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(rd_port_ready_block_1),
        .O(A_0));
  LUT6 #(
    .INIT(64'h000000000A0A0ACA)) 
    \arb_access_i[Evict]_i_1 
       (.I0(\arb_access_i_reg[Evict]_0 ),
        .I1(\ctrl_access[Internal_Cmd] ),
        .I2(access_piperun),
        .I3(\Using_FPGA.AND2B1L_Inst1 ),
        .I4(reduce_or4_out),
        .I5(Q),
        .O(\arb_access_i_reg[Evict] ));
  LUT6 #(
    .INIT(64'h0000E2FF0000E200)) 
    \arb_access_i[Keep]_i_1 
       (.I0(\Using_FPGA.AND2B1L_Inst1 ),
        .I1(reduce_or4_out),
        .I2(\arb_access_i[Allocate]1__0 ),
        .I3(access_piperun),
        .I4(Q),
        .I5(\access_info[0][Keep] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Valid]_i_3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(\arb_access_i_reg[Keep] ),
        .O(\Using_FPGA.AND2B1L_Inst1 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3
   (Carry_OUT,
    Carry_IN,
    A,
    lopt,
    lopt_1);
  output Carry_OUT;
  input Carry_IN;
  input A;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_OUT = lopt;
  assign a_loc = A;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_284
   (Carry_OUT,
    Carry_IN,
    A,
    lopt,
    lopt_1);
  output Carry_OUT;
  input Carry_IN;
  input A;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_OUT = lopt;
  assign a_loc = A;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_344
   (Carry_Out,
    Carry_In,
    A,
    lopt,
    lopt_1);
  output Carry_Out;
  input Carry_In;
  input A;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_In;
  wire Carry_Out;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_Out = lopt;
  assign a_loc = A;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_357
   (Carry_OUT,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [3:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [3:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h0001)) 
    a_loc_inferred_i_1__1
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[3]),
        .I3(Q[0]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_365
   (Carry_Out,
    A,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_Out;
  input A;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_Out;
  (* RTL_KEEP = "true" *) wire a_loc;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign a_loc = A;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA_Keep.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,a_loc}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_366
   (Carry_OUT,
    \lu_check_info_reg[Wr]__0 ,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input \lu_check_info_reg[Wr]__0 ;
  input [2:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [2:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;
  wire \lu_check_info_reg[Wr]__0 ;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hAAAB)) 
    a_loc_inferred_i_1__0
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_367
   (Carry_OUT,
    \lu_check_info_reg[Wr]__0 ,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input \lu_check_info_reg[Wr]__0 ;
  input [0:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [0:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;
  wire \lu_check_info_reg[Wr]__0 ;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hB)) 
    a_loc_inferred_i_1
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(Q),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and_di" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_di
   (lu_ds_last_beat,
    A46_out,
    \Using_FPGA.MUXCY_I_0 ,
    lu_ds_last_beat_multi_start,
    lopt);
  output lu_ds_last_beat;
  input A46_out;
  input \Using_FPGA.MUXCY_I_0 ;
  input lu_ds_last_beat_multi_start;
  input lopt;

  wire A46_out;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire lu_ds_last_beat;
  wire lu_ds_last_beat_multi_start;

  assign lu_ds_last_beat = lopt;
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n
   (r_pop_safe_i,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \r_hit_read_fifo_addr_reg[2] ,
    \r_hit_read_fifo_addr_reg[3] ,
    p_3_out__2,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ,
    r_pop,
    rip_pop,
    ri_exist,
    r_next_fifo_addr__18,
    Q,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ,
    I5,
    ri_refresh_reg,
    r_miss_full_fifo_addr,
    r_miss_fifo_empty,
    I4,
    r_miss_push,
    r_miss_fifo_almost_empty,
    r_read_fifo_addr,
    lopt,
    lopt_1,
    lopt_2);
  output r_pop_safe_i;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output \r_hit_read_fifo_addr_reg[2] ;
  output \r_hit_read_fifo_addr_reg[3] ;
  output p_3_out__2;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  input r_pop;
  input rip_pop;
  input ri_exist;
  input [2:0]r_next_fifo_addr__18;
  input [3:0]Q;
  input \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  input I5;
  input ri_refresh_reg;
  input [1:0]r_miss_full_fifo_addr;
  input r_miss_fifo_empty;
  input I4;
  input r_miss_push;
  input r_miss_fifo_almost_empty;
  input [0:0]r_read_fifo_addr;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire I4;
  wire I5;
  wire [3:0]Q;
  wire S;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire p_3_out__2;
  wire \r_hit_read_fifo_addr_reg[2] ;
  wire \r_hit_read_fifo_addr_reg[3] ;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_empty;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_push;
  wire [2:0]r_next_fifo_addr__18;
  wire r_pop;
  wire r_pop_safe_i;
  wire [0:0]r_read_fifo_addr;
  wire ri_exist;
  wire ri_refresh_reg;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign r_pop_safe_i = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hAAAAEFFF)) 
    \Use_FPGA_2.S_AXI_RVALID_i_4 
       (.I0(r_miss_push),
        .I1(I5),
        .I2(r_pop_safe_i),
        .I3(r_miss_fifo_almost_empty),
        .I4(r_miss_fifo_empty),
        .O(p_3_out__2));
  LUT4 #(
    .INIT(16'hC5CC)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_1 
       (.I0(r_read_fifo_addr),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2_n_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ));
  LUT6 #(
    .INIT(64'h5FCFC5CF50C0C5C0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2 
       (.I0(r_read_fifo_addr),
        .I1(Q[0]),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I3(r_pop_safe_i),
        .I4(I5),
        .I5(r_miss_full_fifo_addr[0]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2_n_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(r_next_fifo_addr__18[0]),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  LUT6 #(
    .INIT(64'hF3BBB8BBC088B888)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2 
       (.I0(Q[1]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I2(r_next_fifo_addr__18[0]),
        .I3(r_pop_safe_i),
        .I4(I5),
        .I5(r_miss_full_fifo_addr[1]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_1 
       (.I0(Q[2]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I2(I5),
        .I3(r_pop_safe_i),
        .I4(ri_refresh_reg),
        .I5(r_next_fifo_addr__18[1]),
        .O(\r_hit_read_fifo_addr_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_1__0 
       (.I0(r_pop_safe_i),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_2 
       (.I0(Q[3]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I2(I5),
        .I3(r_pop_safe_i),
        .I4(ri_refresh_reg),
        .I5(r_next_fifo_addr__18[2]),
        .O(\r_hit_read_fifo_addr_reg[3] ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__160 
       (.I0(r_miss_fifo_empty),
        .I1(I5),
        .I2(I4),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_10
   (w_pop_safe,
    first_wr_word_reg,
    S,
    E,
    first_wr_word,
    wip_pop,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output w_pop_safe;
  output first_wr_word_reg;
  input S;
  input [0:0]E;
  input first_wr_word;
  input wip_pop;
  input Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]E;
  wire Q;
  wire S;
  wire first_wr_word;
  wire first_wr_word_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire w_pop_safe;
  wire wip_pop;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(E),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,w_pop_safe}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT4 #(
    .INIT(16'hFFF4)) 
    first_wr_word_i_1
       (.I0(w_pop_safe),
        .I1(first_wr_word),
        .I2(wip_pop),
        .I3(Q),
        .O(first_wr_word_reg));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_103
   (access_piperun,
    \arbiter_bp_push_i[1][Valid] ,
    lookup_piperun_post1,
    wr_port_ready,
    lopt,
    lopt_1,
    lopt_2);
  output access_piperun;
  output \arbiter_bp_push_i[1][Valid] ;
  input lookup_piperun_post1;
  input wr_port_ready;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire access_piperun;
  wire \arbiter_bp_push_i[1][Valid] ;
  wire lookup_piperun_post1;
  wire wr_port_ready;

  assign access_piperun = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  LUT2 #(
    .INIT(4'h8)) 
    \arbiter_bp_push_i[1][Valid]_i_1 
       (.I0(access_piperun),
        .I1(wr_port_ready),
        .O(\arbiter_bp_push_i[1][Valid] ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_143
   (update_piperun,
    update_done_tag_write,
    update_piperun_pre1,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    update_valid,
    \Using_FPGA.MUXCY_I_1 ,
    update_need_tag_write,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output update_piperun;
  output update_done_tag_write;
  input update_piperun_pre1;
  input Q;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_valid;
  input \Using_FPGA.MUXCY_I_1 ;
  input update_need_tag_write;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Q;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire update_done_tag_write;
  wire update_need_tag_write;
  wire update_piperun;
  wire update_piperun_pre1;
  wire update_valid;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign update_piperun = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h55555D55FFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__7 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(update_valid),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(update_need_tag_write),
        .I4(\Using_FPGA.MUXCY_I_2 ),
        .I5(\Using_FPGA.MUXCY_I_3 ),
        .O(S));
  LUT2 #(
    .INIT(4'hE)) 
    update_done_tag_write_i_1
       (.I0(update_piperun),
        .I1(Q),
        .O(update_done_tag_write));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_148
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    queue_pop131_out,
    E,
    queue_pop136_out,
    ud_rm_use_and_lock_safe,
    ri_evicted,
    M0_AXI_RVALID,
    M0_AXI_RLAST,
    ri_exist,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output queue_pop131_out;
  output [0:0]E;
  output queue_pop136_out;
  input ud_rm_use_and_lock_safe;
  input ri_evicted;
  input M0_AXI_RVALID;
  input M0_AXI_RLAST;
  input ri_exist;
  input Q;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;

  wire [0:0]E;
  wire M0_AXI_RLAST;
  wire M0_AXI_RVALID;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire queue_pop131_out;
  wire queue_pop136_out;
  wire ri_evicted;
  wire ri_exist;
  wire ud_rm_use_and_lock_safe;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = lopt_6;
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__0 
       (.I0(ri_evicted),
        .I1(M0_AXI_RVALID),
        .I2(M0_AXI_RLAST),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(queue_pop131_out));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(M0_AXI_RLAST),
        .I2(M0_AXI_RVALID),
        .O(queue_pop136_out));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h80FF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(M0_AXI_RLAST),
        .I2(M0_AXI_RVALID),
        .I3(ri_exist),
        .O(E));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(ud_rm_use_and_lock_safe),
        .CO({lopt_6,\^lopt_3 ,\^lopt_1 ,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst }),
        .CYINIT(1'b0),
        .DI({\^lopt_4 ,\^lopt_4 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_5 ,\^lopt_5 ,M0_AXI_RVALID,S}));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__12 
       (.I0(Q),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_18
   (queue_pop_srl,
    \Use_FPGA.Almost_Empty_Inst ,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Almost_Full_Inst ,
    D,
    E,
    \Use_FPGA.Empty_Inst_0 ,
    \Use_FPGA.Empty_Inst_1 ,
    queue_done,
    \Use_FPGA.Empty_Inst_2 ,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    queue_almost_full,
    queue_almost_full_next__5,
    lopt,
    lopt_1,
    lopt_2);
  output queue_pop_srl;
  output \Use_FPGA.Almost_Empty_Inst ;
  output \Use_FPGA.Empty_Inst ;
  output \Use_FPGA.Almost_Full_Inst ;
  output D;
  input [0:0]E;
  input \Use_FPGA.Empty_Inst_0 ;
  input \Use_FPGA.Empty_Inst_1 ;
  input queue_done;
  input \Use_FPGA.Empty_Inst_2 ;
  input \Use_FPGA.Almost_Empty_Inst_0 ;
  input queue_almost_full;
  input queue_almost_full_next__5;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire D;
  wire [0:0]E;
  wire \Use_FPGA.Almost_Empty_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Empty_Inst_2 ;
  wire \Using_FPGA.MUXCY_I_i_1__182_n_0 ;
  wire queue_almost_full;
  wire queue_almost_full_next__5;
  wire queue_done;
  wire queue_pop_srl;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__182_n_0 ;
  assign queue_pop_srl = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hCFCFCFFAC0C0C00A)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__18 
       (.I0(\Use_FPGA.Empty_Inst_2 ),
        .I1(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Empty_Inst_1 ),
        .I4(queue_done),
        .I5(\Use_FPGA.Empty_Inst_0 ),
        .O(\Use_FPGA.Empty_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT5 #(
    .INIT(32'hBBBE8882)) 
    \Use_FPGA.Almost_Full_Inst_i_1__13 
       (.I0(queue_almost_full_next__5),
        .I1(queue_pop_srl),
        .I2(\Use_FPGA.Empty_Inst_1 ),
        .I3(queue_done),
        .I4(queue_almost_full),
        .O(D));
  LUT5 #(
    .INIT(32'hBBBC8880)) 
    \Use_FPGA.Empty_Inst_i_1__14 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(queue_pop_srl),
        .I2(\Use_FPGA.Empty_Inst_1 ),
        .I3(queue_done),
        .I4(\Use_FPGA.Empty_Inst_2 ),
        .O(\Use_FPGA.Almost_Empty_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT4 #(
    .INIT(16'h3032)) 
    \Use_FPGA.Full_Inst_i_1__13 
       (.I0(queue_almost_full),
        .I1(queue_pop_srl),
        .I2(\Use_FPGA.Empty_Inst_1 ),
        .I3(queue_done),
        .O(\Use_FPGA.Almost_Full_Inst ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__182 
       (.I0(\Use_FPGA.Empty_Inst_2 ),
        .O(\Using_FPGA.MUXCY_I_i_1__182_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_189
   (lu_mem_masked_valid_tag_0,
    lu_mem_pre_pure_valid_tag_0,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_masked_valid_tag_0;
  input lu_mem_pre_pure_valid_tag_0;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__134_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire lu_mem_masked_valid_tag_0;
  wire lu_mem_pre_pure_valid_tag_0;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__134_n_0 ;
  assign lu_mem_masked_valid_tag_0 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__134 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__134_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_206
   (lu_mem_masked_valid_tag_1,
    lu_mem_pre_pure_valid_tag_1,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_masked_valid_tag_1;
  input lu_mem_pre_pure_valid_tag_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__138_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire lu_mem_masked_valid_tag_1;
  wire lu_mem_pre_pure_valid_tag_1;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__138_n_0 ;
  assign lu_mem_masked_valid_tag_1 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__138 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__138_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_223
   (lu_mem_masked_valid_tag_2,
    lu_mem_pre_pure_valid_tag_2,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_masked_valid_tag_2;
  input lu_mem_pre_pure_valid_tag_2;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__142_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire lu_mem_masked_valid_tag_2;
  wire lu_mem_pre_pure_valid_tag_2;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__142_n_0 ;
  assign lu_mem_masked_valid_tag_2 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__142 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__142_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_24
   (r_pop_safe_i,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \r_hit_read_fifo_addr_reg[2] ,
    \r_hit_read_fifo_addr_reg[3] ,
    p_3_out__2,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ,
    \r_miss_read_fifo_addr_reg[0] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    r_pop,
    rip_pop,
    ri_exist,
    r_next_fifo_addr__18,
    Q,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ,
    I5,
    ri_refresh_reg,
    r_miss_full_fifo_addr,
    r_miss_fifo_empty,
    I4,
    r_miss_push,
    r_miss_fifo_almost_empty,
    r_read_fifo_addr,
    lopt,
    lopt_1,
    lopt_2);
  output r_pop_safe_i;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output \r_hit_read_fifo_addr_reg[2] ;
  output \r_hit_read_fifo_addr_reg[3] ;
  output p_3_out__2;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  output \r_miss_read_fifo_addr_reg[0] ;
  output \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input r_pop;
  input rip_pop;
  input ri_exist;
  input [2:0]r_next_fifo_addr__18;
  input [3:0]Q;
  input \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  input I5;
  input ri_refresh_reg;
  input [1:0]r_miss_full_fifo_addr;
  input r_miss_fifo_empty;
  input I4;
  input r_miss_push;
  input r_miss_fifo_almost_empty;
  input [0:0]r_read_fifo_addr;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire I4;
  wire I5;
  wire [3:0]Q;
  wire S;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire p_3_out__2;
  wire \r_hit_read_fifo_addr_reg[2] ;
  wire \r_hit_read_fifo_addr_reg[3] ;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_empty;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_push;
  wire \r_miss_read_fifo_addr_reg[0] ;
  wire [2:0]r_next_fifo_addr__18;
  wire r_pop;
  wire r_pop_safe_i;
  wire [0:0]r_read_fifo_addr;
  wire ri_exist;
  wire ri_refresh_reg;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign r_pop_safe_i = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hBBABBBBB)) 
    \Use_FPGA_2.S_AXI_RVALID_i_4__0 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_empty),
        .I2(r_miss_fifo_almost_empty),
        .I3(I5),
        .I4(r_pop_safe_i),
        .O(p_3_out__2));
  LUT4 #(
    .INIT(16'hC5CC)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_1__0 
       (.I0(r_read_fifo_addr),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0_n_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ));
  LUT6 #(
    .INIT(64'h5FCFC5CF50C0C5C0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0 
       (.I0(r_read_fifo_addr),
        .I1(Q[0]),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I3(r_pop_safe_i),
        .I4(I5),
        .I5(r_miss_full_fifo_addr[0]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0_n_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(r_next_fifo_addr__18[0]),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  LUT6 #(
    .INIT(64'hF3BBB8BBC088B888)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0 
       (.I0(Q[1]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I2(r_next_fifo_addr__18[0]),
        .I3(r_pop_safe_i),
        .I4(I5),
        .I5(r_miss_full_fifo_addr[1]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_1__0 
       (.I0(Q[2]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I2(I5),
        .I3(r_pop_safe_i),
        .I4(ri_refresh_reg),
        .I5(r_next_fifo_addr__18[1]),
        .O(\r_hit_read_fifo_addr_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_1 
       (.I0(r_pop_safe_i),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_2__0 
       (.I0(Q[3]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .I2(I5),
        .I3(r_pop_safe_i),
        .I4(ri_refresh_reg),
        .I5(r_next_fifo_addr__18[2]),
        .O(\r_hit_read_fifo_addr_reg[3] ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__158 
       (.I0(r_miss_fifo_empty),
        .I1(I5),
        .I2(I4),
        .O(S));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \r_miss_read_fifo_addr[0]_i_1 
       (.I0(I5),
        .I1(r_pop_safe_i),
        .I2(r_miss_full_fifo_addr[0]),
        .O(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT4 #(
    .INIT(16'hF708)) 
    \r_miss_read_fifo_addr[1]_i_1 
       (.I0(r_miss_full_fifo_addr[0]),
        .I1(r_pop_safe_i),
        .I2(I5),
        .I3(r_miss_full_fifo_addr[1]),
        .O(\r_miss_read_fifo_addr_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_240
   (lu_mem_masked_valid_tag_3,
    lu_mem_pre_pure_valid_tag_3,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_masked_valid_tag_3;
  input lu_mem_pre_pure_valid_tag_3;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire lu_mem_masked_valid_tag_3;
  wire lu_mem_pre_pure_valid_tag_3;
  wire lu_mem_sel_locked_30;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = lu_mem_sel_locked_30;
  assign lu_mem_masked_valid_tag_3 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__68 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .O(lu_mem_sel_locked_30));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_259
   (lud_addr_piperun_pre2,
    lu_check_wait_for_update_reg,
    S,
    lud_addr_piperun_pre1,
    lu_check_wait_for_update,
    lud_mem_already_used,
    lopt,
    lopt_1);
  output lud_addr_piperun_pre2;
  output lu_check_wait_for_update_reg;
  input S;
  input lud_addr_piperun_pre1;
  input lu_check_wait_for_update;
  input lud_mem_already_used;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire lu_check_wait_for_update;
  wire lu_check_wait_for_update_reg;
  wire lud_addr_piperun_pre1;
  wire lud_addr_piperun_pre2;
  wire lud_mem_already_used;

  assign lopt_1 = \<const0> ;
  assign lud_addr_piperun_pre2 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_3__4 
       (.I0(lu_check_wait_for_update),
        .I1(lud_mem_already_used),
        .O(lu_check_wait_for_update_reg));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_262
   (lud_mem_piperun,
    SR,
    lud_mem_delayed_read_data_reg,
    lud_mem_delayed_read_data_reg_0,
    lud_mem_delayed_read_data_reg_1,
    lud_mem_completed_reg,
    \lud_mem_port_one_hot_reg[1] ,
    lud_mem_last_reg,
    lud_reg_piperun,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ,
    lud_mem_keep_single_during_stall_reg,
    lookup_protect_conflict,
    lud_mem_keep_single_during_stall_reg_0,
    I5,
    \lud_reg_port_num_reg[0] ,
    \lud_reg_port_num_reg[0]_0 ,
    lud_mem_last,
    \lookup_read_data_info[0,0][Last] ,
    lopt,
    lopt_1,
    lopt_2);
  output lud_mem_piperun;
  output [0:0]SR;
  output [0:0]lud_mem_delayed_read_data_reg;
  output [0:0]lud_mem_delayed_read_data_reg_0;
  output [0:0]lud_mem_delayed_read_data_reg_1;
  output lud_mem_completed_reg;
  output \lud_mem_port_one_hot_reg[1] ;
  output lud_mem_last_reg;
  input lud_reg_piperun;
  input \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ;
  input \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ;
  input \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ;
  input lud_mem_keep_single_during_stall_reg;
  input lookup_protect_conflict;
  input lud_mem_keep_single_during_stall_reg_0;
  input I5;
  input [0:0]\lud_reg_port_num_reg[0] ;
  input \lud_reg_port_num_reg[0]_0 ;
  input lud_mem_last;
  input \lookup_read_data_info[0,0][Last] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire I5;
  wire [0:0]SR;
  wire \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ;
  wire \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ;
  wire \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ;
  wire lookup_protect_conflict;
  wire \lookup_read_data_info[0,0][Last] ;
  wire lud_mem_completed_reg;
  wire [0:0]lud_mem_delayed_read_data_reg;
  wire [0:0]lud_mem_delayed_read_data_reg_0;
  wire [0:0]lud_mem_delayed_read_data_reg_1;
  wire lud_mem_keep_single_during_stall_reg;
  wire lud_mem_keep_single_during_stall_reg_0;
  wire lud_mem_last;
  wire lud_mem_last_reg;
  wire lud_mem_piperun;
  wire \lud_mem_port_one_hot_reg[1] ;
  wire lud_reg_piperun;
  wire [0:0]\lud_reg_port_num_reg[0] ;
  wire \lud_reg_port_num_reg[0]_0 ;
  wire lud_step_pos_read_in_mem1;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = lud_step_pos_read_in_mem1;
  assign lud_mem_piperun = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hA8)) 
    \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i[0][31]_i_1 
       (.I0(lud_mem_piperun),
        .I1(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ),
        .I2(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ),
        .O(lud_mem_delayed_read_data_reg_1));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i[1][31]_i_1 
       (.I0(lud_mem_piperun),
        .I1(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ),
        .I2(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ),
        .O(lud_mem_delayed_read_data_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i[2][31]_i_1 
       (.I0(lud_mem_piperun),
        .I1(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ),
        .I2(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ),
        .O(lud_mem_delayed_read_data_reg));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i[3][31]_i_1 
       (.I0(lud_mem_piperun),
        .I1(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] ),
        .I2(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 ),
        .O(SR));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__53 
       (.I0(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ),
        .O(lud_step_pos_read_in_mem1));
  LUT5 #(
    .INIT(32'h33330002)) 
    lud_mem_keep_single_during_stall_i_1
       (.I0(lud_mem_keep_single_during_stall_reg),
        .I1(lud_mem_piperun),
        .I2(lookup_protect_conflict),
        .I3(lud_mem_keep_single_during_stall_reg_0),
        .I4(I5),
        .O(lud_mem_completed_reg));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lud_reg_last_i_1
       (.I0(lud_mem_last),
        .I1(lud_mem_piperun),
        .I2(\lookup_read_data_info[0,0][Last] ),
        .O(lud_mem_last_reg));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lud_reg_port_num[0]_i_1 
       (.I0(\lud_reg_port_num_reg[0] ),
        .I1(lud_mem_piperun),
        .I2(\lud_reg_port_num_reg[0]_0 ),
        .O(\lud_mem_port_one_hot_reg[1] ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_265
   (lud_step_offset,
    E,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    S,
    lookup_data_en_ii_4,
    lookup_offset_first_reg,
    lookup_offset_first_reg_0,
    Q,
    lookup_offset_first_reg_1,
    \lookup_offset_len_cnt_reg[0] ,
    \lookup_offset_len_cnt_reg[0]_0 ,
    lookup_last_beat,
    lookup_offset_first,
    lopt,
    lopt_1,
    lopt_2);
  output lud_step_offset;
  output [0:0]E;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input S;
  input lookup_data_en_ii_4;
  input lookup_offset_first_reg;
  input lookup_offset_first_reg_0;
  input Q;
  input lookup_offset_first_reg_1;
  input \lookup_offset_len_cnt_reg[0] ;
  input \lookup_offset_len_cnt_reg[0]_0 ;
  input lookup_last_beat;
  input lookup_offset_first;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [0:0]E;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lookup_data_en_ii_4;
  wire lookup_last_beat;
  wire lookup_offset_first;
  wire lookup_offset_first_i_2_n_0;
  wire lookup_offset_first_reg;
  wire lookup_offset_first_reg_0;
  wire lookup_offset_first_reg_1;
  wire \lookup_offset_len_cnt_reg[0] ;
  wire \lookup_offset_len_cnt_reg[0]_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lud_step_offset;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_data_en_ii_4),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,lud_step_offset}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,S}));
  LUT3 #(
    .INIT(8'hA8)) 
    lookup_next_is_last_beat_i_1
       (.I0(lud_step_offset),
        .I1(\lookup_offset_len_cnt_reg[0] ),
        .I2(\lookup_offset_len_cnt_reg[0]_0 ),
        .O(E));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    lookup_offset_first_i_1
       (.I0(lookup_last_beat),
        .I1(E),
        .I2(Q),
        .I3(lookup_offset_first_i_2_n_0),
        .I4(lookup_offset_first),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFEFFFF)) 
    lookup_offset_first_i_2
       (.I0(E),
        .I1(lookup_offset_first_reg),
        .I2(lookup_offset_first_reg_0),
        .I3(Q),
        .I4(lookup_offset_first_reg_1),
        .I5(\lookup_offset_len_cnt_reg[0] ),
        .O(lookup_offset_first_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_267
   (lu_check_piperun_pre2,
    \lu_check_tag_hit_copy_wm_reg[2] ,
    \update_old_tag_reg[Addr][13] ,
    lu_check_piperun_pre1,
    Q,
    lopt,
    lopt_1);
  output lu_check_piperun_pre2;
  output \lu_check_tag_hit_copy_wm_reg[2] ;
  input \update_old_tag_reg[Addr][13] ;
  input lu_check_piperun_pre1;
  input [3:0]Q;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire [3:0]Q;
  wire lu_check_piperun_pre1;
  wire lu_check_piperun_pre2;
  wire \lu_check_tag_hit_copy_wm_reg[2] ;
  wire \update_old_tag_reg[Addr][13] ;

  assign lopt_1 = \<const0> ;
  assign lu_check_piperun_pre2 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Using_FPGA.MUXCY_I_i_5__0 
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .O(\lu_check_tag_hit_copy_wm_reg[2] ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_268
   (lu_check_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \lu_check_info_reg[Wr] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    lu_check_piperun_pre2,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    lookup_miss,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ,
    update_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ,
    \lu_check_info_reg[Wr]__0 ,
    \lu_check_info_reg[Evict]__0 ,
    lu_check_valid,
    S,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output lu_check_piperun;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \lu_check_info_reg[Wr] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input lu_check_piperun_pre2;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input lookup_miss;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  input update_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  input \lu_check_info_reg[Wr]__0 ;
  input \lu_check_info_reg[Evict]__0 ;
  input lu_check_valid;
  input S;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__6_n_0 ;
  wire lookup_miss;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire \lu_check_info_reg[Evict]__0 ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_piperun;
  wire lu_check_piperun_pre2;
  wire lu_check_valid;
  wire update_piperun;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  LUT6 #(
    .INIT(64'hFFFF44F444444444)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__6_n_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I2(lookup_miss),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .I5(\lu_check_info_reg[Wr] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'hF100FFFFF100F100)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__4 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__6_n_0 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'hABAA)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__5 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(lu_check_piperun),
        .I2(update_piperun),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'h8A00AA008A00A800)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(lu_check_piperun),
        .I1(\lu_check_info_reg[Wr]__0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(lu_check_valid),
        .I4(S),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ),
        .O(\lu_check_info_reg[Wr] ));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__6 
       (.I0(lu_check_piperun),
        .I1(update_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__6_n_0 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_check_piperun_pre2),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,lu_check_piperun}),
        .CYINIT(1'b0),
        .DI({\^lopt_7 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,lu_check_valid,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_274
   (lookup_io_stall_carry_no_wait,
    lookup_io_stall_carry,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_stall_carry_no_wait;
  input lookup_io_stall_carry;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire lookup_io_stall_carry;
  wire lookup_io_stall_carry_no_wait;
  wire lu_check_wait_for_update;
  wire lud_step_want_check_step3;

  assign lookup_io_stall_carry_no_wait = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = lud_step_want_check_step3;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__52 
       (.I0(lu_check_wait_for_update),
        .O(lud_step_want_check_step3));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_275
   (lookup_io_stall_hit_carry_no_last,
    \Using_FPGA.MUXCY_I_0 ,
    Carry_OUT,
    lopt,
    lopt_1);
  output lookup_io_stall_hit_carry_no_last;
  input \Using_FPGA.MUXCY_I_0 ;
  input Carry_OUT;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_OUT;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire lookup_io_stall_hit_carry_no_last;

  assign lookup_io_stall_hit_carry_no_last = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_277
   (lookup_io_stall_valid,
    lookup_io_stall_pre_valid,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_io_stall_valid;
  input lookup_io_stall_pre_valid;
  input \lu_check_info_reg[Evict]__0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.MUXCY_I_i_1__129_n_0 ;
  wire lookup_io_stall_pre_valid;
  wire lookup_io_stall_valid;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_io_stall_pre_valid),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,lookup_io_stall_valid}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__129_n_0 }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__129 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__129_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_283
   (Carry_IN,
    lu_ds_last_beat,
    lu_check_wait_for_update,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input lu_ds_last_beat;
  input lu_check_wait_for_update;
  input \Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire lu_check_wait_for_update;
  wire lu_ds_last_beat;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_1__82 
       (.I0(lu_check_wait_for_update),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_286
   (Carry_IN,
    lu_ds_last_beat_valid_hit,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input lu_ds_last_beat_valid_hit;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire lookup_hit0;
  wire \lu_check_info_reg[Evict]__0 ;
  wire lu_ds_last_beat_valid_hit;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = lookup_hit0;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__44 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .O(lookup_hit0));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_292
   (lookup_hit_carry,
    lookup_raw_hit_carry2,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_hit_carry;
  input lookup_raw_hit_carry2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire lookup_hit_carry;
  wire lookup_raw_hit_carry2;

  assign lookup_hit_carry = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_296
   (lu_mem_protect_conflict_reg,
    lu_mem_release_lock_hold,
    \lu_mem_info_reg[Port_Num][0] ,
    lu_fetch_piperun_pre1,
    Q,
    lopt,
    lopt_1);
  output lu_mem_protect_conflict_reg;
  output lu_mem_release_lock_hold;
  input \lu_mem_info_reg[Port_Num][0] ;
  input lu_fetch_piperun_pre1;
  input Q;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Q;
  wire lu_fetch_piperun_pre1;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_release_lock_hold;

  assign lopt_1 = \<const0> ;
  assign lu_mem_protect_conflict_reg = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \lu_mem_removed_way_hold[3]_i_1 
       (.I0(Q),
        .I1(lu_mem_protect_conflict_reg),
        .O(lu_mem_release_lock_hold));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_304
   (lu_mem_valid_reg,
    lud_mem_waiting_for_pipe_reg,
    \arb_access_i_reg[Valid] ,
    lud_write_hit_done,
    lud_mem_waiting_for_pipe_reg_0,
    S,
    lu_mem_piperun_pre1,
    lud_mem_waiting_for_pipe_reg_1,
    lud_mem_waiting_for_pipe_reg_2,
    lud_addr_piperun,
    lud_mem_waiting_for_pipe_reg_3,
    Q,
    access_valid,
    S_0,
    lu_mem_valid_reg_0,
    lu_mem_valid_reg_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lud_mem_use_speculative,
    lookup_protect_conflict,
    lopt,
    lopt_1);
  output lu_mem_valid_reg;
  output lud_mem_waiting_for_pipe_reg;
  output \arb_access_i_reg[Valid] ;
  output lud_write_hit_done;
  output lud_mem_waiting_for_pipe_reg_0;
  input S;
  input lu_mem_piperun_pre1;
  input lud_mem_waiting_for_pipe_reg_1;
  input lud_mem_waiting_for_pipe_reg_2;
  input lud_addr_piperun;
  input lud_mem_waiting_for_pipe_reg_3;
  input Q;
  input access_valid;
  input S_0;
  input lu_mem_valid_reg_0;
  input lu_mem_valid_reg_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lud_mem_use_speculative;
  input lookup_protect_conflict;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Q;
  wire S;
  wire S_0;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire access_valid;
  wire \arb_access_i_reg[Valid] ;
  wire lookup_protect_conflict;
  wire lu_mem_piperun_pre1;
  wire lu_mem_valid_reg;
  wire lu_mem_valid_reg_0;
  wire lu_mem_valid_reg_1;
  wire lud_addr_piperun;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg;
  wire lud_mem_waiting_for_pipe_reg_0;
  wire lud_mem_waiting_for_pipe_reg_1;
  wire lud_mem_waiting_for_pipe_reg_2;
  wire lud_mem_waiting_for_pipe_reg_3;
  wire lud_write_hit_done;

  assign lopt_1 = \<const0> ;
  assign lu_mem_valid_reg = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'h80808F80)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__1 
       (.I0(lud_mem_waiting_for_pipe_reg_3),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(lu_mem_valid_reg),
        .I3(lud_mem_use_speculative),
        .I4(lookup_protect_conflict),
        .O(lud_mem_waiting_for_pipe_reg_0));
  LUT6 #(
    .INIT(64'h00000000C055C000)) 
    lu_mem_valid_i_1
       (.I0(lu_mem_valid_reg),
        .I1(access_valid),
        .I2(S_0),
        .I3(lu_mem_valid_reg_0),
        .I4(lu_mem_valid_reg_1),
        .I5(Q),
        .O(\arb_access_i_reg[Valid] ));
  LUT2 #(
    .INIT(4'hE)) 
    lud_mem_already_used_i_3
       (.I0(lu_mem_valid_reg),
        .I1(Q),
        .O(lud_write_hit_done));
  LUT6 #(
    .INIT(64'h0000000055550400)) 
    lud_mem_waiting_for_pipe_i_1
       (.I0(lu_mem_valid_reg),
        .I1(lud_mem_waiting_for_pipe_reg_1),
        .I2(lud_mem_waiting_for_pipe_reg_2),
        .I3(lud_addr_piperun),
        .I4(lud_mem_waiting_for_pipe_reg_3),
        .I5(Q),
        .O(lud_mem_waiting_for_pipe_reg));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_31
   (queue_pop_srl,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Almost_Empty_Inst ,
    \Use_FPGA.Empty_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst ,
    D_0,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ,
    Q0_in,
    read_req_ready,
    \Use_FPGA.Empty_Inst_1 ,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    \Use_FPGA.Full_Inst ,
    queue_almost_full_next__9,
    lopt,
    lopt_1,
    lopt_2);
  output queue_pop_srl;
  output \Use_FPGA.Empty_Inst ;
  output \Use_FPGA.Almost_Empty_Inst ;
  output \Use_FPGA.Empty_Inst_0 ;
  output \Use_FPGA.Almost_Full_Inst ;
  output D_0;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ;
  input Q0_in;
  input read_req_ready;
  input \Use_FPGA.Empty_Inst_1 ;
  input \Use_FPGA.Almost_Empty_Inst_0 ;
  input \Use_FPGA.Full_Inst ;
  input queue_almost_full_next__9;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire D_0;
  wire Q0_in;
  wire \Use_FPGA.Almost_Empty_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ;
  wire \Using_FPGA.MUXCY_I_i_1__183_n_0 ;
  wire queue_almost_full_next__9;
  wire queue_pop_srl;
  wire read_req_ready;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__183_n_0 ;
  assign queue_pop_srl = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hEFEFEFFC202020CC)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__20 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ),
        .I4(Q0_in),
        .I5(\Use_FPGA.Empty_Inst_1 ),
        .O(\Use_FPGA.Empty_Inst_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFBA2020208A)) 
    \Use_FPGA.Almost_Full_Inst_i_1__15 
       (.I0(queue_almost_full_next__9),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ),
        .I4(Q0_in),
        .I5(\Use_FPGA.Full_Inst ),
        .O(D_0));
  LUT5 #(
    .INIT(32'hECECEC00)) 
    \Use_FPGA.Empty_Inst_i_1__16 
       (.I0(\Use_FPGA.Empty_Inst_1 ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ),
        .I4(Q0_in),
        .O(\Use_FPGA.Almost_Empty_Inst ));
  LUT5 #(
    .INIT(32'hCF00CF8A)) 
    \Use_FPGA.Full_Inst_i_1__15 
       (.I0(\Use_FPGA.Full_Inst ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ),
        .I4(Q0_in),
        .O(\Use_FPGA.Almost_Full_Inst ));
  LUT6 #(
    .INIT(64'hEFEFEFBA2020208A)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_1__0 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 ),
        .I4(Q0_in),
        .I5(read_req_ready),
        .O(\Use_FPGA.Empty_Inst ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__183 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .O(\Using_FPGA.MUXCY_I_i_1__183_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_319
   (lookup_miss_dirty_no_clean,
    lookup_miss_dirty,
    \lu_check_info_reg[Evict]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_miss_dirty_no_clean;
  input lookup_miss_dirty;
  input \lu_check_info_reg[Evict]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__127_n_0 ;
  wire lookup_miss_dirty;
  wire lookup_miss_dirty_no_clean;
  wire \lu_check_info_reg[Evict]__0 ;

  assign lookup_miss_dirty_no_clean = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__127_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__127 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__127_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_321
   (lookup_push_write_miss_pre,
    lookup_md_wm_whne_valid,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_push_write_miss_pre;
  input lookup_md_wm_whne_valid;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__128_n_0 ;
  wire lookup_md_wm_whne_valid;
  wire lookup_push_write_miss_pre;
  wire lu_check_wait_for_update;

  assign lookup_push_write_miss_pre = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__128_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__128 
       (.I0(lu_check_wait_for_update),
        .O(\Using_FPGA.MUXCY_I_i_1__128_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_340
   (carry_1,
    protected_bit,
    lu_mem_protect_conflict_d1,
    lu_check_protected_way,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input protected_bit;
  input lu_mem_protect_conflict_d1;
  input [1:0]lu_check_protected_way;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire [1:0]lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;
  wire protected_bit;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFFFD)) 
    \Using_FPGA.MUXCY_I_i_1__95 
       (.I0(lu_mem_protect_conflict_d1),
        .I1(lu_check_protected_way[1]),
        .I2(lu_check_protected_way[0]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_341
   (carry_2,
    carry_1,
    lu_mem_protect_conflict_d1,
    lu_check_protected_way,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  input carry_1;
  input lu_mem_protect_conflict_d1;
  input [1:0]lu_check_protected_way;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire carry_2;
  wire [1:0]lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \Using_FPGA.MUXCY_I_i_1__96 
       (.I0(lu_mem_protect_conflict_d1),
        .I1(lu_check_protected_way[1]),
        .I2(lu_check_protected_way[0]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_342
   (carry_3,
    carry_2,
    lu_check_protected_way,
    lu_mem_protect_conflict_d1,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_3;
  input carry_2;
  input [1:0]lu_check_protected_way;
  input lu_mem_protect_conflict_d1;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire carry_2;
  wire carry_3;
  wire [1:0]lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hFFF7)) 
    \Using_FPGA.MUXCY_I_i_1__97 
       (.I0(lu_check_protected_way[1]),
        .I1(lu_mem_protect_conflict_d1),
        .I2(lu_check_protected_way[0]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_343
   (filtered_protection_bit,
    carry_3,
    lu_check_protected_way,
    lu_mem_protect_conflict_d1,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output filtered_protection_bit;
  input carry_3;
  input [1:0]lu_check_protected_way;
  input lu_mem_protect_conflict_d1;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire carry_3;
  wire filtered_protection_bit;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire [1:0]lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_6 ,\^lopt_3 ,\^lopt_1 ,filtered_protection_bit}),
        .CYINIT(1'b0),
        .DI({\^lopt_7 ,\^lopt_4 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_2 ,S}));
  LUT4 #(
    .INIT(16'hFF7F)) 
    \Using_FPGA.MUXCY_I_i_1__98 
       (.I0(lu_check_protected_way[1]),
        .I1(lu_mem_protect_conflict_d1),
        .I2(lu_check_protected_way[0]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_363
   (carry_1,
    lookup_write_hit_carry,
    \Using_FPGA.MUXCY_I_0 ,
    update_write_miss_busy,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input lookup_write_hit_carry;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]update_write_miss_busy;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire lookup_write_hit_carry;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]update_write_miss_busy;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_write_hit_carry),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__74 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(update_write_miss_busy),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_364
   (Carry_In,
    carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    update_write_miss_busy,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_In;
  input carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]update_write_miss_busy;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_In;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire [0:0]update_write_miss_busy;

  assign Carry_In = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__76 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(update_write_miss_busy),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_4
   (queue_pop_srl,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Almost_Empty_Inst ,
    \Use_FPGA.Empty_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst ,
    D,
    rip_refresh_reg,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ,
    \Use_FPGA.Empty_Inst_1 ,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    \Use_FPGA.Full_Inst ,
    \Use_FPGA.Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output queue_pop_srl;
  output \Use_FPGA.Empty_Inst ;
  output \Use_FPGA.Almost_Empty_Inst ;
  output \Use_FPGA.Empty_Inst_0 ;
  output \Use_FPGA.Almost_Full_Inst ;
  output D;
  input rip_refresh_reg;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ;
  input \Use_FPGA.Empty_Inst_1 ;
  input \Use_FPGA.Almost_Empty_Inst_0 ;
  input \Use_FPGA.Full_Inst ;
  input \Use_FPGA.Full_Inst_0 ;
  input \Use_FPGA.Almost_Full_Inst_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire D;
  wire \Use_FPGA.Almost_Empty_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_1 ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ;
  wire queue_pop_srl;
  wire refresh_counter1;
  wire rip_refresh_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = refresh_counter1;
  assign queue_pop_srl = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT5 #(
    .INIT(32'hFCEFCC20)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__17 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(\Use_FPGA.Empty_Inst_1 ),
        .O(\Use_FPGA.Empty_Inst_0 ));
  LUT6 #(
    .INIT(64'hAFAAFCFFA0AA0C00)) 
    \Use_FPGA.Almost_Full_Inst_i_1__12 
       (.I0(\Use_FPGA.Almost_Full_Inst_1 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .I5(\Use_FPGA.Full_Inst ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h00EC)) 
    \Use_FPGA.Empty_Inst_i_1__13 
       (.I0(\Use_FPGA.Empty_Inst_1 ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst ));
  LUT5 #(
    .INIT(32'hBACF8A00)) 
    \Use_FPGA.Full_Inst_i_1__12 
       (.I0(\Use_FPGA.Full_Inst ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Almost_Full_Inst ));
  LUT5 #(
    .INIT(32'hBAEF8A20)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_1 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 ),
        .O(\Use_FPGA.Empty_Inst ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__161 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .O(refresh_counter1));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_414
   (Carry_IN,
    Carry_OUT,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output Carry_IN;
  input Carry_OUT;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;

  wire Carry_IN;
  wire Carry_OUT;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire lopt_7;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_7 = lopt_6;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_OUT),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,Carry_IN}),
        .CYINIT(1'b0),
        .DI({\^lopt_2 ,\^lopt_2 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_5 ,\^lopt_3 ,S}));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__201 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_87
   (idle_carry_3,
    arb_token_1,
    \Using_FPGA.MUXCY_I_0 ,
    \wr_port_access[1][Valid] ,
    rd_port_multi_part_1,
    \rd_port_access[1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output idle_carry_3;
  input arb_token_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input \wr_port_access[1][Valid] ;
  input rd_port_multi_part_1;
  input \rd_port_access[1][Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__202_n_0 ;
  wire arb_token_1;
  wire idle_carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire \wr_port_access[1][Valid] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,idle_carry_3}),
        .CYINIT(1'b1),
        .DI({\^lopt_7 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__202_n_0 }));
  LUT5 #(
    .INIT(32'h00DDDFDF)) 
    \Using_FPGA.MUXCY_I_i_1__202 
       (.I0(arb_token_1),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\wr_port_access[1][Valid] ),
        .I3(rd_port_multi_part_1),
        .I4(\rd_port_access[1][Valid] ),
        .O(\Using_FPGA.MUXCY_I_i_1__202_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_94
   (idle_carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    any_port_forbid_0,
    S0_AXI_ARVALID,
    read_req_ready,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output idle_carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input any_port_forbid_0;
  input S0_AXI_ARVALID;
  input read_req_ready;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire S0_AXI_ARVALID;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__186_n_0 ;
  wire any_port_forbid_0;
  wire idle_carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire read_req_ready;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,idle_carry_1}),
        .CYINIT(1'b1),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__186_n_0 }));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.MUXCY_I_i_1__186 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(any_port_forbid_0),
        .I2(S0_AXI_ARVALID),
        .I3(read_req_ready),
        .O(\Using_FPGA.MUXCY_I_i_1__186_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_and_n_95
   (idle_carry_2,
    idle_carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    any_port_forbid_0,
    rd_port_multi_part_0,
    \rd_port_access[0][Valid] ,
    S0_AXI_AWVALID,
    queue_full,
    lopt,
    lopt_1,
    lopt_2);
  output idle_carry_2;
  input idle_carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input any_port_forbid_0;
  input rd_port_multi_part_0;
  input \rd_port_access[0][Valid] ;
  input S0_AXI_AWVALID;
  input queue_full;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire S0_AXI_AWVALID;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire any_port_forbid_0;
  wire idle_carry_1;
  wire idle_carry_2;
  wire queue_full;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_multi_part_0;

  assign idle_carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__151 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(any_port_forbid_0),
        .I2(rd_port_multi_part_0),
        .I3(\rd_port_access[0][Valid] ),
        .I4(S0_AXI_AWVALID),
        .I5(queue_full),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare
   (update_match_addr,
    \The_Compare[0].sel_reg_3 ,
    update_need_tag_write_carry,
    A_4,
    \Using_FPGA.MUXCY_I ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output update_match_addr;
  input \The_Compare[0].sel_reg_3 ;
  input update_need_tag_write_carry;
  input A_4;
  input \Using_FPGA.MUXCY_I ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire A_4;
  wire \The_Compare[0].sel_reg_3 ;
  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire carry_2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire update_match_addr;
  wire update_need_tag_write_carry;

  Fast_IP_Clock_system_cache_0_0_carry_and_161 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_3 (\The_Compare[0].sel_reg_3 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_need_tag_write_carry(update_need_tag_write_carry));
  Fast_IP_Clock_system_cache_0_0_carry_and_162 \The_Compare[1].carry_and_I1 
       (.A_4(A_4),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_163 \The_Compare[2].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_2(carry_2),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lopt_2(lopt_6),
        .update_match_addr(update_match_addr));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_271
   (lu_check_match_addr,
    \Using_FPGA.MUXCY_I ,
    D,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output lu_check_match_addr;
  input \Using_FPGA.MUXCY_I ;
  input [5:0]D;
  input [5:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [5:0]D;
  wire [5:0]Q;
  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire carry_2;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lu_check_match_addr;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  Fast_IP_Clock_system_cache_0_0_carry_and_378 \The_Compare[0].carry_and_I1 
       (.D(D[2:0]),
        .Q(Q[2:0]),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(\Using_FPGA.MUXCY_I ),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7));
  Fast_IP_Clock_system_cache_0_0_carry_and_379 \The_Compare[1].carry_and_I1 
       (.D(D[5:3]),
        .Q(Q[5:3]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_380 \The_Compare[2].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_2(carry_2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lu_check_match_addr(lu_check_match_addr));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_308
   (lu_mem_match_addr,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    Q,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    \Using_FPGA.MUXCY_I_4 ,
    \Using_FPGA.MUXCY_I_5 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_match_addr;
  input \Using_FPGA.MUXCY_I ;
  input \Using_FPGA.MUXCY_I_0 ;
  input [5:0]Q;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input \Using_FPGA.MUXCY_I_5 ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [5:0]Q;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire \Using_FPGA.MUXCY_I_5 ;
  wire carry_1;
  wire carry_2;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lu_mem_match_addr;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  Fast_IP_Clock_system_cache_0_0_carry_and_346 \The_Compare[0].carry_and_I1 
       (.Q(Q[2:0]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_1 ),
        .\Using_FPGA.MUXCY_I_2 (\Using_FPGA.MUXCY_I_2 ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(\Using_FPGA.MUXCY_I ),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7));
  Fast_IP_Clock_system_cache_0_0_carry_and_347 \The_Compare[1].carry_and_I1 
       (.Q(Q[5:3]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_3 ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_4 ),
        .\Using_FPGA.MUXCY_I_2 (\Using_FPGA.MUXCY_I_5 ),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_348 \The_Compare[2].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_2(carry_2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lu_mem_match_addr(lu_mem_match_addr));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2
   (update_tag_match_pre_0,
    \The_Compare[0].sel_reg ,
    update_sel_readback_tag_0,
    A_2,
    \The_Compare[2].sel_reg ,
    \The_Compare[3].sel_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output update_tag_match_pre_0;
  input \The_Compare[0].sel_reg ;
  input update_sel_readback_tag_0;
  input A_2;
  input \The_Compare[2].sel_reg ;
  input \The_Compare[3].sel_reg ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_2;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[3].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire update_sel_readback_tag_0;
  wire update_tag_match_pre_0;

  Fast_IP_Clock_system_cache_0_0_carry_and_178 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_sel_readback_tag_0(update_sel_readback_tag_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_179 \The_Compare[1].carry_and_I1 
       (.A_2(A_2),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_180 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_181 \The_Compare[3].carry_and_I1 
       (.\The_Compare[3].sel_reg (\The_Compare[3].sel_reg ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .update_tag_match_pre_0(update_tag_match_pre_0));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_126
   (update_tag_match_pre_1,
    \The_Compare[0].sel_reg_4 ,
    update_sel_readback_tag_1,
    A_5,
    \The_Compare[2].sel_reg_6 ,
    \The_Compare[3].sel_reg_7 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output update_tag_match_pre_1;
  input \The_Compare[0].sel_reg_4 ;
  input update_sel_readback_tag_1;
  input A_5;
  input \The_Compare[2].sel_reg_6 ;
  input \The_Compare[3].sel_reg_7 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_5;
  wire \The_Compare[0].sel_reg_4 ;
  wire \The_Compare[2].sel_reg_6 ;
  wire \The_Compare[3].sel_reg_7 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire update_sel_readback_tag_1;
  wire update_tag_match_pre_1;

  Fast_IP_Clock_system_cache_0_0_carry_and_174 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_4 (\The_Compare[0].sel_reg_4 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_sel_readback_tag_1(update_sel_readback_tag_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_175 \The_Compare[1].carry_and_I1 
       (.A_5(A_5),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_176 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_6 (\The_Compare[2].sel_reg_6 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_177 \The_Compare[3].carry_and_I1 
       (.\The_Compare[3].sel_reg_7 (\The_Compare[3].sel_reg_7 ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .update_tag_match_pre_1(update_tag_match_pre_1));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_131
   (update_tag_match_pre_2,
    \The_Compare[0].sel_reg_8 ,
    update_sel_readback_tag_2,
    A_9,
    \The_Compare[2].sel_reg_10 ,
    \The_Compare[3].sel_reg_11 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output update_tag_match_pre_2;
  input \The_Compare[0].sel_reg_8 ;
  input update_sel_readback_tag_2;
  input A_9;
  input \The_Compare[2].sel_reg_10 ;
  input \The_Compare[3].sel_reg_11 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_9;
  wire \The_Compare[0].sel_reg_8 ;
  wire \The_Compare[2].sel_reg_10 ;
  wire \The_Compare[3].sel_reg_11 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire update_sel_readback_tag_2;
  wire update_tag_match_pre_2;

  Fast_IP_Clock_system_cache_0_0_carry_and_170 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_8 (\The_Compare[0].sel_reg_8 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_sel_readback_tag_2(update_sel_readback_tag_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_171 \The_Compare[1].carry_and_I1 
       (.A_9(A_9),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_172 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_10 (\The_Compare[2].sel_reg_10 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_173 \The_Compare[3].carry_and_I1 
       (.\The_Compare[3].sel_reg_11 (\The_Compare[3].sel_reg_11 ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .update_tag_match_pre_2(update_tag_match_pre_2));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_136
   (update_tag_match_pre_3,
    \The_Compare[0].sel_reg_12 ,
    update_sel_readback_tag_3,
    A_13,
    \The_Compare[2].sel_reg_14 ,
    \The_Compare[3].sel_reg_15 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output update_tag_match_pre_3;
  input \The_Compare[0].sel_reg_12 ;
  input update_sel_readback_tag_3;
  input A_13;
  input \The_Compare[2].sel_reg_14 ;
  input \The_Compare[3].sel_reg_15 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_13;
  wire \The_Compare[0].sel_reg_12 ;
  wire \The_Compare[2].sel_reg_14 ;
  wire \The_Compare[3].sel_reg_15 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire update_sel_readback_tag_3;
  wire update_tag_match_pre_3;

  Fast_IP_Clock_system_cache_0_0_carry_and_166 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_12 (\The_Compare[0].sel_reg_12 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_sel_readback_tag_3(update_sel_readback_tag_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_167 \The_Compare[1].carry_and_I1 
       (.A_13(A_13),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_168 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_14 (\The_Compare[2].sel_reg_14 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_169 \The_Compare[3].carry_and_I1 
       (.\The_Compare[3].sel_reg_15 (\The_Compare[3].sel_reg_15 ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .update_tag_match_pre_3(update_tag_match_pre_3));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_200
   (lu_mem_pre_pure_valid_tag_0,
    \lu_check_info_reg[Addr][13] ,
    \lu_check_info_reg[Addr][14] ,
    \lu_check_info_reg[Addr][15] ,
    \lu_check_info_reg[Addr][16] ,
    \lu_check_info_reg[Addr][17] ,
    \lu_check_info_reg[Addr][18] ,
    \lu_check_info_reg[Addr][19] ,
    \lu_check_info_reg[Addr][20] ,
    \lu_check_info_reg[Addr][21] ,
    \lu_check_info_reg[Addr][22] ,
    \The_Compare[0].sel_reg_12 ,
    lu_mem_valid_carry_0,
    A_13,
    \The_Compare[2].sel_reg ,
    Q,
    \Using_FPGA.MUXCY_I_i_1__109 ,
    lu_mem_force_way,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output lu_mem_pre_pure_valid_tag_0;
  output \lu_check_info_reg[Addr][13] ;
  output \lu_check_info_reg[Addr][14] ;
  output \lu_check_info_reg[Addr][15] ;
  output \lu_check_info_reg[Addr][16] ;
  output \lu_check_info_reg[Addr][17] ;
  output \lu_check_info_reg[Addr][18] ;
  output \lu_check_info_reg[Addr][19] ;
  output \lu_check_info_reg[Addr][20] ;
  output \lu_check_info_reg[Addr][21] ;
  output \lu_check_info_reg[Addr][22] ;
  input \The_Compare[0].sel_reg_12 ;
  input lu_mem_valid_carry_0;
  input A_13;
  input \The_Compare[2].sel_reg ;
  input [10:0]Q;
  input \Using_FPGA.MUXCY_I_i_1__109 ;
  input [1:0]lu_mem_force_way;
  input [8:0]\Using_FPGA.MUXCY_I ;
  input [1:0]\Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_13;
  wire [10:0]Q;
  wire \The_Compare[0].sel_reg_12 ;
  wire \The_Compare[2].sel_reg ;
  wire [8:0]\Using_FPGA.MUXCY_I ;
  wire [1:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__109 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire \lu_check_info_reg[Addr][13] ;
  wire \lu_check_info_reg[Addr][14] ;
  wire \lu_check_info_reg[Addr][15] ;
  wire \lu_check_info_reg[Addr][16] ;
  wire \lu_check_info_reg[Addr][17] ;
  wire \lu_check_info_reg[Addr][18] ;
  wire \lu_check_info_reg[Addr][19] ;
  wire \lu_check_info_reg[Addr][20] ;
  wire \lu_check_info_reg[Addr][21] ;
  wire \lu_check_info_reg[Addr][22] ;
  wire [1:0]lu_mem_force_way;
  wire lu_mem_pre_pure_valid_tag_0;
  wire lu_mem_valid_carry_0;

  Fast_IP_Clock_system_cache_0_0_carry_and_395 \The_Compare[0].carry_and_I1 
       (.Q(Q[2:0]),
        .\The_Compare[0].sel_reg_12 (\The_Compare[0].sel_reg_12 ),
        .\Using_FPGA.MUXCY_I_i_1__109 (\Using_FPGA.MUXCY_I_i_1__109 ),
        .\Using_FPGA.MUXCY_I_i_1__109_0 (\Using_FPGA.MUXCY_I [0]),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .\lu_check_info_reg[Addr][13] (\lu_check_info_reg[Addr][13] ),
        .\lu_check_info_reg[Addr][14] (\lu_check_info_reg[Addr][14] ),
        .\lu_check_info_reg[Addr][15] (\lu_check_info_reg[Addr][15] ),
        .lu_mem_force_way(lu_mem_force_way),
        .lu_mem_valid_carry_0(lu_mem_valid_carry_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_396 \The_Compare[1].carry_and_I1 
       (.A_13(A_13),
        .Q(Q[5:3]),
        .\Using_FPGA.MUXCY_I_i_1__113 (\Using_FPGA.MUXCY_I_i_1__109 ),
        .\Using_FPGA.MUXCY_I_i_1__113_0 (\Using_FPGA.MUXCY_I [3:1]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .\lu_check_info_reg[Addr][16] (\lu_check_info_reg[Addr][16] ),
        .\lu_check_info_reg[Addr][17] (\lu_check_info_reg[Addr][17] ),
        .\lu_check_info_reg[Addr][18] (\lu_check_info_reg[Addr][18] ));
  Fast_IP_Clock_system_cache_0_0_carry_and_397 \The_Compare[2].carry_and_I1 
       (.Q(Q[8:6]),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .\Using_FPGA.MUXCY_I_i_1__117 (\Using_FPGA.MUXCY_I_i_1__109 ),
        .\Using_FPGA.MUXCY_I_i_1__117_0 (\Using_FPGA.MUXCY_I [6:4]),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .\lu_check_info_reg[Addr][19] (\lu_check_info_reg[Addr][19] ),
        .\lu_check_info_reg[Addr][20] (\lu_check_info_reg[Addr][20] ),
        .\lu_check_info_reg[Addr][21] (\lu_check_info_reg[Addr][21] ));
  Fast_IP_Clock_system_cache_0_0_carry_and_398 \The_Compare[3].carry_and_I1 
       (.Q(Q[10:9]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [8:7]),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_i_1__120 (\Using_FPGA.MUXCY_I_i_1__109 ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .\lu_check_info_reg[Addr][22] (\lu_check_info_reg[Addr][22] ),
        .lu_mem_pre_pure_valid_tag_0(lu_mem_pre_pure_valid_tag_0));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_217
   (lu_mem_pre_pure_valid_tag_1,
    \The_Compare[0].sel_reg_14 ,
    lu_mem_valid_carry_1,
    A_15,
    \The_Compare[2].sel_reg_16 ,
    Q,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output lu_mem_pre_pure_valid_tag_1;
  input \The_Compare[0].sel_reg_14 ;
  input lu_mem_valid_carry_1;
  input A_15;
  input \The_Compare[2].sel_reg_16 ;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I ;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [1:0]\Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_15;
  wire [0:0]Q;
  wire \The_Compare[0].sel_reg_14 ;
  wire \The_Compare[2].sel_reg_16 ;
  wire \Using_FPGA.MUXCY_I ;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [1:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire lu_mem_pre_pure_valid_tag_1;
  wire lu_mem_valid_carry_1;

  Fast_IP_Clock_system_cache_0_0_carry_and_391 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_14 (\The_Compare[0].sel_reg_14 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lu_mem_valid_carry_1(lu_mem_valid_carry_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_392 \The_Compare[1].carry_and_I1 
       (.A_15(A_15),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_393 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_16 (\The_Compare[2].sel_reg_16 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_394 \The_Compare[3].carry_and_I1 
       (.Q(Q),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_2 (\Using_FPGA.MUXCY_I_1 ),
        .\Using_FPGA.MUXCY_I_3 (\Using_FPGA.MUXCY_I_2 ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .lu_mem_pre_pure_valid_tag_1(lu_mem_pre_pure_valid_tag_1));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_234
   (lu_mem_pre_pure_valid_tag_2,
    \The_Compare[0].sel_reg_17 ,
    lu_mem_valid_carry_2,
    A_18,
    \The_Compare[2].sel_reg_19 ,
    Q,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output lu_mem_pre_pure_valid_tag_2;
  input \The_Compare[0].sel_reg_17 ;
  input lu_mem_valid_carry_2;
  input A_18;
  input \The_Compare[2].sel_reg_19 ;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I ;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [1:0]\Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_18;
  wire [0:0]Q;
  wire \The_Compare[0].sel_reg_17 ;
  wire \The_Compare[2].sel_reg_19 ;
  wire \Using_FPGA.MUXCY_I ;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [1:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire lu_mem_pre_pure_valid_tag_2;
  wire lu_mem_valid_carry_2;

  Fast_IP_Clock_system_cache_0_0_carry_and_387 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_17 (\The_Compare[0].sel_reg_17 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lu_mem_valid_carry_2(lu_mem_valid_carry_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_388 \The_Compare[1].carry_and_I1 
       (.A_18(A_18),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_389 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_19 (\The_Compare[2].sel_reg_19 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_390 \The_Compare[3].carry_and_I1 
       (.Q(Q),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_2 (\Using_FPGA.MUXCY_I_1 ),
        .\Using_FPGA.MUXCY_I_3 (\Using_FPGA.MUXCY_I_2 ),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .lu_mem_pre_pure_valid_tag_2(lu_mem_pre_pure_valid_tag_2));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_251
   (lu_mem_pre_pure_valid_tag_3,
    \The_Compare[0].sel_reg_20 ,
    lu_mem_valid_carry_3,
    A_21,
    \The_Compare[2].sel_reg_22 ,
    Q,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    lookup_tag_current_word_i,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output lu_mem_pre_pure_valid_tag_3;
  input \The_Compare[0].sel_reg_20 ;
  input lu_mem_valid_carry_3;
  input A_21;
  input \The_Compare[2].sel_reg_22 ;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I ;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [1:0]lookup_tag_current_word_i;
  input \Using_FPGA.MUXCY_I_1 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire A_21;
  wire [0:0]Q;
  wire \The_Compare[0].sel_reg_20 ;
  wire \The_Compare[2].sel_reg_22 ;
  wire \Using_FPGA.MUXCY_I ;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire [1:0]lookup_tag_current_word_i;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire lu_mem_pre_pure_valid_tag_3;
  wire lu_mem_valid_carry_3;

  Fast_IP_Clock_system_cache_0_0_carry_and_383 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_20 (\The_Compare[0].sel_reg_20 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lu_mem_valid_carry_3(lu_mem_valid_carry_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_384 \The_Compare[1].carry_and_I1 
       (.A_21(A_21),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_385 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_22 (\The_Compare[2].sel_reg_22 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_386 \The_Compare[3].carry_and_I1 
       (.Q(Q),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_2 (\Using_FPGA.MUXCY_I_1 ),
        .carry_3(carry_3),
        .lookup_tag_current_word_i(lookup_tag_current_word_i),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .lu_mem_pre_pure_valid_tag_3(lu_mem_pre_pure_valid_tag_3));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const
   (wip_pop,
    write_fail_completed0,
    w_pop_safe,
    len_cnt_reg,
    Q,
    first_wr_word,
    wip_failed,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14);
  output wip_pop;
  output write_fail_completed0;
  input w_pop_safe;
  input [7:0]len_cnt_reg;
  input [7:0]Q;
  input first_wr_word;
  input wip_failed;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;
  input lopt_6;
  output lopt_7;
  output lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;
  output lopt_12;
  input lopt_13;
  input lopt_14;

  wire [7:0]Q;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire first_wr_word;
  wire [7:0]len_cnt_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire w_pop_safe;
  wire wip_failed;
  wire wip_pop;
  wire write_fail_completed0;

  Fast_IP_Clock_system_cache_0_0_carry_and_13 \The_Compare[0].carry_and_I1 
       (.Q(Q[1:0]),
        .carry_1(carry_1),
        .first_wr_word(first_wr_word),
        .len_cnt_reg(len_cnt_reg[1:0]),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .w_pop_safe(w_pop_safe));
  Fast_IP_Clock_system_cache_0_0_carry_and_14 \The_Compare[1].carry_and_I1 
       (.Q(Q[3:2]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .first_wr_word(first_wr_word),
        .len_cnt_reg(len_cnt_reg[3:2]),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5));
  Fast_IP_Clock_system_cache_0_0_carry_and_15 \The_Compare[2].carry_and_I1 
       (.Q(Q[5:4]),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .first_wr_word(first_wr_word),
        .len_cnt_reg(len_cnt_reg[5:4]),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8));
  Fast_IP_Clock_system_cache_0_0_carry_and_16 \The_Compare[3].carry_and_I1 
       (.Q(Q[7:6]),
        .carry_3(carry_3),
        .first_wr_word(first_wr_word),
        .len_cnt_reg(len_cnt_reg[7:6]),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_11),
        .lopt_3(lopt_12),
        .lopt_4(lopt_13),
        .lopt_5(lopt_14),
        .wip_failed(wip_failed),
        .wip_pop(wip_pop),
        .write_fail_completed0(write_fail_completed0));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized1
   (rd_length_zero,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output rd_length_zero;
  input [7:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire [7:0]Q;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire rd_length_zero;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = lopt_6;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  Fast_IP_Clock_system_cache_0_0_carry_and_29 \The_Compare[0].carry_and_I1 
       (.Q(Q[5:0]),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
  Fast_IP_Clock_system_cache_0_0_carry_and_30 \The_Compare[1].carry_and_I1 
       (.Q(Q[7:6]),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .rd_length_zero(rd_length_zero));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized11
   (Carry_IN,
    \Using_FPGA_Keep.MUXCY_I ,
    lru_dirty_bit,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_IN;
  input \Using_FPGA_Keep.MUXCY_I ;
  input lru_dirty_bit;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire \Using_FPGA_Keep.MUXCY_I ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lru_dirty_bit;

  Fast_IP_Clock_system_cache_0_0_carry_and_358 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .\Using_FPGA_Keep.MUXCY_I (\Using_FPGA_Keep.MUXCY_I ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lru_dirty_bit(lru_dirty_bit));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized11_309
   (Carry_IN,
    lru_protected_bit,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_IN;
  input lru_protected_bit;
  input [3:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire [3:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lru_protected_bit;

  Fast_IP_Clock_system_cache_0_0_carry_and_345 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lru_protected_bit(lru_protected_bit));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized3
   (lookup_io_data_stall,
    lookup_io_stall_valid,
    \lu_check_info_reg[Wr]__0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_io_data_stall;
  input lookup_io_stall_valid;
  input \lu_check_info_reg[Wr]__0 ;
  input [3:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;

  wire [3:0]Q;
  wire carry_1;
  wire lookup_io_data_stall;
  wire lookup_io_stall_valid;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire \lu_check_info_reg[Wr]__0 ;

  Fast_IP_Clock_system_cache_0_0_carry_and_374 \The_Compare[0].carry_and_I1 
       (.Q(Q[2:0]),
        .carry_1(carry_1),
        .lookup_io_stall_valid(lookup_io_stall_valid),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_375 \The_Compare[1].carry_and_I1 
       (.Q(Q[3]),
        .carry_1(carry_1),
        .lookup_io_data_stall(lookup_io_data_stall),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized3_301
   (dirty_bit_valid,
    dirty_bit,
    \lu_check_info_reg[Evict]__0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output dirty_bit_valid;
  input dirty_bit;
  input \lu_check_info_reg[Evict]__0 ;
  input [3:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;

  wire [3:0]Q;
  wire carry_1;
  wire dirty_bit;
  wire dirty_bit_valid;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire \lu_check_info_reg[Evict]__0 ;

  Fast_IP_Clock_system_cache_0_0_carry_and_355 \The_Compare[0].carry_and_I1 
       (.Q(Q[2:0]),
        .carry_1(carry_1),
        .dirty_bit(dirty_bit),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_356 \The_Compare[1].carry_and_I1 
       (.Q(Q[3]),
        .carry_1(carry_1),
        .dirty_bit_valid(dirty_bit_valid),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized5
   (Carry_OUT,
    \lu_check_info_reg[Wr]__0 ,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output Carry_OUT;
  input \lu_check_info_reg[Wr]__0 ;
  input [3:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;

  wire Carry_IN;
  wire Carry_OUT;
  wire [3:0]Q;
  wire carry_1;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire \lu_check_info_reg[Wr]__0 ;

  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_366 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .Carry_OUT(carry_1),
        .Q(Q[2:0]),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_367 \The_Compare[1].carry_and_I1 
       (.Carry_IN(carry_1),
        .Carry_OUT(Carry_OUT),
        .Q(Q[3]),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized7
   (Carry_Out,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_Out;
  input [3:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A0_n_0;
  wire Carry_Out;
  wire [3:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  LUT4 #(
    .INIT(16'h0001)) 
    A0
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(A0_n_0));
  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_365 \The_Compare[0].carry_and_I1 
       (.A(A0_n_0),
        .Carry_Out(Carry_Out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized7_299
   (Carry_OUT,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [3:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Carry_IN;
  wire Carry_OUT;
  wire [3:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_357 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .Carry_OUT(Carry_OUT),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized7_310
   (Carry_Out,
    Carry_In,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  input Carry_In;
  input [3:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire A0_n_0;
  wire Carry_In;
  wire Carry_Out;
  wire [3:0]Q;
  wire lopt;
  wire lopt_1;

  assign lopt_2 = A0_n_0;
  LUT4 #(
    .INIT(16'h0001)) 
    A0
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(A0_n_0));
  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_344 \The_Compare[0].carry_and_I1 
       (.A(A0_n_0),
        .Carry_In(Carry_In),
        .Carry_Out(Carry_Out),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized9
   (Carry_Out,
    Carry_In,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  input Carry_In;
  input [3:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire A0_n_0;
  wire Carry_In;
  wire Carry_Out;
  wire [3:0]Q;
  wire lopt;
  wire lopt_1;

  assign lopt_2 = A0_n_0;
  LUT4 #(
    .INIT(16'h0001)) 
    A0
       (.I0(Q[3]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(Q[2]),
        .O(A0_n_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_360 \The_Compare[0].carry_and_I1 
       (.Carry_In(Carry_In),
        .Carry_Out(Carry_Out),
        .\Using_FPGA.MUXCY_I_0 (A0_n_0),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_compare_mask_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_mask_const
   (\S_AXI_AADDR_q_reg[3] ,
    req_last,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    port_access_kind,
    access_is_wrap,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    first_part,
    use_full_length,
    p_0_in,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    DI,
    \Using_FPGA.MUXCY_I_1 ,
    write_req_last,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 );
  output \S_AXI_AADDR_q_reg[3] ;
  output req_last;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input port_access_kind;
  input access_is_wrap;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input first_part;
  input use_full_length;
  input [0:0]p_0_in;
  input [5:0]\Using_FPGA.MUXCY_I ;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [1:0]DI;
  input [1:0]\Using_FPGA.MUXCY_I_1 ;
  input write_req_last;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  wire [1:0]DI;
  wire \S_AXI_AADDR_q_reg[3] ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [5:0]\Using_FPGA.MUXCY_I ;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [1:0]\Using_FPGA.MUXCY_I_1 ;
  wire access_is_wrap;
  wire carry_1;
  wire first_part;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire [0:0]p_0_in;
  wire port_access_kind;
  wire req_last;
  wire use_full_length;
  wire write_req_last;

  Fast_IP_Clock_system_cache_0_0_carry_and_52 \The_Compare[0].carry_and_I1 
       (.DI(DI[0]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [2:0]),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .p_0_in(p_0_in));
  Fast_IP_Clock_system_cache_0_0_carry_and_53 \The_Compare[1].carry_and_I1 
       (.DI(DI[1]),
        .\S_AXI_AADDR_q_reg[3] (\S_AXI_AADDR_q_reg[3] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [5:3]),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_1 ),
        .access_is_wrap(access_is_wrap),
        .carry_1(carry_1),
        .first_part(first_part),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .port_access_kind(port_access_kind),
        .req_last(req_last),
        .use_full_length(use_full_length),
        .write_req_last(write_req_last));
endmodule

(* ORIG_REF_NAME = "carry_compare_mask_const" *) 
module Fast_IP_Clock_system_cache_0_0_carry_compare_mask_const_76
   (\S_AXI_AADDR_q_reg[3] ,
    req_last,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    port_access_kind,
    access_is_wrap,
    Carry_IN,
    first_part,
    use_full_length,
    full_line_beats,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \Using_FPGA.MUXCY_I ,
    p_0_in,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    DI,
    \Using_FPGA.MUXCY_I_0 ,
    read_req_last);
  output \S_AXI_AADDR_q_reg[3] ;
  output req_last;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input port_access_kind;
  input access_is_wrap;
  input Carry_IN;
  input first_part;
  input use_full_length;
  input [1:0]full_line_beats;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [5:0]\Using_FPGA.MUXCY_I ;
  input [0:0]p_0_in;
  input [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [1:0]DI;
  input [1:0]\Using_FPGA.MUXCY_I_0 ;
  input read_req_last;

  wire Carry_IN;
  wire [1:0]DI;
  wire \S_AXI_AADDR_q_reg[3] ;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [5:0]\Using_FPGA.MUXCY_I ;
  wire [1:0]\Using_FPGA.MUXCY_I_0 ;
  wire access_is_wrap;
  wire carry_1;
  wire first_part;
  wire [1:0]full_line_beats;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire [0:0]p_0_in;
  wire port_access_kind;
  wire read_req_last;
  wire req_last;
  wire use_full_length;

  Fast_IP_Clock_system_cache_0_0_carry_and_78 \The_Compare[0].carry_and_I1 
       (.DI(DI[0]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [2:0]),
        .\Using_FPGA.MUXCY_I_1 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .p_0_in(p_0_in));
  Fast_IP_Clock_system_cache_0_0_carry_and_79 \The_Compare[1].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .DI(DI[1]),
        .\S_AXI_AADDR_q_reg[3] (\S_AXI_AADDR_q_reg[3] ),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\Using_FPGA.MUXCY_I_0 ({\Using_FPGA.MUXCY_I [5:3],\Using_FPGA.MUXCY_I [1:0]}),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .access_is_wrap(access_is_wrap),
        .carry_1(carry_1),
        .first_part(first_part),
        .full_line_beats(full_line_beats),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .p_0_in(p_0_in),
        .port_access_kind(port_access_kind),
        .read_req_last(read_req_last),
        .req_last(req_last),
        .use_full_length(use_full_length));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and
   (E,
    p_4_out__2,
    r_pop_safe_i,
    I5,
    \Use_FPGA_2.S_AXI_RVALID_i_2 ,
    r_hit_fifo_almost_empty,
    I4);
  output [0:0]E;
  output p_4_out__2;
  input r_pop_safe_i;
  input I5;
  input [0:0]\Use_FPGA_2.S_AXI_RVALID_i_2 ;
  input r_hit_fifo_almost_empty;
  input I4;

  wire [0:0]E;
  wire I4;
  wire I5;
  wire SRI;
  wire [0:0]\Use_FPGA_2.S_AXI_RVALID_i_2 ;
  wire p_4_out__2;
  wire r_hit_fifo_almost_empty;
  wire r_pop_safe_i;

  LUT4 #(
    .INIT(16'hAABF)) 
    \Use_FPGA_2.S_AXI_RVALID_i_3 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_i_2 ),
        .I1(E),
        .I2(r_hit_fifo_almost_empty),
        .I3(I4),
        .O(p_4_out__2));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(r_pop_safe_i),
        .O(E),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__10 
       (.I0(I5),
        .O(SRI));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_100
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ctrl_ready_i_reg,
    reduce_or4_out,
    S,
    \ctrl_access_i_reg[Valid] ,
    D,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    \arb_access_i_reg[Port_Num][0] ,
    SRI,
    ctrl_ready_i_reg_0,
    \arb_access_i_reg[Len][6] ,
    \ctrl_access[Internal_Cmd] ,
    access_piperun,
    Q,
    port_ready_0,
    \arb_access_i_reg[Len][7] ,
    S0_AXI_ARLEN,
    \rd_port_access[1][Len] ,
    \arb_access_i_reg[Len][6]_0 ,
    wr_port_ready_cmb_0,
    \arb_access_i_reg[Port_Num][0]_0 ,
    \arb_access_i_reg[Port_Num][0]_1 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output ctrl_ready_i_reg;
  output reduce_or4_out;
  output S;
  output \ctrl_access_i_reg[Valid] ;
  output [1:0]D;
  output \Using_FPGA.MUXCY_I ;
  output \Using_FPGA.MUXCY_I_0 ;
  input \arb_access_i_reg[Port_Num][0] ;
  input SRI;
  input ctrl_ready_i_reg_0;
  input \arb_access_i_reg[Len][6] ;
  input \ctrl_access[Internal_Cmd] ;
  input access_piperun;
  input Q;
  input port_ready_0;
  input \arb_access_i_reg[Len][7] ;
  input [1:0]S0_AXI_ARLEN;
  input [1:0]\rd_port_access[1][Len] ;
  input \arb_access_i_reg[Len][6]_0 ;
  input wr_port_ready_cmb_0;
  input \arb_access_i_reg[Port_Num][0]_0 ;
  input \arb_access_i_reg[Port_Num][0]_1 ;

  wire [1:0]D;
  wire Q;
  wire S;
  wire [1:0]S0_AXI_ARLEN;
  wire SRI;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire access_piperun;
  wire \arb_access_i_reg[Len][6] ;
  wire \arb_access_i_reg[Len][6]_0 ;
  wire \arb_access_i_reg[Len][7] ;
  wire \arb_access_i_reg[Port_Num][0] ;
  wire \arb_access_i_reg[Port_Num][0]_0 ;
  wire \arb_access_i_reg[Port_Num][0]_1 ;
  wire \ctrl_access[Internal_Cmd] ;
  wire \ctrl_access_i_reg[Valid] ;
  wire ctrl_ready_i_reg;
  wire ctrl_ready_i_reg_0;
  wire port_ready_0;
  wire [1:0]\rd_port_access[1][Len] ;
  wire reduce_or4_out;
  wire wr_port_ready_cmb_0;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(\arb_access_i_reg[Port_Num][0] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__152 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(S));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \arb_access_i[Len][6]_i_1 
       (.I0(\arb_access_i_reg[Len][6]_0 ),
        .I1(reduce_or4_out),
        .I2(\arb_access_i_reg[Len][6] ),
        .I3(S0_AXI_ARLEN[0]),
        .I4(\arb_access_i_reg[Port_Num][0] ),
        .I5(\rd_port_access[1][Len] [0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hB8B8B8888888B888)) 
    \arb_access_i[Len][7]_i_1 
       (.I0(\arb_access_i_reg[Len][7] ),
        .I1(reduce_or4_out),
        .I2(\arb_access_i_reg[Len][6] ),
        .I3(S0_AXI_ARLEN[1]),
        .I4(\arb_access_i_reg[Port_Num][0] ),
        .I5(\rd_port_access[1][Len] [1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \arb_access_i[Port_Num][0]_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(wr_port_ready_cmb_0),
        .I2(\arb_access_i_reg[Port_Num][0]_0 ),
        .I3(\arb_access_i_reg[Port_Num][0]_1 ),
        .I4(\arb_access_i_reg[Port_Num][0] ),
        .O(\Using_FPGA.MUXCY_I ));
  LUT6 #(
    .INIT(64'hFCA8FCA8FCFDFCA8)) 
    \arb_access_i[Valid]_i_1 
       (.I0(reduce_or4_out),
        .I1(\arb_access_i_reg[Port_Num][0] ),
        .I2(port_ready_0),
        .I3(\arb_access_i_reg[Len][6] ),
        .I4(\ctrl_access[Internal_Cmd] ),
        .I5(ctrl_ready_i_reg_0),
        .O(\ctrl_access_i_reg[Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Valid]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(wr_port_ready_cmb_0),
        .O(reduce_or4_out));
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Wr]_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(wr_port_ready_cmb_0),
        .O(\Using_FPGA.MUXCY_I_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAA9A80000)) 
    ctrl_ready_i_i_1
       (.I0(ctrl_ready_i_reg_0),
        .I1(reduce_or4_out),
        .I2(\arb_access_i_reg[Len][6] ),
        .I3(\ctrl_access[Internal_Cmd] ),
        .I4(access_piperun),
        .I5(Q),
        .O(ctrl_ready_i_reg));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_256
   (ENA,
    lud_step_want_step_offset,
    SRI);
  output ENA;
  input lud_step_want_step_offset;
  input SRI;

  wire ENA;
  wire SRI;
  wire lud_step_want_step_offset;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lud_step_want_step_offset),
        .O(ENA),
        .SRI(SRI));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_26
   (E,
    lud_addr_pipeline_full0,
    p_4_out__2,
    r_pop_safe_i,
    lud_addr_pipeline_full_reg,
    p_95_in,
    lud_addr_pipeline_full_reg_0,
    lud_addr_pipeline_full_reg_1,
    lud_addr_pipeline_full_reg_2,
    lud_addr_pipeline_full_reg_3,
    lud_reg_port_num,
    lud_addr_pipeline_full_reg_4,
    \read_data_status[0,1][Hit_Almost_Full] ,
    \read_data_status[0,0][Hit_Almost_Full] ,
    lud_addr_pipeline_full_reg_5,
    lud_addr_pipeline_full_reg_6,
    I5,
    \Use_FPGA_2.S_AXI_RVALID_i_2__0 ,
    I4,
    r_hit_fifo_almost_empty);
  output [0:0]E;
  output lud_addr_pipeline_full0;
  output p_4_out__2;
  input r_pop_safe_i;
  input lud_addr_pipeline_full_reg;
  input p_95_in;
  input lud_addr_pipeline_full_reg_0;
  input [0:0]lud_addr_pipeline_full_reg_1;
  input lud_addr_pipeline_full_reg_2;
  input lud_addr_pipeline_full_reg_3;
  input lud_reg_port_num;
  input lud_addr_pipeline_full_reg_4;
  input \read_data_status[0,1][Hit_Almost_Full] ;
  input \read_data_status[0,0][Hit_Almost_Full] ;
  input lud_addr_pipeline_full_reg_5;
  input [0:0]lud_addr_pipeline_full_reg_6;
  input I5;
  input [0:0]\Use_FPGA_2.S_AXI_RVALID_i_2__0 ;
  input I4;
  input r_hit_fifo_almost_empty;

  wire [0:0]E;
  wire I4;
  wire I5;
  wire SRI;
  wire [0:0]\Use_FPGA_2.S_AXI_RVALID_i_2__0 ;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_i_3_n_0;
  wire lud_addr_pipeline_full_i_4_n_0;
  wire lud_addr_pipeline_full_i_6_n_0;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_pipeline_full_reg_0;
  wire [0:0]lud_addr_pipeline_full_reg_1;
  wire lud_addr_pipeline_full_reg_2;
  wire lud_addr_pipeline_full_reg_3;
  wire lud_addr_pipeline_full_reg_4;
  wire lud_addr_pipeline_full_reg_5;
  wire [0:0]lud_addr_pipeline_full_reg_6;
  wire lud_reg_port_num;
  wire p_4_out__2;
  wire p_95_in;
  wire r_hit_fifo_almost_empty;
  wire r_pop_safe_i;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;

  LUT4 #(
    .INIT(16'hABBB)) 
    \Use_FPGA_2.S_AXI_RVALID_i_3__0 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_i_2__0 ),
        .I1(I4),
        .I2(r_hit_fifo_almost_empty),
        .I3(E),
        .O(p_4_out__2));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(r_pop_safe_i),
        .O(E),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__11 
       (.I0(I5),
        .O(SRI));
  LUT6 #(
    .INIT(64'hFFFFFFFF4450FF50)) 
    lud_addr_pipeline_full_i_1
       (.I0(lud_addr_pipeline_full_reg),
        .I1(lud_addr_pipeline_full_i_3_n_0),
        .I2(lud_addr_pipeline_full_i_4_n_0),
        .I3(p_95_in),
        .I4(lud_addr_pipeline_full_i_6_n_0),
        .I5(lud_addr_pipeline_full_reg_0),
        .O(lud_addr_pipeline_full0));
  LUT5 #(
    .INIT(32'h20202F20)) 
    lud_addr_pipeline_full_i_3
       (.I0(lud_addr_pipeline_full_reg_3),
        .I1(E),
        .I2(lud_addr_pipeline_full_reg_6),
        .I3(lud_addr_pipeline_full_reg_4),
        .I4(lud_addr_pipeline_full_reg_1),
        .O(lud_addr_pipeline_full_i_3_n_0));
  LUT6 #(
    .INIT(64'h5000303050000000)) 
    lud_addr_pipeline_full_i_4
       (.I0(E),
        .I1(lud_addr_pipeline_full_reg_1),
        .I2(lud_addr_pipeline_full_reg_2),
        .I3(lud_addr_pipeline_full_reg_3),
        .I4(lud_reg_port_num),
        .I5(lud_addr_pipeline_full_reg_4),
        .O(lud_addr_pipeline_full_i_4_n_0));
  LUT6 #(
    .INIT(64'h000047FF47FF47FF)) 
    lud_addr_pipeline_full_i_6
       (.I0(\read_data_status[0,1][Hit_Almost_Full] ),
        .I1(lud_reg_port_num),
        .I2(\read_data_status[0,0][Hit_Almost_Full] ),
        .I3(lud_addr_pipeline_full_reg_5),
        .I4(lud_addr_pipeline_full_i_3_n_0),
        .I5(lud_addr_pipeline_full_reg_2),
        .O(lud_addr_pipeline_full_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_298
   (WEBWE,
    lu_check_piperun,
    SRI);
  output [0:0]WEBWE;
  input lu_check_piperun;
  input SRI;

  wire SRI;
  wire [0:0]WEBWE;
  wire lu_check_piperun;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lu_check_piperun),
        .O(WEBWE),
        .SRI(SRI));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_92
   (\arb_prohibit_read_reg[0] ,
    arb_prohibit_read,
    \S0_AXI_ARADDR[23] ,
    \S0_AXI_ARADDR[22] ,
    \S0_AXI_ARADDR[19] ,
    \S0_AXI_ARADDR[20] ,
    \S0_AXI_ARADDR[21] ,
    \S0_AXI_ARADDR[16] ,
    \S0_AXI_ARADDR[17] ,
    \S0_AXI_ARADDR[18] ,
    \S0_AXI_ARADDR[15] ,
    S0_AXI_ARADDR_5_sp_1,
    S0_AXI_ARADDR_4_sp_1,
    S0_AXI_ARADDR_3_sp_1,
    S0_AXI_ARADDR_2_sp_1,
    S0_AXI_ARADDR_1_sp_1,
    S0_AXI_ARADDR_0_sp_1,
    \S0_AXI_ARSIZE[2] ,
    S0_AXI_ARSIZE_0_sp_1,
    port_ready_0,
    \Using_FPGA.AND2B1L_Inst1_0 ,
    any_port_forbid_0,
    S0_AXI_ARVALID,
    read_req_ready,
    access_piperun,
    \arb_access_i_reg[Size][0] ,
    S0_AXI_ARADDR,
    \arb_access_i_reg[Size][0]_0 ,
    \rd_port_access[1][Addr] ,
    S0_AXI_ARSIZE,
    \rd_port_access[1][Allocate] ,
    \port_access_q[Size] );
  output \arb_prohibit_read_reg[0] ;
  output [0:0]arb_prohibit_read;
  output \S0_AXI_ARADDR[23] ;
  output \S0_AXI_ARADDR[22] ;
  output \S0_AXI_ARADDR[19] ;
  output \S0_AXI_ARADDR[20] ;
  output \S0_AXI_ARADDR[21] ;
  output \S0_AXI_ARADDR[16] ;
  output \S0_AXI_ARADDR[17] ;
  output \S0_AXI_ARADDR[18] ;
  output \S0_AXI_ARADDR[15] ;
  output S0_AXI_ARADDR_5_sp_1;
  output S0_AXI_ARADDR_4_sp_1;
  output S0_AXI_ARADDR_3_sp_1;
  output S0_AXI_ARADDR_2_sp_1;
  output S0_AXI_ARADDR_1_sp_1;
  output S0_AXI_ARADDR_0_sp_1;
  output \S0_AXI_ARSIZE[2] ;
  output S0_AXI_ARSIZE_0_sp_1;
  input port_ready_0;
  input \Using_FPGA.AND2B1L_Inst1_0 ;
  input any_port_forbid_0;
  input S0_AXI_ARVALID;
  input read_req_ready;
  input access_piperun;
  input \arb_access_i_reg[Size][0] ;
  input [14:0]S0_AXI_ARADDR;
  input \arb_access_i_reg[Size][0]_0 ;
  input [14:0]\rd_port_access[1][Addr] ;
  input [1:0]S0_AXI_ARSIZE;
  input \rd_port_access[1][Allocate] ;
  input [1:0]\port_access_q[Size] ;

  wire \Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst/S ;
  wire [14:0]S0_AXI_ARADDR;
  wire \S0_AXI_ARADDR[15] ;
  wire \S0_AXI_ARADDR[16] ;
  wire \S0_AXI_ARADDR[17] ;
  wire \S0_AXI_ARADDR[18] ;
  wire \S0_AXI_ARADDR[19] ;
  wire \S0_AXI_ARADDR[20] ;
  wire \S0_AXI_ARADDR[21] ;
  wire \S0_AXI_ARADDR[22] ;
  wire \S0_AXI_ARADDR[23] ;
  wire S0_AXI_ARADDR_0_sn_1;
  wire S0_AXI_ARADDR_1_sn_1;
  wire S0_AXI_ARADDR_2_sn_1;
  wire S0_AXI_ARADDR_3_sn_1;
  wire S0_AXI_ARADDR_4_sn_1;
  wire S0_AXI_ARADDR_5_sn_1;
  wire [1:0]S0_AXI_ARSIZE;
  wire \S0_AXI_ARSIZE[2] ;
  wire S0_AXI_ARSIZE_0_sn_1;
  wire S0_AXI_ARVALID;
  wire \Using_FPGA.AND2B1L_Inst1_0 ;
  wire access_piperun;
  wire any_port_forbid_0;
  wire \arb_access_i_reg[Size][0] ;
  wire \arb_access_i_reg[Size][0]_0 ;
  wire [0:0]arb_prohibit_read;
  wire \arb_prohibit_read_reg[0] ;
  wire [1:0]\port_access_q[Size] ;
  wire port_ready_0;
  wire [14:0]\rd_port_access[1][Addr] ;
  wire \rd_port_access[1][Allocate] ;
  wire read_req_ready;

  assign S0_AXI_ARADDR_0_sp_1 = S0_AXI_ARADDR_0_sn_1;
  assign S0_AXI_ARADDR_1_sp_1 = S0_AXI_ARADDR_1_sn_1;
  assign S0_AXI_ARADDR_2_sp_1 = S0_AXI_ARADDR_2_sn_1;
  assign S0_AXI_ARADDR_3_sp_1 = S0_AXI_ARADDR_3_sn_1;
  assign S0_AXI_ARADDR_4_sp_1 = S0_AXI_ARADDR_4_sn_1;
  assign S0_AXI_ARADDR_5_sp_1 = S0_AXI_ARADDR_5_sn_1;
  assign S0_AXI_ARSIZE_0_sp_1 = S0_AXI_ARSIZE_0_sn_1;
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_i_1 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(access_piperun),
        .O(arb_prohibit_read));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(port_ready_0),
        .O(\arb_prohibit_read_reg[0] ),
        .SRI(\Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst/S ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__6 
       (.I0(\Using_FPGA.AND2B1L_Inst1_0 ),
        .I1(any_port_forbid_0),
        .I2(S0_AXI_ARVALID),
        .I3(read_req_ready),
        .O(\Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst/S ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][0]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[0]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [0]),
        .O(S0_AXI_ARADDR_0_sn_1));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][15]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[6]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [6]),
        .O(\S0_AXI_ARADDR[15] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][16]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[7]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [7]),
        .O(\S0_AXI_ARADDR[16] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][17]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[8]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [8]),
        .O(\S0_AXI_ARADDR[17] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][18]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[9]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [9]),
        .O(\S0_AXI_ARADDR[18] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][19]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[10]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [10]),
        .O(\S0_AXI_ARADDR[19] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][1]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[1]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [1]),
        .O(S0_AXI_ARADDR_1_sn_1));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][20]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[11]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [11]),
        .O(\S0_AXI_ARADDR[20] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][21]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[12]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [12]),
        .O(\S0_AXI_ARADDR[21] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][22]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[13]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [13]),
        .O(\S0_AXI_ARADDR[22] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][23]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[14]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [14]),
        .O(\S0_AXI_ARADDR[23] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][2]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[2]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [2]),
        .O(S0_AXI_ARADDR_2_sn_1));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][3]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[3]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [3]),
        .O(S0_AXI_ARADDR_3_sn_1));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][4]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[4]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [4]),
        .O(S0_AXI_ARADDR_4_sn_1));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][5]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARADDR[5]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Addr] [5]),
        .O(S0_AXI_ARADDR_5_sn_1));
  LUT6 #(
    .INIT(64'h00E0EEE000E000E0)) 
    \arb_access_i[Size][0]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARSIZE[0]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Allocate] ),
        .I5(\port_access_q[Size] [0]),
        .O(S0_AXI_ARSIZE_0_sn_1));
  LUT6 #(
    .INIT(64'h00E0EEE000E000E0)) 
    \arb_access_i[Size][2]_i_2 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\arb_access_i_reg[Size][0] ),
        .I2(S0_AXI_ARSIZE[1]),
        .I3(\arb_access_i_reg[Size][0]_0 ),
        .I4(\rd_port_access[1][Allocate] ),
        .I5(\port_access_q[Size] [1]),
        .O(\S0_AXI_ARSIZE[2] ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized1
   (exclusive_too_long_i,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    exclusive_too_long,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    access_piperun,
    access_valid,
    port_ready,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    write_req_failed,
    lopt,
    lopt_1,
    lopt_2);
  output exclusive_too_long_i;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input exclusive_too_long;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input access_piperun;
  input access_valid;
  input port_ready;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input write_req_failed;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire access_piperun;
  wire access_valid;
  wire exclusive_too_long;
  wire exclusive_too_long_i;
  wire port_ready;
  wire write_req_failed;

  assign exclusive_too_long_i = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h555555550C00CCCC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__12 
       (.I0(exclusive_too_long_i),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(access_piperun),
        .I3(access_valid),
        .I4(port_ready),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__25 
       (.I0(exclusive_too_long_i),
        .I1(write_req_failed),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized3
   (port_access_kind,
    fit_lx_line_n_i,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Carry_IN_0,
    access_is_wrap,
    \wr_port_access[1][Kind] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output port_access_kind;
  output fit_lx_line_n_i;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Carry_IN_0;
  input access_is_wrap;
  input \wr_port_access[1][Kind] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \<const0> ;
  wire \<const1> ;
  wire Carry_IN_0;
  wire DI;
  wire SRI;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire access_is_wrap;
  wire fit_lx_line_n_i;
  wire port_access_kind;
  wire \wr_port_access[1][Kind] ;

  assign DI = lopt_3;
  assign fit_lx_line_n_i = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__22 
       (.I0(port_access_kind),
        .I1(\wr_port_access[1][Kind] ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(DI),
        .O(port_access_kind),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__7 
       (.I0(access_is_wrap),
        .O(SRI));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized3_77
   (port_access_kind,
    fit_lx_line_n_i,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Carry_IN_0,
    access_is_wrap,
    \rd_port_access[1][Kind] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output port_access_kind;
  output fit_lx_line_n_i;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Carry_IN_0;
  input access_is_wrap;
  input \rd_port_access[1][Kind] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \<const0> ;
  wire \<const1> ;
  wire Carry_IN_0;
  wire DI;
  wire SRI;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire access_is_wrap;
  wire fit_lx_line_n_i;
  wire port_access_kind;
  wire \rd_port_access[1][Kind] ;

  assign DI = lopt_3;
  assign fit_lx_line_n_i = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__28 
       (.I0(port_access_kind),
        .I1(\rd_port_access[1][Kind] ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(DI),
        .O(port_access_kind),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__8 
       (.I0(access_is_wrap),
        .O(SRI));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized6
   (lud_mem_waiting_for_pipe_reg,
    lookup_data_en_ii_2,
    SRI,
    lud_step_want_step_offset);
  output lud_mem_waiting_for_pipe_reg;
  output lookup_data_en_ii_2;
  input SRI;
  input lud_step_want_step_offset;

  wire SRI;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire lookup_data_en_ii_2;
  wire lud_mem_waiting_for_pipe_reg;
  wire lud_step_want_step_offset;
  wire [3:0]\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lookup_data_en_ii_2),
        .O(lud_mem_waiting_for_pipe_reg),
        .SRI(SRI));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4 
       (.CI(lud_step_want_step_offset),
        .CO({lookup_data_en_ii_2,carry_pad_3,carry_pad_2,carry_pad_1}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({1'b1,1'b1,1'b1,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized6_257
   (lud_mem_waiting_for_pipe_reg,
    lookup_data_en_ii_3,
    SRI,
    lookup_data_en_ii_2);
  output lud_mem_waiting_for_pipe_reg;
  output lookup_data_en_ii_3;
  input SRI;
  input lookup_data_en_ii_2;

  wire SRI;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire lookup_data_en_ii_2;
  wire lookup_data_en_ii_3;
  wire lud_mem_waiting_for_pipe_reg;
  wire [3:0]\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lookup_data_en_ii_3),
        .O(lud_mem_waiting_for_pipe_reg),
        .SRI(SRI));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4 
       (.CI(lookup_data_en_ii_2),
        .CO({lookup_data_en_ii_3,carry_pad_3,carry_pad_2,carry_pad_1}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({1'b1,1'b1,1'b1,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized6_258
   (lud_mem_waiting_for_pipe_reg,
    lookup_data_en_ii_4,
    SRI,
    lookup_data_en_ii_3);
  output lud_mem_waiting_for_pipe_reg;
  output lookup_data_en_ii_4;
  input SRI;
  input lookup_data_en_ii_3;

  wire SRI;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire lookup_data_en_ii_3;
  wire lookup_data_en_ii_4;
  wire lud_mem_waiting_for_pipe_reg;
  wire [3:0]\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lookup_data_en_ii_4),
        .O(lud_mem_waiting_for_pipe_reg),
        .SRI(SRI));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4 
       (.CI(lookup_data_en_ii_3),
        .CO({lookup_data_en_ii_4,carry_pad_3,carry_pad_2,carry_pad_1}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({1'b1,1'b1,1'b1,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_n
   (O,
    Carry_OUT,
    A_N,
    update_word_cnt_en,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output O;
  output Carry_OUT;
  input A_N;
  input update_word_cnt_en;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;

  wire A_N;
  wire Carry_OUT;
  wire O;
  wire carry_pad_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire lopt_4;
  wire update_word_cnt_en;
  wire [3:0]\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_4;
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_OUT),
        .O(O),
        .SRI(A_N));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4 
       (.CI(update_word_cnt_en),
        .CO({lopt_4,\^lopt_1 ,Carry_OUT,carry_pad_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_2 ,\^lopt_2 ,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_3 ,\^lopt_3 ,1'b1,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1
   (\ri_way_reg[1] ,
    Carry_OUT,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output \ri_way_reg[1] ;
  output Carry_OUT;
  input A_N;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;

  wire \<const0> ;
  wire \<const1> ;
  wire A_N;
  wire Carry_IN;
  wire Carry_OUT;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \ri_way_reg[1] ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_5;
  assign \^lopt_3  = lopt_6;
  assign carry_pad_1 = lopt;
  assign carry_pad_2 = lopt_3;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign lopt_4 = \^lopt_1 ;
  assign lopt_7 = \^lopt_4 ;
  GND GND
       (.G(\<const0> ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_OUT),
        .O(\ri_way_reg[1] ),
        .SRI(A_N));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4 
       (.CI(carry_pad_2),
        .CO({\^lopt_4 ,\^lopt_1 ,Carry_OUT,carry_pad_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_2 ,\^lopt_2 ,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_3 ,\^lopt_3 ,1'b1,1'b1}));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1_117
   (\ri_way_reg[0] ,
    Carry_OUT,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output \ri_way_reg[0] ;
  output Carry_OUT;
  input A_N;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;

  wire \<const0> ;
  wire \<const1> ;
  wire A_N;
  wire Carry_IN;
  wire Carry_OUT;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \ri_way_reg[0] ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_5;
  assign \^lopt_3  = lopt_6;
  assign carry_pad_1 = lopt;
  assign carry_pad_2 = lopt_3;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign lopt_4 = \^lopt_1 ;
  assign lopt_7 = \^lopt_4 ;
  GND GND
       (.G(\<const0> ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_OUT),
        .O(\ri_way_reg[0] ),
        .SRI(A_N));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4 
       (.CI(carry_pad_2),
        .CO({\^lopt_4 ,\^lopt_1 ,Carry_OUT,carry_pad_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_2 ,\^lopt_2 ,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_3 ,\^lopt_3 ,1'b1,1'b1}));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1_118
   (\ri_way_reg[1] ,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output \ri_way_reg[1] ;
  input A_N;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \<const0> ;
  wire \<const1> ;
  wire A_N;
  wire Carry_IN;
  wire \Using_FPGA.The_Pad[3].MUXCY_Inst_n_0 ;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire \ri_way_reg[1] ;
  wire [3:2]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_S_UNCONNECTED ;

  assign carry_pad_1 = lopt;
  assign carry_pad_2 = lopt_3;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(\Using_FPGA.The_Pad[3].MUXCY_Inst_n_0 ),
        .O(\ri_way_reg[1] ),
        .SRI(A_N));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4 
       (.CI(carry_pad_2),
        .CO({\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_CO_UNCONNECTED [3:2],\Using_FPGA.The_Pad[3].MUXCY_Inst_n_0 ,carry_pad_3}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_S_UNCONNECTED [3:2],1'b1,1'b1}));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1_150
   (O,
    Carry_OUT,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output O;
  output Carry_OUT;
  input A_N;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;

  wire \<const0> ;
  wire \<const1> ;
  wire A_N;
  wire Carry_IN;
  wire Carry_OUT;
  wire O;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_5;
  assign \^lopt_3  = lopt_6;
  assign \^lopt_5  = lopt_8;
  assign \^lopt_6  = lopt_9;
  assign carry_pad_1 = lopt;
  assign carry_pad_2 = lopt_3;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign lopt_4 = \^lopt_1 ;
  assign lopt_7 = \^lopt_4 ;
  GND GND
       (.G(\<const0> ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_OUT),
        .O(O),
        .SRI(A_N));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4 
       (.CI(carry_pad_2),
        .CO({\^lopt_4 ,\^lopt_1 ,Carry_OUT,carry_pad_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_5 ,\^lopt_2 ,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_6 ,\^lopt_3 ,1'b1,1'b1}));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized3
   (backend_rd_data_pop,
    update_remove_locked,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Carry_IN,
    M0_AXI_RLAST,
    update_lock_release_reg,
    ri_allocate,
    CO,
    update_valid,
    update_need_tag_write,
    update_readback_available_reg,
    update_readback_available_reg_0);
  output backend_rd_data_pop;
  output update_remove_locked;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Carry_IN;
  input M0_AXI_RLAST;
  input update_lock_release_reg;
  input ri_allocate;
  input [0:0]CO;
  input update_valid;
  input update_need_tag_write;
  input update_readback_available_reg;
  input update_readback_available_reg_0;

  wire [0:0]CO;
  wire Carry_IN;
  wire M0_AXI_RLAST;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Using_FPGA.AND2B1L_Inst1_i_1__4_n_0 ;
  wire backend_rd_data_pop;
  wire ri_allocate;
  wire update_lock_release_reg;
  wire update_need_tag_write;
  wire update_readback_available_reg;
  wire update_readback_available_reg_0;
  wire update_remove_locked;
  wire update_valid;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_IN),
        .O(backend_rd_data_pop),
        .SRI(\Using_FPGA.AND2B1L_Inst1_i_1__4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__4 
       (.I0(M0_AXI_RLAST),
        .O(\Using_FPGA.AND2B1L_Inst1_i_1__4_n_0 ));
  LUT4 #(
    .INIT(16'h0080)) 
    update_lock_release_i_1
       (.I0(update_lock_release_reg),
        .I1(ri_allocate),
        .I2(backend_rd_data_pop),
        .I3(CO),
        .O(update_remove_locked));
  LUT6 #(
    .INIT(64'hFFFFF3FF50505050)) 
    update_readback_available_i_1
       (.I0(backend_rd_data_pop),
        .I1(update_valid),
        .I2(update_lock_release_reg),
        .I3(update_need_tag_write),
        .I4(update_readback_available_reg),
        .I5(update_readback_available_reg_0),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_or
   (O,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    access_piperun,
    A_0,
    CE,
    CE_0);
  output O;
  output \Using_FPGA.MUXCY_I ;
  output \Using_FPGA.MUXCY_I_0 ;
  input access_piperun;
  input A_0;
  input [0:0]CE;
  input [0:0]CE_0;

  wire A_0;
  wire [0:0]CE;
  wire [0:0]CE_0;
  wire O;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire access_piperun;

  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_1__1 
       (.I0(O),
        .I1(CE),
        .O(\Using_FPGA.MUXCY_I ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_1__3 
       (.I0(O),
        .I1(CE_0),
        .O(\Using_FPGA.MUXCY_I_0 ));
  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(access_piperun),
        .O(O),
        .SRI(A_0));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_or__parameterized1
   (E,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 );
  output [0:0]E;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  wire [0:0]E;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(E),
        .SRI(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_or__parameterized1_317
   (E,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ,
    A35_out);
  output [0:0]E;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ;
  input A35_out;

  wire A35_out;
  wire [0:0]E;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ;

  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .O(E),
        .SRI(A35_out));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_latch_or__parameterized1_409
   (SR,
    ar_pop_i,
    Q);
  output [0:0]SR;
  input ar_pop_i;
  input Q;

  wire Q;
  wire [0:0]SR;
  wire ar_pop_i;

  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(ar_pop_i),
        .O(SR),
        .SRI(Q));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or
   (w_ready,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output w_ready;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire w_ready;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,w_ready}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_11
   (w_ready,
    S_4,
    w_fail_ready,
    lopt,
    lopt_1);
  output w_ready;
  input S_4;
  input w_fail_ready;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_4;
  wire w_fail_ready;
  wire w_ready;

  assign lopt_1 = \<const1> ;
  assign w_ready = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_122
   (p_0_in5_out,
    update_tag_remove_lock_0,
    update_cur_tag_way,
    \Using_FPGA.MUXCY_I_0 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ,
    Q,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ,
    update_need_tag_write,
    update_word_cnt_almost_last,
    lopt,
    lopt_1,
    lopt_2);
  output p_0_in5_out;
  input update_tag_remove_lock_0;
  input [0:0]update_cur_tag_way;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I_1 ;
  input [0:0]\Using_FPGA.MUXCY_I_2 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ;
  input update_need_tag_write;
  input update_word_cnt_almost_last;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ;
  wire [0:0]Q;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire [0:0]\Using_FPGA.MUXCY_I_2 ;
  wire p_0_in5_out;
  wire [0:0]update_cur_tag_way;
  wire update_need_tag_write;
  wire update_tag_remove_lock_0;
  wire [0:0]update_tag_we;
  wire update_word_cnt_almost_last;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign update_tag_we = lopt;
  LUT5 #(
    .INIT(32'hAAAA8A88)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_2 
       (.I0(update_tag_we),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 ),
        .I3(update_need_tag_write),
        .I4(update_word_cnt_almost_last),
        .O(p_0_in5_out));
  LUT6 #(
    .INIT(64'hFFFBFFFFFFFBFBFB)) 
    \Using_FPGA.MUXCY_I_i_1__5 
       (.I0(update_cur_tag_way),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] ),
        .I3(Q),
        .I4(\Using_FPGA.MUXCY_I_1 ),
        .I5(\Using_FPGA.MUXCY_I_2 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_127
   (p_0_in4_out,
    update_tag_remove_lock_1,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29]_0 ,
    update_need_tag_write,
    update_word_cnt_almost_last,
    \Using_FPGA.MUXCY_I_0 ,
    Q,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    update_cur_tag_way,
    lopt,
    lopt_1,
    lopt_2);
  output p_0_in4_out;
  input update_tag_remove_lock_1;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29]_0 ;
  input update_need_tag_write;
  input update_word_cnt_almost_last;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I_1 ;
  input [0:0]\Using_FPGA.MUXCY_I_2 ;
  input [0:0]update_cur_tag_way;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29]_0 ;
  wire [0:0]Q;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire [0:0]\Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_i_1__192_n_0 ;
  wire p_0_in4_out;
  wire [0:0]update_cur_tag_way;
  wire update_need_tag_write;
  wire update_tag_remove_lock_1;
  wire [1:1]update_tag_we;
  wire update_word_cnt_almost_last;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__192_n_0 ;
  assign update_tag_we = lopt;
  LUT5 #(
    .INIT(32'hFFBA0000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_i_1 
       (.I0(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] ),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29]_0 ),
        .I2(update_need_tag_write),
        .I3(update_word_cnt_almost_last),
        .I4(update_tag_we),
        .O(p_0_in4_out));
  LUT6 #(
    .INIT(64'hFDFFFDDDFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__192 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] ),
        .I2(Q),
        .I3(\Using_FPGA.MUXCY_I_1 ),
        .I4(\Using_FPGA.MUXCY_I_2 ),
        .I5(update_cur_tag_way),
        .O(\Using_FPGA.MUXCY_I_i_1__192_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_132
   (update_cur_tag_way,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    p_0_in2_out,
    update_tag_remove_lock_2,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ,
    update_valid,
    \Using_FPGA.MUXCY_I_i_1__5 ,
    update_need_tag_write,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ,
    update_word_cnt_almost_last,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]update_cur_tag_way;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output p_0_in2_out;
  input update_tag_remove_lock_2;
  input [1:0]Q;
  input [1:0]\Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  input update_valid;
  input \Using_FPGA.MUXCY_I_i_1__5 ;
  input update_need_tag_write;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ;
  input update_word_cnt_almost_last;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ;
  wire [1:0]Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [1:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__5 ;
  wire p_0_in2_out;
  wire [0:0]update_cur_tag_way;
  wire update_need_tag_write;
  wire update_tag_remove_lock_2;
  wire [2:2]update_tag_we;
  wire update_valid;
  wire update_word_cnt_almost_last;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign update_tag_we = lopt;
  LUT5 #(
    .INIT(32'hFFBA0000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_i_1 
       (.I0(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ),
        .I2(update_need_tag_write),
        .I3(update_word_cnt_almost_last),
        .I4(update_tag_we),
        .O(p_0_in2_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFBABFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__6 
       (.I0(update_cur_tag_way),
        .I1(Q[1]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I3(\Using_FPGA.MUXCY_I_0 [1]),
        .I4(\Using_FPGA.MUXCY_I_1 ),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .O(S));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Using_FPGA.MUXCY_I_i_2__0 
       (.I0(Q[0]),
        .I1(update_valid),
        .I2(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .I3(\Using_FPGA.MUXCY_I_1 ),
        .I4(\Using_FPGA.MUXCY_I_i_1__5 ),
        .I5(\Using_FPGA.MUXCY_I_0 [0]),
        .O(update_cur_tag_way));
  LUT5 #(
    .INIT(32'hFFDFCCCC)) 
    \Using_FPGA.MUXCY_I_i_3__0 
       (.I0(update_valid),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .I2(update_need_tag_write),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ),
        .I4(\Using_FPGA.MUXCY_I_i_1__5 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_137
   (p_0_in0_out,
    update_tag_remove_lock_3,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59]_0 ,
    update_need_tag_write,
    update_word_cnt_almost_last,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    update_cur_tag_way,
    lopt,
    lopt_1,
    lopt_2);
  output p_0_in0_out;
  input update_tag_remove_lock_3;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59]_0 ;
  input update_need_tag_write;
  input update_word_cnt_almost_last;
  input [0:0]Q;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input [0:0]update_cur_tag_way;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59]_0 ;
  wire [0:0]Q;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_i_1__193_n_0 ;
  wire p_0_in0_out;
  wire [0:0]update_cur_tag_way;
  wire update_need_tag_write;
  wire update_tag_remove_lock_3;
  wire [3:3]update_tag_we;
  wire update_word_cnt_almost_last;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__193_n_0 ;
  assign update_tag_we = lopt;
  LUT5 #(
    .INIT(32'hFFBA0000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_i_1 
       (.I0(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] ),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59]_0 ),
        .I2(update_need_tag_write),
        .I3(update_word_cnt_almost_last),
        .I4(update_tag_we),
        .O(p_0_in0_out));
  LUT6 #(
    .INIT(64'hFFFF47FFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__193 
       (.I0(Q),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] ),
        .I5(update_cur_tag_way),
        .O(\Using_FPGA.MUXCY_I_i_1__193_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_152
   (update_read_miss_use_ok,
    \Using_FPGA.MUXCY_I_0 ,
    ud_rm_available,
    lopt,
    lopt_1);
  output update_read_miss_use_ok;
  input \Using_FPGA.MUXCY_I_0 ;
  input ud_rm_available;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire ud_rm_available;
  wire update_read_miss_use_ok;

  assign lopt_1 = \<const1> ;
  assign update_read_miss_use_ok = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_153
   (update_word_cnt_en,
    ri_allocate_reg,
    write_data_full_d1_reg,
    update_rm_alloc_ongoing_reg,
    S,
    \update_word_cnt_len_reg[2] ,
    \Long_External_Burst.update_rb_pos_phase_reg ,
    ri_allocate,
    \Long_External_Burst.update_rb_pos_phase_reg_0 ,
    \Long_External_Burst.update_rb_pos_phase_reg_1 ,
    Q,
    write_data_full_d1,
    write_data_almost_full,
    write_data_full,
    update_word_cnt_last,
    update_rm_alloc_ongoing_reg_0,
    update_rm_alloc_ongoing_reg_1,
    ri_exist,
    lopt,
    lopt_1);
  output update_word_cnt_en;
  output ri_allocate_reg;
  output write_data_full_d1_reg;
  output update_rm_alloc_ongoing_reg;
  input S;
  input \update_word_cnt_len_reg[2] ;
  input \Long_External_Burst.update_rb_pos_phase_reg ;
  input ri_allocate;
  input \Long_External_Burst.update_rb_pos_phase_reg_0 ;
  input \Long_External_Burst.update_rb_pos_phase_reg_1 ;
  input Q;
  input write_data_full_d1;
  input write_data_almost_full;
  input write_data_full;
  input update_word_cnt_last;
  input update_rm_alloc_ongoing_reg_0;
  input update_rm_alloc_ongoing_reg_1;
  input ri_exist;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Long_External_Burst.update_rb_pos_phase_reg ;
  wire \Long_External_Burst.update_rb_pos_phase_reg_0 ;
  wire \Long_External_Burst.update_rb_pos_phase_reg_1 ;
  wire Q;
  wire S;
  wire ri_allocate;
  wire ri_allocate_reg;
  wire ri_exist;
  wire update_rm_alloc_ongoing;
  wire update_rm_alloc_ongoing_reg;
  wire update_rm_alloc_ongoing_reg_0;
  wire update_rm_alloc_ongoing_reg_1;
  wire update_word_cnt_en;
  wire update_word_cnt_last;
  wire \update_word_cnt_len_reg[2] ;
  wire write_data_almost_full;
  wire write_data_full;
  wire write_data_full_d1;
  wire write_data_full_d1_reg;

  assign lopt_1 = \<const1> ;
  assign update_word_cnt_en = lopt;
  LUT6 #(
    .INIT(64'h0000000080FF8000)) 
    \Long_External_Burst.update_rb_pos_phase_i_1 
       (.I0(\Long_External_Burst.update_rb_pos_phase_reg ),
        .I1(ri_allocate),
        .I2(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .I3(update_word_cnt_en),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_1 ),
        .I5(Q),
        .O(ri_allocate_reg));
  LUT4 #(
    .INIT(16'hFFF4)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_4 
       (.I0(write_data_full_d1),
        .I1(write_data_almost_full),
        .I2(write_data_full),
        .I3(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .O(write_data_full_d1_reg));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h00000000EAAA2AAA)) 
    update_rm_alloc_ongoing_i_1
       (.I0(update_rm_alloc_ongoing_reg_0),
        .I1(update_word_cnt_en),
        .I2(update_rm_alloc_ongoing_reg_1),
        .I3(ri_exist),
        .I4(ri_allocate),
        .I5(update_rm_alloc_ongoing),
        .O(update_rm_alloc_ongoing_reg));
  LUT5 #(
    .INIT(32'hEAAAAAAA)) 
    update_rm_alloc_ongoing_i_2
       (.I0(Q),
        .I1(update_word_cnt_en),
        .I2(\update_word_cnt_len_reg[2] ),
        .I3(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .I4(update_word_cnt_last),
        .O(update_rm_alloc_ongoing));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_157
   (update_need_tag_write_pre5,
    ud_new_tag_valid2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_need_tag_write_pre5;
  input ud_new_tag_valid2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ud_new_tag_valid2;
  wire update_need_tag_write_pre5;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_need_tag_write_pre5}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,ud_new_tag_valid2}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_158
   (update_need_tag_write_pre3,
    S,
    update_need_tag_write_pre4,
    lopt,
    lopt_1);
  output update_need_tag_write_pre3;
  input S;
  input update_need_tag_write_pre4;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire update_need_tag_write_pre3;
  wire update_need_tag_write_pre4;

  assign lopt_1 = \<const1> ;
  assign update_need_tag_write_pre3 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_159
   (update_need_tag_write_pre2,
    S_0,
    update_need_tag_write_pre3,
    lopt,
    lopt_1);
  output update_need_tag_write_pre2;
  input S_0;
  input update_need_tag_write_pre3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_0;
  wire update_need_tag_write_pre2;
  wire update_need_tag_write_pre3;

  assign lopt_1 = \<const1> ;
  assign update_need_tag_write_pre2 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_160
   (update_need_tag_write_pre1,
    S_1,
    update_need_tag_write_pre2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_need_tag_write_pre1;
  input S_1;
  input update_need_tag_write_pre2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_need_tag_write_pre1;
  wire update_need_tag_write_pre2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(update_need_tag_write_pre2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_need_tag_write_pre1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S_1}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_201
   (lu_mem_valid_tag_0,
    lu_mem_masked_valid_tag_0,
    lu_mem_force_way,
    \lu_check_info_reg[Evict]__0 ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_valid_tag_0;
  input lu_mem_masked_valid_tag_0;
  input [1:0]lu_mem_force_way;
  input \lu_check_info_reg[Evict]__0 ;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [1:0]lu_mem_force_way;
  wire lu_mem_masked_valid_tag_0;
  wire lu_mem_valid_tag_0;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_valid_tag_0 = lopt;
  LUT5 #(
    .INIT(32'hFFFFBABF)) 
    \Using_FPGA.MUXCY_I_i_1__67 
       (.I0(lu_mem_force_way[0]),
        .I1(\lu_check_info_reg[Evict]__0 ),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .I3(\Using_FPGA.MUXCY_I_1 ),
        .I4(lu_mem_force_way[1]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_202
   (lu_mem_protected_pre1_0,
    \lu_check_info_reg[Evict] ,
    D,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    \Using_FPGA.MUXCY_I_4 ,
    \lu_check_info_reg[Evict]__0 ,
    \Using_FPGA.MUXCY_I_i_1__63 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre1_0;
  output \lu_check_info_reg[Evict] ;
  input [0:0]D;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input \lu_check_info_reg[Evict]__0 ;
  input \Using_FPGA.MUXCY_I_i_1__63 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]D;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire \Using_FPGA.MUXCY_I_i_1__63 ;
  wire \lu_check_info_reg[Evict] ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire lu_mem_protected_pre1_0;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre1_0 = lopt;
  LUT6 #(
    .INIT(64'hF7F7F7FFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__64 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\lu_check_info_reg[Evict] ),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(\Using_FPGA.MUXCY_I_3 ),
        .I5(\Using_FPGA.MUXCY_I_4 ),
        .O(S));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_2__6 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(\Using_FPGA.MUXCY_I_2 ),
        .I2(\Using_FPGA.MUXCY_I_i_1__63 ),
        .O(\lu_check_info_reg[Evict] ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_203
   (lu_mem_protected_pre2_0,
    lu_mem_protected_pre1_0,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lu_mem_write_alloc,
    \Using_FPGA.MUXCY_I_2 ,
    lu_check_write_alloc,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre2_0;
  input lu_mem_protected_pre1_0;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lu_mem_write_alloc;
  input \Using_FPGA.MUXCY_I_2 ;
  input lu_check_write_alloc;
  input \Using_FPGA.MUXCY_I_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire lu_check_write_alloc;
  wire lu_mem_protected_pre1_0;
  wire lu_mem_protected_pre2_0;
  wire lu_mem_write_alloc;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre2_0 = lopt;
  LUT6 #(
    .INIT(64'h557FFF7FFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__60 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(lu_mem_write_alloc),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(lu_check_write_alloc),
        .I5(\Using_FPGA.MUXCY_I_3 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_204
   (D,
    lu_mem_protected_pre2_0,
    lopt,
    lopt_1);
  output [0:0]D;
  input lu_mem_protected_pre2_0;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]D;
  wire lu_mem_protected_pre2_0;

  assign D = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_218
   (lu_mem_valid_tag_1,
    lu_mem_masked_valid_tag_1,
    \lu_check_info_reg[Evict]__0 ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lu_mem_force_way,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_valid_tag_1;
  input lu_mem_masked_valid_tag_1;
  input \lu_check_info_reg[Evict]__0 ;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input [1:0]lu_mem_force_way;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__197_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [1:0]lu_mem_force_way;
  wire lu_mem_masked_valid_tag_1;
  wire lu_mem_valid_tag_1;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__197_n_0 ;
  assign lu_mem_valid_tag_1 = lopt;
  LUT5 #(
    .INIT(32'hFF47FFFF)) 
    \Using_FPGA.MUXCY_I_i_1__197 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(lu_mem_force_way[1]),
        .I4(lu_mem_force_way[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__197_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_219
   (lu_mem_protected_pre1_1,
    D,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    \Using_FPGA.MUXCY_I_4 ,
    \Using_FPGA.MUXCY_I_5 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre1_1;
  input [0:0]D;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input \Using_FPGA.MUXCY_I_5 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]D;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire \Using_FPGA.MUXCY_I_5 ;
  wire lu_mem_protected_pre1_1;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre1_1 = lopt;
  LUT6 #(
    .INIT(64'hF7F7F7FFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__63 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\Using_FPGA.MUXCY_I_2 ),
        .I3(\Using_FPGA.MUXCY_I_3 ),
        .I4(\Using_FPGA.MUXCY_I_4 ),
        .I5(\Using_FPGA.MUXCY_I_5 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_220
   (lu_mem_protected_pre2_1,
    lu_mem_protected_pre1_1,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lu_mem_write_alloc,
    \Using_FPGA.MUXCY_I_2 ,
    lu_check_write_alloc,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre2_1;
  input lu_mem_protected_pre1_1;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lu_mem_write_alloc;
  input \Using_FPGA.MUXCY_I_2 ;
  input lu_check_write_alloc;
  input \Using_FPGA.MUXCY_I_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire lu_check_write_alloc;
  wire lu_mem_protected_pre1_1;
  wire lu_mem_protected_pre2_1;
  wire lu_mem_write_alloc;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre2_1 = lopt;
  LUT6 #(
    .INIT(64'h557FFF7FFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__59 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(lu_mem_write_alloc),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(lu_check_write_alloc),
        .I5(\Using_FPGA.MUXCY_I_3 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_221
   (D,
    lu_mem_protected_pre2_1,
    lopt,
    lopt_1);
  output [0:0]D;
  input lu_mem_protected_pre2_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]D;
  wire lu_mem_protected_pre2_1;

  assign D = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_235
   (lu_mem_valid_tag_2,
    lu_mem_masked_valid_tag_2,
    lu_mem_force_way,
    \lu_check_info_reg[Evict]__0 ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_valid_tag_2;
  input lu_mem_masked_valid_tag_2;
  input [1:0]lu_mem_force_way;
  input \lu_check_info_reg[Evict]__0 ;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [1:0]lu_mem_force_way;
  wire lu_mem_masked_valid_tag_2;
  wire lu_mem_valid_tag_2;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_valid_tag_2 = lopt;
  LUT5 #(
    .INIT(32'hBABFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__66 
       (.I0(lu_mem_force_way[0]),
        .I1(\lu_check_info_reg[Evict]__0 ),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .I3(\Using_FPGA.MUXCY_I_1 ),
        .I4(lu_mem_force_way[1]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_236
   (lu_mem_protected_pre1_2,
    D,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    \Using_FPGA.MUXCY_I_4 ,
    \Using_FPGA.MUXCY_I_5 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre1_2;
  input [0:0]D;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input \Using_FPGA.MUXCY_I_5 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]D;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire \Using_FPGA.MUXCY_I_5 ;
  wire lu_mem_protected_pre1_2;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre1_2 = lopt;
  LUT6 #(
    .INIT(64'hF7F7F7FFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__62 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(\Using_FPGA.MUXCY_I_2 ),
        .I3(\Using_FPGA.MUXCY_I_3 ),
        .I4(\Using_FPGA.MUXCY_I_4 ),
        .I5(\Using_FPGA.MUXCY_I_5 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_237
   (lu_mem_protected_pre2_2,
    lu_mem_protected_pre1_2,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lu_mem_write_alloc,
    \Using_FPGA.MUXCY_I_2 ,
    lu_check_write_alloc,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre2_2;
  input lu_mem_protected_pre1_2;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lu_mem_write_alloc;
  input \Using_FPGA.MUXCY_I_2 ;
  input lu_check_write_alloc;
  input \Using_FPGA.MUXCY_I_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire lu_check_write_alloc;
  wire lu_mem_protected_pre1_2;
  wire lu_mem_protected_pre2_2;
  wire lu_mem_write_alloc;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre2_2 = lopt;
  LUT6 #(
    .INIT(64'h557FFF7FFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__58 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(lu_mem_write_alloc),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(lu_check_write_alloc),
        .I5(\Using_FPGA.MUXCY_I_3 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_238
   (D,
    lu_mem_protected_pre2_2,
    lopt,
    lopt_1);
  output [0:0]D;
  input lu_mem_protected_pre2_2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]D;
  wire lu_mem_protected_pre2_2;

  assign D = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_252
   (lu_mem_valid_tag_3,
    lu_mem_masked_valid_tag_3,
    \lu_check_info_reg[Evict]__0 ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lu_mem_force_way,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_valid_tag_3;
  input lu_mem_masked_valid_tag_3;
  input \lu_check_info_reg[Evict]__0 ;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input [1:0]lu_mem_force_way;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__196_n_0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [1:0]lu_mem_force_way;
  wire lu_mem_masked_valid_tag_3;
  wire lu_mem_valid_tag_3;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__196_n_0 ;
  assign lu_mem_valid_tag_3 = lopt;
  LUT5 #(
    .INIT(32'h47FFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__196 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(lu_mem_force_way[1]),
        .I4(lu_mem_force_way[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__196_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_253
   (lu_mem_protected_pre1_3,
    D,
    \Using_FPGA.MUXCY_I_0 ,
    lookup_tag_current_word_i,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    \Using_FPGA.MUXCY_I_4 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre1_3;
  input [0:0]D;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]lookup_tag_current_word_i;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]D;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire [0:0]lookup_tag_current_word_i;
  wire lu_mem_protected_pre1_3;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre1_3 = lopt;
  LUT6 #(
    .INIT(64'hF7F7F7FFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__61 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(lookup_tag_current_word_i),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(\Using_FPGA.MUXCY_I_3 ),
        .I5(\Using_FPGA.MUXCY_I_4 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_254
   (lu_mem_protected_pre2_3,
    lu_mem_protected_pre1_3,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    lu_mem_write_alloc,
    \Using_FPGA.MUXCY_I_2 ,
    lu_check_write_alloc,
    \Using_FPGA.MUXCY_I_3 ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre2_3;
  input lu_mem_protected_pre1_3;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input lu_mem_write_alloc;
  input \Using_FPGA.MUXCY_I_2 ;
  input lu_check_write_alloc;
  input \Using_FPGA.MUXCY_I_3 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire lu_check_write_alloc;
  wire lu_mem_protected_pre1_3;
  wire lu_mem_protected_pre2_3;
  wire lu_mem_write_alloc;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre2_3 = lopt;
  LUT6 #(
    .INIT(64'h557FFF7FFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__57 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(lu_mem_write_alloc),
        .I3(\Using_FPGA.MUXCY_I_2 ),
        .I4(lu_check_write_alloc),
        .I5(\Using_FPGA.MUXCY_I_3 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_255
   (D,
    lu_mem_protected_pre2_3,
    lopt,
    lopt_1);
  output [0:0]D;
  input lu_mem_protected_pre2_3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]D;
  wire lu_mem_protected_pre2_3;

  assign D = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_261
   (lud_addr_piperun,
    lu_mem_protect_conflict_reg,
    lud_mem_speculative_valid_reg,
    S,
    lud_addr_piperun_pre2,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ,
    \lu_mem_info_reg[Wr]__0 ,
    lud_mem_piperun,
    lud_mem_speculative_valid,
    lopt,
    lopt_1);
  output lud_addr_piperun;
  output lu_mem_protect_conflict_reg;
  output lud_mem_speculative_valid_reg;
  input S;
  input lud_addr_piperun_pre2;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ;
  input \lu_mem_info_reg[Wr]__0 ;
  input lud_mem_piperun;
  input lud_mem_speculative_valid;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lu_mem_protect_conflict_reg;
  wire lud_addr_piperun;
  wire lud_addr_piperun_pre2;
  wire lud_mem_piperun;
  wire lud_mem_speculative_valid;
  wire lud_mem_speculative_valid_reg;

  assign lopt_1 = \<const1> ;
  assign lud_addr_piperun = lopt;
  LUT6 #(
    .INIT(64'hFFFF00000D0F0000)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_2 
       (.I0(lud_addr_piperun),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ),
        .I5(\lu_mem_info_reg[Wr]__0 ),
        .O(lu_mem_protect_conflict_reg));
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hBA)) 
    lud_mem_speculative_valid_i_1
       (.I0(lud_addr_piperun),
        .I1(lud_mem_piperun),
        .I2(lud_mem_speculative_valid),
        .O(lud_mem_speculative_valid_reg));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_266
   (lud_step_want_step_offset,
    S,
    lud_addr_piperun,
    lopt,
    lopt_1);
  output lud_step_want_step_offset;
  input S;
  input lud_addr_piperun;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire lud_addr_piperun;
  wire lud_step_want_step_offset;

  assign lopt_1 = \<const1> ;
  assign lud_step_want_step_offset = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_27
   (rd_pop,
    rd_length_zero,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output rd_pop;
  input rd_length_zero;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__206_n_0 ;
  wire rd_length_zero;
  wire rd_pop;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__206_n_0 ;
  assign rd_pop = lopt;
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__206 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__206_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_272
   (lookup_data_hit_stall,
    lud_write_hit_done0,
    S,
    lud_addr_pipeline_full_reg,
    S_0,
    wr_port_data_ready,
    lookup_data_hit_pre_stall,
    \access_data_info[0,1][Last] ,
    wr_port_data_valid_i_reg,
    \access_data_info[0,0][Last] ,
    lud_write_hit_done_reg,
    lu_check_valid,
    \Using_FPGA.MUXCY_I_0 ,
    wr_port_data_valid_i_reg_0,
    lu_check_wait_for_update,
    lookup_write_hit,
    update_write_data_ready,
    \lu_check_info_reg[Wr]__0 ,
    lud_write_hit_done_i_2_0,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_data_hit_stall;
  output lud_write_hit_done0;
  output S;
  output lud_addr_pipeline_full_reg;
  output S_0;
  output wr_port_data_ready;
  input lookup_data_hit_pre_stall;
  input \access_data_info[0,1][Last] ;
  input wr_port_data_valid_i_reg;
  input \access_data_info[0,0][Last] ;
  input lud_write_hit_done_reg;
  input lu_check_valid;
  input \Using_FPGA.MUXCY_I_0 ;
  input wr_port_data_valid_i_reg_0;
  input lu_check_wait_for_update;
  input lookup_write_hit;
  input [1:0]update_write_data_ready;
  input \lu_check_info_reg[Wr]__0 ;
  input lud_write_hit_done_i_2_0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire S_0;
  wire S_1;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Last] ;
  wire lookup_data_hit_pre_stall;
  wire lookup_data_hit_stall;
  wire lookup_write_hit;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_valid;
  wire lu_check_wait_for_update;
  wire lud_addr_pipeline_full_reg;
  wire lud_write_hit_done0;
  wire lud_write_hit_done_i_2_0;
  wire lud_write_hit_done_i_3_n_0;
  wire lud_write_hit_done_reg;
  wire [1:0]update_write_data_ready;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;
  wire wr_port_data_valid_i_reg_0;

  assign lookup_data_hit_stall = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S_1;
  LUT6 #(
    .INIT(64'hFFFFFFFF01000000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__7 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(lu_check_wait_for_update),
        .I2(lookup_data_hit_stall),
        .I3(lookup_write_hit),
        .I4(wr_port_data_valid_i_reg),
        .I5(update_write_data_ready[1]),
        .O(wr_port_data_ready));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__147 
       (.I0(lud_addr_pipeline_full_reg),
        .O(S));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__148 
       (.I0(wr_port_data_ready),
        .O(S_0));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__77 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .O(S_1));
  LUT6 #(
    .INIT(64'hFFFFFFFF00000100)) 
    \Using_FPGA.MUXCY_I_i_2__14 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(lu_check_wait_for_update),
        .I2(lookup_data_hit_stall),
        .I3(lookup_write_hit),
        .I4(wr_port_data_valid_i_reg),
        .I5(update_write_data_ready[0]),
        .O(lud_addr_pipeline_full_reg));
  VCC VCC
       (.P(\<const1> ));
  LUT6 #(
    .INIT(64'h4540000000000000)) 
    lud_write_hit_done_i_2
       (.I0(lud_write_hit_done_i_3_n_0),
        .I1(\access_data_info[0,1][Last] ),
        .I2(wr_port_data_valid_i_reg),
        .I3(\access_data_info[0,0][Last] ),
        .I4(lud_write_hit_done_reg),
        .I5(lu_check_valid),
        .O(lud_write_hit_done0));
  LUT5 #(
    .INIT(32'hFFFFFEFF)) 
    lud_write_hit_done_i_3
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(lu_check_wait_for_update),
        .I2(lookup_data_hit_stall),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(lud_write_hit_done_i_2_0),
        .O(lud_write_hit_done_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_279
   (lu_io_lud_stall_pipe,
    S,
    lu_io_full_block_read,
    lopt,
    lopt_1);
  output lu_io_lud_stall_pipe;
  input S;
  input lu_io_full_block_read;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire lu_io_full_block_read;
  wire lu_io_lud_stall_pipe;

  assign lopt_1 = \<const1> ;
  assign lu_io_lud_stall_pipe = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_28
   (rd_done,
    S0_AXI_GEN_RLAST,
    rd_pop,
    rip_last,
    r_hit_last,
    I5,
    r_miss_last,
    rip_single,
    lopt,
    lopt_1,
    lopt_2);
  output rd_done;
  output S0_AXI_GEN_RLAST;
  input rd_pop;
  input rip_last;
  input r_hit_last;
  input I5;
  input r_miss_last;
  input rip_single;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire I5;
  wire S;
  wire S0_AXI_GEN_RLAST;
  wire r_hit_last;
  wire r_miss_last;
  wire rd_done;
  wire rd_pop;
  wire rip_last;
  wire rip_single;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign rd_done = lopt;
  LUT5 #(
    .INIT(32'h80888000)) 
    S0_AXI_GEN_RLAST_INST_0
       (.I0(rip_last),
        .I1(rd_done),
        .I2(r_hit_last),
        .I3(I5),
        .I4(r_miss_last),
        .O(S0_AXI_GEN_RLAST));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__188 
       (.I0(rip_single),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_305
   (lu_mem_piperun_pre2,
    S,
    lu_check_piperun,
    lopt,
    lopt_1);
  output lu_mem_piperun_pre2;
  input S;
  input lu_check_piperun;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire lu_check_piperun;
  wire lu_mem_piperun_pre2;

  assign lopt_1 = \<const1> ;
  assign lu_mem_piperun_pre2 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_315
   (protection_with_coherency,
    filtered_protection_bit,
    lopt,
    lopt_1);
  output protection_with_coherency;
  input filtered_protection_bit;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire filtered_protection_bit;
  wire protection_with_coherency;

  assign lopt_1 = \<const1> ;
  assign protection_with_coherency = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_334
   (carry_1,
    protected_miss_valid,
    \Using_FPGA.MUXCY_I_0 ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input protected_miss_valid;
  input [2:0]\Using_FPGA.MUXCY_I_0 ;
  input [2:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [2:0]Q;
  wire S;
  wire [2:0]\Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire protected_miss_valid;

  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_FPGA.MUXCY_I_i_1__93 
       (.I0(\Using_FPGA.MUXCY_I_0 [1]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\Using_FPGA.MUXCY_I_0 [0]),
        .I4(Q[2]),
        .I5(\Using_FPGA.MUXCY_I_0 [2]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_335
   (protected_bit,
    carry_1,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output protected_bit;
  input carry_1;
  input [0:0]Q;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire S;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire protected_bit;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,protected_bit}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__94 
       (.I0(Q),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_336
   (carry_1,
    S_8,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input S_8;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S_8;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S_8}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_337
   (carry_2,
    S_9,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input S_9;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_9;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_338
   (carry_3,
    S_10,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input S_10;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_10;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_339
   (lru_protected_bit,
    S_11,
    carry_3,
    lopt,
    lopt_1);
  output lru_protected_bit;
  input S_11;
  input carry_3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_11;
  wire carry_3;
  wire lru_protected_bit;

  assign lopt_1 = \<const1> ;
  assign lru_protected_bit = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_349
   (carry_1,
    S,
    dirty_miss_valid,
    lopt,
    lopt_1);
  output carry_1;
  input S;
  input dirty_miss_valid;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire carry_1;
  wire dirty_miss_valid;

  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_350
   (dirty_bit,
    S_0,
    carry_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output dirty_bit;
  input S_0;
  input carry_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S_0;
  wire carry_1;
  wire dirty_bit;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,dirty_bit}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S_0}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_351
   (carry_1,
    S_4,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input S_4;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S_4;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S_4}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_352
   (carry_2,
    S_5,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input S_5;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_5;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_353
   (carry_3,
    S_6,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input S_6;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_6;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_354
   (lru_dirty_bit,
    S_7,
    carry_3,
    lopt,
    lopt_1);
  output lru_dirty_bit;
  input S_7;
  input carry_3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_7;
  wire carry_3;
  wire lru_dirty_bit;

  assign lopt_1 = \<const1> ;
  assign lru_dirty_bit = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_359
   (lu_check_tag_hit_all_carry,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_check_tag_hit_all_carry;
  input [3:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [3:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__131_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_check_tag_hit_all_carry;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_check_tag_hit_all_carry}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__131_n_0 }));
  LUT4 #(
    .INIT(16'h0001)) 
    \Using_FPGA.MUXCY_I_i_1__131 
       (.I0(Q[2]),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(Q[3]),
        .O(\Using_FPGA.MUXCY_I_i_1__131_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_368
   (carry_1,
    lookup_io_stall_carry_no_wait,
    \Using_FPGA.MUXCY_I_0 ,
    update_write_miss_busy,
    lu_check_wait_for_update,
    \lu_check_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input lookup_io_stall_carry_no_wait;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]update_write_miss_busy;
  input lu_check_wait_for_update;
  input \lu_check_info_reg[Wr]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__198_n_0 ;
  wire carry_1;
  wire lookup_io_stall_carry_no_wait;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;

  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__198_n_0 ;
  LUT4 #(
    .INIT(16'hFBFF)) 
    \Using_FPGA.MUXCY_I_i_1__198 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(update_write_miss_busy),
        .I2(lu_check_wait_for_update),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__198_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_369
   (Carry_IN,
    carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    update_write_miss_busy,
    lu_check_wait_for_update,
    \lu_check_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_IN;
  input carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input [0:0]update_write_miss_busy;
  input lu_check_wait_for_update;
  input \lu_check_info_reg[Wr]__0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__199_n_0 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_IN}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__199_n_0 }));
  LUT4 #(
    .INIT(16'hF7FF)) 
    \Using_FPGA.MUXCY_I_i_1__199 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(update_write_miss_busy),
        .I2(lu_check_wait_for_update),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .O(\Using_FPGA.MUXCY_I_i_1__199_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_370
   (carry_1,
    lu_io_lud_stall_pipe,
    \lu_check_info_reg[Wr]__0 ,
    \access_data_info[0,0][Valid] ,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input lu_io_lud_stall_pipe;
  input \lu_check_info_reg[Wr]__0 ;
  input \access_data_info[0,0][Valid] ;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \access_data_info[0,0][Valid] ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_io_lud_stall_pipe;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_io_lud_stall_pipe),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT3 #(
    .INIT(8'hFD)) 
    \Using_FPGA.MUXCY_I_i_1__40 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\access_data_info[0,0][Valid] ),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_371
   (lookup_io_stall_carry,
    carry_1,
    \lu_check_info_reg[Wr]__0 ,
    \access_data_info[0,1][Valid] ,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_stall_carry;
  input carry_1;
  input \lu_check_info_reg[Wr]__0 ;
  input \access_data_info[0,1][Valid] ;
  input \Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \access_data_info[0,1][Valid] ;
  wire carry_1;
  wire lookup_io_stall_carry;
  wire \lu_check_info_reg[Wr]__0 ;

  assign lookup_io_stall_carry = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__81 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\access_data_info[0,1][Valid] ),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_372
   (carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \read_data_status[0,0][Hit_Full] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__78 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\read_data_status[0,0][Hit_Full] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_373
   (lu_io_selected_full,
    carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    \read_data_status[0,1][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_io_selected_full;
  input carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input \read_data_status[0,1][Hit_Full] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire lu_io_selected_full;
  wire \read_data_status[0,1][Hit_Full] ;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_io_selected_full = lopt;
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__79 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\read_data_status[0,1][Hit_Full] ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_376
   (carry_1,
    lookup_protect_conflict,
    lu_check_wait_for_update,
    update_write_miss_busy,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input lookup_protect_conflict;
  input lu_check_wait_for_update;
  input [0:0]update_write_miss_busy;
  input \Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire lookup_protect_conflict;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;

  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'hFB)) 
    \Using_FPGA.MUXCY_I_i_1__73 
       (.I0(lu_check_wait_for_update),
        .I1(update_write_miss_busy),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_377
   (lookup_data_hit_pre_stall,
    carry_1,
    lu_check_wait_for_update,
    update_write_miss_busy,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_data_hit_pre_stall;
  input carry_1;
  input lu_check_wait_for_update;
  input [0:0]update_write_miss_busy;
  input \Using_FPGA.MUXCY_I_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire lookup_data_hit_pre_stall;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,lookup_data_hit_pre_stall}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,S}));
  LUT3 #(
    .INIT(8'hBF)) 
    \Using_FPGA.MUXCY_I_i_1__75 
       (.I0(lu_check_wait_for_update),
        .I1(update_write_miss_busy),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_410
   (be_no_block_1to2_part,
    S_0,
    Carry_OUT,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output be_no_block_1to2_part;
  input S_0;
  input Carry_OUT;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire Carry_OUT;
  wire S_0;
  wire be_no_block_1to2_part;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_OUT),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,be_no_block_1to2_part}),
        .CYINIT(1'b0),
        .DI({\^lopt_7 ,\^lopt_2 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_3 ,S_0}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_411
   (be_no_block_1to3,
    \Order_Optimization_4.search_count_reg[0] ,
    be_no_block_1to2,
    Q,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output be_no_block_1to3;
  output \Order_Optimization_4.search_count_reg[0] ;
  input be_no_block_1to2;
  input [4:0]Q;
  input [4:0]\Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Order_Optimization_4.search_count_reg[0] ;
  wire [4:0]Q;
  wire S;
  wire [4:0]\Using_FPGA.MUXCY_I_0 ;
  wire be_no_block_1to2;
  wire be_no_block_1to3;

  assign be_no_block_1to3 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT5 #(
    .INIT(32'h4D44DD4D)) 
    \Using_FPGA.MUXCY_I_i_1__166 
       (.I0(Q[4]),
        .I1(\Using_FPGA.MUXCY_I_0 [4]),
        .I2(Q[3]),
        .I3(\Using_FPGA.MUXCY_I_0 [3]),
        .I4(\Order_Optimization_4.search_count_reg[0] ),
        .O(S));
  LUT6 #(
    .INIT(64'h2F02FFFF00002F02)) 
    \Using_FPGA.MUXCY_I_i_2__17 
       (.I0(Q[0]),
        .I1(\Using_FPGA.MUXCY_I_0 [0]),
        .I2(\Using_FPGA.MUXCY_I_0 [1]),
        .I3(Q[1]),
        .I4(\Using_FPGA.MUXCY_I_0 [2]),
        .I5(Q[2]),
        .O(\Order_Optimization_4.search_count_reg[0] ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_412
   (be_no_block_1to4,
    be_no_block_1to3,
    pending_write_is_1,
    bp_fifo_full,
    M0_AXI_BVALID,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output be_no_block_1to4;
  input be_no_block_1to3;
  input pending_write_is_1;
  input bp_fifo_full;
  input M0_AXI_BVALID;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire M0_AXI_BVALID;
  wire \Using_FPGA.MUXCY_I_i_1__207_n_0 ;
  wire be_no_block_1to3;
  wire be_no_block_1to4;
  wire bp_fifo_full;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire pending_write_is_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(be_no_block_1to3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,be_no_block_1to4}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__207_n_0 }));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__207 
       (.I0(pending_write_is_1),
        .I1(bp_fifo_full),
        .I2(M0_AXI_BVALID),
        .O(\Using_FPGA.MUXCY_I_i_1__207_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_413
   (no_write_blocking_read,
    be_no_block_1to4,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output no_write_blocking_read;
  input be_no_block_1to4;
  input [4:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [4:0]Q;
  wire S;
  wire be_no_block_1to4;
  wire no_write_blocking_read;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign no_write_blocking_read = lopt;
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.MUXCY_I_i_1__167 
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(Q[3]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_45
   (port_ready,
    S,
    exclusive_too_long_i,
    lopt,
    lopt_1);
  output port_ready;
  input S;
  input exclusive_too_long_i;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire exclusive_too_long_i;
  wire port_ready;

  assign lopt_1 = \<const1> ;
  assign port_ready = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_89
   (port_allow_ready_0,
    port_allow_ready_pre_0,
    lopt,
    lopt_1);
  output port_allow_ready_0;
  input port_allow_ready_pre_0;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire port_allow_ready_0;
  wire port_allow_ready_pre_0;

  assign lopt_1 = \<const1> ;
  assign port_allow_ready_0 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_90
   (port_allow_ready_pre_0,
    idle_carry_3,
    arb_token_0,
    lopt,
    lopt_1,
    lopt_2);
  output port_allow_ready_pre_0;
  input idle_carry_3;
  input arb_token_0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire arb_token_0;
  wire idle_carry_3;
  wire port_allow_ready_pre_0;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign port_allow_ready_pre_0 = lopt;
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__162 
       (.I0(arb_token_0),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_97
   (port_allow_ready_1,
    port_allow_ready_pre_1,
    lopt,
    lopt_1);
  output port_allow_ready_1;
  input port_allow_ready_pre_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire port_allow_ready_1;
  wire port_allow_ready_pre_1;

  assign lopt_1 = \<const1> ;
  assign port_allow_ready_1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_98
   (port_allow_ready_pre_1,
    idle_carry_2,
    arb_token_1,
    lopt,
    lopt_1,
    lopt_2);
  output port_allow_ready_pre_1;
  input idle_carry_2;
  input arb_token_1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire arb_token_1;
  wire idle_carry_2;
  wire port_allow_ready_pre_1;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign port_allow_ready_pre_1 = lopt;
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__163 
       (.I0(arb_token_1),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or__parameterized2
   (lookup_md_or_wm,
    lookup_miss_dirty_no_clean,
    Q,
    \lu_check_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_md_or_wm;
  input lookup_miss_dirty_no_clean;
  input [3:0]Q;
  input \lu_check_info_reg[Wr]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  (* RTL_KEEP = "true" *) wire A_N;
  wire [3:0]Q;
  wire lookup_md_or_wm;
  wire lookup_miss_dirty_no_clean;
  wire \lu_check_info_reg[Wr]__0 ;

  assign lookup_md_or_wm = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = A_N;
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    A_N_inferred_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(Q[2]),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .O(A_N));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or__parameterized2_322
   (lookup_md_or_wm_or_whne,
    lookup_md_or_wm,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_md_or_wm_or_whne;
  input lookup_md_or_wm;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  (* RTL_KEEP = "true" *) wire A_N;
  wire lookup_md_or_wm;
  wire lookup_md_or_wm_or_whne;

  assign lookup_md_or_wm_or_whne = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = A_N;
  VCC VCC
       (.P(\<const1> ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(A_N));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or__parameterized2_323
   (lookup_md_or_wm_or_whne2,
    lookup_md_or_wm_or_whne,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lookup_md_or_wm_or_whne2;
  input lookup_md_or_wm_or_whne;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  (* RTL_KEEP = "true" *) wire A_N;
  wire lookup_md_or_wm_or_whne;
  wire lookup_md_or_wm_or_whne2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA_Keep.MUXCY_I_CARRY4 
       (.CI(lookup_md_or_wm_or_whne),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lookup_md_or_wm_or_whne2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A_N}));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(A_N));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n
   (w_pop_part,
    \wr_port_data_info_reg[0][Data][0] ,
    w_ready,
    lopt,
    lopt_1);
  output w_pop_part;
  input \wr_port_data_info_reg[0][Data][0] ;
  input w_ready;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire w_pop_part;
  wire w_ready;
  wire \wr_port_data_info_reg[0][Data][0] ;

  assign lopt_1 = \<const1> ;
  assign w_pop_part = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_104
   (lookup_piperun_post1,
    \arb_access_i_reg[Valid] ,
    lookup_piperun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_piperun_post1;
  input \arb_access_i_reg[Valid] ;
  input lookup_piperun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \arb_access_i_reg[Valid] ;
  wire lookup_piperun;
  wire lookup_piperun_post1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_piperun),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,lookup_piperun_post1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\arb_access_i_reg[Valid] }));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_12
   (w_pop_part,
    \wr_port_data_info_reg[0][Data][0] ,
    w_ready,
    lopt,
    lopt_1);
  output w_pop_part;
  input \wr_port_data_info_reg[0][Data][0] ;
  input w_ready;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire w_pop_part;
  wire w_ready;
  wire \wr_port_data_info_reg[0][Data][0] ;

  assign lopt_1 = \<const1> ;
  assign w_pop_part = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_19
   (E,
    wip_exist,
    wip_pop,
    lopt,
    lopt_1);
  output [0:0]E;
  input wip_exist;
  input wip_pop;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]E;
  wire wip_exist;
  wire wip_pop;

  assign E = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_260
   (lud_addr_piperun_pre1,
    \Using_FPGA.MUXCY_I_0 ,
    lud_mem_piperun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lud_addr_piperun_pre1;
  input \Using_FPGA.MUXCY_I_0 ;
  input lud_mem_piperun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lud_addr_piperun_pre1;
  wire lud_mem_piperun;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lud_mem_piperun),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lud_addr_piperun_pre1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_264
   (lud_reg_piperun,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ,
    lud_reg_piperun_pre1,
    lopt,
    lopt_1);
  output lud_reg_piperun;
  input \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ;
  input lud_reg_piperun_pre1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] ;
  wire lud_reg_piperun;
  wire lud_reg_piperun_pre1;

  assign lopt_1 = \<const1> ;
  assign lud_reg_piperun = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_269
   (lu_check_piperun_pre1,
    \Using_FPGA.MUXCY_I_0 ,
    update_piperun,
    lopt,
    lopt_1);
  output lu_check_piperun_pre1;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_piperun;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire lu_check_piperun_pre1;
  wire update_piperun;

  assign lopt_1 = \<const1> ;
  assign lu_check_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_297
   (lu_fetch_piperun_pre1,
    \lu_mem_info_reg[Port_Num][0] ,
    lu_fetch_piperun_pre2,
    lopt,
    lopt_1);
  output lu_fetch_piperun_pre1;
  input \lu_mem_info_reg[Port_Num][0] ;
  input lu_fetch_piperun_pre2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire lu_fetch_piperun_pre1;
  wire lu_fetch_piperun_pre2;
  wire \lu_mem_info_reg[Port_Num][0] ;

  assign lopt_1 = \<const1> ;
  assign lu_fetch_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_306
   (lu_mem_piperun_pre1,
    lu_check_valid,
    lu_mem_piperun_pre2,
    lopt,
    lopt_1);
  output lu_mem_piperun_pre1;
  input lu_check_valid;
  input lu_mem_piperun_pre2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire lu_check_valid;
  wire lu_mem_piperun_pre1;
  wire lu_mem_piperun_pre2;

  assign lopt_1 = \<const1> ;
  assign lu_mem_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_316
   (lookup_piperun,
    access_valid,
    \Using_FPGA.MUXCY_I_0 ,
    lopt,
    lopt_1);
  output lookup_piperun;
  input access_valid;
  input \Using_FPGA.MUXCY_I_0 ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire access_valid;
  wire lookup_piperun;

  assign lookup_piperun = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_32
   (\Use_Reg_Ctrl.queue_exist_i_reg ,
    E,
    D,
    \Read_External_Narrow.rd_length_reg[6] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    rip_pop,
    I4,
    ri_exist,
    r_miss_fifo_empty,
    I5,
    S0_AXI_GEN_RREADY,
    out,
    \Read_External_Narrow.rd_rest_reg[1] ,
    \Read_External_Narrow.rd_rest_reg[1]_0 ,
    \Read_External_Narrow.rd_length_reg[7] ,
    \Read_External_Narrow.rd_length_reg[7]_0 ,
    \Read_External_Narrow.rd_length_reg[6]_0 ,
    \Read_External_Narrow.rd_length_reg[5] ,
    \Read_External_Narrow.rd_length_reg[4] ,
    lopt,
    lopt_1,
    lopt_2);
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output [0:0]E;
  output [1:0]D;
  output [7:0]\Read_External_Narrow.rd_length_reg[6] ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input rip_pop;
  input I4;
  input ri_exist;
  input r_miss_fifo_empty;
  input I5;
  input S0_AXI_GEN_RREADY;
  input [1:0]out;
  input [1:0]\Read_External_Narrow.rd_rest_reg[1] ;
  input [1:0]\Read_External_Narrow.rd_rest_reg[1]_0 ;
  input [7:0]\Read_External_Narrow.rd_length_reg[7] ;
  input [7:0]\Read_External_Narrow.rd_length_reg[7]_0 ;
  input \Read_External_Narrow.rd_length_reg[6]_0 ;
  input \Read_External_Narrow.rd_length_reg[5] ;
  input \Read_External_Narrow.rd_length_reg[4] ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [1:0]D;
  wire [0:0]E;
  wire I4;
  wire I5;
  wire \Read_External_Narrow.rd_length_reg[4] ;
  wire \Read_External_Narrow.rd_length_reg[5] ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[6] ;
  wire \Read_External_Narrow.rd_length_reg[6]_0 ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[7] ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[7]_0 ;
  wire [1:0]\Read_External_Narrow.rd_rest_reg[1] ;
  wire [1:0]\Read_External_Narrow.rd_rest_reg[1]_0 ;
  wire S0_AXI_GEN_RREADY;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire [1:0]out;
  wire r_miss_fifo_empty;
  wire ri_exist;
  wire rip_pop;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hA3)) 
    \Read_External_Narrow.rd_length[0]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [0]),
        .I1(\Read_External_Narrow.rd_length_reg[7]_0 [0]),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [0]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hAAC3)) 
    \Read_External_Narrow.rd_length[1]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [1]),
        .I1(\Read_External_Narrow.rd_length_reg[7]_0 [0]),
        .I2(\Read_External_Narrow.rd_length_reg[7]_0 [1]),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [1]));
  LUT5 #(
    .INIT(32'hAAAAFC03)) 
    \Read_External_Narrow.rd_length[2]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [2]),
        .I1(\Read_External_Narrow.rd_length_reg[7]_0 [1]),
        .I2(\Read_External_Narrow.rd_length_reg[7]_0 [0]),
        .I3(\Read_External_Narrow.rd_length_reg[7]_0 [2]),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [2]));
  LUT6 #(
    .INIT(64'hAAAAAAAAFFFC0003)) 
    \Read_External_Narrow.rd_length[3]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [3]),
        .I1(\Read_External_Narrow.rd_length_reg[7]_0 [2]),
        .I2(\Read_External_Narrow.rd_length_reg[7]_0 [0]),
        .I3(\Read_External_Narrow.rd_length_reg[7]_0 [1]),
        .I4(\Read_External_Narrow.rd_length_reg[7]_0 [3]),
        .I5(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [3]));
  LUT4 #(
    .INIT(16'hAAC3)) 
    \Read_External_Narrow.rd_length[4]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [4]),
        .I1(\Read_External_Narrow.rd_length_reg[4] ),
        .I2(\Read_External_Narrow.rd_length_reg[7]_0 [4]),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [4]));
  LUT4 #(
    .INIT(16'hAAC3)) 
    \Read_External_Narrow.rd_length[5]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [5]),
        .I1(\Read_External_Narrow.rd_length_reg[5] ),
        .I2(\Read_External_Narrow.rd_length_reg[7]_0 [5]),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [5]));
  LUT4 #(
    .INIT(16'hAAC3)) 
    \Read_External_Narrow.rd_length[6]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [6]),
        .I1(\Read_External_Narrow.rd_length_reg[6]_0 ),
        .I2(\Read_External_Narrow.rd_length_reg[7]_0 [6]),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [6]));
  LUT5 #(
    .INIT(32'hAAAAFC03)) 
    \Read_External_Narrow.rd_length[7]_i_1 
       (.I0(\Read_External_Narrow.rd_length_reg[7] [7]),
        .I1(\Read_External_Narrow.rd_length_reg[7]_0 [6]),
        .I2(\Read_External_Narrow.rd_length_reg[6]_0 ),
        .I3(\Read_External_Narrow.rd_length_reg[7]_0 [7]),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Read_External_Narrow.rd_length_reg[6] [7]));
  LUT4 #(
    .INIT(16'h8BB8)) 
    \Read_External_Narrow.rd_rest[0]_i_1 
       (.I0(out[0]),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I2(\Read_External_Narrow.rd_rest_reg[1] [0]),
        .I3(\Read_External_Narrow.rd_rest_reg[1]_0 [0]),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hBABAAAFAAAAAAAAA)) 
    \Read_External_Narrow.rd_rest[1]_i_1 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I1(I4),
        .I2(ri_exist),
        .I3(r_miss_fifo_empty),
        .I4(I5),
        .I5(S0_AXI_GEN_RREADY),
        .O(E));
  LUT6 #(
    .INIT(64'h88B8BB8BBB8B88B8)) 
    \Read_External_Narrow.rd_rest[1]_i_2 
       (.I0(out[1]),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I2(\Read_External_Narrow.rd_rest_reg[1]_0 [0]),
        .I3(\Read_External_Narrow.rd_rest_reg[1] [0]),
        .I4(\Read_External_Narrow.rd_rest_reg[1]_0 [1]),
        .I5(\Read_External_Narrow.rd_rest_reg[1] [1]),
        .O(D[1]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(rip_pop),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,\Use_Reg_Ctrl.queue_exist_i_reg }),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Use_Reg_Ctrl.queue_exist_i_reg_0 }));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_381
   (carry_1,
    \Using_FPGA.MUXCY_I_0 ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \Using_FPGA.MUXCY_I_0 ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[0].sel_reg ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \read_data_status[0,0][Hit_Full] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__43 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\read_data_status[0,0][Hit_Full] ),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_382
   (lud_reg_piperun_pre1,
    A_N,
    carry_1,
    lopt,
    lopt_1);
  output lud_reg_piperun_pre1;
  input A_N;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire A_N;
  wire carry_1;
  wire lud_reg_piperun_pre1;

  assign lopt_1 = \<const1> ;
  assign lud_reg_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_44
   (port_want_new_access,
    \Using_FPGA.MUXCY_I_0 ,
    port_ready_with_valid,
    lopt,
    lopt_1,
    lopt_2);
  output port_want_new_access;
  input \Using_FPGA.MUXCY_I_0 ;
  input port_ready_with_valid;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire port_ready_with_valid;
  wire port_want_new_access;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(port_ready_with_valid),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,port_want_new_access}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_5
   (rip_refresh_reg,
    \Use_FPGA.Empty_Inst ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    rip_pop,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    lopt,
    lopt_1,
    lopt_2);
  output rip_refresh_reg;
  output \Use_FPGA.Empty_Inst ;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input rip_pop;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Use_FPGA.Empty_Inst ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire rip_pop;
  wire rip_refresh_reg;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  LUT3 #(
    .INIT(8'h74)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__7 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I1(rip_refresh_reg),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\Use_FPGA.Empty_Inst ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(rip_pop),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,rip_refresh_reg}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Use_Reg_Ctrl.queue_exist_i_reg }));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_or_n_70
   (port_want_new_access,
    \Using_FPGA.MUXCY_I_0 ,
    port_ready_with_valid,
    lopt,
    lopt_1,
    lopt_2);
  output port_want_new_access;
  input \Using_FPGA.MUXCY_I_0 ;
  input port_ready_with_valid;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Using_FPGA.MUXCY_I_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire port_ready_with_valid;
  wire port_want_new_access;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(port_ready_with_valid),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,port_want_new_access}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Using_FPGA.MUXCY_I_0 }));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module Fast_IP_Clock_system_cache_0_0_carry_piperun_step
   (update_piperun_pre5,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    update_need_tag_write,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_piperun_pre5;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input update_need_tag_write;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_need_tag_write;
  wire update_piperun_pre5;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_piperun_pre5}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__4 
       (.I0(\Using_FPGA.MUXCY_I_0 ),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .I2(update_need_tag_write),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module Fast_IP_Clock_system_cache_0_0_carry_piperun_step_139
   (update_piperun_pre4,
    \Using_FPGA.MUXCY_I_0 ,
    update_piperun_pre5,
    lopt,
    lopt_1);
  output update_piperun_pre4;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_piperun_pre5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire update_piperun_pre4;
  wire update_piperun_pre5;

  assign lopt_1 = \<const0> ;
  assign update_piperun_pre4 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module Fast_IP_Clock_system_cache_0_0_carry_piperun_step_140
   (update_piperun_pre3,
    \Using_FPGA.MUXCY_I_0 ,
    update_piperun_pre4,
    lopt,
    lopt_1);
  output update_piperun_pre3;
  input \Using_FPGA.MUXCY_I_0 ;
  input update_piperun_pre4;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire update_piperun_pre3;
  wire update_piperun_pre4;

  assign lopt_1 = \<const0> ;
  assign update_piperun_pre3 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module Fast_IP_Clock_system_cache_0_0_carry_piperun_step_141
   (update_piperun_pre2,
    S_5,
    update_piperun_pre3,
    lopt,
    lopt_1);
  output update_piperun_pre2;
  input S_5;
  input update_piperun_pre3;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S_5;
  wire update_piperun_pre2;
  wire update_piperun_pre3;

  assign lopt_1 = \<const0> ;
  assign update_piperun_pre2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module Fast_IP_Clock_system_cache_0_0_carry_piperun_step_142
   (update_piperun_pre1,
    S,
    update_piperun_pre2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_piperun_pre1;
  input S;
  input update_piperun_pre2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_piperun_pre1;
  wire update_piperun_pre2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(update_piperun_pre2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_piperun_pre1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "carry_select_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_and
   (update_read_miss_resize_ok,
    ud_rm_use_resize_part_ok,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    \lookup_read_data_info[0,0][Valid] ,
    \read_data_status[0,0][Hit_Full] ,
    r_miss_fifo_full,
    ri_port,
    r_miss_fifo_full_6,
    \read_data_status[0,1][Hit_Full] ,
    \lookup_read_data_info[0,1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output update_read_miss_resize_ok;
  input ud_rm_use_resize_part_ok;
  input \Using_FPGA.MUXCY_I ;
  input \Using_FPGA.MUXCY_I_0 ;
  input \lookup_read_data_info[0,0][Valid] ;
  input \read_data_status[0,0][Hit_Full] ;
  input r_miss_fifo_full;
  input ri_port;
  input r_miss_fifo_full_6;
  input \read_data_status[0,1][Hit_Full] ;
  input \lookup_read_data_info[0,1][Valid] ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire carry_1;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_6;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire ri_port;
  wire ud_rm_use_resize_part_ok;
  wire update_read_miss_resize_ok;

  Fast_IP_Clock_system_cache_0_0_carry_and_164 \The_Compare[0].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_0 ),
        .carry_1(carry_1),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .r_miss_fifo_full(r_miss_fifo_full),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .ri_port(ri_port),
        .ud_rm_use_resize_part_ok(ud_rm_use_resize_part_ok));
  Fast_IP_Clock_system_cache_0_0_carry_and_165 \The_Compare[1].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11),
        .r_miss_fifo_full_6(r_miss_fifo_full_6),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .ri_port(ri_port),
        .update_read_miss_resize_ok(update_read_miss_resize_ok));
endmodule

(* ORIG_REF_NAME = "carry_select_and" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_and_294
   (WEA,
    \The_Compare[0].sel_reg ,
    Carry_Out,
    A,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    lu_check_wait_for_update,
    lopt,
    lopt_1);
  output [3:0]WEA;
  input \The_Compare[0].sel_reg ;
  input Carry_Out;
  input A;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;

  wire A;
  wire Carry_Out;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire \The_Compare[0].sel_reg ;
  wire [3:0]WEA;
  wire carry_1;
  wire lopt;
  wire lopt_1;
  wire lu_check_wait_for_update;

  Fast_IP_Clock_system_cache_0_0_carry_and_361 \The_Compare[0].carry_and_I1 
       (.Carry_Out(Carry_Out),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_362 \The_Compare[1].carry_and_I1 
       (.A(A),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ),
        .WEA(WEA),
        .carry_1(carry_1),
        .lu_check_wait_for_update(lu_check_wait_for_update));
endmodule

(* ORIG_REF_NAME = "carry_select_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_and_n
   (Carry_In,
    lookup_write_hit_carry,
    \Using_FPGA.MUXCY_I ,
    update_write_miss_busy,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output Carry_In;
  input lookup_write_hit_carry;
  input \Using_FPGA.MUXCY_I ;
  input [1:0]update_write_miss_busy;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire Carry_In;
  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire lookup_write_hit_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire [1:0]update_write_miss_busy;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = lopt_6;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  Fast_IP_Clock_system_cache_0_0_carry_and_n_363 \The_Compare[0].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lookup_write_hit_carry(lookup_write_hit_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .update_write_miss_busy(update_write_miss_busy[0]));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_364 \The_Compare[1].carry_and_I1 
       (.Carry_In(Carry_In),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .update_write_miss_busy(update_write_miss_busy[1]));
endmodule

(* ORIG_REF_NAME = "carry_select_and_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_and_n__parameterized1
   (filtered_protection_bit,
    protected_bit,
    lu_mem_protect_conflict_d1,
    lu_check_protected_way,
    \Using_FPGA.MUXCY_I ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11,
    lopt_12,
    lopt_13,
    lopt_14,
    lopt_15,
    lopt_16);
  output filtered_protection_bit;
  input protected_bit;
  input lu_mem_protect_conflict_d1;
  input [1:0]lu_check_protected_way;
  input [3:0]\Using_FPGA.MUXCY_I ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;
  input lopt_6;
  output lopt_7;
  output lopt_8;
  output lopt_9;
  input lopt_10;
  output lopt_11;
  input lopt_12;
  input lopt_13;
  output lopt_14;
  input lopt_15;
  input lopt_16;

  wire [3:0]\Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire filtered_protection_bit;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;
  wire protected_bit;

  Fast_IP_Clock_system_cache_0_0_carry_and_n_340 \The_Compare[0].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [0]),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .protected_bit(protected_bit));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_341 \The_Compare[1].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [1]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_342 \The_Compare[2].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [2]),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_343 \The_Compare[3].carry_and_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [3]),
        .carry_3(carry_3),
        .filtered_protection_bit(filtered_protection_bit),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_11),
        .lopt_3(lopt_12),
        .lopt_4(lopt_13),
        .lopt_5(lopt_14),
        .lopt_6(lopt_15),
        .lopt_7(lopt_16),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or
   (lookup_data_hit_pre_stall,
    lookup_protect_conflict,
    lu_check_wait_for_update,
    update_write_miss_busy,
    \Using_FPGA.MUXCY_I ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_data_hit_pre_stall;
  input lookup_protect_conflict;
  input lu_check_wait_for_update;
  input [1:0]update_write_miss_busy;
  input \Using_FPGA.MUXCY_I ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire lookup_data_hit_pre_stall;
  wire lookup_protect_conflict;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lu_check_wait_for_update;
  wire [1:0]update_write_miss_busy;

  Fast_IP_Clock_system_cache_0_0_carry_or_376 \The_Compare[0].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[0]));
  Fast_IP_Clock_system_cache_0_0_carry_or_377 \The_Compare[1].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lookup_data_hit_pre_stall(lookup_data_hit_pre_stall),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[1]));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or_278
   (lu_io_selected_full,
    \Using_FPGA.MUXCY_I ,
    \read_data_status[0,0][Hit_Full] ,
    \read_data_status[0,1][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lu_io_selected_full;
  input \Using_FPGA.MUXCY_I ;
  input \read_data_status[0,0][Hit_Full] ;
  input \read_data_status[0,1][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lu_io_selected_full;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Full] ;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = lopt_6;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  Fast_IP_Clock_system_cache_0_0_carry_or_372 \The_Compare[0].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  Fast_IP_Clock_system_cache_0_0_carry_or_373 \The_Compare[1].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lu_io_selected_full(lu_io_selected_full),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or_280
   (lookup_io_stall_carry,
    lu_io_lud_stall_pipe,
    \lu_check_info_reg[Wr]__0 ,
    \access_data_info[0,0][Valid] ,
    \Using_FPGA.MUXCY_I ,
    \access_data_info[0,1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_io_stall_carry;
  input lu_io_lud_stall_pipe;
  input \lu_check_info_reg[Wr]__0 ;
  input \access_data_info[0,0][Valid] ;
  input \Using_FPGA.MUXCY_I ;
  input \access_data_info[0,1][Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \Using_FPGA.MUXCY_I ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Valid] ;
  wire carry_1;
  wire lookup_io_stall_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_io_lud_stall_pipe;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = lopt_6;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  Fast_IP_Clock_system_cache_0_0_carry_or_370 \The_Compare[0].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_io_lud_stall_pipe(lu_io_lud_stall_pipe));
  Fast_IP_Clock_system_cache_0_0_carry_or_371 \The_Compare[1].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .carry_1(carry_1),
        .lookup_io_stall_carry(lookup_io_stall_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or_281
   (Carry_IN,
    lookup_io_stall_carry_no_wait,
    \Using_FPGA.MUXCY_I ,
    update_write_miss_busy,
    lu_check_wait_for_update,
    \lu_check_info_reg[Wr]__0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_IN;
  input lookup_io_stall_carry_no_wait;
  input \Using_FPGA.MUXCY_I ;
  input [1:0]update_write_miss_busy;
  input lu_check_wait_for_update;
  input \lu_check_info_reg[Wr]__0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire Carry_IN;
  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire lookup_io_stall_carry_no_wait;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_wait_for_update;
  wire [1:0]update_write_miss_busy;

  Fast_IP_Clock_system_cache_0_0_carry_or_368 \The_Compare[0].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lookup_io_stall_carry_no_wait(lookup_io_stall_carry_no_wait),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[0]));
  Fast_IP_Clock_system_cache_0_0_carry_or_369 \The_Compare[1].carry_or_I1 
       (.Carry_IN(Carry_IN),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[1]));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or__parameterized2
   (lru_dirty_bit,
    S_4,
    S_5,
    S_6,
    S_7);
  output lru_dirty_bit;
  input S_4;
  input S_5;
  input S_6;
  input S_7;

  wire S_4;
  wire S_5;
  wire S_6;
  wire S_7;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lru_dirty_bit;

  Fast_IP_Clock_system_cache_0_0_carry_or_351 \The_Compare[0].carry_or_I1 
       (.S_4(S_4),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S_5),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(S_6),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(S_7));
  Fast_IP_Clock_system_cache_0_0_carry_or_352 \The_Compare[1].carry_or_I1 
       (.S_5(S_5),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_353 \The_Compare[2].carry_or_I1 
       (.S_6(S_6),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_or_354 \The_Compare[3].carry_or_I1 
       (.S_7(S_7),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lru_dirty_bit(lru_dirty_bit));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or__parameterized2_313
   (lru_protected_bit,
    S_8,
    S_9,
    S_10,
    S_11);
  output lru_protected_bit;
  input S_8;
  input S_9;
  input S_10;
  input S_11;

  wire S_10;
  wire S_11;
  wire S_8;
  wire S_9;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lru_protected_bit;

  Fast_IP_Clock_system_cache_0_0_carry_or_336 \The_Compare[0].carry_or_I1 
       (.S_8(S_8),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S_9),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(S_10),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .lopt_8(S_11));
  Fast_IP_Clock_system_cache_0_0_carry_or_337 \The_Compare[1].carry_or_I1 
       (.S_9(S_9),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt),
        .lopt_1(lopt_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_338 \The_Compare[2].carry_or_I1 
       (.S_10(S_10),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  Fast_IP_Clock_system_cache_0_0_carry_or_339 \The_Compare[3].carry_or_I1 
       (.S_11(S_11),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lru_protected_bit(lru_protected_bit));
endmodule

(* ORIG_REF_NAME = "carry_select_or_n" *) 
module Fast_IP_Clock_system_cache_0_0_carry_select_or_n
   (lud_reg_piperun_pre1,
    A_N,
    \Using_FPGA.MUXCY_I ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lud_reg_piperun_pre1;
  input A_N;
  input \Using_FPGA.MUXCY_I ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire A_N;
  wire \Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lud_reg_piperun_pre1;
  wire \read_data_status[0,0][Hit_Full] ;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  Fast_IP_Clock_system_cache_0_0_carry_or_n_381 \The_Compare[0].carry_or_I1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(A_N),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(\^lopt_4 ),
        .lopt_6(\^lopt_5 ),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_382 \The_Compare[1].carry_or_I1 
       (.A_N(A_N),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lud_reg_piperun_pre1(lud_reg_piperun_pre1));
endmodule

(* ORIG_REF_NAME = "carry_vec_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_vec_or
   (lu_check_tag_hit_all_carry,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_check_tag_hit_all_carry;
  input [3:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [3:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lu_check_tag_hit_all_carry;

  Fast_IP_Clock_system_cache_0_0_carry_or_359 \The_Compare[0].carry_and_I1 
       (.Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lu_check_tag_hit_all_carry(lu_check_tag_hit_all_carry));
endmodule

(* ORIG_REF_NAME = "carry_vec_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_vec_or__parameterized1
   (dirty_bit,
    S,
    dirty_miss_valid,
    S_0,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10);
  output dirty_bit;
  input S;
  input dirty_miss_valid;
  input S_0;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;
  output lopt_8;
  input lopt_9;
  input lopt_10;

  wire S;
  wire S_0;
  wire carry_1;
  wire dirty_bit;
  wire dirty_miss_valid;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;

  Fast_IP_Clock_system_cache_0_0_carry_or_349 \The_Compare[0].carry_and_I1 
       (.S(S),
        .carry_1(carry_1),
        .dirty_miss_valid(dirty_miss_valid),
        .lopt(lopt),
        .lopt_1(lopt_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_350 \The_Compare[1].carry_and_I1 
       (.S_0(S_0),
        .carry_1(carry_1),
        .dirty_bit(dirty_bit),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .lopt_6(lopt_8),
        .lopt_7(lopt_9),
        .lopt_8(lopt_10));
endmodule

(* ORIG_REF_NAME = "carry_vec_or" *) 
module Fast_IP_Clock_system_cache_0_0_carry_vec_or__parameterized1_314
   (protected_bit,
    protected_miss_valid,
    \Using_FPGA.MUXCY_I ,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output protected_bit;
  input protected_miss_valid;
  input [3:0]\Using_FPGA.MUXCY_I ;
  input [3:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire [3:0]Q;
  wire [3:0]\Using_FPGA.MUXCY_I ;
  wire carry_1;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire protected_bit;
  wire protected_miss_valid;

  Fast_IP_Clock_system_cache_0_0_carry_or_334 \The_Compare[0].carry_and_I1 
       (.Q(Q[2:0]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [2:0]),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .protected_miss_valid(protected_miss_valid));
  Fast_IP_Clock_system_cache_0_0_carry_or_335 \The_Compare[1].carry_and_I1 
       (.Q(Q[3]),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I [3]),
        .carry_1(carry_1),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11),
        .protected_bit(protected_bit));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module Fast_IP_Clock_system_cache_0_0_comparator
   (Carry_OUT,
    out,
    \Using_FPGA.The_Compare[3].MUXCY_I_0 );
  output Carry_OUT;
  input [10:0]out;
  input [10:0]\Using_FPGA.The_Compare[3].MUXCY_I_0 ;

  wire Carry_OUT;
  wire S;
  wire \Using_FPGA.The_Compare[1].sel_reg ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire [10:0]\Using_FPGA.The_Compare[3].MUXCY_I_0 ;
  wire \Using_FPGA.The_Compare[3].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire [10:0]out;
  wire [3:0]\NLW_Using_FPGA.The_Compare[0].MUXCY_I_CARRY4_O_UNCONNECTED ;

  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Compare[0].MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({Carry_OUT,carry_3,carry_2,carry_1}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(\NLW_Using_FPGA.The_Compare[0].MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\Using_FPGA.The_Compare[3].sel_reg ,\Using_FPGA.The_Compare[2].sel_reg ,\Using_FPGA.The_Compare[1].sel_reg ,S}));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    sel0
       (.I0(out[1]),
        .I1(\Using_FPGA.The_Compare[3].MUXCY_I_0 [1]),
        .I2(out[2]),
        .I3(\Using_FPGA.The_Compare[3].MUXCY_I_0 [2]),
        .I4(\Using_FPGA.The_Compare[3].MUXCY_I_0 [0]),
        .I5(out[0]),
        .O(S));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__0/i_ 
       (.I0(out[4]),
        .I1(\Using_FPGA.The_Compare[3].MUXCY_I_0 [4]),
        .I2(out[5]),
        .I3(\Using_FPGA.The_Compare[3].MUXCY_I_0 [5]),
        .I4(\Using_FPGA.The_Compare[3].MUXCY_I_0 [3]),
        .I5(out[3]),
        .O(\Using_FPGA.The_Compare[1].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__1/i_ 
       (.I0(out[7]),
        .I1(\Using_FPGA.The_Compare[3].MUXCY_I_0 [7]),
        .I2(out[8]),
        .I3(\Using_FPGA.The_Compare[3].MUXCY_I_0 [8]),
        .I4(\Using_FPGA.The_Compare[3].MUXCY_I_0 [6]),
        .I5(out[6]),
        .O(\Using_FPGA.The_Compare[2].sel_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    \sel0_inferred__2/i_ 
       (.I0(\Using_FPGA.The_Compare[3].MUXCY_I_0 [9]),
        .I1(out[9]),
        .I2(\Using_FPGA.The_Compare[3].MUXCY_I_0 [10]),
        .I3(out[10]),
        .O(\Using_FPGA.The_Compare[3].sel_reg ));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module Fast_IP_Clock_system_cache_0_0_comparator__parameterized1
   (Carry_OUT,
    Carry_IN,
    out,
    \Using_FPGA.The_Compare[2].MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output Carry_OUT;
  input Carry_IN;
  input [6:0]out;
  input [6:0]\Using_FPGA.The_Compare[2].MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  output lopt_6;

  wire \<const1> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire S;
  wire \Using_FPGA.The_Compare[1].sel_reg ;
  wire [6:0]\Using_FPGA.The_Compare[2].MUXCY_I_0 ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire [6:0]out;

  assign Carry_OUT = lopt_5;
  assign carry_1 = lopt;
  assign carry_2 = lopt_3;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lopt_4 = \Using_FPGA.The_Compare[1].sel_reg ;
  assign lopt_6 = \Using_FPGA.The_Compare[2].sel_reg ;
  VCC VCC
       (.P(\<const1> ));
  LUT4 #(
    .INIT(16'h9009)) 
    sel0
       (.I0(out[1]),
        .I1(\Using_FPGA.The_Compare[2].MUXCY_I_0 [1]),
        .I2(out[0]),
        .I3(\Using_FPGA.The_Compare[2].MUXCY_I_0 [0]),
        .O(S));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__0/i_ 
       (.I0(\Using_FPGA.The_Compare[2].MUXCY_I_0 [3]),
        .I1(out[3]),
        .I2(\Using_FPGA.The_Compare[2].MUXCY_I_0 [4]),
        .I3(out[4]),
        .I4(out[2]),
        .I5(\Using_FPGA.The_Compare[2].MUXCY_I_0 [2]),
        .O(\Using_FPGA.The_Compare[1].sel_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    \sel0_inferred__1/i_ 
       (.I0(out[5]),
        .I1(\Using_FPGA.The_Compare[2].MUXCY_I_0 [5]),
        .I2(out[6]),
        .I3(\Using_FPGA.The_Compare[2].MUXCY_I_0 [6]),
        .O(\Using_FPGA.The_Compare[2].sel_reg ));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module Fast_IP_Clock_system_cache_0_0_comparator__parameterized3
   (be_no_block_1to2,
    be_no_block_1to2_part,
    Q,
    \Using_FPGA.The_Compare[1].MUXCY_I_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output be_no_block_1to2;
  input be_no_block_1to2_part;
  input [4:0]Q;
  input [4:0]\Using_FPGA.The_Compare[1].MUXCY_I_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;

  wire \<const0> ;
  wire [4:0]Q;
  wire S;
  wire [4:0]\Using_FPGA.The_Compare[1].MUXCY_I_0 ;
  wire \Using_FPGA.The_Compare[1].MUXCY_I_i_1_n_0 ;
  wire be_no_block_1to2;
  wire be_no_block_1to2_part;
  wire carry_1;

  assign be_no_block_1to2 = lopt_3;
  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign lopt_4 = \Using_FPGA.The_Compare[1].MUXCY_I_i_1_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.The_Compare[0].MUXCY_I_i_1 
       (.I0(Q[1]),
        .I1(\Using_FPGA.The_Compare[1].MUXCY_I_0 [1]),
        .I2(Q[2]),
        .I3(\Using_FPGA.The_Compare[1].MUXCY_I_0 [2]),
        .I4(\Using_FPGA.The_Compare[1].MUXCY_I_0 [0]),
        .I5(Q[0]),
        .O(S));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.The_Compare[1].MUXCY_I_i_1 
       (.I0(\Using_FPGA.The_Compare[1].MUXCY_I_0 [3]),
        .I1(Q[3]),
        .I2(\Using_FPGA.The_Compare[1].MUXCY_I_0 [4]),
        .I3(Q[4]),
        .O(\Using_FPGA.The_Compare[1].MUXCY_I_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_102
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_106
   (in0,
    ARESET,
    ACLK);
  output in0;
  input ARESET;
  input ACLK;

  wire ACLK;
  wire ARESET;
  wire in0;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(ARESET),
        .Q(in0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_17
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    A_3,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    Q,
    D_0,
    ACLK,
    wm_port,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \Using_FPGA.MUXCY_I ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \access_data_info[0,0][Last] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output A_3;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input Q;
  input D_0;
  input ACLK;
  input wm_port;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input \Using_FPGA.MUXCY_I ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input \access_data_info[0,0][Last] ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;

  wire ACLK;
  wire A_3;
  wire D_0;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Using_FPGA.MUXCY_I ;
  wire \access_data_info[0,0][Last] ;
  wire wm_port;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_5__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(wm_port),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'hF5F5F3FFFFFFF3FF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I3(\access_data_info[0,0][Last] ),
        .I4(wm_port),
        .I5(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__80 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\Using_FPGA.MUXCY_I ),
        .O(A_3));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_182
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_330
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_331
   (lud_mem_use_speculative,
    p_200_in,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \lu_mem_info_reg[Wr]__0 );
  output lud_mem_use_speculative;
  output p_200_in;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \lu_mem_info_reg[Wr]__0 ;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lud_mem_use_speculative;
  wire p_200_in;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(lud_mem_use_speculative),
        .R(Q));
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__4 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I1(\lu_mem_info_reg[Wr]__0 ),
        .O(p_200_in));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_332
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    I206,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    ACLK,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ,
    update_readback_available,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ,
    update_first_write_hit,
    update_write_miss,
    update_miss,
    update_reused_tag);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [3:0]I206;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input ACLK;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  input update_readback_available;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ;
  input update_first_write_hit;
  input update_write_miss;
  input update_miss;
  input update_reused_tag;

  wire ACLK;
  wire [3:0]I206;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire update_first_write_hit;
  wire update_miss;
  wire update_readback_available;
  wire update_reused_tag;
  wire update_write_miss;

  LUT4 #(
    .INIT(16'h0020)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_11_11_i_1 
       (.I0(update_miss),
        .I1(update_readback_available),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .O(I206[0]));
  LUT6 #(
    .INIT(64'hAAAAAAAAFCCC0000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_12_12_i_1 
       (.I0(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ),
        .I1(update_first_write_hit),
        .I2(update_write_miss),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I5(update_readback_available),
        .O(I206[1]));
  LUT4 #(
    .INIT(16'h0020)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_13_13_i_1 
       (.I0(update_reused_tag),
        .I1(update_readback_available),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .O(I206[2]));
  LUT6 #(
    .INIT(64'hF2F2F2F2F0F2F2F2)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_14_14_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 ),
        .I4(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 ),
        .I5(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 ),
        .O(I206[3]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_2__1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_399
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \write_req_info[0][Kind] ,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][1] ,
    \update_info_reg[Addr][23] ,
    S,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ,
    \M_AXI_AWLEN_reg[3] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWLEN_reg[7]_0 ,
    \M_AXI_AWLEN_reg[6] ,
    \M_AXI_AWLEN_reg[6]_0 ,
    \M_AXI_AWLEN_reg[7]_1 ,
    \M_AXI_AWLEN_reg[7]_2 ,
    \M_AXI_AWLEN_reg[7]_3 ,
    \M_AXI_AWADDR_reg[23] ,
    \M_AXI_AWADDR_reg[23]_0 ,
    \M_AXI_AWADDR_reg[23]_1 ,
    \M_AXI_AWLEN_reg[3]_0 ,
    \lu_check_protected_way_reg[0] ,
    \M_AXI_AWLEN_reg[4] ,
    \M_AXI_AWLEN_reg[4]_0 ,
    \M_AXI_AWLEN_reg[5] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \write_req_info[0][Kind] ;
  output [7:0]\update_info_reg[Len][7] ;
  output [1:0]\update_info_reg[Size][1] ;
  output [16:0]\update_info_reg[Addr][23] ;
  output S;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ;
  input [2:0]\M_AXI_AWLEN_reg[3] ;
  input [6:0]\M_AXI_AWLEN_reg[7] ;
  input \M_AXI_AWLEN_reg[7]_0 ;
  input \M_AXI_AWLEN_reg[6] ;
  input \M_AXI_AWLEN_reg[6]_0 ;
  input \M_AXI_AWLEN_reg[7]_1 ;
  input \M_AXI_AWLEN_reg[7]_2 ;
  input \M_AXI_AWLEN_reg[7]_3 ;
  input [16:0]\M_AXI_AWADDR_reg[23] ;
  input \M_AXI_AWADDR_reg[23]_0 ;
  input [10:0]\M_AXI_AWADDR_reg[23]_1 ;
  input \M_AXI_AWLEN_reg[3]_0 ;
  input [3:0]\lu_check_protected_way_reg[0] ;
  input \M_AXI_AWLEN_reg[4] ;
  input \M_AXI_AWLEN_reg[4]_0 ;
  input \M_AXI_AWLEN_reg[5] ;

  wire ACLK;
  wire [16:0]\M_AXI_AWADDR_reg[23] ;
  wire \M_AXI_AWADDR_reg[23]_0 ;
  wire [10:0]\M_AXI_AWADDR_reg[23]_1 ;
  wire [2:0]\M_AXI_AWLEN_reg[3] ;
  wire \M_AXI_AWLEN_reg[3]_0 ;
  wire \M_AXI_AWLEN_reg[4] ;
  wire \M_AXI_AWLEN_reg[4]_0 ;
  wire \M_AXI_AWLEN_reg[5] ;
  wire \M_AXI_AWLEN_reg[6] ;
  wire \M_AXI_AWLEN_reg[6]_0 ;
  wire [6:0]\M_AXI_AWLEN_reg[7] ;
  wire \M_AXI_AWLEN_reg[7]_0 ;
  wire \M_AXI_AWLEN_reg[7]_1 ;
  wire \M_AXI_AWLEN_reg[7]_2 ;
  wire \M_AXI_AWLEN_reg[7]_3 ;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ;
  wire \aw_fifo_mem_reg[15][Len][2]_srl16_i_2_n_0 ;
  wire [3:0]\lu_check_protected_way_reg[0] ;
  wire [16:0]\update_info_reg[Addr][23] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [1:0]\update_info_reg[Size][1] ;
  wire \write_req_info[0][Kind] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'h0001)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__0 
       (.I0(\lu_check_protected_way_reg[0] [2]),
        .I1(\lu_check_protected_way_reg[0] [1]),
        .I2(\lu_check_protected_way_reg[0] [0]),
        .I3(\lu_check_protected_way_reg[0] [3]),
        .O(S));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][0]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Addr][23] [0]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][13]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [6]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [0]),
        .O(\update_info_reg[Addr][23] [6]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][14]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [7]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [1]),
        .O(\update_info_reg[Addr][23] [7]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][15]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [8]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [2]),
        .O(\update_info_reg[Addr][23] [8]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][16]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [9]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [3]),
        .O(\update_info_reg[Addr][23] [9]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][17]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [10]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [4]),
        .O(\update_info_reg[Addr][23] [10]));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][18]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [11]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [5]),
        .O(\update_info_reg[Addr][23] [11]));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][19]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [12]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [6]),
        .O(\update_info_reg[Addr][23] [12]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][1]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Addr][23] [1]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][20]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [13]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [7]),
        .O(\update_info_reg[Addr][23] [13]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][21]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [14]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [8]),
        .O(\update_info_reg[Addr][23] [14]));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][22]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [15]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [9]),
        .O(\update_info_reg[Addr][23] [15]));
  LUT4 #(
    .INIT(16'hBA8A)) 
    \aw_fifo_mem_reg[15][Addr][23]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [16]),
        .I1(\M_AXI_AWADDR_reg[23]_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\M_AXI_AWADDR_reg[23]_1 [10]),
        .O(\update_info_reg[Addr][23] [16]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][2]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [2]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Addr][23] [2]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][3]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Addr][23] [3]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][4]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [4]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Addr][23] [4]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][5]_srl16_i_1 
       (.I0(\M_AXI_AWADDR_reg[23] [5]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Addr][23] [5]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_1 
       (.I0(\aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\write_req_info[0][Kind] ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT5 #(
    .INIT(32'hFFFFFEEE)) 
    \aw_fifo_mem_reg[15][Len][0]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[3] [2]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\M_AXI_AWLEN_reg[3] [0]),
        .I3(\M_AXI_AWLEN_reg[3] [1]),
        .I4(\M_AXI_AWLEN_reg[7] [0]),
        .O(\update_info_reg[Len][7] [0]));
  LUT6 #(
    .INIT(64'hFFFFEFFFFEEEEEEE)) 
    \aw_fifo_mem_reg[15][Len][1]_srl16_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\M_AXI_AWLEN_reg[3] [2]),
        .I2(\M_AXI_AWLEN_reg[3] [1]),
        .I3(\M_AXI_AWLEN_reg[3] [0]),
        .I4(\M_AXI_AWLEN_reg[7] [0]),
        .I5(\M_AXI_AWLEN_reg[7] [1]),
        .O(\update_info_reg[Len][7] [1]));
  LUT6 #(
    .INIT(64'hFFFFFFFFEAE8AAA8)) 
    \aw_fifo_mem_reg[15][Len][2]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[3] [2]),
        .I1(\M_AXI_AWLEN_reg[3] [1]),
        .I2(\M_AXI_AWLEN_reg[3] [0]),
        .I3(\M_AXI_AWLEN_reg[7] [0]),
        .I4(\M_AXI_AWLEN_reg[7] [1]),
        .I5(\aw_fifo_mem_reg[15][Len][2]_srl16_i_2_n_0 ),
        .O(\update_info_reg[Len][7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT5 #(
    .INIT(32'hABBBAAAA)) 
    \aw_fifo_mem_reg[15][Len][2]_srl16_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\M_AXI_AWLEN_reg[3] [2]),
        .I2(\M_AXI_AWLEN_reg[3] [1]),
        .I3(\M_AXI_AWLEN_reg[3] [0]),
        .I4(\M_AXI_AWLEN_reg[7] [2]),
        .O(\aw_fifo_mem_reg[15][Len][2]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAAAAAEEE)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[3]_0 ),
        .I1(\M_AXI_AWLEN_reg[7] [3]),
        .I2(\M_AXI_AWLEN_reg[3] [0]),
        .I3(\M_AXI_AWLEN_reg[3] [1]),
        .I4(\M_AXI_AWLEN_reg[3] [2]),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Len][7] [3]));
  LUT3 #(
    .INIT(8'h45)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\M_AXI_AWLEN_reg[4] ),
        .I2(\M_AXI_AWLEN_reg[4]_0 ),
        .O(\update_info_reg[Len][7] [4]));
  LUT6 #(
    .INIT(64'h5555005400540054)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\M_AXI_AWLEN_reg[7]_2 ),
        .I2(\M_AXI_AWLEN_reg[3] [1]),
        .I3(\M_AXI_AWLEN_reg[5] ),
        .I4(\M_AXI_AWLEN_reg[7] [4]),
        .I5(\M_AXI_AWLEN_reg[7]_1 ),
        .O(\update_info_reg[Len][7] [5]));
  LUT6 #(
    .INIT(64'h00000000FF0D000D)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[7]_0 ),
        .I1(\M_AXI_AWLEN_reg[6] ),
        .I2(\M_AXI_AWLEN_reg[6]_0 ),
        .I3(\M_AXI_AWLEN_reg[7]_1 ),
        .I4(\M_AXI_AWLEN_reg[7] [5]),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Len][7] [6]));
  LUT6 #(
    .INIT(64'h00000000FF0D000D)) 
    \aw_fifo_mem_reg[15][Len][7]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[7]_0 ),
        .I1(\M_AXI_AWLEN_reg[7]_2 ),
        .I2(\M_AXI_AWLEN_reg[7]_3 ),
        .I3(\M_AXI_AWLEN_reg[7]_1 ),
        .I4(\M_AXI_AWLEN_reg[7] [6]),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Len][7] [7]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \aw_fifo_mem_reg[15][Size][0]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[3] [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\M_AXI_AWLEN_reg[3] [2]),
        .I3(\M_AXI_AWLEN_reg[3] [1]),
        .O(\update_info_reg[Size][1] [0]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \aw_fifo_mem_reg[15][Size][1]_srl16_i_1 
       (.I0(\M_AXI_AWLEN_reg[3] [1]),
        .I1(\M_AXI_AWLEN_reg[3] [2]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\update_info_reg[Size][1] [1]));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_400
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lud_reg_valid_reg,
    lud_mem_keep_single_during_stall_reg,
    lud_mem_already_used_reg,
    lud_step_delayed_restart_reg,
    S_0,
    lu_mem_protect_conflict_reg,
    lookup_miss,
    \lu_check_info_reg[Allocate] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \lu_check_info_reg[Allocate]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    \lu_check_info_reg[Evict] ,
    S_1,
    \lu_check_locked_hit_reg[0] ,
    lookup_read_miss,
    lookup_push_write_miss,
    lu_check_done0,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    S_2,
    \lu_check_locked_hit_reg[3] ,
    lud_mem_delayed_read_data0,
    lookup_last_beat,
    lu_check_wait_for_update_reg,
    lud_mem_keep_single_during_stall0,
    p_223_in,
    \lu_check_info_reg[Evict]_0 ,
    DI,
    \lu_check_info_reg[Wr] ,
    lu_mem_valid_reg,
    ADDRA,
    lu_ds_last_beat_next_last_n,
    \lookup_offset_len_cnt_reg[0] ,
    lookup_next_is_last_beat,
    minusOp,
    \lu_check_tag_hit_reg[3] ,
    \lu_check_info_reg[Evict]_1 ,
    SRI,
    \lu_check_info_reg[Addr_Use][5] ,
    \lu_check_info_reg[Port_Num][0] ,
    \lu_mem_info_reg[Port_Num][0] ,
    S_3,
    \lu_mem_info_reg[Wr] ,
    lookup_wm_will_use,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    \lu_check_info_reg[Keep] ,
    \lru_check_next_way_i_reg[1] ,
    \lru_check_next_way_i_reg[0] ,
    S,
    \lu_check_tag_reg[0][Addr][23] ,
    lookup_write_hit,
    \lookup_read_data_new[0,0][Valid] ,
    DIBDI,
    lru_check_used_way,
    S_4,
    S_5,
    A159_out,
    A187_out,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ,
    A172_out,
    \Use_FPGA.Full_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ,
    lud_mem_speculative_valid_reg,
    \lu_check_info_reg[Addr_Stp][3] ,
    \lu_check_info_reg[Addr_Stp][5] ,
    lu_check_wr_already_pushed_reg,
    \lookup_offset_len_cnt_reg[0]_0 ,
    lu_check_read_info_done_reg,
    \lu_check_info_reg[Evict]_2 ,
    SRI_6,
    SRI_7,
    SRI_8,
    SRI_9,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ,
    Q,
    ACLK,
    lud_reg_valid_reg_0,
    lud_reg_piperun,
    lud_mem_piperun,
    lud_mem_already_used,
    lud_mem_already_used_reg_0,
    lud_step_offset,
    lud_write_hit_done,
    lud_step_delayed_restart,
    lud_step_delayed_restart_reg_0,
    lud_step_delayed_restart_reg_1,
    \lookup_offset_len_cnt_reg[0]_1 ,
    \Using_FPGA.MUXCY_I ,
    update_miss_reg,
    \lu_check_info_reg[Evict]__0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ,
    lu_check_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ,
    update_piperun,
    S_10,
    \lu_check_info_reg[Wr]__0 ,
    CO,
    lookup_restart_mem,
    \lu_mem_info_reg[Wr]__0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 ,
    lookup_push_write_miss_pre,
    update_write_miss_full,
    lu_check_wr_already_pushed,
    lookup_protect_conflict,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_17 ,
    lookup_push_wm_stall,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ,
    lookup_access_data_late,
    I5,
    S_12,
    lud_mem_speculative_valid,
    \lud_mem_way_d1_reg[0] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ,
    D,
    p_200_in,
    lud_addr_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_19 ,
    lud_mem_last_reg,
    lud_mem_last_reg_0,
    lu_check_single_beat,
    \lookup_offset_len_cnt_reg[7] ,
    \lookup_offset_len_cnt_reg[7]_0 ,
    \lookup_offset_len_cnt_reg[7]_1 ,
    \lookup_offset_len_cnt_reg[0]_2 ,
    lookup_offset_first,
    \lu_check_info_reg[Allocate]__0 ,
    O,
    \lookup_offset_cnt_reg[5] ,
    \lookup_offset_cnt_reg[5]_0 ,
    \lookup_offset_cnt_reg[5]_1 ,
    \lookup_offset_cnt_reg[5]_2 ,
    \lookup_offset_cnt_reg[5]_3 ,
    \lud_mem_port_one_hot_reg[1] ,
    \lud_mem_port_one_hot_reg[1]_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ,
    \Using_FPGA.MUXCY_I_0 ,
    lud_mem_use_speculative,
    lu_check_wait_for_update,
    \update_info_reg[Evict] ,
    \update_way_reg[1] ,
    \update_old_tag_reg[Addr][23] ,
    \update_old_tag_reg[Addr][23]_0 ,
    \update_old_tag_reg[Addr][23]_1 ,
    \update_old_tag_reg[Addr][23]_2 ,
    hit_way_i,
    lru_check_next_way,
    update_first_write_hit_reg,
    lookup_data_hit_stall,
    \Use_FPGA.Empty_Inst ,
    lu_check_read_info_done,
    \lu_check_protected_way_reg[0] ,
    \update_way_reg[1]_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_1 ,
    access_valid,
    lookup_offset_cnt_cmb0_carry__0,
    lookup_offset_cnt_cmb0_carry__0_0,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ,
    lu_check_protected_way);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output lud_reg_valid_reg;
  output lud_mem_keep_single_during_stall_reg;
  output lud_mem_already_used_reg;
  output lud_step_delayed_restart_reg;
  output S_0;
  output lu_mem_protect_conflict_reg;
  output lookup_miss;
  output \lu_check_info_reg[Allocate] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output \lu_check_info_reg[Allocate]_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output \lu_check_info_reg[Evict] ;
  output S_1;
  output \lu_check_locked_hit_reg[0] ;
  output lookup_read_miss;
  output lookup_push_write_miss;
  output lu_check_done0;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  output S_2;
  output \lu_check_locked_hit_reg[3] ;
  output lud_mem_delayed_read_data0;
  output lookup_last_beat;
  output lu_check_wait_for_update_reg;
  output lud_mem_keep_single_during_stall0;
  output p_223_in;
  output \lu_check_info_reg[Evict]_0 ;
  output [3:0]DI;
  output \lu_check_info_reg[Wr] ;
  output lu_mem_valid_reg;
  output [8:0]ADDRA;
  output lu_ds_last_beat_next_last_n;
  output \lookup_offset_len_cnt_reg[0] ;
  output lookup_next_is_last_beat;
  output [5:0]minusOp;
  output \lu_check_tag_hit_reg[3] ;
  output \lu_check_info_reg[Evict]_1 ;
  output SRI;
  output [5:0]\lu_check_info_reg[Addr_Use][5] ;
  output \lu_check_info_reg[Port_Num][0] ;
  output \lu_mem_info_reg[Port_Num][0] ;
  output S_3;
  output \lu_mem_info_reg[Wr] ;
  output lookup_wm_will_use;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  output \lu_check_info_reg[Keep] ;
  output \lru_check_next_way_i_reg[1] ;
  output \lru_check_next_way_i_reg[0] ;
  output [3:0]S;
  output [10:0]\lu_check_tag_reg[0][Addr][23] ;
  output lookup_write_hit;
  output \lookup_read_data_new[0,0][Valid] ;
  output [2:0]DIBDI;
  output [1:0]lru_check_used_way;
  output S_4;
  output S_5;
  output A159_out;
  output A187_out;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  output A172_out;
  output \Use_FPGA.Full_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  output lud_mem_speculative_valid_reg;
  output [3:0]\lu_check_info_reg[Addr_Stp][3] ;
  output [1:0]\lu_check_info_reg[Addr_Stp][5] ;
  output lu_check_wr_already_pushed_reg;
  output [0:0]\lookup_offset_len_cnt_reg[0]_0 ;
  output lu_check_read_info_done_reg;
  output \lu_check_info_reg[Evict]_2 ;
  output SRI_6;
  output SRI_7;
  output SRI_8;
  output SRI_9;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ;
  input Q;
  input ACLK;
  input lud_reg_valid_reg_0;
  input lud_reg_piperun;
  input lud_mem_piperun;
  input lud_mem_already_used;
  input lud_mem_already_used_reg_0;
  input lud_step_offset;
  input lud_write_hit_done;
  input lud_step_delayed_restart;
  input lud_step_delayed_restart_reg_0;
  input lud_step_delayed_restart_reg_1;
  input \lookup_offset_len_cnt_reg[0]_1 ;
  input \Using_FPGA.MUXCY_I ;
  input [3:0]update_miss_reg;
  input \lu_check_info_reg[Evict]__0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ;
  input lu_check_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ;
  input update_piperun;
  input S_10;
  input \lu_check_info_reg[Wr]__0 ;
  input [0:0]CO;
  input lookup_restart_mem;
  input \lu_mem_info_reg[Wr]__0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 ;
  input lookup_push_write_miss_pre;
  input update_write_miss_full;
  input lu_check_wr_already_pushed;
  input lookup_protect_conflict;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_17 ;
  input lookup_push_wm_stall;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ;
  input lookup_access_data_late;
  input I5;
  input S_12;
  input lud_mem_speculative_valid;
  input \lud_mem_way_d1_reg[0] ;
  input [3:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 ;
  input [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ;
  input [23:0]D;
  input p_200_in;
  input lud_addr_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_19 ;
  input lud_mem_last_reg;
  input lud_mem_last_reg_0;
  input lu_check_single_beat;
  input [7:0]\lookup_offset_len_cnt_reg[7] ;
  input [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  input [7:0]\lookup_offset_len_cnt_reg[7]_1 ;
  input \lookup_offset_len_cnt_reg[0]_2 ;
  input lookup_offset_first;
  input \lu_check_info_reg[Allocate]__0 ;
  input [3:0]O;
  input [5:0]\lookup_offset_cnt_reg[5] ;
  input [5:0]\lookup_offset_cnt_reg[5]_0 ;
  input [1:0]\lookup_offset_cnt_reg[5]_1 ;
  input \lookup_offset_cnt_reg[5]_2 ;
  input \lookup_offset_cnt_reg[5]_3 ;
  input \lud_mem_port_one_hot_reg[1] ;
  input \lud_mem_port_one_hot_reg[1]_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ;
  input \Using_FPGA.MUXCY_I_0 ;
  input lud_mem_use_speculative;
  input lu_check_wait_for_update;
  input \update_info_reg[Evict] ;
  input [3:0]\update_way_reg[1] ;
  input [10:0]\update_old_tag_reg[Addr][23] ;
  input [10:0]\update_old_tag_reg[Addr][23]_0 ;
  input [10:0]\update_old_tag_reg[Addr][23]_1 ;
  input [10:0]\update_old_tag_reg[Addr][23]_2 ;
  input [1:0]hit_way_i;
  input [1:0]lru_check_next_way;
  input update_first_write_hit_reg;
  input lookup_data_hit_stall;
  input \Use_FPGA.Empty_Inst ;
  input lu_check_read_info_done;
  input \lu_check_protected_way_reg[0] ;
  input \update_way_reg[1]_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_1 ;
  input access_valid;
  input [5:0]lookup_offset_cnt_cmb0_carry__0;
  input [5:0]lookup_offset_cnt_cmb0_carry__0_0;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ;
  input [0:0]lu_check_protected_way;

  wire A159_out;
  wire A172_out;
  wire A187_out;
  wire ACLK;
  wire [8:0]ADDRA;
  wire A_N198_out;
  wire [0:0]CO;
  wire [23:0]D;
  wire [3:0]DI;
  wire [2:0]DIBDI;
  wire D_13;
  wire I5;
  wire [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire [5:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ;
  wire [3:0]O;
  wire Q;
  wire [3:0]S;
  wire SRI;
  wire SRI_6;
  wire SRI_7;
  wire SRI_8;
  wire SRI_9;
  wire S_0;
  wire S_1;
  wire S_10;
  wire S_12;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_17 ;
  wire [3:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_19 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__2_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_1 ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_2__3_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_2__5_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_3__3_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_4_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_6_n_0 ;
  wire access_valid;
  wire [1:0]hit_way_i;
  wire lookup_access_data_late;
  wire lookup_data_hit_stall;
  wire lookup_last_beat;
  wire lookup_miss;
  wire lookup_next_is_last_beat;
  wire lookup_next_is_last_beat_i_10_n_0;
  wire lookup_next_is_last_beat_i_11_n_0;
  wire lookup_next_is_last_beat_i_12_n_0;
  wire lookup_next_is_last_beat_i_4_n_0;
  wire lookup_next_is_last_beat_i_5_n_0;
  wire lookup_next_is_last_beat_i_6_n_0;
  wire lookup_next_is_last_beat_i_7_n_0;
  wire lookup_next_is_last_beat_i_8_n_0;
  wire lookup_next_is_last_beat_i_9_n_0;
  wire \lookup_offset_cnt[0]_i_2_n_0 ;
  wire \lookup_offset_cnt[1]_i_2_n_0 ;
  wire \lookup_offset_cnt[2]_i_2_n_0 ;
  wire \lookup_offset_cnt[3]_i_2_n_0 ;
  wire \lookup_offset_cnt[4]_i_2_n_0 ;
  wire \lookup_offset_cnt[5]_i_2_n_0 ;
  wire \lookup_offset_cnt[5]_i_3_n_0 ;
  wire [5:0]lookup_offset_cnt_cmb0_carry__0;
  wire [5:0]lookup_offset_cnt_cmb0_carry__0_0;
  wire [5:0]\lookup_offset_cnt_reg[5] ;
  wire [5:0]\lookup_offset_cnt_reg[5]_0 ;
  wire [1:0]\lookup_offset_cnt_reg[5]_1 ;
  wire \lookup_offset_cnt_reg[5]_2 ;
  wire \lookup_offset_cnt_reg[5]_3 ;
  wire lookup_offset_first;
  wire \lookup_offset_len_cnt[5]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[6]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[6]_i_3_n_0 ;
  wire \lookup_offset_len_cnt[7]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[7]_i_3_n_0 ;
  wire \lookup_offset_len_cnt[7]_i_4_n_0 ;
  wire \lookup_offset_len_cnt_reg[0] ;
  wire [0:0]\lookup_offset_len_cnt_reg[0]_0 ;
  wire \lookup_offset_len_cnt_reg[0]_1 ;
  wire \lookup_offset_len_cnt_reg[0]_2 ;
  wire [7:0]\lookup_offset_len_cnt_reg[7] ;
  wire [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  wire [7:0]\lookup_offset_len_cnt_reg[7]_1 ;
  wire lookup_protect_conflict;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss;
  wire lookup_push_write_miss_pre;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lookup_read_miss;
  wire lookup_restart_mem;
  wire lookup_wm_will_use;
  wire lookup_write_hit;
  wire [1:0]lru_check_next_way;
  wire \lru_check_next_way_i_reg[0] ;
  wire \lru_check_next_way_i_reg[1] ;
  wire [1:0]lru_check_used_way;
  wire lu_check_done0;
  wire [3:0]\lu_check_info_reg[Addr_Stp][3] ;
  wire [1:0]\lu_check_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_check_info_reg[Addr_Use][5] ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[Allocate]_0 ;
  wire \lu_check_info_reg[Allocate]__0 ;
  wire \lu_check_info_reg[Evict] ;
  wire \lu_check_info_reg[Evict]_0 ;
  wire \lu_check_info_reg[Evict]_1 ;
  wire \lu_check_info_reg[Evict]_2 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire \lu_check_info_reg[Keep] ;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire \lu_check_locked_hit_reg[0] ;
  wire \lu_check_locked_hit_reg[3] ;
  wire lu_check_piperun;
  wire [0:0]lu_check_protected_way;
  wire \lu_check_protected_way_reg[0] ;
  wire lu_check_read_info_done;
  wire lu_check_read_info_done_reg;
  wire lu_check_single_beat;
  wire \lu_check_tag_hit_reg[3] ;
  wire [10:0]\lu_check_tag_reg[0][Addr][23] ;
  wire lu_check_wait_for_update;
  wire lu_check_wait_for_update_reg;
  wire lu_check_wr_already_pushed;
  wire lu_check_wr_already_pushed_reg;
  wire lu_ds_last_beat_next_last_n;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire \lu_mem_info_reg[Wr] ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lud_addr_piperun;
  wire lud_mem_already_used;
  wire lud_mem_already_used_i_2_n_0;
  wire lud_mem_already_used_reg;
  wire lud_mem_already_used_reg_0;
  wire lud_mem_delayed_read_data0;
  wire lud_mem_keep_single_during_stall0;
  wire lud_mem_keep_single_during_stall_reg;
  wire lud_mem_last_reg;
  wire lud_mem_last_reg_0;
  wire lud_mem_piperun;
  wire \lud_mem_port_one_hot_reg[1] ;
  wire \lud_mem_port_one_hot_reg[1]_0 ;
  wire lud_mem_speculative_valid;
  wire lud_mem_speculative_valid_reg;
  wire lud_mem_use_speculative;
  wire \lud_mem_way_d1_reg[0] ;
  wire lud_reg_piperun;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire lud_step_delayed_restart;
  wire lud_step_delayed_restart_reg;
  wire lud_step_delayed_restart_reg_0;
  wire lud_step_delayed_restart_reg_1;
  wire lud_step_offset;
  wire lud_write_hit_done;
  wire [5:0]minusOp;
  wire p_200_in;
  wire p_223_in;
  wire update_first_write_hit_reg;
  wire \update_info_reg[Evict] ;
  wire [3:0]update_miss_reg;
  wire [10:0]\update_old_tag_reg[Addr][23] ;
  wire [10:0]\update_old_tag_reg[Addr][23]_0 ;
  wire [10:0]\update_old_tag_reg[Addr][23]_1 ;
  wire [10:0]\update_old_tag_reg[Addr][23]_2 ;
  wire update_piperun;
  wire update_reused_tag2_carry_i_10_n_0;
  wire update_reused_tag2_carry_i_11_n_0;
  wire update_reused_tag2_carry_i_12_n_0;
  wire update_reused_tag2_carry_i_13_n_0;
  wire update_reused_tag2_carry_i_14_n_0;
  wire update_reused_tag2_carry_i_15_n_0;
  wire update_reused_tag2_carry_i_5_n_0;
  wire update_reused_tag2_carry_i_6_n_0;
  wire update_reused_tag2_carry_i_7_n_0;
  wire update_reused_tag2_carry_i_8_n_0;
  wire update_reused_tag2_carry_i_9_n_0;
  wire update_reused_tag_i_4_n_0;
  wire \update_way[1]_i_2_n_0 ;
  wire [3:0]\update_way_reg[1] ;
  wire \update_way_reg[1]_0 ;
  wire update_write_miss_full;

  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[12]),
        .O(ADDRA[8]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_10 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 [3]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [3]),
        .I3(lu_check_wait_for_update_reg),
        .I4(D[3]),
        .O(DI[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_11 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 [2]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [2]),
        .I3(lu_check_wait_for_update_reg),
        .I4(D[2]),
        .O(DI[2]));
  LUT6 #(
    .INIT(64'hF7040000FFFF08FB)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_1__0 
       (.I0(hit_way_i[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(S_10),
        .I3(\lu_check_protected_way_reg[0] ),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 [1]),
        .I5(lru_check_used_way[1]),
        .O(DIBDI[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[11]),
        .O(ADDRA[7]));
  LUT6 #(
    .INIT(64'h08FBFFFF0000F704)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_2__0 
       (.I0(hit_way_i[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(S_10),
        .I3(\lu_check_protected_way_reg[0] ),
        .I4(lru_check_used_way[1]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 [0]),
        .O(DIBDI[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_3 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[10]),
        .O(ADDRA[6]));
  LUT4 #(
    .INIT(16'hF704)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_3__0 
       (.I0(hit_way_i[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(S_10),
        .I3(\lu_check_protected_way_reg[0] ),
        .O(DIBDI[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[9]),
        .O(ADDRA[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_5 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[8]),
        .O(ADDRA[4]));
  LUT6 #(
    .INIT(64'h00000000AAAAA2AA)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_57 
       (.I0(\lookup_offset_len_cnt_reg[0]_1 ),
        .I1(\lu_check_tag_hit_reg[3] ),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(\lookup_offset_len_cnt_reg[0]_2 ),
        .I5(lookup_offset_first),
        .O(\lu_check_info_reg[Wr] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_6 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[7]),
        .O(ADDRA[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_7 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[6]),
        .O(ADDRA[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_8 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 [5]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [5]),
        .I3(lu_check_wait_for_update_reg),
        .I4(D[5]),
        .O(ADDRA[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_9 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 [4]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [4]),
        .I3(lu_check_wait_for_update_reg),
        .I4(D[4]),
        .O(ADDRA[0]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_13),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFFFFFFFCC80CCC4)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 ),
        .O(\lu_check_info_reg[Allocate] ));
  LUT6 #(
    .INIT(64'hFFFFFFFFCC80CCC4)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ),
        .O(\lu_check_info_reg[Allocate]_0 ));
  LUT6 #(
    .INIT(64'hBA00BA00BAFFBA00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__2_n_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I3(lu_check_piperun),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 ),
        .I5(update_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ));
  LUT6 #(
    .INIT(64'h8888888888B8B8B8)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_17 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(lu_check_done0),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .I5(lu_check_piperun),
        .O(D_13));
  LUT6 #(
    .INIT(64'h0800FFFF08000000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__6 
       (.I0(p_200_in),
        .I1(lu_check_wait_for_update_reg),
        .I2(lookup_protect_conflict),
        .I3(lookup_last_beat),
        .I4(lud_addr_piperun),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_19 ),
        .O(lu_mem_valid_reg));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT5 #(
    .INIT(32'h0F0FCF1F)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__1 
       (.I0(\lu_check_locked_hit_reg[3] ),
        .I1(S_10),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ));
  LUT6 #(
    .INIT(64'hFFFF0000FFFE0000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [1]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [2]),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [0]),
        .I4(\lu_check_info_reg[Evict]_0 ),
        .I5(S_10),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFAAFFAAFFBAFFAA)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .I1(S_10),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .I5(\update_info_reg[Evict] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__0 
       (.I0(S_10),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(\update_info_reg[Evict] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
  LUT5 #(
    .INIT(32'hFEFEFFFE)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_3 
       (.I0(\lu_check_tag_hit_reg[3] ),
        .I1(lu_check_wait_for_update),
        .I2(lud_mem_already_used),
        .I3(lud_mem_use_speculative),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .O(lu_check_wait_for_update_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF0001FFFF)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_4 
       (.I0(update_miss_reg[3]),
        .I1(update_miss_reg[0]),
        .I2(update_miss_reg[1]),
        .I3(update_miss_reg[2]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I5(\lu_check_info_reg[Evict]__0 ),
        .O(\lu_check_tag_hit_reg[3] ));
  LUT6 #(
    .INIT(64'h0008000800000008)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__2 
       (.I0(\Use_FPGA.Empty_Inst ),
        .I1(\lu_check_info_reg[Evict]_0 ),
        .I2(lu_check_read_info_done),
        .I3(lu_check_wait_for_update),
        .I4(lookup_protect_conflict),
        .I5(S_10),
        .O(\lookup_read_data_new[0,0][Valid] ));
  LUT6 #(
    .INIT(64'h0202000200000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__4 
       (.I0(\lu_check_info_reg[Evict]_0 ),
        .I1(lu_check_read_info_done),
        .I2(lu_check_wait_for_update),
        .I3(lookup_protect_conflict),
        .I4(S_10),
        .I5(\lud_mem_port_one_hot_reg[1] ),
        .O(lu_check_read_info_done_reg));
  LUT6 #(
    .INIT(64'h00000000000000F8)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 
       (.I0(\Using_FPGA.MUXCY_I_i_2__3_n_0 ),
        .I1(\Using_FPGA.MUXCY_I_i_3__3_n_0 ),
        .I2(lookup_push_write_miss_pre),
        .I3(update_write_miss_full),
        .I4(lu_check_wr_already_pushed),
        .I5(lookup_protect_conflict),
        .O(lookup_push_write_miss));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__2 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .O(\lu_check_info_reg[Evict]_0 ));
  LUT6 #(
    .INIT(64'hB8BBB8BB0000B8BB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__12 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ),
        .I1(\lookup_offset_len_cnt_reg[0]_2 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .I3(lu_check_wait_for_update_reg),
        .I4(update_miss_reg[0]),
        .I5(lu_check_wait_for_update),
        .O(SRI_6));
  LUT6 #(
    .INIT(64'hB8BB0000B8BBB8BB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__13 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ),
        .I1(\lookup_offset_len_cnt_reg[0]_2 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .I3(lu_check_wait_for_update_reg),
        .I4(lu_check_wait_for_update),
        .I5(update_miss_reg[1]),
        .O(SRI_7));
  LUT6 #(
    .INIT(64'hB8BB0000B8BBB8BB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__14 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ),
        .I1(\lookup_offset_len_cnt_reg[0]_2 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .I3(lu_check_wait_for_update_reg),
        .I4(lu_check_wait_for_update),
        .I5(update_miss_reg[2]),
        .O(SRI_8));
  LUT6 #(
    .INIT(64'hB8BB0000B8BBB8BB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__15 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ),
        .I1(\lookup_offset_len_cnt_reg[0]_2 ),
        .I2(\lu_mem_info_reg[Wr]__0 ),
        .I3(lu_check_wait_for_update_reg),
        .I4(lu_check_wait_for_update),
        .I5(update_miss_reg[3]),
        .O(SRI_9));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'hEFCFEFEF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__5 
       (.I0(S_10),
        .I1(\lu_check_info_reg[Evict]__0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(\lu_check_info_reg[Allocate]__0 ),
        .O(SRI));
  LUT3 #(
    .INIT(8'h8A)) 
    \Using_FPGA.MUXCY_I_i_1__122 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\update_info_reg[Evict] ),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .O(A172_out));
  LUT6 #(
    .INIT(64'h0202020200020202)) 
    \Using_FPGA.MUXCY_I_i_1__126 
       (.I0(\Using_FPGA.MUXCY_I_i_2__3_n_0 ),
        .I1(lookup_protect_conflict),
        .I2(lookup_push_wm_stall),
        .I3(\Using_FPGA.MUXCY_I_i_3__3_n_0 ),
        .I4(update_write_miss_full),
        .I5(lu_check_wr_already_pushed),
        .O(\Use_FPGA.Full_Inst ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__132 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\lu_check_info_reg[Allocate]__0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAA0002)) 
    \Using_FPGA.MUXCY_I_i_1__133 
       (.I0(lud_mem_speculative_valid),
        .I1(\lu_check_locked_hit_reg[0] ),
        .I2(lookup_access_data_late),
        .I3(lud_step_delayed_restart_reg_1),
        .I4(I5),
        .I5(S_12),
        .O(lud_mem_speculative_valid_reg));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.MUXCY_I_i_1__208 
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .O(\lu_check_info_reg[Evict]_2 ));
  LUT5 #(
    .INIT(32'hAAA8A8A8)) 
    \Using_FPGA.MUXCY_I_i_1__39 
       (.I0(\lookup_offset_len_cnt_reg[0]_1 ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\Using_FPGA.MUXCY_I_i_4_n_0 ),
        .I3(\Using_FPGA.MUXCY_I ),
        .I4(\Using_FPGA.MUXCY_I_i_6_n_0 ),
        .O(S_0));
  LUT4 #(
    .INIT(16'hABBB)) 
    \Using_FPGA.MUXCY_I_i_1__45 
       (.I0(lud_step_delayed_restart_reg_0),
        .I1(lud_step_delayed_restart),
        .I2(lud_step_delayed_restart_reg_1),
        .I3(\Using_FPGA.MUXCY_I_i_4_n_0 ),
        .O(S_1));
  LUT6 #(
    .INIT(64'hDF55FF55DF55FD55)) 
    \Using_FPGA.MUXCY_I_i_1__46 
       (.I0(lu_check_done0),
        .I1(\lu_check_info_reg[Wr]__0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(S_10),
        .I5(\lu_check_locked_hit_reg[3] ),
        .O(S_2));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    \Using_FPGA.MUXCY_I_i_1__47 
       (.I0(lu_mem_protect_conflict_reg),
        .I1(\Using_FPGA.MUXCY_I_i_2__5_n_0 ),
        .I2(\Using_FPGA.MUXCY_I_0 ),
        .I3(lud_mem_use_speculative),
        .I4(lud_step_delayed_restart_reg_1),
        .I5(\lookup_offset_len_cnt_reg[0]_2 ),
        .O(S_3));
  LUT3 #(
    .INIT(8'h47)) 
    \Using_FPGA.MUXCY_I_i_1__48 
       (.I0(\lu_mem_info_reg[Wr]__0 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .O(\lu_mem_info_reg[Wr] ));
  LUT6 #(
    .INIT(64'hAAA8AAAAAAAAAAAA)) 
    \Using_FPGA.MUXCY_I_i_1__50 
       (.I0(\lookup_offset_len_cnt_reg[0]_1 ),
        .I1(lud_step_delayed_restart_reg_0),
        .I2(\Using_FPGA.MUXCY_I_1 ),
        .I3(lu_check_wait_for_update),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(S_4));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.MUXCY_I_i_1__51 
       (.I0(lud_step_delayed_restart_reg_0),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .O(S_5));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__69 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(access_valid),
        .O(A159_out));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__72 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\lu_check_info_reg[Allocate]__0 ),
        .O(A187_out));
  LUT5 #(
    .INIT(32'h80000000)) 
    \Using_FPGA.MUXCY_I_i_1__99 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\update_way_reg[1] [1]),
        .I2(\update_way_reg[1] [0]),
        .I3(\update_way_reg[1] [2]),
        .I4(\update_way_reg[1] [3]),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ));
  LUT6 #(
    .INIT(64'h0202020200020202)) 
    \Using_FPGA.MUXCY_I_i_2__2 
       (.I0(\Using_FPGA.MUXCY_I_i_2__3_n_0 ),
        .I1(lookup_protect_conflict),
        .I2(lookup_push_wm_stall),
        .I3(\Using_FPGA.MUXCY_I_i_3__3_n_0 ),
        .I4(update_write_miss_full),
        .I5(lu_check_wr_already_pushed),
        .O(lu_check_done0));
  LUT5 #(
    .INIT(32'h0000FFF7)) 
    \Using_FPGA.MUXCY_I_i_2__3 
       (.I0(lud_step_delayed_restart_reg_1),
        .I1(lud_step_delayed_restart_reg_0),
        .I2(lud_mem_already_used),
        .I3(\lu_check_locked_hit_reg[0] ),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 ),
        .O(\Using_FPGA.MUXCY_I_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \Using_FPGA.MUXCY_I_i_2__4 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [2]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [1]),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [3]),
        .I4(p_223_in),
        .O(\lu_check_locked_hit_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_2__5 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\Using_FPGA.MUXCY_I_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'h00001000)) 
    \Using_FPGA.MUXCY_I_i_3__1 
       (.I0(lud_step_delayed_restart_reg_1),
        .I1(\lookup_offset_len_cnt_reg[0]_2 ),
        .I2(lu_check_wait_for_update_reg),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 ),
        .I4(\lu_mem_info_reg[Wr]__0 ),
        .O(lu_mem_protect_conflict_reg));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Using_FPGA.MUXCY_I_i_3__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [1]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [2]),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_18 [0]),
        .O(\lu_check_locked_hit_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h02000000)) 
    \Using_FPGA.MUXCY_I_i_3__3 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_1 ),
        .I1(lu_check_wait_for_update),
        .I2(\update_info_reg[Evict] ),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\Using_FPGA.MUXCY_I_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'h11F1111111111111)) 
    \Using_FPGA.MUXCY_I_i_4 
       (.I0(\lu_check_locked_hit_reg[0] ),
        .I1(lud_mem_already_used),
        .I2(lookup_restart_mem),
        .I3(\lu_mem_info_reg[Wr]__0 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_16 ),
        .I5(lookup_read_miss),
        .O(\Using_FPGA.MUXCY_I_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    \Using_FPGA.MUXCY_I_i_6 
       (.I0(S_10),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(lookup_data_hit_stall),
        .I5(lu_check_wait_for_update),
        .O(\Using_FPGA.MUXCY_I_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lookup_next_is_last_beat_i_10
       (.I0(\lookup_offset_len_cnt_reg[7]_1 [7]),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lookup_offset_len_cnt_reg[7]_0 [7]),
        .O(lookup_next_is_last_beat_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lookup_next_is_last_beat_i_11
       (.I0(\lookup_offset_len_cnt_reg[7]_1 [3]),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lookup_offset_len_cnt_reg[7]_0 [3]),
        .O(lookup_next_is_last_beat_i_11_n_0));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lookup_next_is_last_beat_i_12
       (.I0(\lookup_offset_len_cnt_reg[7]_1 [2]),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lookup_offset_len_cnt_reg[7]_0 [2]),
        .O(lookup_next_is_last_beat_i_12_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    lookup_next_is_last_beat_i_2
       (.I0(lookup_next_is_last_beat_i_4_n_0),
        .I1(lookup_next_is_last_beat_i_5_n_0),
        .I2(\lookup_offset_len_cnt_reg[0] ),
        .I3(lookup_next_is_last_beat_i_6_n_0),
        .I4(lookup_next_is_last_beat_i_7_n_0),
        .I5(lookup_next_is_last_beat_i_8_n_0),
        .O(lookup_next_is_last_beat));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_next_is_last_beat_i_4
       (.I0(\lookup_offset_len_cnt_reg[7] [5]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [5]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [5]),
        .O(lookup_next_is_last_beat_i_4_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_next_is_last_beat_i_5
       (.I0(\lookup_offset_len_cnt_reg[7] [4]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [4]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [4]),
        .O(lookup_next_is_last_beat_i_5_n_0));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_next_is_last_beat_i_6
       (.I0(\lookup_offset_len_cnt_reg[7] [6]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [6]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [6]),
        .O(lookup_next_is_last_beat_i_6_n_0));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    lookup_next_is_last_beat_i_7
       (.I0(lookup_next_is_last_beat_i_9_n_0),
        .I1(\lookup_offset_len_cnt_reg[7] [1]),
        .I2(lookup_next_is_last_beat_i_10_n_0),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\lookup_offset_len_cnt_reg[7] [7]),
        .O(lookup_next_is_last_beat_i_7_n_0));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    lookup_next_is_last_beat_i_8
       (.I0(lookup_next_is_last_beat_i_11_n_0),
        .I1(\lookup_offset_len_cnt_reg[7] [3]),
        .I2(lookup_next_is_last_beat_i_12_n_0),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\lookup_offset_len_cnt_reg[7] [2]),
        .O(lookup_next_is_last_beat_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lookup_next_is_last_beat_i_9
       (.I0(\lookup_offset_len_cnt_reg[7]_1 [1]),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .O(lookup_next_is_last_beat_i_9_n_0));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[0]_i_1 
       (.I0(O[0]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_cnt_reg[5] [0]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_cnt_reg[5]_0 [0]),
        .I5(\lookup_offset_cnt[0]_i_2_n_0 ),
        .O(\lu_check_info_reg[Addr_Use][5] [0]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[0]_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [0]),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[0]),
        .O(\lookup_offset_cnt[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[1]_i_1 
       (.I0(O[1]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_cnt_reg[5] [1]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_cnt_reg[5]_0 [1]),
        .I5(\lookup_offset_cnt[1]_i_2_n_0 ),
        .O(\lu_check_info_reg[Addr_Use][5] [1]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[1]_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [1]),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[1]),
        .O(\lookup_offset_cnt[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[2]_i_1 
       (.I0(O[2]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_cnt_reg[5] [2]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_cnt_reg[5]_0 [2]),
        .I5(\lookup_offset_cnt[2]_i_2_n_0 ),
        .O(\lu_check_info_reg[Addr_Use][5] [2]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[2]_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [2]),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[2]),
        .O(\lookup_offset_cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[3]_i_1 
       (.I0(O[3]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_cnt_reg[5] [3]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_cnt_reg[5]_0 [3]),
        .I5(\lookup_offset_cnt[3]_i_2_n_0 ),
        .O(\lu_check_info_reg[Addr_Use][5] [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[3]_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [3]),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[3]),
        .O(\lookup_offset_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[4]_i_1 
       (.I0(\lookup_offset_cnt_reg[5]_1 [0]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_cnt_reg[5] [4]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_cnt_reg[5]_0 [4]),
        .I5(\lookup_offset_cnt[4]_i_2_n_0 ),
        .O(\lu_check_info_reg[Addr_Use][5] [4]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[4]_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [4]),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[4]),
        .O(\lookup_offset_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[5]_i_1 
       (.I0(\lookup_offset_cnt_reg[5]_1 [1]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_cnt_reg[5] [5]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_cnt_reg[5]_0 [5]),
        .I5(\lookup_offset_cnt[5]_i_3_n_0 ),
        .O(\lu_check_info_reg[Addr_Use][5] [5]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \lookup_offset_cnt[5]_i_2 
       (.I0(\lookup_offset_cnt_reg[5]_2 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lookup_offset_cnt_reg[5]_3 ),
        .O(\lookup_offset_cnt[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[5]_i_3 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [5]),
        .I1(lu_check_wait_for_update_reg),
        .I2(D[5]),
        .O(\lookup_offset_cnt[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    lookup_offset_cnt_cmb0_carry__0_i_1
       (.I0(lookup_offset_cnt_cmb0_carry__0[5]),
        .I1(lu_check_wait_for_update_reg),
        .I2(lookup_offset_cnt_cmb0_carry__0_0[5]),
        .I3(ADDRA[1]),
        .O(\lu_check_info_reg[Addr_Stp][5] [1]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry__0_i_2
       (.I0(ADDRA[0]),
        .I1(lookup_offset_cnt_cmb0_carry__0[4]),
        .I2(lu_check_wait_for_update_reg),
        .I3(lookup_offset_cnt_cmb0_carry__0_0[4]),
        .O(\lu_check_info_reg[Addr_Stp][5] [0]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_offset_cnt_cmb0_carry_i_1
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 [1]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [1]),
        .I3(lu_check_wait_for_update_reg),
        .I4(D[1]),
        .O(DI[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_offset_cnt_cmb0_carry_i_2
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 [0]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 [0]),
        .I3(lu_check_wait_for_update_reg),
        .I4(D[0]),
        .O(DI[0]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_3
       (.I0(DI[3]),
        .I1(lookup_offset_cnt_cmb0_carry__0[3]),
        .I2(lu_check_wait_for_update_reg),
        .I3(lookup_offset_cnt_cmb0_carry__0_0[3]),
        .O(\lu_check_info_reg[Addr_Stp][3] [3]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_4
       (.I0(DI[2]),
        .I1(lookup_offset_cnt_cmb0_carry__0[2]),
        .I2(lu_check_wait_for_update_reg),
        .I3(lookup_offset_cnt_cmb0_carry__0_0[2]),
        .O(\lu_check_info_reg[Addr_Stp][3] [2]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_5
       (.I0(DI[1]),
        .I1(lookup_offset_cnt_cmb0_carry__0[1]),
        .I2(lu_check_wait_for_update_reg),
        .I3(lookup_offset_cnt_cmb0_carry__0_0[1]),
        .O(\lu_check_info_reg[Addr_Stp][3] [1]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_6
       (.I0(DI[0]),
        .I1(lookup_offset_cnt_cmb0_carry__0[0]),
        .I2(lu_check_wait_for_update_reg),
        .I3(lookup_offset_cnt_cmb0_carry__0_0[0]),
        .O(\lu_check_info_reg[Addr_Stp][3] [0]));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT5 #(
    .INIT(32'h00000E00)) 
    lookup_offset_first_i_3
       (.I0(\lu_check_info_reg[Evict]__0 ),
        .I1(S_10),
        .I2(\lu_check_info_reg[Wr]__0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(\lookup_offset_len_cnt_reg[0]_2 ),
        .O(\lu_check_info_reg[Evict]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT5 #(
    .INIT(32'h47444777)) 
    \lookup_offset_len_cnt[0]_i_1 
       (.I0(\lookup_offset_len_cnt_reg[7] [0]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [0]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [0]),
        .O(\lookup_offset_len_cnt_reg[0] ));
  LUT6 #(
    .INIT(64'h555556A6AAAA56A6)) 
    \lookup_offset_len_cnt[1]_i_1 
       (.I0(\lookup_offset_len_cnt_reg[0] ),
        .I1(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .I2(lu_check_wait_for_update_reg),
        .I3(\lookup_offset_len_cnt_reg[7]_1 [1]),
        .I4(\lu_check_info_reg[Wr] ),
        .I5(\lookup_offset_len_cnt_reg[7] [1]),
        .O(minusOp[0]));
  LUT3 #(
    .INIT(8'hD2)) 
    \lookup_offset_len_cnt[2]_i_1 
       (.I0(\lookup_offset_len_cnt_reg[0] ),
        .I1(\lookup_offset_len_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_len_cnt[6]_i_3_n_0 ),
        .O(\lookup_offset_len_cnt_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT4 #(
    .INIT(16'hAA9A)) 
    \lookup_offset_len_cnt[3]_i_1 
       (.I0(\lookup_offset_len_cnt[6]_i_2_n_0 ),
        .I1(\lookup_offset_len_cnt[5]_i_2_n_0 ),
        .I2(\lookup_offset_len_cnt_reg[0] ),
        .I3(\lookup_offset_len_cnt[6]_i_3_n_0 ),
        .O(minusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'hAAA9AAAA)) 
    \lookup_offset_len_cnt[4]_i_1 
       (.I0(lookup_next_is_last_beat_i_5_n_0),
        .I1(\lookup_offset_len_cnt[6]_i_2_n_0 ),
        .I2(\lookup_offset_len_cnt[6]_i_3_n_0 ),
        .I3(\lookup_offset_len_cnt[5]_i_2_n_0 ),
        .I4(\lookup_offset_len_cnt_reg[0] ),
        .O(minusOp[2]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAA9A)) 
    \lookup_offset_len_cnt[5]_i_1 
       (.I0(lookup_next_is_last_beat_i_4_n_0),
        .I1(lookup_next_is_last_beat_i_5_n_0),
        .I2(\lookup_offset_len_cnt_reg[0] ),
        .I3(\lookup_offset_len_cnt[5]_i_2_n_0 ),
        .I4(\lookup_offset_len_cnt[6]_i_3_n_0 ),
        .I5(\lookup_offset_len_cnt[6]_i_2_n_0 ),
        .O(minusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \lookup_offset_len_cnt[5]_i_2 
       (.I0(\lookup_offset_len_cnt_reg[7] [1]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [1]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .O(\lookup_offset_len_cnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000001)) 
    \lookup_offset_len_cnt[6]_i_1 
       (.I0(lookup_next_is_last_beat_i_4_n_0),
        .I1(\lookup_offset_len_cnt[6]_i_2_n_0 ),
        .I2(\lookup_offset_len_cnt[6]_i_3_n_0 ),
        .I3(\lookup_offset_len_cnt[7]_i_2_n_0 ),
        .I4(lookup_next_is_last_beat_i_5_n_0),
        .I5(lookup_next_is_last_beat_i_6_n_0),
        .O(minusOp[4]));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \lookup_offset_len_cnt[6]_i_2 
       (.I0(\lookup_offset_len_cnt_reg[7] [3]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [3]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [3]),
        .O(\lookup_offset_len_cnt[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \lookup_offset_len_cnt[6]_i_3 
       (.I0(\lookup_offset_len_cnt_reg[7] [2]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [2]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [2]),
        .O(\lookup_offset_len_cnt[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFE00000001)) 
    \lookup_offset_len_cnt[7]_i_1 
       (.I0(lookup_next_is_last_beat_i_6_n_0),
        .I1(lookup_next_is_last_beat_i_5_n_0),
        .I2(\lookup_offset_len_cnt[7]_i_2_n_0 ),
        .I3(lookup_next_is_last_beat_i_8_n_0),
        .I4(lookup_next_is_last_beat_i_4_n_0),
        .I5(\lookup_offset_len_cnt[7]_i_3_n_0 ),
        .O(minusOp[5]));
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \lookup_offset_len_cnt[7]_i_2 
       (.I0(lookup_next_is_last_beat_i_9_n_0),
        .I1(\lookup_offset_len_cnt_reg[7] [1]),
        .I2(\lookup_offset_len_cnt[7]_i_4_n_0 ),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\lookup_offset_len_cnt_reg[7] [0]),
        .O(\lookup_offset_len_cnt[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \lookup_offset_len_cnt[7]_i_3 
       (.I0(\lookup_offset_len_cnt_reg[7] [7]),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lookup_offset_len_cnt_reg[7]_1 [7]),
        .I3(lu_check_wait_for_update_reg),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [7]),
        .O(\lookup_offset_len_cnt[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_len_cnt[7]_i_4 
       (.I0(\lookup_offset_len_cnt_reg[7]_1 [0]),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lookup_offset_len_cnt_reg[7]_0 [0]),
        .O(\lookup_offset_len_cnt[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    lookup_read_hit_d1_i_1
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(S_10),
        .O(p_223_in));
  LUT6 #(
    .INIT(64'h08FBFFFF08FB0000)) 
    \lu_check_protected_way[0]_i_1 
       (.I0(hit_way_i[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(S_10),
        .I3(\lu_check_protected_way_reg[0] ),
        .I4(lookup_protect_conflict),
        .I5(lu_check_protected_way),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 ));
  LUT4 #(
    .INIT(16'h000E)) 
    lu_check_wr_already_pushed_i_1
       (.I0(lu_check_wr_already_pushed),
        .I1(lookup_push_write_miss),
        .I2(lu_check_piperun),
        .I3(Q),
        .O(lu_check_wr_already_pushed_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    lu_ds_last_beat_next_last_n_i_1
       (.I0(lookup_next_is_last_beat_i_8_n_0),
        .I1(lookup_next_is_last_beat_i_7_n_0),
        .I2(lookup_next_is_last_beat_i_6_n_0),
        .I3(\lookup_offset_len_cnt_reg[0] ),
        .I4(lookup_next_is_last_beat_i_5_n_0),
        .I5(lookup_next_is_last_beat_i_4_n_0),
        .O(lu_ds_last_beat_next_last_n));
  LUT4 #(
    .INIT(16'hA8AA)) 
    lud_addr_pipeline_full_i_5
       (.I0(A_N198_out),
        .I1(I5),
        .I2(S_12),
        .I3(lookup_protect_conflict),
        .O(lud_mem_keep_single_during_stall_reg));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAA0002)) 
    lud_addr_pipeline_full_i_8
       (.I0(lud_mem_speculative_valid),
        .I1(\lu_check_locked_hit_reg[0] ),
        .I2(lookup_access_data_late),
        .I3(lud_step_delayed_restart_reg_1),
        .I4(I5),
        .I5(S_12),
        .O(A_N198_out));
  LUT6 #(
    .INIT(64'h00000000AAEAAAAA)) 
    lud_mem_already_used_i_1
       (.I0(lud_mem_already_used),
        .I1(lud_mem_already_used_i_2_n_0),
        .I2(lud_mem_already_used_reg_0),
        .I3(\Using_FPGA.MUXCY_I_i_2__5_n_0 ),
        .I4(lud_step_offset),
        .I5(lud_write_hit_done),
        .O(lud_mem_already_used_reg));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h00E2)) 
    lud_mem_already_used_i_2
       (.I0(lu_check_single_beat),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(lud_mem_last_reg),
        .I3(lu_check_wait_for_update_reg),
        .O(lud_mem_already_used_i_2_n_0));
  LUT6 #(
    .INIT(64'h00000000000000F2)) 
    lud_mem_delayed_read_data_i_1
       (.I0(lookup_last_beat),
        .I1(lu_check_wait_for_update_reg),
        .I2(lookup_access_data_late),
        .I3(lookup_protect_conflict),
        .I4(\lu_check_locked_hit_reg[0] ),
        .I5(lud_mem_already_used),
        .O(lud_mem_delayed_read_data0));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lud_mem_last_i_1
       (.I0(lud_mem_last_reg),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(lud_mem_last_reg_0),
        .I3(lu_check_wait_for_update_reg),
        .I4(lu_check_single_beat),
        .O(lookup_last_beat));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \lud_mem_port_one_hot[0]_i_1 
       (.I0(\lud_mem_port_one_hot_reg[1] ),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lud_mem_port_one_hot_reg[1]_0 ),
        .O(\lu_check_info_reg[Port_Num][0] ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lud_mem_port_one_hot[1]_i_1 
       (.I0(\lud_mem_port_one_hot_reg[1]_0 ),
        .I1(lu_check_wait_for_update_reg),
        .I2(\lud_mem_port_one_hot_reg[1] ),
        .O(\lu_mem_info_reg[Port_Num][0] ));
  LUT4 #(
    .INIT(16'h0100)) 
    \lud_mem_way_d1[1]_i_2 
       (.I0(\lu_check_locked_hit_reg[0] ),
        .I1(lookup_protect_conflict),
        .I2(lud_mem_piperun),
        .I3(\lud_mem_way_d1_reg[0] ),
        .O(lud_mem_keep_single_during_stall0));
  LUT5 #(
    .INIT(32'h0000CC0A)) 
    lud_reg_valid_i_1
       (.I0(lud_reg_valid_reg_0),
        .I1(lud_mem_keep_single_during_stall_reg),
        .I2(lud_reg_piperun),
        .I3(lud_mem_piperun),
        .I4(Q),
        .O(lud_reg_valid_reg));
  LUT5 #(
    .INIT(32'h0000EAAA)) 
    lud_step_delayed_restart_i_1
       (.I0(lud_step_delayed_restart),
        .I1(\Using_FPGA.MUXCY_I_i_4_n_0 ),
        .I2(lud_step_delayed_restart_reg_0),
        .I3(lud_step_delayed_restart_reg_1),
        .I4(lud_step_offset),
        .O(lud_step_delayed_restart_reg));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h00000400)) 
    update_first_write_hit_i_1
       (.I0(S_10),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(update_first_write_hit_reg),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'hF0F0F4F0)) 
    \update_info[Evict]_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\lu_check_info_reg[Wr]__0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(S_10),
        .O(\lu_check_info_reg[Keep] ));
  LUT6 #(
    .INIT(64'hAAAAAAAA00000002)) 
    update_miss_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(update_miss_reg[2]),
        .I2(update_miss_reg[1]),
        .I3(update_miss_reg[0]),
        .I4(update_miss_reg[3]),
        .I5(\lu_check_info_reg[Evict]__0 ),
        .O(lookup_miss));
  LUT6 #(
    .INIT(64'hFE3EF232CE0EC202)) 
    \update_old_tag[Addr][13]_i_1 
       (.I0(\update_old_tag_reg[Addr][23] [0]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23]_0 [0]),
        .I4(\update_old_tag_reg[Addr][23]_1 [0]),
        .I5(\update_old_tag_reg[Addr][23]_2 [0]),
        .O(\lu_check_tag_reg[0][Addr][23] [0]));
  LUT6 #(
    .INIT(64'hFBCBF8C83B0B3808)) 
    \update_old_tag[Addr][14]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_2 [1]),
        .I1(\lru_check_next_way_i_reg[0] ),
        .I2(\lru_check_next_way_i_reg[1] ),
        .I3(\update_old_tag_reg[Addr][23]_1 [1]),
        .I4(\update_old_tag_reg[Addr][23] [1]),
        .I5(\update_old_tag_reg[Addr][23]_0 [1]),
        .O(\lu_check_tag_reg[0][Addr][23] [1]));
  LUT6 #(
    .INIT(64'hFBCBF8C83B0B3808)) 
    \update_old_tag[Addr][15]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_2 [2]),
        .I1(\lru_check_next_way_i_reg[0] ),
        .I2(\lru_check_next_way_i_reg[1] ),
        .I3(\update_old_tag_reg[Addr][23]_1 [2]),
        .I4(\update_old_tag_reg[Addr][23] [2]),
        .I5(\update_old_tag_reg[Addr][23]_0 [2]),
        .O(\lu_check_tag_reg[0][Addr][23] [2]));
  LUT6 #(
    .INIT(64'hFE3EF232CE0EC202)) 
    \update_old_tag[Addr][16]_i_1 
       (.I0(\update_old_tag_reg[Addr][23] [3]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23]_0 [3]),
        .I4(\update_old_tag_reg[Addr][23]_1 [3]),
        .I5(\update_old_tag_reg[Addr][23]_2 [3]),
        .O(\lu_check_tag_reg[0][Addr][23] [3]));
  LUT6 #(
    .INIT(64'hFBCB3B0BF8C83808)) 
    \update_old_tag[Addr][17]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_1 [4]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23]_2 [4]),
        .I4(\update_old_tag_reg[Addr][23]_0 [4]),
        .I5(\update_old_tag_reg[Addr][23] [4]),
        .O(\lu_check_tag_reg[0][Addr][23] [4]));
  LUT6 #(
    .INIT(64'hFBF8CBC83B380B08)) 
    \update_old_tag[Addr][18]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_1 [5]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23] [5]),
        .I4(\update_old_tag_reg[Addr][23]_2 [5]),
        .I5(\update_old_tag_reg[Addr][23]_0 [5]),
        .O(\lu_check_tag_reg[0][Addr][23] [5]));
  LUT6 #(
    .INIT(64'hFECE3E0EF2C23202)) 
    \update_old_tag[Addr][19]_i_1 
       (.I0(\update_old_tag_reg[Addr][23] [6]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23]_2 [6]),
        .I4(\update_old_tag_reg[Addr][23]_0 [6]),
        .I5(\update_old_tag_reg[Addr][23]_1 [6]),
        .O(\lu_check_tag_reg[0][Addr][23] [6]));
  LUT6 #(
    .INIT(64'hBFBC8F8CB3B08380)) 
    \update_old_tag[Addr][20]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_0 [7]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23] [7]),
        .I4(\update_old_tag_reg[Addr][23]_2 [7]),
        .I5(\update_old_tag_reg[Addr][23]_1 [7]),
        .O(\lu_check_tag_reg[0][Addr][23] [7]));
  LUT6 #(
    .INIT(64'hFE3EF232CE0EC202)) 
    \update_old_tag[Addr][21]_i_1 
       (.I0(\update_old_tag_reg[Addr][23] [8]),
        .I1(\lru_check_next_way_i_reg[1] ),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(\update_old_tag_reg[Addr][23]_0 [8]),
        .I4(\update_old_tag_reg[Addr][23]_1 [8]),
        .I5(\update_old_tag_reg[Addr][23]_2 [8]),
        .O(\lu_check_tag_reg[0][Addr][23] [8]));
  LUT6 #(
    .INIT(64'hFBCBF8C83B0B3808)) 
    \update_old_tag[Addr][22]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_2 [9]),
        .I1(\lru_check_next_way_i_reg[0] ),
        .I2(\lru_check_next_way_i_reg[1] ),
        .I3(\update_old_tag_reg[Addr][23]_1 [9]),
        .I4(\update_old_tag_reg[Addr][23] [9]),
        .I5(\update_old_tag_reg[Addr][23]_0 [9]),
        .O(\lu_check_tag_reg[0][Addr][23] [9]));
  LUT6 #(
    .INIT(64'hFBCBF8C83B0B3808)) 
    \update_old_tag[Addr][23]_i_1 
       (.I0(\update_old_tag_reg[Addr][23]_2 [10]),
        .I1(\lru_check_next_way_i_reg[0] ),
        .I2(\lru_check_next_way_i_reg[1] ),
        .I3(\update_old_tag_reg[Addr][23]_1 [10]),
        .I4(\update_old_tag_reg[Addr][23] [10]),
        .I5(\update_old_tag_reg[Addr][23]_0 [10]),
        .O(\lu_check_tag_reg[0][Addr][23] [10]));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \update_old_tag[Addr][23]_i_2 
       (.I0(hit_way_i[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .I2(lru_check_next_way[0]),
        .O(\lru_check_next_way_i_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][23]_i_3 
       (.I0(hit_way_i[1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .I2(lru_check_next_way[1]),
        .O(\lru_check_next_way_i_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    update_read_miss_i_1
       (.I0(S_10),
        .I1(\lu_check_info_reg[Wr]__0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(lookup_read_miss));
  LUT4 #(
    .INIT(16'h0660)) 
    update_reused_tag2_carry_i_1
       (.I0(update_reused_tag2_carry_i_5_n_0),
        .I1(D[22]),
        .I2(update_reused_tag2_carry_i_6_n_0),
        .I3(D[23]),
        .O(S[3]));
  LUT6 #(
    .INIT(64'h0F3355000F3355FF)) 
    update_reused_tag2_carry_i_10
       (.I0(\update_old_tag_reg[Addr][23]_2 [3]),
        .I1(\update_old_tag_reg[Addr][23]_1 [3]),
        .I2(\update_old_tag_reg[Addr][23]_0 [3]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23] [3]),
        .O(update_reused_tag2_carry_i_10_n_0));
  LUT6 #(
    .INIT(64'h5500330F55FF330F)) 
    update_reused_tag2_carry_i_11
       (.I0(\update_old_tag_reg[Addr][23]_0 [5]),
        .I1(\update_old_tag_reg[Addr][23]_2 [5]),
        .I2(\update_old_tag_reg[Addr][23] [5]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23]_1 [5]),
        .O(update_reused_tag2_carry_i_11_n_0));
  LUT6 #(
    .INIT(64'h33000F5533FF0F55)) 
    update_reused_tag2_carry_i_12
       (.I0(\update_old_tag_reg[Addr][23] [4]),
        .I1(\update_old_tag_reg[Addr][23]_0 [4]),
        .I2(\update_old_tag_reg[Addr][23]_2 [4]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23]_1 [4]),
        .O(update_reused_tag2_carry_i_12_n_0));
  LUT6 #(
    .INIT(64'h0F3355000F3355FF)) 
    update_reused_tag2_carry_i_13
       (.I0(\update_old_tag_reg[Addr][23]_2 [0]),
        .I1(\update_old_tag_reg[Addr][23]_1 [0]),
        .I2(\update_old_tag_reg[Addr][23]_0 [0]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23] [0]),
        .O(update_reused_tag2_carry_i_13_n_0));
  LUT6 #(
    .INIT(64'h55000F3355FF0F33)) 
    update_reused_tag2_carry_i_14
       (.I0(\update_old_tag_reg[Addr][23]_0 [2]),
        .I1(\update_old_tag_reg[Addr][23] [2]),
        .I2(\update_old_tag_reg[Addr][23]_1 [2]),
        .I3(\lru_check_next_way_i_reg[1] ),
        .I4(\lru_check_next_way_i_reg[0] ),
        .I5(\update_old_tag_reg[Addr][23]_2 [2]),
        .O(update_reused_tag2_carry_i_14_n_0));
  LUT6 #(
    .INIT(64'h55000F3355FF0F33)) 
    update_reused_tag2_carry_i_15
       (.I0(\update_old_tag_reg[Addr][23]_0 [1]),
        .I1(\update_old_tag_reg[Addr][23] [1]),
        .I2(\update_old_tag_reg[Addr][23]_1 [1]),
        .I3(\lru_check_next_way_i_reg[1] ),
        .I4(\lru_check_next_way_i_reg[0] ),
        .I5(\update_old_tag_reg[Addr][23]_2 [1]),
        .O(update_reused_tag2_carry_i_15_n_0));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    update_reused_tag2_carry_i_2
       (.I0(update_reused_tag2_carry_i_7_n_0),
        .I1(D[19]),
        .I2(D[21]),
        .I3(update_reused_tag2_carry_i_8_n_0),
        .I4(D[20]),
        .I5(update_reused_tag2_carry_i_9_n_0),
        .O(S[2]));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    update_reused_tag2_carry_i_3
       (.I0(update_reused_tag2_carry_i_10_n_0),
        .I1(D[16]),
        .I2(D[18]),
        .I3(update_reused_tag2_carry_i_11_n_0),
        .I4(D[17]),
        .I5(update_reused_tag2_carry_i_12_n_0),
        .O(S[1]));
  LUT6 #(
    .INIT(64'h0000066006600000)) 
    update_reused_tag2_carry_i_4
       (.I0(update_reused_tag2_carry_i_13_n_0),
        .I1(D[13]),
        .I2(D[15]),
        .I3(update_reused_tag2_carry_i_14_n_0),
        .I4(D[14]),
        .I5(update_reused_tag2_carry_i_15_n_0),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h55000F3355FF0F33)) 
    update_reused_tag2_carry_i_5
       (.I0(\update_old_tag_reg[Addr][23]_0 [9]),
        .I1(\update_old_tag_reg[Addr][23] [9]),
        .I2(\update_old_tag_reg[Addr][23]_1 [9]),
        .I3(\lru_check_next_way_i_reg[1] ),
        .I4(\lru_check_next_way_i_reg[0] ),
        .I5(\update_old_tag_reg[Addr][23]_2 [9]),
        .O(update_reused_tag2_carry_i_5_n_0));
  LUT6 #(
    .INIT(64'h55000F3355FF0F33)) 
    update_reused_tag2_carry_i_6
       (.I0(\update_old_tag_reg[Addr][23]_0 [10]),
        .I1(\update_old_tag_reg[Addr][23] [10]),
        .I2(\update_old_tag_reg[Addr][23]_1 [10]),
        .I3(\lru_check_next_way_i_reg[1] ),
        .I4(\lru_check_next_way_i_reg[0] ),
        .I5(\update_old_tag_reg[Addr][23]_2 [10]),
        .O(update_reused_tag2_carry_i_6_n_0));
  LUT6 #(
    .INIT(64'h33550F0033550FFF)) 
    update_reused_tag2_carry_i_7
       (.I0(\update_old_tag_reg[Addr][23]_1 [6]),
        .I1(\update_old_tag_reg[Addr][23]_0 [6]),
        .I2(\update_old_tag_reg[Addr][23]_2 [6]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23] [6]),
        .O(update_reused_tag2_carry_i_7_n_0));
  LUT6 #(
    .INIT(64'h0F3355000F3355FF)) 
    update_reused_tag2_carry_i_8
       (.I0(\update_old_tag_reg[Addr][23]_2 [8]),
        .I1(\update_old_tag_reg[Addr][23]_1 [8]),
        .I2(\update_old_tag_reg[Addr][23]_0 [8]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23] [8]),
        .O(update_reused_tag2_carry_i_8_n_0));
  LUT6 #(
    .INIT(64'h0055330FFF55330F)) 
    update_reused_tag2_carry_i_9
       (.I0(\update_old_tag_reg[Addr][23]_1 [7]),
        .I1(\update_old_tag_reg[Addr][23]_2 [7]),
        .I2(\update_old_tag_reg[Addr][23] [7]),
        .I3(\lru_check_next_way_i_reg[0] ),
        .I4(\lru_check_next_way_i_reg[1] ),
        .I5(\update_old_tag_reg[Addr][23]_0 [7]),
        .O(update_reused_tag2_carry_i_9_n_0));
  LUT6 #(
    .INIT(64'hABEFFFFFFFFFFFFF)) 
    update_reused_tag_i_3
       (.I0(update_reused_tag_i_4_n_0),
        .I1(\lu_check_info_reg[Evict]__0 ),
        .I2(S_10),
        .I3(\lu_check_info_reg[Wr]__0 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I5(CO),
        .O(\lu_check_info_reg[Evict] ));
  LUT6 #(
    .INIT(64'h55000F3355FF0F33)) 
    update_reused_tag_i_4
       (.I0(\update_way_reg[1] [2]),
        .I1(\update_way_reg[1] [1]),
        .I2(\update_way_reg[1] [3]),
        .I3(\lru_check_next_way_i_reg[1] ),
        .I4(\lru_check_next_way_i_reg[0] ),
        .I5(\update_way_reg[1] [0]),
        .O(update_reused_tag_i_4_n_0));
  LUT4 #(
    .INIT(16'h08FB)) 
    \update_way[0]_i_1 
       (.I0(hit_way_i[0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(S_10),
        .I3(\lu_check_protected_way_reg[0] ),
        .O(lru_check_used_way[0]));
  LUT6 #(
    .INIT(64'h88888888BBBB8BBB)) 
    \update_way[1]_i_1 
       (.I0(hit_way_i[1]),
        .I1(\update_way[1]_i_2_n_0 ),
        .I2(\update_way_reg[1] [2]),
        .I3(\update_way_reg[1] [3]),
        .I4(lru_check_next_way[1]),
        .I5(\update_way_reg[1]_0 ),
        .O(lru_check_used_way[1]));
  LUT5 #(
    .INIT(32'hAAAAAAA8)) 
    \update_way[1]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(update_miss_reg[3]),
        .I2(update_miss_reg[0]),
        .I3(update_miss_reg[1]),
        .I4(update_miss_reg[2]),
        .O(\update_way[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    update_write_hit_i_1
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_info_reg[Evict]__0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(S_10),
        .O(lookup_write_hit));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT4 #(
    .INIT(16'h8880)) 
    update_write_miss_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\lu_check_info_reg[Wr]__0 ),
        .I2(S_10),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT5 #(
    .INIT(32'hFFFF0BFF)) 
    \wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\lu_check_info_reg[Wr]__0 ),
        .I2(\lu_check_info_reg[Evict]__0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(S_10),
        .O(lookup_wm_will_use));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_401
   (update_need_bs,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    update_piperun,
    \lu_check_info_reg[Early]__0 ,
    lu_check_piperun,
    \lu_check_info_reg[Wr]__0 ,
    lu_check_valid);
  output update_need_bs;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input update_piperun;
  input \lu_check_info_reg[Early]__0 ;
  input lu_check_piperun;
  input \lu_check_info_reg[Wr]__0 ;
  input lu_check_valid;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \lu_check_info_reg[Early]__0 ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_piperun;
  wire lu_check_valid;
  wire update_need_bs;
  wire update_piperun;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(update_need_bs),
        .R(Q));
  LUT6 #(
    .INIT(64'h0F44004400440044)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_5 
       (.I0(update_piperun),
        .I1(update_need_bs),
        .I2(\lu_check_info_reg[Early]__0 ),
        .I3(lu_check_piperun),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .I5(lu_check_valid),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_402
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \bs_fifo_mem_reg[0][Src][1] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    ACLK,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    new_bs_src,
    update_write_hit,
    \bs_fifo_mem_reg[0][Src][1]_1 ,
    \update_info[Keep] ,
    update_piperun,
    lu_check_piperun,
    aw_fifo_full,
    update_done_aw_reg,
    update_done_aw_reg_0);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \bs_fifo_mem_reg[0][Src][1] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  input ACLK;
  input [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  input [0:0]new_bs_src;
  input update_write_hit;
  input \bs_fifo_mem_reg[0][Src][1]_1 ;
  input \update_info[Keep] ;
  input update_piperun;
  input lu_check_piperun;
  input aw_fifo_full;
  input update_done_aw_reg;
  input update_done_aw_reg_0;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire aw_fifo_full;
  wire \bs_fifo_mem_reg[0][Src][1] ;
  wire [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  wire \bs_fifo_mem_reg[0][Src][1]_1 ;
  wire lu_check_piperun;
  wire [0:0]new_bs_src;
  wire update_done_aw_reg;
  wire update_done_aw_reg_0;
  wire \update_info[Keep] ;
  wire update_piperun;
  wire update_write_hit;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT3 #(
    .INIT(8'h02)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__5 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(update_piperun),
        .I2(lu_check_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'h00CFAAAAFFCFAAAA)) 
    \bs_fifo_mem[0][Src][1]_i_1 
       (.I0(\bs_fifo_mem_reg[0][Src][1]_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(new_bs_src),
        .I3(update_write_hit),
        .I4(\bs_fifo_mem_reg[0][Src][1]_1 ),
        .I5(\update_info[Keep] ),
        .O(\bs_fifo_mem_reg[0][Src][1] ));
  LUT4 #(
    .INIT(16'hFF02)) 
    update_done_aw_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(aw_fifo_full),
        .I2(update_done_aw_reg),
        .I3(update_done_aw_reg_0),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_403
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_404
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_405
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_415
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_416
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_47
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    E,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_AWSIZE_2_sp_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    ACLK,
    S0_AXI_GEN_AWSIZE,
    allowed_max_wrap_len);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [0:0]E;
  output S0_AXI_GEN_AWREADY;
  output S0_AXI_GEN_AWSIZE_2_sp_1;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input ACLK;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [1:0]allowed_max_wrap_len;

  wire ACLK;
  wire [0:0]E;
  wire Q;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWSIZE_2_sn_1;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire [1:0]allowed_max_wrap_len;

  assign S0_AXI_GEN_AWSIZE_2_sp_1 = S0_AXI_GEN_AWSIZE_2_sn_1;
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'h1)) 
    S0_AXI_GEN_AWREADY_INST_0
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(Q),
        .O(S0_AXI_GEN_AWREADY));
  LUT1 #(
    .INIT(2'h1)) 
    S_AXI_ALOCK_q_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(E));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'h51)) 
    \allowed_max_wrap_len[1]_i_1 
       (.I0(Q),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(allowed_max_wrap_len[0]),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'h00FF000400000004)) 
    \allowed_max_wrap_len[5]_i_1 
       (.I0(S0_AXI_GEN_AWSIZE[2]),
        .I1(S0_AXI_GEN_AWSIZE[1]),
        .I2(S0_AXI_GEN_AWSIZE[0]),
        .I3(Q),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I5(allowed_max_wrap_len[1]),
        .O(S0_AXI_GEN_AWSIZE_2_sn_1));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_73
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    A,
    E,
    S0_AXI_GEN_ARREADY,
    S0_AXI_GEN_ARSIZE_2_sp_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    ACLK,
    read_req_ready,
    S0_AXI_GEN_ARSIZE,
    allowed_max_wrap_len);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output A;
  output [0:0]E;
  output S0_AXI_GEN_ARREADY;
  output S0_AXI_GEN_ARSIZE_2_sp_1;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input ACLK;
  input read_req_ready;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [1:0]allowed_max_wrap_len;

  wire A;
  wire ACLK;
  wire [0:0]E;
  wire Q;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARSIZE_2_sn_1;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire [1:0]allowed_max_wrap_len;
  wire read_req_ready;

  assign S0_AXI_GEN_ARSIZE_2_sp_1 = S0_AXI_GEN_ARSIZE_2_sn_1;
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h1)) 
    S0_AXI_GEN_ARREADY_INST_0
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(Q),
        .O(S0_AXI_GEN_ARREADY));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__153 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(read_req_ready),
        .O(A));
  LUT1 #(
    .INIT(2'h1)) 
    access_is_wrap_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT3 #(
    .INIT(8'h51)) 
    \allowed_max_wrap_len[1]_i_1__0 
       (.I0(Q),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(allowed_max_wrap_len[0]),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'h00FF000400000004)) 
    \allowed_max_wrap_len[5]_i_1__0 
       (.I0(S0_AXI_GEN_ARSIZE[2]),
        .I1(S0_AXI_GEN_ARSIZE[1]),
        .I2(S0_AXI_GEN_ARSIZE[0]),
        .I3(Q),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I5(allowed_max_wrap_len[1]),
        .O(S0_AXI_GEN_ARSIZE_2_sn_1));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_85
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1
   (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ,
    S,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    D,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \wr_port_access[1][Addr] ,
    \sequential_addr_i_reg[11] ,
    aligned_addr,
    access_is_wrap,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 );
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  output \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  output S;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output [5:0]D;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [11:0]\wr_port_access[1][Addr] ;
  input [9:0]\sequential_addr_i_reg[11] ;
  input [4:0]aligned_addr;
  input access_is_wrap;
  input [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  wire ACLK;
  wire [5:0]D;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire access_is_wrap;
  wire [4:0]aligned_addr;
  wire [11:5]port_access_addr_i;
  wire \sequential_addr_i[11]_i_4_n_0 ;
  wire \sequential_addr_i[8]_i_2_n_0 ;
  wire \sequential_addr_i[8]_i_3_n_0 ;
  wire \sequential_addr_i[8]_i_4_n_0 ;
  wire [9:0]\sequential_addr_i_reg[11] ;
  wire \sequential_addr_i_reg[11]_i_1_n_2 ;
  wire \sequential_addr_i_reg[11]_i_1_n_3 ;
  wire \sequential_addr_i_reg[8]_i_1_n_0 ;
  wire \sequential_addr_i_reg[8]_i_1_n_1 ;
  wire \sequential_addr_i_reg[8]_i_1_n_2 ;
  wire \sequential_addr_i_reg[8]_i_1_n_3 ;
  wire [11:0]\wr_port_access[1][Addr] ;
  wire [3:2]\NLW_sequential_addr_i_reg[11]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_sequential_addr_i_reg[11]_i_1_O_UNCONNECTED ;
  wire [0:0]\NLW_sequential_addr_i_reg[8]_i_1_O_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hAE00AE00FFFF0000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__21 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [0]),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I4(\wr_port_access[1][Addr] [0]),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .S(Q));
  LUT6 #(
    .INIT(64'hCDC8FFFFCDC80000)) 
    \The_Bit[10].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(aligned_addr[4]),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [4]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [10]),
        .O(\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hCDC8FFFFCDC80000)) 
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [5]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [11]),
        .O(\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [1]),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [1]),
        .O(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [2]),
        .I3(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [2]),
        .O(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_1__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [3]),
        .I3(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [3]),
        .O(\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [4]),
        .I3(\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [4]),
        .O(\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [5]),
        .I3(\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\wr_port_access[1][Addr] [5]),
        .O(\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[6].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(port_access_addr_i[6]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [6]),
        .O(\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[6].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [6]),
        .I2(aligned_addr[0]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .O(port_access_addr_i[6]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[7].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(port_access_addr_i[7]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [7]),
        .O(\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[7].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [7]),
        .I2(aligned_addr[1]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .O(port_access_addr_i[7]));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[8].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(port_access_addr_i[8]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [8]),
        .O(\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[8].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [8]),
        .I2(aligned_addr[2]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [2]),
        .O(port_access_addr_i[8]));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[9].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(port_access_addr_i[9]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\wr_port_access[1][Addr] [9]),
        .O(\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[9].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [9]),
        .I2(aligned_addr[3]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [3]),
        .O(port_access_addr_i[9]));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_FPGA.Use_Full_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .O(S));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \sequential_addr_i[11]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [5]),
        .O(port_access_addr_i[11]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \sequential_addr_i[11]_i_3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(aligned_addr[4]),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [4]),
        .O(port_access_addr_i[10]));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \sequential_addr_i[11]_i_4 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [9]),
        .I2(aligned_addr[3]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [3]),
        .O(\sequential_addr_i[11]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \sequential_addr_i[8]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [8]),
        .I2(aligned_addr[2]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [2]),
        .O(\sequential_addr_i[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \sequential_addr_i[8]_i_3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [7]),
        .I2(aligned_addr[1]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .O(\sequential_addr_i[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F551DF0F0AAE2)) 
    \sequential_addr_i[8]_i_4 
       (.I0(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I1(access_is_wrap),
        .I2(aligned_addr[0]),
        .I3(\sequential_addr_i_reg[11] [6]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(\sequential_addr_i[8]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hAE00)) 
    \sequential_addr_i[8]_i_5 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [5]),
        .I3(\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(port_access_addr_i[5]));
  CARRY4 \sequential_addr_i_reg[11]_i_1 
       (.CI(\sequential_addr_i_reg[8]_i_1_n_0 ),
        .CO({\NLW_sequential_addr_i_reg[11]_i_1_CO_UNCONNECTED [3:2],\sequential_addr_i_reg[11]_i_1_n_2 ,\sequential_addr_i_reg[11]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_sequential_addr_i_reg[11]_i_1_O_UNCONNECTED [3],D[5:3]}),
        .S({1'b0,port_access_addr_i[11:10],\sequential_addr_i[11]_i_4_n_0 }));
  CARRY4 \sequential_addr_i_reg[8]_i_1 
       (.CI(1'b0),
        .CO({\sequential_addr_i_reg[8]_i_1_n_0 ,\sequential_addr_i_reg[8]_i_1_n_1 ,\sequential_addr_i_reg[8]_i_1_n_2 ,\sequential_addr_i_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,1'b0}),
        .O({D[2:0],\NLW_sequential_addr_i_reg[8]_i_1_O_UNCONNECTED [0]}),
        .S({\sequential_addr_i[8]_i_2_n_0 ,\sequential_addr_i[8]_i_3_n_0 ,\sequential_addr_i[8]_i_4_n_0 ,port_access_addr_i[5]}));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized11
   (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    S,
    S_0,
    hit_way_i,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \lu_check_info_reg[Evict]__0 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lookup_tag_current_word_i,
    Q,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    E,
    ACLK);
  output \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [3:0]\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output S;
  output S_0;
  input [1:0]hit_way_i;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input \lu_check_info_reg[Evict]__0 ;
  input [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [0:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [0:0]lookup_tag_current_word_i;
  input [3:0]Q;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  input [0:0]E;
  input ACLK;

  wire ACLK;
  wire [3:0]D12_out;
  wire [0:0]E;
  wire [3:0]Q;
  wire S;
  wire S_0;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [0:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [3:0]\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire [1:0]hit_way_i;
  wire [0:0]lookup_tag_current_word_i;
  wire \lu_check_info_reg[Evict]__0 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D12_out[0]),
        .Q(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [0]),
        .R(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__8 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D12_out[0]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D12_out[1]),
        .Q(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [1]),
        .R(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D12_out[1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D12_out[2]),
        .Q(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [2]),
        .R(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D12_out[2]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D12_out[3]),
        .Q(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [3]),
        .R(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(lookup_tag_current_word_i),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D12_out[3]));
  LUT6 #(
    .INIT(64'h0000077707770777)) 
    \Using_FPGA.MUXCY_I_i_1__91 
       (.I0(Q[1]),
        .I1(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [1]),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [0]),
        .I3(Q[0]),
        .I4(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [2]),
        .I5(Q[2]),
        .O(S));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__92 
       (.I0(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [3]),
        .I1(Q[3]),
        .O(S_0));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    update_first_write_hit_i_2
       (.I0(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [3]),
        .I1(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [2]),
        .I2(hit_way_i[1]),
        .I3(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [1]),
        .I4(hit_way_i[0]),
        .I5(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 [0]),
        .O(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized11_325
   (\lu_check_info_reg[Allocate] ,
    update_reused_tag_reg,
    \lu_check_info_reg[Allocate]__0 ,
    lu_check_piperun,
    update_reused_tag,
    Q,
    update_reused_tag_reg_0,
    update_reused_tag_reg_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \lu_check_info_reg[Evict]__0 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    E,
    ACLK);
  output \lu_check_info_reg[Allocate] ;
  input update_reused_tag_reg;
  input \lu_check_info_reg[Allocate]__0 ;
  input lu_check_piperun;
  input update_reused_tag;
  input Q;
  input update_reused_tag_reg_0;
  input update_reused_tag_reg_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \lu_check_info_reg[Evict]__0 ;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input [0:0]E;
  input ACLK;

  wire A48_out;
  wire A50_out;
  wire A52_out;
  wire ACLK;
  wire [0:0]E;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__9_n_0 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[Allocate]__0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [3:0]lu_check_locked_bits;
  wire lu_check_piperun;
  wire update_reused_tag;
  wire update_reused_tag_i_2_n_0;
  wire update_reused_tag_reg;
  wire update_reused_tag_reg_0;
  wire update_reused_tag_reg_1;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__9_n_0 ),
        .Q(lu_check_locked_bits[0]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__9 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__9_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(A48_out),
        .Q(lu_check_locked_bits[1]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__1 
       (.I0(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(A48_out));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(A50_out),
        .Q(lu_check_locked_bits[2]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1__1 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(A50_out));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(A52_out),
        .Q(lu_check_locked_bits[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_1__1 
       (.I0(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(A52_out));
  LUT6 #(
    .INIT(64'h0000000020FF2000)) 
    update_reused_tag_i_1
       (.I0(update_reused_tag_i_2_n_0),
        .I1(update_reused_tag_reg),
        .I2(\lu_check_info_reg[Allocate]__0 ),
        .I3(lu_check_piperun),
        .I4(update_reused_tag),
        .I5(Q),
        .O(\lu_check_info_reg[Allocate] ));
  LUT6 #(
    .INIT(64'hFFAAF0CC00AAF0CC)) 
    update_reused_tag_i_2
       (.I0(lu_check_locked_bits[0]),
        .I1(lu_check_locked_bits[1]),
        .I2(lu_check_locked_bits[3]),
        .I3(update_reused_tag_reg_0),
        .I4(update_reused_tag_reg_1),
        .I5(lu_check_locked_bits[2]),
        .O(update_reused_tag_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized11_326
   (\lu_check_info_reg[Allocate] ,
    \lu_check_info_reg[Allocate]_0 ,
    \lu_check_info_reg[Allocate]__0 ,
    S,
    \update_info_reg[Allocate] ,
    \update_info_reg[Allocate]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \lu_check_info_reg[Evict]__0 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    E,
    ACLK);
  output \lu_check_info_reg[Allocate] ;
  output \lu_check_info_reg[Allocate]_0 ;
  input \lu_check_info_reg[Allocate]__0 ;
  input S;
  input \update_info_reg[Allocate] ;
  input \update_info_reg[Allocate]_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_1 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \lu_check_info_reg[Evict]__0 ;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input [0:0]E;
  input ACLK;

  wire ACLK;
  wire [3:0]D8_out;
  wire [0:0]E;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_6_n_0 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[Allocate]_0 ;
  wire \lu_check_info_reg[Allocate]__0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire [3:0]lu_check_reused_bits;
  wire \update_info_reg[Allocate] ;
  wire \update_info_reg[Allocate]_0 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D8_out[0]),
        .Q(lu_check_reused_bits[0]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__7 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D8_out[0]));
  LUT5 #(
    .INIT(32'h7F337333)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_6_n_0 ),
        .I1(\lu_check_info_reg[Allocate]__0 ),
        .I2(S),
        .I3(\update_info_reg[Allocate] ),
        .I4(\update_info_reg[Allocate]_0 ),
        .O(\lu_check_info_reg[Allocate]_0 ));
  LUT6 #(
    .INIT(64'h505F3030505F3F3F)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_6 
       (.I0(lu_check_reused_bits[2]),
        .I1(lu_check_reused_bits[3]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_0 ),
        .I3(lu_check_reused_bits[0]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_1 ),
        .I5(lu_check_reused_bits[1]),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_6_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D8_out[1]),
        .Q(lu_check_reused_bits[1]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D8_out[1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D8_out[2]),
        .Q(lu_check_reused_bits[2]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D8_out[2]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D8_out[3]),
        .Q(lu_check_reused_bits[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I2(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\lu_check_info_reg[Evict]__0 ),
        .O(D8_out[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \update_info[Allocate]_i_1 
       (.I0(\lu_check_info_reg[Allocate]_0 ),
        .O(\lu_check_info_reg[Allocate] ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_333
   (lookup_access_data_late,
    A46_out,
    lud_mem_already_used_reg,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ,
    lu_mem_protect_conflict_d1,
    lookup_offset_first,
    lu_check_valid_delayed,
    \Using_FPGA.MUXCY_I ,
    lookup_read_hit_d1,
    lud_mem_already_used,
    lud_mem_speculative_valid,
    lud_mem_last,
    \lu_check_info_reg[Wr]__0 );
  output lookup_access_data_late;
  output A46_out;
  output lud_mem_already_used_reg;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ;
  input lu_mem_protect_conflict_d1;
  input lookup_offset_first;
  input lu_check_valid_delayed;
  input \Using_FPGA.MUXCY_I ;
  input lookup_read_hit_d1;
  input lud_mem_already_used;
  input lud_mem_speculative_valid;
  input lud_mem_last;
  input \lu_check_info_reg[Wr]__0 ;

  wire A46_out;
  wire ACLK;
  wire SR;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ;
  wire \Using_FPGA.MUXCY_I ;
  wire lookup_access_data_late;
  wire lookup_offset_first;
  wire lookup_read_hit_d1;
  wire \lu_check_info_reg[Wr]__0 ;
  wire lu_check_valid_delayed;
  wire lu_mem_protect_conflict_d1;
  wire lud_mem_already_used;
  wire lud_mem_already_used_reg;
  wire lud_mem_last;
  wire lud_mem_speculative_valid;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst 
       (.C(ACLK),
        .CE(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .D(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .Q(lookup_access_data_late),
        .S(SR));
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ),
        .I1(lu_mem_protect_conflict_d1),
        .O(SR));
  LUT5 #(
    .INIT(32'hAAAAAAEA)) 
    \Using_FPGA.MUXCY_I_i_1__123 
       (.I0(lookup_offset_first),
        .I1(lookup_access_data_late),
        .I2(lu_check_valid_delayed),
        .I3(\Using_FPGA.MUXCY_I ),
        .I4(lookup_read_hit_d1),
        .O(A46_out));
  LUT5 #(
    .INIT(32'h55554555)) 
    \Using_FPGA.MUXCY_I_i_1__200 
       (.I0(lud_mem_already_used),
        .I1(lookup_access_data_late),
        .I2(lud_mem_speculative_valid),
        .I3(lud_mem_last),
        .I4(\lu_check_info_reg[Wr]__0 ),
        .O(lud_mem_already_used_reg));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_55
   (queue_done,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ,
    ACLK,
    wip_fifo_full,
    queue_full);
  output queue_done;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ;
  input ACLK;
  input wip_fifo_full;
  input queue_full;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ;
  wire queue_done;
  wire queue_full;
  wire wip_fifo_full;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 ),
        .Q(queue_done),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__10 
       (.I0(queue_done),
        .I1(wip_fifo_full),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__11 
       (.I0(queue_done),
        .I1(queue_full),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_81
   (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    access_is_wrap_reg,
    S,
    \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    D,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    ACLK,
    req_last,
    access_is_wrap,
    incr_need_extra_q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \rd_port_access[1][Addr] ,
    \sequential_addr_i_reg[11] ,
    aligned_addr,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    O);
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  output access_is_wrap_reg;
  output S;
  output \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output [5:0]D;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input ACLK;
  input req_last;
  input access_is_wrap;
  input incr_need_extra_q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [11:0]\rd_port_access[1][Addr] ;
  input [9:0]\sequential_addr_i_reg[11] ;
  input [4:0]aligned_addr;
  input [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [1:0]O;

  wire ACLK;
  wire [5:0]D;
  wire [1:0]O;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__11_n_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [5:0]\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire access_is_wrap;
  wire access_is_wrap_reg;
  wire [4:0]aligned_addr;
  wire incr_need_extra_q;
  wire [11:5]port_access_addr_i;
  wire [11:0]\rd_port_access[1][Addr] ;
  wire req_last;
  wire \sequential_addr_i[11]_i_4__0_n_0 ;
  wire \sequential_addr_i[8]_i_2__0_n_0 ;
  wire \sequential_addr_i[8]_i_3__0_n_0 ;
  wire \sequential_addr_i[8]_i_4__0_n_0 ;
  wire [9:0]\sequential_addr_i_reg[11] ;
  wire \sequential_addr_i_reg[11]_i_1__0_n_2 ;
  wire \sequential_addr_i_reg[11]_i_1__0_n_3 ;
  wire \sequential_addr_i_reg[8]_i_1__0_n_0 ;
  wire \sequential_addr_i_reg[8]_i_1__0_n_1 ;
  wire \sequential_addr_i_reg[8]_i_1__0_n_2 ;
  wire \sequential_addr_i_reg[8]_i_1__0_n_3 ;
  wire [3:2]\NLW_sequential_addr_i_reg[11]_i_1__0_CO_UNCONNECTED ;
  wire [3:3]\NLW_sequential_addr_i_reg[11]_i_1__0_O_UNCONNECTED ;
  wire [0:0]\NLW_sequential_addr_i_reg[8]_i_1__0_O_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h0404FF00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__15 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__11_n_0 ),
        .I1(req_last),
        .I2(access_is_wrap),
        .I3(incr_need_extra_q),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(access_is_wrap_reg));
  LUT6 #(
    .INIT(64'hAE00AE00FFFF0000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__27 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [0]),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I4(\rd_port_access[1][Addr] [0]),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hB0FBFFFF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__11 
       (.I0(O[0]),
        .I1(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I2(O[1]),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__11_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .S(Q));
  LUT6 #(
    .INIT(64'hCDC8FFFFCDC80000)) 
    \The_Bit[10].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(aligned_addr[4]),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [4]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [10]),
        .O(\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hCDC8FFFFCDC80000)) 
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [5]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [11]),
        .O(\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__5 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [1]),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [1]),
        .O(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_1__4 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [2]),
        .I3(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [2]),
        .O(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_1__3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [3]),
        .I3(\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [3]),
        .O(\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [4]),
        .I3(\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [4]),
        .O(\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT6 #(
    .INIT(64'hAE00FFFFAE000000)) 
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [5]),
        .I3(\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(\rd_port_access[1][Addr] [5]),
        .O(\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[6].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(port_access_addr_i[6]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [6]),
        .O(\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[6].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [6]),
        .I2(aligned_addr[0]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .O(port_access_addr_i[6]));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[7].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(port_access_addr_i[7]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [7]),
        .O(\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[7].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [7]),
        .I2(aligned_addr[1]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .O(port_access_addr_i[7]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[8].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(port_access_addr_i[8]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [8]),
        .O(\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[8].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [8]),
        .I2(aligned_addr[2]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [2]),
        .O(port_access_addr_i[8]));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \The_Bit[9].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(port_access_addr_i[9]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(\rd_port_access[1][Addr] [9]),
        .O(\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \The_Bit[9].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [9]),
        .I2(aligned_addr[3]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [3]),
        .O(port_access_addr_i[9]));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_FPGA.Use_Full_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .O(S));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \sequential_addr_i[11]_i_2__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [5]),
        .O(port_access_addr_i[11]));
  LUT4 #(
    .INIT(16'hCDC8)) 
    \sequential_addr_i[11]_i_3__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(aligned_addr[4]),
        .I2(access_is_wrap),
        .I3(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [4]),
        .O(port_access_addr_i[10]));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \sequential_addr_i[11]_i_4__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [9]),
        .I2(aligned_addr[3]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [3]),
        .O(\sequential_addr_i[11]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \sequential_addr_i[8]_i_2__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [8]),
        .I2(aligned_addr[2]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [2]),
        .O(\sequential_addr_i[8]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hF4F5B0A0)) 
    \sequential_addr_i[8]_i_3__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(\sequential_addr_i_reg[11] [7]),
        .I2(aligned_addr[1]),
        .I3(access_is_wrap),
        .I4(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .O(\sequential_addr_i[8]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0F0F551DF0F0AAE2)) 
    \sequential_addr_i[8]_i_4__0 
       (.I0(\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .I1(access_is_wrap),
        .I2(aligned_addr[0]),
        .I3(\sequential_addr_i_reg[11] [6]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(\sequential_addr_i[8]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hAE00)) 
    \sequential_addr_i[8]_i_5__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .I1(access_is_wrap),
        .I2(\sequential_addr_i_reg[11] [5]),
        .I3(\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(port_access_addr_i[5]));
  CARRY4 \sequential_addr_i_reg[11]_i_1__0 
       (.CI(\sequential_addr_i_reg[8]_i_1__0_n_0 ),
        .CO({\NLW_sequential_addr_i_reg[11]_i_1__0_CO_UNCONNECTED [3:2],\sequential_addr_i_reg[11]_i_1__0_n_2 ,\sequential_addr_i_reg[11]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_sequential_addr_i_reg[11]_i_1__0_O_UNCONNECTED [3],D[5:3]}),
        .S({1'b0,port_access_addr_i[11:10],\sequential_addr_i[11]_i_4__0_n_0 }));
  CARRY4 \sequential_addr_i_reg[8]_i_1__0 
       (.CI(1'b0),
        .CO({\sequential_addr_i_reg[8]_i_1__0_n_0 ,\sequential_addr_i_reg[8]_i_1__0_n_1 ,\sequential_addr_i_reg[8]_i_1__0_n_2 ,\sequential_addr_i_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,1'b0}),
        .O({D[2:0],\NLW_sequential_addr_i_reg[8]_i_1__0_O_UNCONNECTED [0]}),
        .S({\sequential_addr_i[8]_i_2__0_n_0 ,\sequential_addr_i[8]_i_3__0_n_0 ,\sequential_addr_i[8]_i_4__0_n_0 ,port_access_addr_i[5]}));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized1_83
   (Q0_in,
    read_req_valid,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    ACLK,
    \rip_stp_reg[0] );
  output Q0_in;
  output read_req_valid;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input ACLK;
  input \rip_stp_reg[0] ;

  wire ACLK;
  wire Q;
  wire Q0_in;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire read_req_valid;
  wire \rip_stp_reg[0] ;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .Q(Q0_in),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__6 
       (.I0(Q0_in),
        .O(read_req_valid));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16_i_1__0 
       (.I0(Q0_in),
        .I1(\rip_stp_reg[0] ),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized3
   (\wr_port_access[1][Addr] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    ACLK,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg );
  output [23:0]\wr_port_access[1][Addr] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  input ACLK;
  input \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [23:0]\wr_port_access[1][Addr] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [0]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[10].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [10]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [11]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[12].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [12]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[13].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [13]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[14].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [14]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[15].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [15]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[16].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [16]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[17].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [17]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[18].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [18]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[19].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [19]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [1]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[20].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [20]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[21].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [21]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[22].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [22]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [23]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [2]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [3]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [4]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [5]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[6].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [6]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[7].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [7]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[8].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [8]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[9].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Addr] [9]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized3_57
   (\rd_port_access[1][Addr] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    ACLK,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg );
  output [23:0]\rd_port_access[1][Addr] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  input ACLK;
  input \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [23:0]\rd_port_access[1][Addr] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [0]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[10].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [10]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [11]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[12].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [12]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[13].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [13]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[14].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [14]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[15].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [15]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[16].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [16]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[17].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [17]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[18].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [18]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[19].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [19]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [1]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[20].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [20]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[21].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [21]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[22].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [22]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [23]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [2]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [3]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [4]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [5]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[6].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [6]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[7].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [7]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[8].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [8]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[9].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\rd_port_access[1][Addr] [9]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5
   (\wr_port_access[1][ID] ,
    Q,
    O,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 );
  output [0:0]\wr_port_access[1][ID] ;
  input Q;
  input O;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__26_n_0 ;
  wire [0:0]\wr_port_access[1][ID] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__26_n_0 ),
        .Q(\wr_port_access[1][ID] ),
        .R(Q));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__26 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\wr_port_access[1][ID] ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__26_n_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_48
   (write_req_failed,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output write_req_failed;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire write_req_failed;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(write_req_failed),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_49
   (write_req_last,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output write_req_last;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire write_req_last;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(write_req_last),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_50
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \arb_access_i[Allocate]1__0 ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    \arb_access_i_reg[Keep] ,
    \wr_port_access[1][Modifiable] ,
    port_ready_1,
    wr_port_keep);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \arb_access_i[Allocate]1__0 ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input \arb_access_i_reg[Keep] ;
  input \wr_port_access[1][Modifiable] ;
  input port_ready_1;
  input [0:0]wr_port_keep;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i_reg[Keep] ;
  wire port_ready_1;
  wire \wr_port_access[1][Modifiable] ;
  wire [0:0]wr_port_keep;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'h80FF8000)) 
    \arb_access_i[Keep]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\arb_access_i_reg[Keep] ),
        .I2(\wr_port_access[1][Modifiable] ),
        .I3(port_ready_1),
        .I4(wr_port_keep),
        .O(\arb_access_i[Allocate]1__0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_51
   (\wr_port_access[1][Modifiable] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \wr_port_access[1][Modifiable] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \wr_port_access[1][Modifiable] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(\wr_port_access[1][Modifiable] ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_54
   (\wr_port_access[1][Kind] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \wr_port_access[1][Kind] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \wr_port_access[1][Kind] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(\wr_port_access[1][Kind] ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_56
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    wr_port_early011_out,
    Q,
    O,
    ACLK,
    \arbiter_bp_push_i_reg[1][Early] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output wr_port_early011_out;
  input Q;
  input O;
  input ACLK;
  input \arbiter_bp_push_i_reg[1][Early] ;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__24_n_0 ;
  wire \arbiter_bp_push_i_reg[1][Early] ;
  wire wr_port_early011_out;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__24_n_0 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__24 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__24_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arbiter_bp_push_i[1][Early]_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\arbiter_bp_push_i_reg[1][Early] ),
        .O(wr_port_early011_out));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_62
   (\rd_port_access[1][ID] ,
    Q,
    O,
    ACLK,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 );
  output [0:0]\rd_port_access[1][ID] ;
  input Q;
  input O;
  input ACLK;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__30_n_0 ;
  wire [0:0]\rd_port_access[1][ID] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__30_n_0 ),
        .Q(\rd_port_access[1][ID] ),
        .R(Q));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__30 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\rd_port_access[1][ID] ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__30_n_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_74
   (read_req_last,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output read_req_last;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire read_req_last;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(read_req_last),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_80
   (\rd_port_access[1][Kind] ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \rd_port_access[1][Kind] ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \rd_port_access[1][Kind] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(\rd_port_access[1][Kind] ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_82
   (incr_need_extra_q,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output incr_need_extra_q;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire incr_need_extra_q;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(incr_need_extra_q),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_84
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    read_req_single,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    ACLK,
    \port_access_q[Size] ,
    port_ready_1,
    S0_AXI_ARSIZE,
    reduce_or,
    \ctrl_access[Size] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output read_req_single;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input ACLK;
  input [0:0]\port_access_q[Size] ;
  input port_ready_1;
  input [0:0]S0_AXI_ARSIZE;
  input reduce_or;
  input [0:0]\ctrl_access[Size] ;

  wire ACLK;
  wire O;
  wire Q;
  wire [0:0]S0_AXI_ARSIZE;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire [0:0]\ctrl_access[Size] ;
  wire [0:0]\port_access_q[Size] ;
  wire port_ready_1;
  wire read_req_single;
  wire reduce_or;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFE0FFFFEFE00000)) 
    \arb_access_i[Size][1]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(port_ready_1),
        .I3(S0_AXI_ARSIZE),
        .I4(reduce_or),
        .I5(\ctrl_access[Size] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT1 #(
    .INIT(2'h1)) 
    \rip_fifo_mem_reg[15][Single][-1111111111]_srl16_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(read_req_single));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized7
   (\wr_port_access[1][Size] ,
    Q,
    O,
    ACLK,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 );
  output [2:0]\wr_port_access[1][Size] ;
  input Q;
  input O;
  input ACLK;
  input \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [2:0]\wr_port_access[1][Size] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Size] [0]),
        .R(Q));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__23 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\wr_port_access[1][Size] [0]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Size] [1]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\wr_port_access[1][Size] [2]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized7_67
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \port_access_q[Size] ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    O,
    ACLK,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    read_req_len);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [0:0]\port_access_q[Size] ;
  output \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [0:0]\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ;
  output \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input O;
  input ACLK;
  input \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  input \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input [1:0]read_req_len;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [0:0]\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ;
  wire [0:0]\port_access_q[Size] ;
  wire [1:0]read_req_len;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__29 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\port_access_q[Size] ),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT5 #(
    .INIT(32'hABA8A8A8)) 
    \arb_access_i[Len][7]_i_6 
       (.I0(read_req_len[0]),
        .I1(\port_access_q[Size] ),
        .I2(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I4(read_req_len[1]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Len][7]_i_7 
       (.I0(\port_access_q[Size] ),
        .I1(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized9
   (in,
    Q,
    O,
    ACLK,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    full_line_beats,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 );
  output [1:0]in;
  input Q;
  input O;
  input ACLK;
  input \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  input [0:0]full_line_beats;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [0:0]full_line_beats;
  wire [1:0]in;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(in[0]),
        .R(Q));
  LUT3 #(
    .INIT(8'hAC)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__20 
       (.I0(full_line_beats),
        .I1(in[0]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(in[1]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized9_71
   (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    ACLK,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg );
  output [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  input ACLK;
  input \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [0]),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .Q(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [1]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce_kill" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_kill
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;

  wire ACLK;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce_kill" *) 
module Fast_IP_Clock_system_cache_0_0_reg_ce_kill_75
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    SRI,
    A_0,
    Q,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    rd_port_multi_part_1,
    any_port_forbid_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output SRI;
  output A_0;
  input Q;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input rd_port_multi_part_1;
  input any_port_forbid_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;

  wire ACLK;
  wire A_0;
  wire O;
  wire Q;
  wire SRI;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire any_port_forbid_1;
  wire rd_port_multi_part_1;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'hFEFF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__9 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(rd_port_multi_part_1),
        .I2(any_port_forbid_1),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(SRI));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.OR2L_Inst1_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(A_0));
endmodule

(* ORIG_REF_NAME = "sc_access" *) 
module Fast_IP_Clock_system_cache_0_0_sc_access
   (access_piperun,
    \arbiter_bp_push_i[1][Valid] ,
    ARESET,
    ACLK,
    \arb_access_i_reg[Valid] ,
    lookup_piperun,
    wr_port_ready,
    lopt,
    lopt_1,
    lopt_2);
  output access_piperun;
  output \arbiter_bp_push_i[1][Valid] ;
  input ARESET;
  input ACLK;
  input \arb_access_i_reg[Valid] ;
  input lookup_piperun;
  input wr_port_ready;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire ACLK;
  wire ARESET;
  (* DIRECT_RESET *) wire ARESET_I;
  wire access_piperun;
  wire \arb_access_i_reg[Valid] ;
  wire \arbiter_bp_push_i[1][Valid] ;
  wire lookup_piperun;
  wire lookup_piperun_post1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire wr_port_ready;

  assign lopt = lopt_3;
  assign lopt_4 = lopt_1;
  assign lopt_5 = lopt_2;
  Fast_IP_Clock_system_cache_0_0_carry_and_n_103 FE_Acs_PR_And_Inst1
       (.access_piperun(access_piperun),
        .\arbiter_bp_push_i[1][Valid] (\arbiter_bp_push_i[1][Valid] ),
        .lookup_piperun_post1(lookup_piperun_post1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .wr_port_ready(wr_port_ready));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_104 FE_Acs_PR_Or_Inst1
       (.\arb_access_i_reg[Valid] (\arb_access_i_reg[Valid] ),
        .lookup_piperun(lookup_piperun),
        .lookup_piperun_post1(lookup_piperun_post1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_105 Reset_Inst
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .in0(ARESET_I));
endmodule

(* ORIG_REF_NAME = "sc_arbiter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_arbiter
   (Q,
    port_ready_1,
    rd_port_ready_cmb_0,
    wr_port_ready,
    rd_port_ready,
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_0 ,
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ,
    rd_port_multi_part_1,
    any_port_forbid_1,
    \arb_access_i_reg[Valid]_0 ,
    \arb_access[Wr] ,
    \access_info[0][Port_Num] ,
    \access_info[0][Kind] ,
    \arbiter_bp_push_prt[1][Valid] ,
    \arbiter_bp_push_prt[1][Early] ,
    \arbiter_bp_push_prt[0][Valid] ,
    \arbiter_bp_push_prt[0][Early] ,
    \arbiter_bp_push_prt[0][Barrier] ,
    ctrl_ready_i_reg_0,
    \arb_access_i_reg[Evict]_0 ,
    \access_info[0][Early] ,
    \access_info[0][Keep] ,
    \The_Compare[0].sel_reg ,
    \arb_access_i_reg[Addr][23]_0 ,
    A,
    A161_out,
    lu_mem_write_alloc0,
    reduce_or,
    queue_push9_out,
    S,
    \arb_access_i_reg[Valid]_1 ,
    wr_port_keep,
    \access_info[0][Allocate] ,
    \arb_access_i_reg[Size][1]_0 ,
    \arb_access_i_reg[Size][2]_0 ,
    \arb_access_i_reg[Addr][12]_0 ,
    \arb_access_i_reg[Addr][12]_1 ,
    \arb_access_i_reg[Addr][12]_2 ,
    S0_AXI_AWREADY,
    ctrl_ready_i_reg_1,
    \arb_access_i_reg[Len][7]_0 ,
    \arb_access_i_reg[Size][1]_1 ,
    lu_mem_single_beat,
    ACLK,
    ARESET,
    access_piperun,
    \arb_access_i_reg[Valid]_2 ,
    dvm_2nd_part_reg_0,
    SRI,
    \arbiter_bp_push_i[1][Valid] ,
    wr_port_early011_out,
    S0_AXI_AWBAR,
    \arb_prohibit_quick_reg[0]_0 ,
    in,
    \Using_FPGA.MUXCY_I ,
    \ctrl_access[Internal_Cmd] ,
    queue_full,
    S0_AXI_AWVALID,
    S0_AXI_ARVALID,
    read_req_ready,
    \rd_port_access[0][Valid] ,
    \rd_port_access[1][Valid] ,
    CE,
    \wr_port_access[1][Bufferable] ,
    \wr_port_access[1][Other_Allocate] ,
    S0_AXI_ARSNOOP,
    S0_AXI_ARADDR,
    \wr_port_access[1][Valid] ,
    \arb_access_i_reg[Len][5]_0 ,
    S0_AXI_AWLEN,
    \arb_access_i_reg[Len][0]_0 ,
    \arb_access_i_reg[Len][1]_0 ,
    \arb_access_i_reg[Len][2]_0 ,
    \arb_access_i_reg[Len][3]_0 ,
    \arb_access_i_reg[Len][4]_0 ,
    \arb_access_i_reg[Len][5]_1 ,
    \arb_access_i_reg[Len][7]_1 ,
    S0_AXI_ARLEN,
    \rd_port_access[1][Len] ,
    \arb_access_i_reg[Len][6]_0 ,
    \wr_port_access[1][Addr] ,
    S0_AXI_AWADDR,
    \rd_port_access[1][Addr] ,
    \ctrl_access[Addr] ,
    \wr_port_access[1][Size] ,
    S0_AXI_AWSIZE,
    \arb_access_i_reg[Size][1]_2 ,
    S0_AXI_ARSIZE,
    \rd_port_access[1][Allocate] ,
    \port_access_q[Size] ,
    \wr_port_access[1][Kind] ,
    S0_AXI_AWBURST,
    \rd_port_access[1][Kind] ,
    S0_AXI_ARBURST,
    S0_AXI_AWCACHE,
    \arb_access_i[Allocate]1__0 ,
    S0_AXI_ARCACHE,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    ctrl_init_done_i,
    \read_data_status[0,1][Hit_Fit] ,
    \arb_prohibit_read_reg[1]_0 ,
    \lookup_read_data_new[0,0][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output Q;
  output port_ready_1;
  output rd_port_ready_cmb_0;
  output wr_port_ready;
  output rd_port_ready;
  output \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_0 ;
  output \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ;
  output rd_port_multi_part_1;
  output any_port_forbid_1;
  output \arb_access_i_reg[Valid]_0 ;
  output \arb_access[Wr] ;
  output [0:0]\access_info[0][Port_Num] ;
  output \access_info[0][Kind] ;
  output \arbiter_bp_push_prt[1][Valid] ;
  output \arbiter_bp_push_prt[1][Early] ;
  output \arbiter_bp_push_prt[0][Valid] ;
  output \arbiter_bp_push_prt[0][Early] ;
  output \arbiter_bp_push_prt[0][Barrier] ;
  output ctrl_ready_i_reg_0;
  output \arb_access_i_reg[Evict]_0 ;
  output \access_info[0][Early] ;
  output \access_info[0][Keep] ;
  output \The_Compare[0].sel_reg ;
  output [23:0]\arb_access_i_reg[Addr][23]_0 ;
  output A;
  output A161_out;
  output lu_mem_write_alloc0;
  output reduce_or;
  output queue_push9_out;
  output S;
  output \arb_access_i_reg[Valid]_1 ;
  output [0:0]wr_port_keep;
  output \access_info[0][Allocate] ;
  output [5:0]\arb_access_i_reg[Size][1]_0 ;
  output [2:0]\arb_access_i_reg[Size][2]_0 ;
  output \arb_access_i_reg[Addr][12]_0 ;
  output \arb_access_i_reg[Addr][12]_1 ;
  output \arb_access_i_reg[Addr][12]_2 ;
  output S0_AXI_AWREADY;
  output [0:0]ctrl_ready_i_reg_1;
  output [7:0]\arb_access_i_reg[Len][7]_0 ;
  output [5:0]\arb_access_i_reg[Size][1]_1 ;
  output lu_mem_single_beat;
  input ACLK;
  input ARESET;
  input access_piperun;
  input \arb_access_i_reg[Valid]_2 ;
  input dvm_2nd_part_reg_0;
  input SRI;
  input \arbiter_bp_push_i[1][Valid] ;
  input wr_port_early011_out;
  input [0:0]S0_AXI_AWBAR;
  input \arb_prohibit_quick_reg[0]_0 ;
  input [6:0]in;
  input \Using_FPGA.MUXCY_I ;
  input \ctrl_access[Internal_Cmd] ;
  input queue_full;
  input S0_AXI_AWVALID;
  input S0_AXI_ARVALID;
  input read_req_ready;
  input \rd_port_access[0][Valid] ;
  input \rd_port_access[1][Valid] ;
  input [0:0]CE;
  input \wr_port_access[1][Bufferable] ;
  input \wr_port_access[1][Other_Allocate] ;
  input [3:0]S0_AXI_ARSNOOP;
  input [23:0]S0_AXI_ARADDR;
  input \wr_port_access[1][Valid] ;
  input [5:0]\arb_access_i_reg[Len][5]_0 ;
  input [5:0]S0_AXI_AWLEN;
  input \arb_access_i_reg[Len][0]_0 ;
  input \arb_access_i_reg[Len][1]_0 ;
  input \arb_access_i_reg[Len][2]_0 ;
  input \arb_access_i_reg[Len][3]_0 ;
  input \arb_access_i_reg[Len][4]_0 ;
  input \arb_access_i_reg[Len][5]_1 ;
  input \arb_access_i_reg[Len][7]_1 ;
  input [1:0]S0_AXI_ARLEN;
  input [1:0]\rd_port_access[1][Len] ;
  input \arb_access_i_reg[Len][6]_0 ;
  input [23:0]\wr_port_access[1][Addr] ;
  input [23:0]S0_AXI_AWADDR;
  input [23:0]\rd_port_access[1][Addr] ;
  input [8:0]\ctrl_access[Addr] ;
  input [2:0]\wr_port_access[1][Size] ;
  input [2:0]S0_AXI_AWSIZE;
  input \arb_access_i_reg[Size][1]_2 ;
  input [1:0]S0_AXI_ARSIZE;
  input \rd_port_access[1][Allocate] ;
  input [1:0]\port_access_q[Size] ;
  input \wr_port_access[1][Kind] ;
  input [1:0]S0_AXI_AWBURST;
  input \rd_port_access[1][Kind] ;
  input [1:0]S0_AXI_ARBURST;
  input [2:0]S0_AXI_AWCACHE;
  input \arb_access_i[Allocate]1__0 ;
  input [0:0]S0_AXI_ARCACHE;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input ctrl_init_done_i;
  input \read_data_status[0,1][Hit_Fit] ;
  input \arb_prohibit_read_reg[1]_0 ;
  input \lookup_read_data_new[0,0][Valid] ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;

  wire A;
  wire A161_out;
  wire ACLK;
  wire ARESET;
  wire [0:0]CE;
  wire \Gen_Block[0].LU/lu_mem_single_beat_i_2_n_0 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_0 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_10 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_11 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_12 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_13 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_14 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_15 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_16 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_17 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_18 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_2 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_3 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_4 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_5 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_6 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_7 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_8 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_9 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ;
  wire \Gen_Port_Ready[0].wr_port_early_reg ;
  wire \Gen_Port_Ready[1].Init_Inst_n_1 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_10 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_11 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_12 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_13 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_14 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_15 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_16 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_17 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_18 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_19 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_2 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_20 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_21 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_22 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_23 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_24 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_25 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_26 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_27 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_28 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_29 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_3 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_30 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_31 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_32 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_33 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_34 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_36 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_37 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_4 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_5 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_6 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_7 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_8 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_9 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst_n_1 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst_n_4 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_1 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_4 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_5 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_6 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_7 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_8 ;
  wire \Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1_n_0 ;
  wire \Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1_n_0 ;
  wire S;
  wire [23:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [0:0]S0_AXI_ARCACHE;
  wire [1:0]S0_AXI_ARLEN;
  wire [1:0]S0_AXI_ARSIZE;
  wire [3:0]S0_AXI_ARSNOOP;
  wire S0_AXI_ARVALID;
  wire [23:0]S0_AXI_AWADDR;
  wire [0:0]S0_AXI_AWBAR;
  wire [1:0]S0_AXI_AWBURST;
  wire [2:0]S0_AXI_AWCACHE;
  wire [5:0]S0_AXI_AWLEN;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire SRI;
  wire \The_Compare[0].sel_reg ;
  wire \Using_FPGA.MUXCY_I ;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \access_info[0][Allocate] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire access_piperun;
  wire any_port_forbid_0;
  wire any_port_forbid_1;
  wire \arb_access[Allocate] ;
  wire \arb_access[Wr] ;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i_reg[Addr][12]_0 ;
  wire \arb_access_i_reg[Addr][12]_1 ;
  wire \arb_access_i_reg[Addr][12]_2 ;
  wire [23:0]\arb_access_i_reg[Addr][23]_0 ;
  wire \arb_access_i_reg[Evict]_0 ;
  wire \arb_access_i_reg[Len][0]_0 ;
  wire \arb_access_i_reg[Len][1]_0 ;
  wire \arb_access_i_reg[Len][2]_0 ;
  wire \arb_access_i_reg[Len][3]_0 ;
  wire \arb_access_i_reg[Len][4]_0 ;
  wire [5:0]\arb_access_i_reg[Len][5]_0 ;
  wire \arb_access_i_reg[Len][5]_1 ;
  wire \arb_access_i_reg[Len][6]_0 ;
  wire [7:0]\arb_access_i_reg[Len][7]_0 ;
  wire \arb_access_i_reg[Len][7]_1 ;
  wire [5:0]\arb_access_i_reg[Size][1]_0 ;
  wire [5:0]\arb_access_i_reg[Size][1]_1 ;
  wire \arb_access_i_reg[Size][1]_2 ;
  wire [2:0]\arb_access_i_reg[Size][2]_0 ;
  wire \arb_access_i_reg[Valid]_0 ;
  wire \arb_access_i_reg[Valid]_1 ;
  wire \arb_access_i_reg[Valid]_2 ;
  wire \arb_prohibit_quick_reg[0]_0 ;
  wire \arb_prohibit_quick_reg_n_0_[0] ;
  wire [0:0]arb_prohibit_read;
  wire \arb_prohibit_read[0]_i_1_n_0 ;
  wire \arb_prohibit_read[1]_i_1_n_0 ;
  wire \arb_prohibit_read_reg[1]_0 ;
  wire \arb_prohibit_read_reg_n_0_[0] ;
  wire arb_token_0;
  wire arb_token_1;
  wire [0:0]arb_want_multi_part__3;
  wire \arbiter_bp_push_i[0][Valid] ;
  wire \arbiter_bp_push_i[1][Valid] ;
  wire \arbiter_bp_push_prt[0][Barrier] ;
  wire \arbiter_bp_push_prt[0][Early] ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire arbiter_piperun_and_valid;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire ctrl_init_done_i;
  wire ctrl_ready_i_reg_0;
  wire [0:0]ctrl_ready_i_reg_1;
  wire dvm_2nd_part;
  wire dvm_2nd_part0;
  wire dvm_2nd_part_reg_0;
  wire idle_carry_1;
  wire idle_carry_2;
  wire idle_carry_3;
  wire [6:0]in;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire \lu_mem_info[Addr_Use][3]_i_2_n_0 ;
  wire \lu_mem_info[Addr_Use][4]_i_2_n_0 ;
  wire \lu_mem_info[Addr_Use][5]_i_2_n_0 ;
  wire lu_mem_single_beat;
  wire lu_mem_write_alloc0;
  wire [1:0]\port_access_q[Size] ;
  wire port_allow_ready_0;
  wire port_allow_ready_1;
  wire port_allow_ready_pre_0;
  wire port_allow_ready_pre_1;
  wire port_ready_0;
  wire port_ready_1;
  wire port_ready_no_init_0;
  wire port_ready_no_init_1;
  (* DIRECT_RESET *) wire prohibit_rst;
  wire queue_full;
  wire queue_push9_out;
  wire \rd_port_access[0][Valid] ;
  wire [23:0]\rd_port_access[1][Addr] ;
  wire \rd_port_access[1][Allocate] ;
  wire \rd_port_access[1][Kind] ;
  wire [1:0]\rd_port_access[1][Len] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_0;
  wire rd_port_multi_part_1;
  wire [0:0]rd_port_multi_part_cmb;
  wire rd_port_ready;
  wire rd_port_ready_block_1;
  wire rd_port_ready_cmb_0;
  wire \read_data_status[0,1][Hit_Fit] ;
  wire read_req_ready;
  wire reduce_or;
  wire reduce_or4_out;
  wire reduce_or7_out;
  wire [23:0]\wr_port_access[1][Addr] ;
  wire \wr_port_access[1][Bufferable] ;
  wire \wr_port_access[1][Kind] ;
  wire \wr_port_access[1][Other_Allocate] ;
  wire [2:0]\wr_port_access[1][Size] ;
  wire \wr_port_access[1][Valid] ;
  wire wr_port_early011_out;
  wire [0:0]wr_port_keep;
  wire wr_port_ready;
  wire wr_port_ready_cmb_0;

  assign Q = prohibit_rst;
  assign lopt_2 = reduce_or7_out;
  assign lopt_27 = lopt_4;
  assign lopt_3 = lopt_26;
  Fast_IP_Clock_system_cache_0_0_carry_and_86 FE_Arb_PR_Valid_Inst1
       (.access_piperun(access_piperun),
        .arbiter_piperun_and_valid(arbiter_piperun_and_valid),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .reduce_or7_out(reduce_or7_out));
  LUT5 #(
    .INIT(32'h00000001)) 
    \Gen_Block[0].LU/lu_mem_single_beat_i_1 
       (.I0(\arb_access_i_reg[Len][7]_0 [5]),
        .I1(\arb_access_i_reg[Len][7]_0 [4]),
        .I2(\arb_access_i_reg[Len][7]_0 [6]),
        .I3(\arb_access_i_reg[Len][7]_0 [7]),
        .I4(\Gen_Block[0].LU/lu_mem_single_beat_i_2_n_0 ),
        .O(lu_mem_single_beat));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Gen_Block[0].LU/lu_mem_single_beat_i_2 
       (.I0(\arb_access_i_reg[Len][7]_0 [2]),
        .I1(\arb_access_i_reg[Len][7]_0 [3]),
        .I2(\arb_access_i_reg[Len][7]_0 [0]),
        .I3(\arb_access_i_reg[Len][7]_0 [1]),
        .O(\Gen_Block[0].LU/lu_mem_single_beat_i_2_n_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_87 \Gen_Port_Ready[0].Detect_Idle[1].Taken_Block.TB_Inst 
       (.\Using_FPGA.MUXCY_I_0 (any_port_forbid_1),
        .arb_token_1(arb_token_1),
        .idle_carry_3(idle_carry_3),
        .lopt(\^lopt_2 ),
        .lopt_1(\^lopt_3 ),
        .lopt_2(\^lopt_4 ),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .lopt_6(lopt_8),
        .lopt_7(lopt_9),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .\wr_port_access[1][Valid] (\wr_port_access[1][Valid] ));
  Fast_IP_Clock_system_cache_0_0_carry_and_88 \Gen_Port_Ready[0].Init_Inst 
       (.\arb_access_i_reg[Valid] (\arb_access_i_reg[Valid]_2 ),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_12),
        .port_ready_0(port_ready_0),
        .port_ready_no_init_0(port_ready_no_init_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_89 \Gen_Port_Ready[0].Prio_Inst 
       (.lopt(lopt_5),
        .lopt_1(lopt_6),
        .port_allow_ready_0(port_allow_ready_0),
        .port_allow_ready_pre_0(port_allow_ready_pre_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_90 \Gen_Port_Ready[0].Token_Inst 
       (.arb_token_0(arb_token_0),
        .idle_carry_3(idle_carry_3),
        .lopt(\^lopt_2 ),
        .lopt_1(\^lopt_3 ),
        .lopt_2(\^lopt_4 ),
        .port_allow_ready_pre_0(port_allow_ready_pre_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_91 \Gen_Port_Ready[0].Use_Inst 
       (.S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .\Using_FPGA.MUXCY_I_0 (\arb_prohibit_read_reg_n_0_[0] ),
        .\Using_FPGA.MUXCY_I_i_1__150_0 (\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ),
        .any_port_forbid_0(any_port_forbid_0),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .port_allow_ready_0(port_allow_ready_0),
        .port_ready_no_init_0(port_ready_no_init_0),
        .queue_full(queue_full),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_multi_part_0(rd_port_multi_part_0),
        .read_req_ready(read_req_ready));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(arb_prohibit_read),
        .Q(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_0 ),
        .R(prohibit_rst));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_92 \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst 
       (.S0_AXI_ARADDR({S0_AXI_ARADDR[23:15],S0_AXI_ARADDR[5:0]}),
        .\S0_AXI_ARADDR[15] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_10 ),
        .\S0_AXI_ARADDR[16] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_7 ),
        .\S0_AXI_ARADDR[17] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_8 ),
        .\S0_AXI_ARADDR[18] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_9 ),
        .\S0_AXI_ARADDR[19] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_4 ),
        .\S0_AXI_ARADDR[20] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_5 ),
        .\S0_AXI_ARADDR[21] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_6 ),
        .\S0_AXI_ARADDR[22] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_3 ),
        .\S0_AXI_ARADDR[23] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_2 ),
        .S0_AXI_ARADDR_0_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_16 ),
        .S0_AXI_ARADDR_1_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_15 ),
        .S0_AXI_ARADDR_2_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_14 ),
        .S0_AXI_ARADDR_3_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_13 ),
        .S0_AXI_ARADDR_4_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_12 ),
        .S0_AXI_ARADDR_5_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_11 ),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .\S0_AXI_ARSIZE[2] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_17 ),
        .S0_AXI_ARSIZE_0_sp_1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_18 ),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .\Using_FPGA.AND2B1L_Inst1_0 (\arb_prohibit_read_reg_n_0_[0] ),
        .access_piperun(access_piperun),
        .any_port_forbid_0(any_port_forbid_0),
        .\arb_access_i_reg[Size][0] (rd_port_ready),
        .\arb_access_i_reg[Size][0]_0 (port_ready_1),
        .arb_prohibit_read(arb_prohibit_read),
        .\arb_prohibit_read_reg[0] (rd_port_ready_cmb_0),
        .\port_access_q[Size] (\port_access_q[Size] ),
        .port_ready_0(port_ready_0),
        .\rd_port_access[1][Addr] ({\rd_port_access[1][Addr] [23:15],\rd_port_access[1][Addr] [5:0]}),
        .\rd_port_access[1][Allocate] (\rd_port_access[1][Allocate] ),
        .read_req_ready(read_req_ready));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[0][Valid] ),
        .Q(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ),
        .R(prohibit_rst));
  Fast_IP_Clock_system_cache_0_0_carry_and_93 \Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst 
       (.S0_AXI_AWVALID(S0_AXI_AWVALID),
        .\Using_FPGA.MUXCY_I_0 (\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ),
        .access_piperun(access_piperun),
        .any_port_forbid_0(any_port_forbid_0),
        .\arbiter_bp_push_i[0][Valid] (\arbiter_bp_push_i[0][Valid] ),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_12),
        .port_ready_0(port_ready_0),
        .queue_full(queue_full),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_multi_part_0(rd_port_multi_part_0),
        .wr_port_ready_cmb_0(wr_port_ready_cmb_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_94 \Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst 
       (.S0_AXI_ARVALID(S0_AXI_ARVALID),
        .\Using_FPGA.MUXCY_I_0 (\arb_prohibit_read_reg_n_0_[0] ),
        .any_port_forbid_0(any_port_forbid_0),
        .idle_carry_1(idle_carry_1),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_15),
        .lopt_3(lopt_16),
        .lopt_4(lopt_17),
        .lopt_5(lopt_18),
        .lopt_6(lopt_19),
        .lopt_7(lopt_20),
        .read_req_ready(read_req_ready));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_95 \Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Wr_Inst 
       (.S0_AXI_AWVALID(S0_AXI_AWVALID),
        .\Using_FPGA.MUXCY_I_0 (\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ),
        .any_port_forbid_0(any_port_forbid_0),
        .idle_carry_1(idle_carry_1),
        .idle_carry_2(idle_carry_2),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_15),
        .queue_full(queue_full),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_multi_part_0(rd_port_multi_part_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_96 \Gen_Port_Ready[1].Init_Inst 
       (.D({\Gen_Port_Ready[1].Init_Inst_n_1 ,\Gen_Port_Ready[1].Init_Inst_n_2 ,\Gen_Port_Ready[1].Init_Inst_n_3 ,\Gen_Port_Ready[1].Init_Inst_n_4 ,\Gen_Port_Ready[1].Init_Inst_n_5 ,\Gen_Port_Ready[1].Init_Inst_n_6 }),
        .\Gen_Port_Ready[0].wr_port_early_reg (\Gen_Port_Ready[0].wr_port_early_reg ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst (rd_port_ready),
        .Q(prohibit_rst),
        .S0_AXI_ARADDR(S0_AXI_ARADDR[14:6]),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\Gen_Port_Ready[1].Init_Inst_n_34 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\Gen_Port_Ready[1].Init_Inst_n_36 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\Gen_Port_Ready[1].Init_Inst_n_37 ),
        .\The_Bit[23].Using_FPGA.Using_Reset.FDS_Inst ({\Gen_Port_Ready[1].Init_Inst_n_7 ,\Gen_Port_Ready[1].Init_Inst_n_8 ,\Gen_Port_Ready[1].Init_Inst_n_9 ,\Gen_Port_Ready[1].Init_Inst_n_10 ,\Gen_Port_Ready[1].Init_Inst_n_11 ,\Gen_Port_Ready[1].Init_Inst_n_12 ,\Gen_Port_Ready[1].Init_Inst_n_13 ,\Gen_Port_Ready[1].Init_Inst_n_14 ,\Gen_Port_Ready[1].Init_Inst_n_15 ,\Gen_Port_Ready[1].Init_Inst_n_16 ,\Gen_Port_Ready[1].Init_Inst_n_17 ,\Gen_Port_Ready[1].Init_Inst_n_18 ,\Gen_Port_Ready[1].Init_Inst_n_19 ,\Gen_Port_Ready[1].Init_Inst_n_20 ,\Gen_Port_Ready[1].Init_Inst_n_21 ,\Gen_Port_Ready[1].Init_Inst_n_22 ,\Gen_Port_Ready[1].Init_Inst_n_23 ,\Gen_Port_Ready[1].Init_Inst_n_24 ,\Gen_Port_Ready[1].Init_Inst_n_25 ,\Gen_Port_Ready[1].Init_Inst_n_26 ,\Gen_Port_Ready[1].Init_Inst_n_27 ,\Gen_Port_Ready[1].Init_Inst_n_28 ,\Gen_Port_Ready[1].Init_Inst_n_29 ,\Gen_Port_Ready[1].Init_Inst_n_30 }),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ({\Gen_Port_Ready[1].Init_Inst_n_31 ,\Gen_Port_Ready[1].Init_Inst_n_32 ,\Gen_Port_Ready[1].Init_Inst_n_33 }),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .access_piperun(access_piperun),
        .\arb_access_i_reg[Addr][0] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_16 ),
        .\arb_access_i_reg[Addr][15] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_10 ),
        .\arb_access_i_reg[Addr][16] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_7 ),
        .\arb_access_i_reg[Addr][17] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_8 ),
        .\arb_access_i_reg[Addr][18] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_9 ),
        .\arb_access_i_reg[Addr][19] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_4 ),
        .\arb_access_i_reg[Addr][1] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_15 ),
        .\arb_access_i_reg[Addr][20] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_5 ),
        .\arb_access_i_reg[Addr][21] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_6 ),
        .\arb_access_i_reg[Addr][22] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_3 ),
        .\arb_access_i_reg[Addr][23] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_2 ),
        .\arb_access_i_reg[Addr][2] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_14 ),
        .\arb_access_i_reg[Addr][3] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_13 ),
        .\arb_access_i_reg[Addr][4] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_12 ),
        .\arb_access_i_reg[Addr][5] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_11 ),
        .\arb_access_i_reg[Allocate] (reduce_or),
        .\arb_access_i_reg[Allocate]_0 (wr_port_ready),
        .\arb_access_i_reg[Len][0] (\arb_access_i_reg[Len][0]_0 ),
        .\arb_access_i_reg[Len][1] (\arb_access_i_reg[Len][1]_0 ),
        .\arb_access_i_reg[Len][2] (\arb_access_i_reg[Len][2]_0 ),
        .\arb_access_i_reg[Len][3] (\arb_access_i_reg[Len][3]_0 ),
        .\arb_access_i_reg[Len][4] (\arb_access_i_reg[Len][4]_0 ),
        .\arb_access_i_reg[Len][5] (\arb_access_i_reg[Len][5]_0 ),
        .\arb_access_i_reg[Len][5]_0 (\arb_access_i_reg[Len][5]_1 ),
        .\arb_access_i_reg[Size][0] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_18 ),
        .\arb_access_i_reg[Size][1] (\arb_access_i_reg[Size][1]_2 ),
        .\arb_access_i_reg[Size][2] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_17 ),
        .arb_want_multi_part__3(arb_want_multi_part__3),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .ctrl_init_done_i_reg(port_ready_1),
        .dvm_2nd_part0(dvm_2nd_part0),
        .dvm_2nd_part_reg(dvm_2nd_part_reg_0),
        .dvm_2nd_part_reg_0(rd_port_ready_cmb_0),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .port_ready_0(port_ready_0),
        .port_ready_no_init_1(port_ready_no_init_1),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] [14:6]),
        .\rd_port_access[1][Allocate] (\rd_port_access[1][Allocate] ),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ),
        .rd_port_multi_part_cmb(rd_port_multi_part_cmb),
        .reduce_or4_out(reduce_or4_out),
        .reduce_or7_out(reduce_or7_out),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] ),
        .\wr_port_access[1][Bufferable] (\wr_port_access[1][Bufferable] ),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ),
        .\wr_port_access[1][Other_Allocate] (\wr_port_access[1][Other_Allocate] ),
        .\wr_port_access[1][Size] (\wr_port_access[1][Size] ),
        .wr_port_ready_cmb_0(wr_port_ready_cmb_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_97 \Gen_Port_Ready[1].Prio_Inst 
       (.lopt(lopt_19),
        .lopt_1(lopt_20),
        .port_allow_ready_1(port_allow_ready_1),
        .port_allow_ready_pre_1(port_allow_ready_pre_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_98 \Gen_Port_Ready[1].Token_Inst 
       (.arb_token_1(arb_token_1),
        .idle_carry_2(idle_carry_2),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18),
        .port_allow_ready_pre_1(port_allow_ready_pre_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_99 \Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst 
       (.CE(CE),
        .Q(prohibit_rst),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (rd_port_ready),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst_n_4 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (port_ready_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\arb_access_i_reg[Valid]_0 ),
        .\Using_FPGA.AND2B1L_Inst1 (reduce_or),
        .\Using_FPGA.MUXCY_I_0 (any_port_forbid_1),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .access_piperun(access_piperun),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arb_access_i_reg[Evict] (\Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst_n_1 ),
        .\arb_access_i_reg[Evict]_0 (\arb_access_i_reg[Evict]_0 ),
        .\arb_access_i_reg[Keep] (rd_port_ready_cmb_0),
        .\arb_access_i_reg[Valid] (\arb_access_i_reg[Valid]_1 ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_ready_block_1(rd_port_ready_block_1),
        .reduce_or4_out(reduce_or4_out));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_100 \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst 
       (.D({\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_5 ,\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_6 }),
        .Q(prohibit_rst),
        .S(S),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .SRI(SRI),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (wr_port_ready),
        .\Using_FPGA.MUXCY_I (\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_7 ),
        .\Using_FPGA.MUXCY_I_0 (\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_8 ),
        .access_piperun(access_piperun),
        .\arb_access_i_reg[Len][6] (reduce_or),
        .\arb_access_i_reg[Len][6]_0 (\arb_access_i_reg[Len][6]_0 ),
        .\arb_access_i_reg[Len][7] (\arb_access_i_reg[Len][7]_1 ),
        .\arb_access_i_reg[Port_Num][0] (port_ready_1),
        .\arb_access_i_reg[Port_Num][0]_0 (rd_port_ready_cmb_0),
        .\arb_access_i_reg[Port_Num][0]_1 (rd_port_ready),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access_i_reg[Valid] (\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_4 ),
        .ctrl_ready_i_reg(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_1 ),
        .ctrl_ready_i_reg_0(ctrl_ready_i_reg_0),
        .port_ready_0(port_ready_0),
        .\rd_port_access[1][Len] (\rd_port_access[1][Len] ),
        .reduce_or4_out(reduce_or4_out),
        .wr_port_ready_cmb_0(wr_port_ready_cmb_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_101 \Gen_Port_Ready[1].Use_Inst 
       (.\Using_FPGA.MUXCY_I_0 (any_port_forbid_1),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .lopt_2(dvm_2nd_part_reg_0),
        .lopt_3(lopt_23),
        .lopt_4(lopt_24),
        .lopt_5(lopt_25),
        .lopt_6(lopt_26),
        .lopt_7(lopt_27),
        .port_allow_ready_1(port_allow_ready_1),
        .port_ready_no_init_1(port_ready_no_init_1),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .rd_port_ready_block_1(rd_port_ready_block_1),
        .\wr_port_access[1][Valid] (\wr_port_access[1][Valid] ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[0].First_Inst.FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1_n_0 ),
        .Q(arb_token_0),
        .S(prohibit_rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1 
       (.I0(arb_token_0),
        .I1(dvm_2nd_part),
        .I2(arb_token_1),
        .O(\Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[0].Forbid_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(1'b0),
        .Q(any_port_forbid_0),
        .R(prohibit_rst));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(rd_port_multi_part_cmb),
        .Q(rd_port_multi_part_0),
        .R(prohibit_rst));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst_i_2 
       (.I0(S0_AXI_ARSNOOP[3]),
        .I1(S0_AXI_ARSNOOP[1]),
        .I2(S0_AXI_ARSNOOP[0]),
        .I3(dvm_2nd_part),
        .I4(S0_AXI_ARADDR[0]),
        .I5(S0_AXI_ARSNOOP[2]),
        .O(arb_want_multi_part__3));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(rd_port_multi_part_cmb),
        .Q(any_port_forbid_1),
        .R(prohibit_rst));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[1].Multi_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(1'b0),
        .Q(rd_port_multi_part_1),
        .R(prohibit_rst));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[1].Other_Inst.FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1_n_0 ),
        .Q(arb_token_1),
        .R(prohibit_rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1 
       (.I0(arb_token_1),
        .I1(dvm_2nd_part),
        .I2(arb_token_0),
        .O(\Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1_n_0 ));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__15 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(prohibit_rst),
        .SR(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'h2)) 
    S0_AXI_AWREADY_INST_0
       (.I0(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ),
        .I1(queue_full),
        .O(S0_AXI_AWREADY));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__4 
       (.I0(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 ),
        .I1(queue_full),
        .I2(S0_AXI_AWVALID),
        .O(queue_push9_out));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__17 
       (.I0(\arb_access_i_reg[Addr][23]_0 [8]),
        .I1(in[2]),
        .I2(\arb_access_i_reg[Addr][23]_0 [7]),
        .I3(in[1]),
        .I4(in[0]),
        .I5(\arb_access_i_reg[Addr][23]_0 [6]),
        .O(\The_Compare[0].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__18 
       (.I0(\arb_access_i_reg[Addr][23]_0 [10]),
        .I1(in[4]),
        .I2(\arb_access_i_reg[Addr][23]_0 [11]),
        .I3(in[5]),
        .I4(in[3]),
        .I5(\arb_access_i_reg[Addr][23]_0 [9]),
        .O(A));
  LUT2 #(
    .INIT(4'h9)) 
    \Using_FPGA.MUXCY_I_i_1__203 
       (.I0(\arb_access_i_reg[Addr][23]_0 [12]),
        .I1(\Using_FPGA.MUXCY_I_0 ),
        .O(\arb_access_i_reg[Addr][12]_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \Using_FPGA.MUXCY_I_i_1__204 
       (.I0(\arb_access_i_reg[Addr][23]_0 [12]),
        .I1(\Using_FPGA.MUXCY_I_1 ),
        .O(\arb_access_i_reg[Addr][12]_1 ));
  LUT2 #(
    .INIT(4'h9)) 
    \Using_FPGA.MUXCY_I_i_1__205 
       (.I0(\arb_access_i_reg[Addr][23]_0 [12]),
        .I1(in[6]),
        .O(\arb_access_i_reg[Addr][12]_2 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__70 
       (.I0(\arb_access_i_reg[Valid]_0 ),
        .I1(\Using_FPGA.MUXCY_I ),
        .O(A161_out));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_access_i[Keep]_i_3 
       (.I0(S0_AXI_AWCACHE[2]),
        .I1(S0_AXI_AWCACHE[0]),
        .I2(S0_AXI_AWCACHE[1]),
        .O(wr_port_keep));
  FDRE \arb_access_i_reg[Addr][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_30 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [0]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][10] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_20 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [10]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][11] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_19 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [11]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][12] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_18 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [12]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][13] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_17 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [13]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][14] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_16 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [14]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][15] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_15 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [15]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][16] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_14 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [16]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][17] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_13 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [17]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][18] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_12 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [18]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][19] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_11 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [19]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][1] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_29 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [1]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][20] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_10 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [20]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][21] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_9 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [21]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][22] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_8 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [22]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][23] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_7 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [23]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][2] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_28 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [2]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][3] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_27 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [3]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][4] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_26 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [4]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][5] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_25 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [5]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][6] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_24 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [6]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][7] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_23 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [7]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][8] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_22 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [8]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][9] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_21 ),
        .Q(\arb_access_i_reg[Addr][23]_0 [9]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Allocate] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_37 ),
        .Q(\arb_access[Allocate] ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Early] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[1].Init_Inst_n_36 ),
        .Q(\access_info[0][Early] ),
        .R(1'b0));
  FDRE \arb_access_i_reg[Evict] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst_n_1 ),
        .Q(\arb_access_i_reg[Evict]_0 ),
        .R(1'b0));
  FDRE \arb_access_i_reg[Keep] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Rd_Inst_n_4 ),
        .Q(\access_info[0][Keep] ),
        .R(1'b0));
  FDRE \arb_access_i_reg[Kind] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_34 ),
        .Q(\access_info[0][Kind] ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_6 ),
        .Q(\arb_access_i_reg[Len][7]_0 [0]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][1] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_5 ),
        .Q(\arb_access_i_reg[Len][7]_0 [1]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][2] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_4 ),
        .Q(\arb_access_i_reg[Len][7]_0 [2]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][3] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_3 ),
        .Q(\arb_access_i_reg[Len][7]_0 [3]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][4] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_2 ),
        .Q(\arb_access_i_reg[Len][7]_0 [4]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][5] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_1 ),
        .Q(\arb_access_i_reg[Len][7]_0 [5]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][6] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_6 ),
        .Q(\arb_access_i_reg[Len][7]_0 [6]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][7] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_5 ),
        .Q(\arb_access_i_reg[Len][7]_0 [7]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_7 ),
        .Q(\access_info[0][Port_Num] ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Size][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_33 ),
        .Q(\arb_access_i_reg[Size][2]_0 [0]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Size][1] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_32 ),
        .Q(\arb_access_i_reg[Size][2]_0 [1]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Size][2] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_31 ),
        .Q(\arb_access_i_reg[Size][2]_0 [2]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Valid] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_4 ),
        .Q(\arb_access_i_reg[Valid]_0 ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Wr] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_8 ),
        .Q(\arb_access[Wr] ),
        .R(prohibit_rst));
  FDRE \arb_prohibit_quick_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arb_prohibit_quick_reg[0]_0 ),
        .Q(\arb_prohibit_quick_reg_n_0_[0] ),
        .R(prohibit_rst));
  LUT5 #(
    .INIT(32'hF111F000)) 
    \arb_prohibit_read[0]_i_1 
       (.I0(\lookup_read_data_new[0,0][Valid] ),
        .I1(\arb_prohibit_quick_reg_n_0_[0] ),
        .I2(rd_port_ready_cmb_0),
        .I3(access_piperun),
        .I4(\arb_prohibit_read_reg_n_0_[0] ),
        .O(\arb_prohibit_read[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h20FF2020)) 
    \arb_prohibit_read[1]_i_1 
       (.I0(access_piperun),
        .I1(\read_data_status[0,1][Hit_Fit] ),
        .I2(rd_port_ready),
        .I3(\arb_prohibit_read_reg[1]_0 ),
        .I4(rd_port_ready_block_1),
        .O(\arb_prohibit_read[1]_i_1_n_0 ));
  FDRE \arb_prohibit_read_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arb_prohibit_read[0]_i_1_n_0 ),
        .Q(\arb_prohibit_read_reg_n_0_[0] ),
        .R(prohibit_rst));
  FDRE \arb_prohibit_read_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arb_prohibit_read[1]_i_1_n_0 ),
        .Q(rd_port_ready_block_1),
        .R(prohibit_rst));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \arbiter_bp_push_i[0][Early]_i_1 
       (.I0(S0_AXI_AWBAR),
        .I1(S0_AXI_AWCACHE[2]),
        .I2(S0_AXI_AWCACHE[0]),
        .O(\Gen_Port_Ready[0].wr_port_early_reg ));
  FDRE \arbiter_bp_push_i_reg[0][Barrier] 
       (.C(ACLK),
        .CE(1'b1),
        .D(S0_AXI_AWBAR),
        .Q(\arbiter_bp_push_prt[0][Barrier] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[0][Early] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].wr_port_early_reg ),
        .Q(\arbiter_bp_push_prt[0][Early] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[0][Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[0][Valid] ),
        .Q(\arbiter_bp_push_prt[0][Valid] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[1][Early] 
       (.C(ACLK),
        .CE(1'b1),
        .D(wr_port_early011_out),
        .Q(\arbiter_bp_push_prt[1][Early] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[1][Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[1][Valid] ),
        .Q(\arbiter_bp_push_prt[1][Valid] ),
        .R(prohibit_rst));
  LUT2 #(
    .INIT(4'h2)) 
    ctrl_init_last_i_1
       (.I0(ctrl_ready_i_reg_0),
        .I1(ctrl_init_done_i),
        .O(ctrl_ready_i_reg_1));
  FDRE ctrl_ready_i_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst_n_1 ),
        .Q(ctrl_ready_i_reg_0),
        .R(1'b0));
  FDRE dvm_2nd_part_reg
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(dvm_2nd_part0),
        .Q(dvm_2nd_part),
        .R(prohibit_rst));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \lu_mem_info[Addr_Stp][0]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\arb_access_i_reg[Size][2]_0 [0]),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .O(\arb_access_i_reg[Size][1]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \lu_mem_info[Addr_Stp][1]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [0]),
        .I1(\arb_access_i_reg[Size][2]_0 [2]),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .O(\arb_access_i_reg[Size][1]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \lu_mem_info[Addr_Stp][2]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [1]),
        .I1(\arb_access_i_reg[Size][2]_0 [2]),
        .I2(\arb_access_i_reg[Size][2]_0 [0]),
        .O(\arb_access_i_reg[Size][1]_0 [2]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \lu_mem_info[Addr_Stp][3]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\arb_access_i_reg[Size][2]_0 [0]),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .O(\arb_access_i_reg[Size][1]_0 [3]));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \lu_mem_info[Addr_Stp][4]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\arb_access_i_reg[Size][2]_0 [0]),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .O(\arb_access_i_reg[Size][1]_0 [4]));
  LUT3 #(
    .INIT(8'h40)) 
    \lu_mem_info[Addr_Stp][5]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [1]),
        .I1(\arb_access_i_reg[Size][2]_0 [0]),
        .I2(\arb_access_i_reg[Size][2]_0 [2]),
        .O(\arb_access_i_reg[Size][1]_0 [5]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \lu_mem_info[Addr_Use][0]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\arb_access_i_reg[Size][2]_0 [0]),
        .I2(\arb_access_i_reg[Len][7]_0 [0]),
        .I3(\arb_access_i_reg[Size][2]_0 [1]),
        .O(\arb_access_i_reg[Size][1]_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT5 #(
    .INIT(32'hFFFFEFEA)) 
    \lu_mem_info[Addr_Use][1]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\arb_access_i_reg[Len][7]_0 [0]),
        .I2(\arb_access_i_reg[Size][2]_0 [0]),
        .I3(\arb_access_i_reg[Len][7]_0 [1]),
        .I4(\arb_access_i_reg[Size][2]_0 [1]),
        .O(\arb_access_i_reg[Size][1]_1 [1]));
  LUT6 #(
    .INIT(64'hFFFFFEAEFAFAFEAE)) 
    \lu_mem_info[Addr_Use][2]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\arb_access_i_reg[Len][7]_0 [2]),
        .I2(\arb_access_i_reg[Size][2]_0 [0]),
        .I3(\arb_access_i_reg[Len][7]_0 [1]),
        .I4(\arb_access_i_reg[Size][2]_0 [1]),
        .I5(\arb_access_i_reg[Len][7]_0 [0]),
        .O(\arb_access_i_reg[Size][1]_1 [2]));
  LUT6 #(
    .INIT(64'hFEFEFEAEAEAEFEAE)) 
    \lu_mem_info[Addr_Use][3]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [2]),
        .I1(\lu_mem_info[Addr_Use][3]_i_2_n_0 ),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .I3(\arb_access_i_reg[Len][7]_0 [1]),
        .I4(\arb_access_i_reg[Size][2]_0 [0]),
        .I5(\arb_access_i_reg[Len][7]_0 [0]),
        .O(\arb_access_i_reg[Size][1]_1 [3]));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lu_mem_info[Addr_Use][3]_i_2 
       (.I0(\arb_access_i_reg[Len][7]_0 [2]),
        .I1(\arb_access_i_reg[Size][2]_0 [0]),
        .I2(\arb_access_i_reg[Len][7]_0 [3]),
        .O(\lu_mem_info[Addr_Use][3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT5 #(
    .INIT(32'hFEFFFE00)) 
    \lu_mem_info[Addr_Use][4]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [1]),
        .I1(\arb_access_i_reg[Len][7]_0 [0]),
        .I2(\arb_access_i_reg[Size][2]_0 [0]),
        .I3(\arb_access_i_reg[Size][2]_0 [2]),
        .I4(\lu_mem_info[Addr_Use][4]_i_2_n_0 ),
        .O(\arb_access_i_reg[Size][1]_1 [4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \lu_mem_info[Addr_Use][4]_i_2 
       (.I0(\arb_access_i_reg[Len][7]_0 [1]),
        .I1(\arb_access_i_reg[Len][7]_0 [2]),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .I3(\arb_access_i_reg[Len][7]_0 [3]),
        .I4(\arb_access_i_reg[Size][2]_0 [0]),
        .I5(\arb_access_i_reg[Len][7]_0 [4]),
        .O(\lu_mem_info[Addr_Use][4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFFFFFEAE0000)) 
    \lu_mem_info[Addr_Use][5]_i_1 
       (.I0(\arb_access_i_reg[Size][2]_0 [1]),
        .I1(\arb_access_i_reg[Len][7]_0 [1]),
        .I2(\arb_access_i_reg[Size][2]_0 [0]),
        .I3(\arb_access_i_reg[Len][7]_0 [0]),
        .I4(\arb_access_i_reg[Size][2]_0 [2]),
        .I5(\lu_mem_info[Addr_Use][5]_i_2_n_0 ),
        .O(\arb_access_i_reg[Size][1]_1 [5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \lu_mem_info[Addr_Use][5]_i_2 
       (.I0(\arb_access_i_reg[Len][7]_0 [2]),
        .I1(\arb_access_i_reg[Len][7]_0 [3]),
        .I2(\arb_access_i_reg[Size][2]_0 [1]),
        .I3(\arb_access_i_reg[Len][7]_0 [4]),
        .I4(\arb_access_i_reg[Size][2]_0 [0]),
        .I5(\arb_access_i_reg[Len][7]_0 [5]),
        .O(\lu_mem_info[Addr_Use][5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \lu_mem_info[Allocate]_i_1 
       (.I0(\arb_access[Allocate] ),
        .I1(\arb_access_i_reg[Evict]_0 ),
        .O(\access_info[0][Allocate] ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h20)) 
    lu_mem_write_alloc_i_1
       (.I0(\arb_access[Wr] ),
        .I1(\arb_access_i_reg[Evict]_0 ),
        .I2(\arb_access[Allocate] ),
        .O(lu_mem_write_alloc0));
endmodule

(* ORIG_REF_NAME = "sc_back_end" *) 
module Fast_IP_Clock_system_cache_0_0_sc_back_end
   (aw_fifo_full,
    write_data_almost_full,
    write_data_full,
    queue_full,
    M0_AXI_AWPROT,
    M0_AXI_WLAST,
    M0_AXI_ARPROT,
    M_AXI_WVALID_I_reg,
    need_to_stall_write_reg,
    M_AXI_AWVALID_I_reg,
    M_AXI_ARVALID_I_reg,
    S,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    ACLK,
    ARESET,
    queue_push26_out,
    queue_push,
    \M_AXI_ARPROT_reg[1] ,
    S_0,
    \read_req_info[0][Kind] ,
    \write_req_info[0][Kind] ,
    \write_data_info[0][Last] ,
    \write_req_info[0][Line_Only] ,
    update_need_aw,
    update_done_aw,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_need_ar,
    update_done_ar,
    M0_AXI_BVALID,
    bp_fifo_full,
    M0_AXI_AWREADY,
    M0_AXI_ARREADY,
    M0_AXI_WREADY,
    \Use_FPGA.Almost_Full_Inst ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_1 ,
    \write_data_info[0][Valid] ,
    in,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_AWADDR_reg[23] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WDATA_reg[31] ,
    E);
  output aw_fifo_full;
  output write_data_almost_full;
  output write_data_full;
  output queue_full;
  output [0:0]M0_AXI_AWPROT;
  output M0_AXI_WLAST;
  output [0:0]M0_AXI_ARPROT;
  output M_AXI_WVALID_I_reg;
  output need_to_stall_write_reg;
  output M_AXI_AWVALID_I_reg;
  output M_AXI_ARVALID_I_reg;
  output S;
  output [23:0]M0_AXI_AWADDR;
  output [7:0]M0_AXI_AWLEN;
  output [1:0]M0_AXI_AWSIZE;
  output [1:0]M0_AXI_AWBURST;
  output [31:0]M0_AXI_WDATA;
  output [3:0]M0_AXI_WSTRB;
  output [23:0]M0_AXI_ARADDR;
  output [7:0]M0_AXI_ARLEN;
  output [2:0]M0_AXI_ARSIZE;
  output [1:0]M0_AXI_ARBURST;
  input ACLK;
  input ARESET;
  input queue_push26_out;
  input queue_push;
  input \M_AXI_ARPROT_reg[1] ;
  input S_0;
  input \read_req_info[0][Kind] ;
  input \write_req_info[0][Kind] ;
  input \write_data_info[0][Last] ;
  input \write_req_info[0][Line_Only] ;
  input update_need_aw;
  input update_done_aw;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_need_ar;
  input update_done_ar;
  input M0_AXI_BVALID;
  input bp_fifo_full;
  input M0_AXI_AWREADY;
  input M0_AXI_ARREADY;
  input M0_AXI_WREADY;
  input \Use_FPGA.Almost_Full_Inst ;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input \Use_FPGA.Almost_Full_Inst_1 ;
  input \write_data_info[0][Valid] ;
  input [23:0]in;
  input [7:0]\M_AXI_ARLEN_reg[7] ;
  input [2:0]\M_AXI_ARSIZE_reg[2] ;
  input [16:0]\M_AXI_AWADDR_reg[23] ;
  input [7:0]\M_AXI_AWLEN_reg[7] ;
  input [1:0]\M_AXI_AWSIZE_reg[1] ;
  input [3:0]\M_AXI_WSTRB_reg[3] ;
  input [31:0]\M_AXI_WDATA_reg[31] ;
  input [0:0]E;

  wire ACLK;
  wire ARESET;
  wire CB_n_4;
  wire [0:0]E;
  wire \Gen_Master_Ports[0].TransOrd/aw_fifo_empty ;
  wire [23:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [7:0]M0_AXI_ARLEN;
  wire [0:0]M0_AXI_ARPROT;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire [23:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [7:0]M0_AXI_AWLEN;
  wire [0:0]M0_AXI_AWPROT;
  wire M0_AXI_AWREADY;
  wire [1:0]M0_AXI_AWSIZE;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire \M_AXI_ARPROT_reg[1] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire M_AXI_ARVALID_I_reg;
  wire [16:0]\M_AXI_AWADDR_reg[23] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire M_AXI_AWVALID_I_reg;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire M_AXI_WVALID_I_reg;
  wire S;
  wire S_0;
  wire \Use_AXI_Port_0.M_AXI_INST_n_6 ;
  wire \Use_AXI_Port_0.M_AXI_INST_n_7 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_1 ;
  wire aw_fifo_full;
  wire bp_fifo_full;
  wire [23:0]in;
  wire need_to_stall_write_reg;
  wire queue_full;
  wire queue_push;
  wire queue_push26_out;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire [23:0]\read_req_ordered_info[0][Addr] ;
  wire \read_req_ordered_info[0][Kind] ;
  wire [7:0]\read_req_ordered_info[0][Len] ;
  wire [1:1]\read_req_ordered_info[0][Prot] ;
  wire [2:0]\read_req_ordered_info[0][Size] ;
  wire \read_req_ordered_info[0][Valid] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_done_aw;
  wire update_need_ar;
  wire update_need_aw;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire [3:0]\write_data_ordered_info[0][BE] ;
  wire [31:0]\write_data_ordered_info[0][Data] ;
  wire \write_data_ordered_info[0][Last] ;
  wire \write_req_info[0][Kind] ;
  wire \write_req_info[0][Line_Only] ;
  wire [23:0]\write_req_ordered_info[0][Addr] ;
  wire \write_req_ordered_info[0][Kind] ;
  wire [7:0]\write_req_ordered_info[0][Len] ;
  wire [1:1]\write_req_ordered_info[0][Prot] ;
  wire [1:0]\write_req_ordered_info[0][Size] ;

  Fast_IP_Clock_system_cache_0_0_sc_crossbar CB
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(E),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .\M_AXI_ARLEN_reg[7] (\M_AXI_ARLEN_reg[7] ),
        .\M_AXI_ARPROT_reg[1] (\M_AXI_ARPROT_reg[1] ),
        .\M_AXI_ARSIZE_reg[2] (\M_AXI_ARSIZE_reg[2] ),
        .\M_AXI_AWADDR_reg[23] (\M_AXI_AWADDR_reg[23] ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWSIZE_reg[1] (\M_AXI_AWSIZE_reg[1] ),
        .\M_AXI_WDATA_reg[31] (\M_AXI_WDATA_reg[31] ),
        .\M_AXI_WSTRB_reg[3] (\M_AXI_WSTRB_reg[3] ),
        .M_AXI_WVALID_I_reg(M_AXI_WVALID_I_reg),
        .\Order_Optimization_4.buffer_addr_reg[0] (\Use_AXI_Port_0.M_AXI_INST_n_6 ),
        .S(S),
        .S_0(S_0),
        .\Use_FPGA.Almost_Full_Inst (M_AXI_AWVALID_I_reg),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Almost_Full_Inst_1 (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Almost_Full_Inst_2 (\Use_FPGA.Almost_Full_Inst_1 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\read_req_ordered_info[0][Len] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 (\read_req_ordered_info[0][Size] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 (\write_req_ordered_info[0][Addr] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 (\write_req_ordered_info[0][Len] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 (\write_req_ordered_info[0][Size] ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (\Use_AXI_Port_0.M_AXI_INST_n_7 ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst (\write_data_ordered_info[0][BE] ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 (\write_data_ordered_info[0][Data] ),
        .\Use_FPGA.Empty_Inst (CB_n_4),
        .\Use_FPGA.Full_Inst (aw_fifo_full),
        .\Use_FPGA.Full_Inst_0 (queue_full),
        .aw_fifo_empty(\Gen_Master_Ports[0].TransOrd/aw_fifo_empty ),
        .bp_fifo_full(bp_fifo_full),
        .in(in),
        .need_to_stall_write_reg(need_to_stall_write_reg),
        .out(\read_req_ordered_info[0][Addr] ),
        .queue_push(queue_push),
        .queue_push26_out(queue_push26_out),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .\read_req_ordered_info[0][Kind] (\read_req_ordered_info[0][Kind] ),
        .\read_req_ordered_info[0][Prot] (\read_req_ordered_info[0][Prot] ),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ),
        .ri_fifo_full(ri_fifo_full),
        .update_done_ar(update_done_ar),
        .update_done_aw(update_done_aw),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_data_ordered_info[0][Last] (\write_data_ordered_info[0][Last] ),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ),
        .\write_req_ordered_info[0][Kind] (\write_req_ordered_info[0][Kind] ),
        .\write_req_ordered_info[0][Prot] (\write_req_ordered_info[0][Prot] ));
  Fast_IP_Clock_system_cache_0_0_sc_m_axi_interface \Use_AXI_Port_0.M_AXI_INST 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .D(\write_req_ordered_info[0][Addr] ),
        .M0_AXI_ARADDR(M0_AXI_ARADDR),
        .M0_AXI_ARBURST(M0_AXI_ARBURST),
        .M0_AXI_ARLEN(M0_AXI_ARLEN),
        .M0_AXI_ARPROT(M0_AXI_ARPROT),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_ARREADY_0(\Use_AXI_Port_0.M_AXI_INST_n_6 ),
        .M0_AXI_ARSIZE(M0_AXI_ARSIZE),
        .M0_AXI_AWADDR(M0_AXI_AWADDR),
        .M0_AXI_AWBURST(M0_AXI_AWBURST),
        .M0_AXI_AWLEN(M0_AXI_AWLEN),
        .M0_AXI_AWPROT(M0_AXI_AWPROT),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_AWSIZE(M0_AXI_AWSIZE),
        .M0_AXI_WDATA(M0_AXI_WDATA),
        .M0_AXI_WLAST(M0_AXI_WLAST),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M0_AXI_WSTRB(M0_AXI_WSTRB),
        .\M_AXI_ARADDR_reg[23]_0 (\read_req_ordered_info[0][Addr] ),
        .\M_AXI_ARLEN_reg[7]_0 (\read_req_ordered_info[0][Len] ),
        .\M_AXI_ARSIZE_reg[2]_0 (\read_req_ordered_info[0][Size] ),
        .M_AXI_ARVALID_I_reg_0(M_AXI_ARVALID_I_reg),
        .\M_AXI_AWLEN_reg[7]_0 (\write_req_ordered_info[0][Len] ),
        .\M_AXI_AWSIZE_reg[1]_0 (\write_req_ordered_info[0][Size] ),
        .M_AXI_AWVALID_I_reg_0(M_AXI_AWVALID_I_reg),
        .M_AXI_AWVALID_I_reg_1(\Use_AXI_Port_0.M_AXI_INST_n_7 ),
        .\M_AXI_WDATA_reg[31]_0 (\write_data_ordered_info[0][Data] ),
        .\M_AXI_WSTRB_reg[3]_0 (\write_data_ordered_info[0][BE] ),
        .M_AXI_WVALID_I_reg_0(M_AXI_WVALID_I_reg),
        .M_AXI_WVALID_I_reg_1(CB_n_4),
        .aw_fifo_empty(\Gen_Master_Ports[0].TransOrd/aw_fifo_empty ),
        .\read_req_ordered_info[0][Kind] (\read_req_ordered_info[0][Kind] ),
        .\read_req_ordered_info[0][Prot] (\read_req_ordered_info[0][Prot] ),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ),
        .\write_data_ordered_info[0][Last] (\write_data_ordered_info[0][Last] ),
        .\write_req_ordered_info[0][Kind] (\write_req_ordered_info[0][Kind] ),
        .\write_req_ordered_info[0][Prot] (\write_req_ordered_info[0][Prot] ));
endmodule

(* ORIG_REF_NAME = "sc_cache_core" *) 
module Fast_IP_Clock_system_cache_0_0_sc_cache_core
   (lookup_piperun,
    lu_mem_valid_reg,
    update_need_ar,
    update_need_aw,
    lud_reg_valid_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ri_fifo_full,
    \read_req_info[0][Valid] ,
    bs_exist,
    bp_fifo_full,
    \lu_check_info_reg[Port_Num][0] ,
    wm_port,
    wm_allocate_reg,
    \bs_port_num_reg[0] ,
    bs_slv,
    wm_allow,
    update_done_ar,
    \lu_check_info_reg[Addr][12] ,
    \lu_mem_info_reg[Port_Num][0] ,
    lud_addr_pipeline_full,
    \lud_mem_port_one_hot_reg[1] ,
    \write_req_info[0][Line_Only] ,
    \lu_mem_info_reg[Addr][12] ,
    lud_reg_port_num,
    wm_allocate_reg_0,
    \write_data_info[0][Valid] ,
    \Use_FPGA.Full_Inst ,
    \write_data_info[0][Last] ,
    \bs_src_reg[1] ,
    \Use_FPGA.Empty_Inst ,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    \lookup_read_data_info[0,1][Valid] ,
    in,
    M0_AXI_BREADY,
    \read_req_info[0][Kind] ,
    \write_req_info[0][Kind] ,
    update_evict_valid_reg,
    \update_ext_bresp_info[0,0][BRESP] ,
    out,
    update_evict_busy_reg,
    \update_info_reg[Size][2] ,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][1] ,
    update_evict_busy_reg_0,
    \update_info_reg[Len][7]_0 ,
    \update_info_reg[Addr][23] ,
    p_95_in,
    \lu_check_locked_hit_reg[3] ,
    \lookup_read_data_new[0,0][Valid] ,
    lud_reg_valid_reg_0,
    S,
    lud_addr_pipeline_full_reg,
    S_0,
    wr_port_data_ready,
    new_read_data_last,
    new_read_data_last_1,
    \Use_FPGA.Full_Inst_0 ,
    update_done_aw,
    queue_push26_out,
    \bs_src_reg[0] ,
    S_2,
    new_read_data_word,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31] ,
    queue_push,
    \Use_FPGA.Empty_Inst_0 ,
    update_done_ar_reg,
    \lu_check_locked_hit_reg[3]_0 ,
    lu_check_read_info_done_reg,
    ACLK,
    ARESET,
    access_valid,
    \Using_FPGA.MUXCY_I ,
    A161_out,
    \Using_FPGA.MUXCY_I_0 ,
    \The_Compare[0].sel_reg ,
    A,
    A_N,
    \The_Compare[0].sel_reg_3 ,
    A_4,
    \Using_FPGA.MUXCY_I_1 ,
    S_5,
    M0_AXI_RVALID,
    \Use_FPGA.Almost_Full_Inst ,
    E,
    write_data_full,
    M0_AXI_RLAST,
    Q,
    \access_info[0][Port_Num] ,
    \arb_access[Wr] ,
    \access_info[0][Early] ,
    \access_info[0][Keep] ,
    lu_mem_single_beat,
    lud_addr_pipeline_full0,
    \access_info[0][Kind] ,
    \access_info[0][Allocate] ,
    \arb_access[Evict] ,
    lu_mem_write_alloc0,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    write_data_almost_full,
    \access_data_info[0,1][Last] ,
    \access_data_info[0,0][Last] ,
    \update_wma_data_reg[31] ,
    \update_wma_data_reg[23] ,
    \update_wma_data_reg[15] ,
    \update_wma_data_reg[7] ,
    update_write_miss_ongoing_reg,
    M0_AXI_BVALID,
    queue_full,
    r_miss_fifo_full,
    \read_data_status[0,0][Hit_Full] ,
    r_miss_fifo_full_6,
    \read_data_status[0,1][Hit_Full] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    \M_AXI_WDATA_reg[31] ,
    \M_AXI_WDATA_reg[31]_0 ,
    lud_write_hit_done_reg,
    \access_data_info[0,0][Valid] ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \access_data_info[0,1][Valid] ,
    \read_data_status[0,0][Hit_Pop] ,
    \read_data_status[0,1][Hit_Pop] ,
    r_hit_push,
    r_hit_push_7,
    aw_fifo_full,
    \pending_write_reg[0] ,
    S0_AXI_GEN_BRESP,
    M0_AXI_RDATA,
    M0_AXI_BRESP,
    update_wm_pop_normal_hold_reg,
    D,
    DATA_INA,
    \lu_mem_info_reg[Len][7] ,
    \lu_mem_info_reg[Addr_Use][5] ,
    \lu_mem_info_reg[Addr_Stp][5] ,
    \lu_mem_info_reg[Size][2] );
  output lookup_piperun;
  output lu_mem_valid_reg;
  output update_need_ar;
  output update_need_aw;
  output lud_reg_valid_reg;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output ri_fifo_full;
  output \read_req_info[0][Valid] ;
  output bs_exist;
  output bp_fifo_full;
  output \lu_check_info_reg[Port_Num][0] ;
  output wm_port;
  output wm_allocate_reg;
  output \bs_port_num_reg[0] ;
  output bs_slv;
  output wm_allow;
  output update_done_ar;
  output [0:0]\lu_check_info_reg[Addr][12] ;
  output \lu_mem_info_reg[Port_Num][0] ;
  output lud_addr_pipeline_full;
  output [0:0]\lud_mem_port_one_hot_reg[1] ;
  output \write_req_info[0][Line_Only] ;
  output [0:0]\lu_mem_info_reg[Addr][12] ;
  output lud_reg_port_num;
  output wm_allocate_reg_0;
  output \write_data_info[0][Valid] ;
  output \Use_FPGA.Full_Inst ;
  output \write_data_info[0][Last] ;
  output [1:0]\bs_src_reg[1] ;
  output \Use_FPGA.Empty_Inst ;
  output \lookup_read_data_info[0,0][Valid] ;
  output \update_read_data_info[0,0][Valid] ;
  output \update_read_data_info[0,1][Valid] ;
  output \lookup_read_data_info[0,1][Valid] ;
  output [23:0]in;
  output M0_AXI_BREADY;
  output \read_req_info[0][Kind] ;
  output \write_req_info[0][Kind] ;
  output update_evict_valid_reg;
  output [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  output [1:0]out;
  output [3:0]update_evict_busy_reg;
  output [2:0]\update_info_reg[Size][2] ;
  output [7:0]\update_info_reg[Len][7] ;
  output [1:0]\update_info_reg[Size][1] ;
  output [31:0]update_evict_busy_reg_0;
  output [7:0]\update_info_reg[Len][7]_0 ;
  output [16:0]\update_info_reg[Addr][23] ;
  output p_95_in;
  output \lu_check_locked_hit_reg[3] ;
  output \lookup_read_data_new[0,0][Valid] ;
  output lud_reg_valid_reg_0;
  output S;
  output lud_addr_pipeline_full_reg;
  output S_0;
  output wr_port_data_ready;
  output new_read_data_last;
  output new_read_data_last_1;
  output [0:0]\Use_FPGA.Full_Inst_0 ;
  output update_done_aw;
  output queue_push26_out;
  output \bs_src_reg[0] ;
  output S_2;
  output [31:0]new_read_data_word;
  output [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31] ;
  output queue_push;
  output \Use_FPGA.Empty_Inst_0 ;
  output update_done_ar_reg;
  output \lu_check_locked_hit_reg[3]_0 ;
  output lu_check_read_info_done_reg;
  input ACLK;
  input ARESET;
  input access_valid;
  input \Using_FPGA.MUXCY_I ;
  input A161_out;
  input \Using_FPGA.MUXCY_I_0 ;
  input \The_Compare[0].sel_reg ;
  input A;
  input A_N;
  input \The_Compare[0].sel_reg_3 ;
  input A_4;
  input \Using_FPGA.MUXCY_I_1 ;
  input S_5;
  input M0_AXI_RVALID;
  input \Use_FPGA.Almost_Full_Inst ;
  input [0:0]E;
  input write_data_full;
  input M0_AXI_RLAST;
  input [23:0]Q;
  input [0:0]\access_info[0][Port_Num] ;
  input \arb_access[Wr] ;
  input \access_info[0][Early] ;
  input \access_info[0][Keep] ;
  input lu_mem_single_beat;
  input lud_addr_pipeline_full0;
  input \access_info[0][Kind] ;
  input \access_info[0][Allocate] ;
  input \arb_access[Evict] ;
  input lu_mem_write_alloc0;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input write_data_almost_full;
  input \access_data_info[0,1][Last] ;
  input \access_data_info[0,0][Last] ;
  input \update_wma_data_reg[31] ;
  input \update_wma_data_reg[23] ;
  input \update_wma_data_reg[15] ;
  input \update_wma_data_reg[7] ;
  input update_write_miss_ongoing_reg;
  input M0_AXI_BVALID;
  input queue_full;
  input r_miss_fifo_full;
  input \read_data_status[0,0][Hit_Full] ;
  input r_miss_fifo_full_6;
  input \read_data_status[0,1][Hit_Full] ;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input [31:0]\M_AXI_WDATA_reg[31] ;
  input [31:0]\M_AXI_WDATA_reg[31]_0 ;
  input lud_write_hit_done_reg;
  input \access_data_info[0,0][Valid] ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input \access_data_info[0,1][Valid] ;
  input \read_data_status[0,0][Hit_Pop] ;
  input \read_data_status[0,1][Hit_Pop] ;
  input r_hit_push;
  input r_hit_push_7;
  input aw_fifo_full;
  input \pending_write_reg[0] ;
  input [1:0]S0_AXI_GEN_BRESP;
  input [31:0]M0_AXI_RDATA;
  input [1:0]M0_AXI_BRESP;
  input update_wm_pop_normal_hold_reg;
  input [31:0]D;
  input [31:0]DATA_INA;
  input [7:0]\lu_mem_info_reg[Len][7] ;
  input [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  input [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  input [2:0]\lu_mem_info_reg[Size][2] ;

  wire A;
  wire A161_out;
  wire A54_out;
  wire A56_out;
  wire A58_out;
  wire A60_out;
  wire ACLK;
  wire ARESET;
  wire A_4;
  wire A_N;
  wire [10:0]A_Vec;
  wire [5:0]B_Vec;
  wire [31:0]D;
  wire [31:0]DATA_INA;
  wire [0:0]E;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_0 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_1 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_10 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_11 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_12 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_13 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_14 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_15 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_16 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_17 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_18 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_19 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_2 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_20 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_21 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_22 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_23 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_24 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_25 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_26 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_27 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_28 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_29 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_3 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_30 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_31 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_32 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_33 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_34 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_35 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_36 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_37 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_38 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_39 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_4 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_40 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_41 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_42 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_43 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_44 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_45 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_46 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_47 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_48 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_49 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_5 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_50 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_51 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_52 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_53 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_54 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_55 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_56 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_57 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_58 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_59 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_6 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_60 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_61 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_62 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_63 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_7 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_8 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_9 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_0 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_1 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_10 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_11 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_12 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_13 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_14 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_15 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_16 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_17 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_18 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_19 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_2 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_20 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_21 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_22 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_23 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_24 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_25 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_26 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_27 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_28 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_29 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_3 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_30 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_31 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_32 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_33 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_34 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_35 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_36 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_37 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_38 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_39 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_4 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_40 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_41 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_42 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_43 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_44 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_45 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_46 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_47 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_48 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_49 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_5 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_50 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_51 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_52 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_53 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_54 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_55 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_56 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_57 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_58 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_59 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_6 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_60 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_61 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_62 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_63 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_7 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_8 ;
  wire \Gen_Block[0].Gen_Set_Data[1].DATA_n_9 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_0 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_1 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_10 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_11 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_12 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_13 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_14 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_15 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_16 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_17 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_18 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_19 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_2 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_20 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_21 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_22 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_23 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_24 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_25 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_26 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_27 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_28 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_29 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_3 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_30 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_31 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_32 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_33 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_34 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_35 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_36 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_37 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_38 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_39 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_4 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_40 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_41 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_42 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_43 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_44 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_45 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_46 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_47 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_48 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_49 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_5 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_50 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_51 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_52 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_53 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_54 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_55 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_56 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_57 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_58 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_59 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_6 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_60 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_61 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_62 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_63 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_7 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_8 ;
  wire \Gen_Block[0].Gen_Set_Data[2].DATA_n_9 ;
  wire \Gen_Block[0].LU_n_14 ;
  wire \Gen_Block[0].LU_n_15 ;
  wire \Gen_Block[0].LU_n_16 ;
  wire \Gen_Block[0].LU_n_17 ;
  wire \Gen_Block[0].LU_n_180 ;
  wire \Gen_Block[0].LU_n_181 ;
  wire \Gen_Block[0].LU_n_182 ;
  wire \Gen_Block[0].LU_n_183 ;
  wire \Gen_Block[0].LU_n_184 ;
  wire \Gen_Block[0].LU_n_185 ;
  wire \Gen_Block[0].LU_n_186 ;
  wire \Gen_Block[0].LU_n_187 ;
  wire \Gen_Block[0].LU_n_188 ;
  wire \Gen_Block[0].LU_n_20 ;
  wire \Gen_Block[0].LU_n_22 ;
  wire \Gen_Block[0].LU_n_273 ;
  wire \Gen_Block[0].LU_n_294 ;
  wire \Gen_Block[0].LU_n_295 ;
  wire \Gen_Block[0].LU_n_296 ;
  wire \Gen_Block[0].LU_n_297 ;
  wire \Gen_Block[0].LU_n_63 ;
  wire \Gen_Block[0].LU_n_65 ;
  wire \Gen_Block[0].LU_n_66 ;
  wire \Gen_Block[0].LU_n_71 ;
  wire \Gen_Block[0].LU_n_9 ;
  wire \Gen_Block[0].UD_n_11 ;
  wire \Gen_Block[0].UD_n_123 ;
  wire \Gen_Block[0].UD_n_131 ;
  wire \Gen_Block[0].UD_n_164 ;
  wire \Gen_Block[0].UD_n_165 ;
  wire \Gen_Block[0].UD_n_166 ;
  wire \Gen_Block[0].UD_n_171 ;
  wire \Gen_Block[0].UD_n_172 ;
  wire \Gen_Block[0].UD_n_173 ;
  wire \Gen_Block[0].UD_n_174 ;
  wire \Gen_Block[0].UD_n_175 ;
  wire \Gen_Block[0].UD_n_176 ;
  wire \Gen_Block[0].UD_n_177 ;
  wire \Gen_Block[0].UD_n_178 ;
  wire \Gen_Block[0].UD_n_179 ;
  wire \Gen_Block[0].UD_n_180 ;
  wire \Gen_Block[0].UD_n_181 ;
  wire \Gen_Block[0].UD_n_182 ;
  wire \Gen_Block[0].UD_n_183 ;
  wire \Gen_Block[0].UD_n_184 ;
  wire \Gen_Block[0].UD_n_185 ;
  wire \Gen_Block[0].UD_n_186 ;
  wire \Gen_Block[0].UD_n_187 ;
  wire \Gen_Block[0].UD_n_188 ;
  wire \Gen_Block[0].UD_n_189 ;
  wire \Gen_Block[0].UD_n_190 ;
  wire \Gen_Block[0].UD_n_191 ;
  wire \Gen_Block[0].UD_n_66 ;
  wire \Gen_Block[0].UD_n_8 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ;
  wire \Gen_Set_Tag[2].UD_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ;
  wire \Gen_Set_Tag[3].UD_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ;
  wire \LU_MD_Or_Inst1/The_Compare[0].carry_or_I1/S ;
  wire \LU_MD_Or_Inst1/The_Compare[1].carry_or_I1/S ;
  wire \LU_MD_Or_Inst1/The_Compare[2].carry_or_I1/S ;
  wire \LU_MD_Or_Inst1/The_Compare[3].carry_or_I1/S ;
  wire \LU_PC_Or_Inst1/The_Compare[0].carry_or_I1/S ;
  wire \LU_PC_Or_Inst1/The_Compare[1].carry_or_I1/S ;
  wire \LU_PC_Or_Inst1/The_Compare[2].carry_or_I1/S ;
  wire \LU_PC_Or_Inst1/The_Compare[3].carry_or_I1/S ;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RLAST;
  wire M0_AXI_RVALID;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [31:0]\M_AXI_WDATA_reg[31]_0 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire [23:0]Q;
  wire S;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire S_0;
  wire S_2;
  wire S_5;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_3 ;
  wire \UD_TagWrite_Or_Inst2/S ;
  wire \UD_TagWrite_Or_Inst3/S ;
  wire \UD_TagWrite_Or_Inst4/S ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire [0:0]\Use_FPGA.Full_Inst_0 ;
  wire [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31] ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire \access_info[0][Allocate] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire access_valid;
  wire \arb_access[Evict] ;
  wire \arb_access[Wr] ;
  wire aw_fifo_full;
  wire bp_fifo_full;
  wire bs_exist;
  wire [1:0]\bs_fifo_mem_reg[0][Src] ;
  wire \bs_port_num_reg[0] ;
  wire bs_slv;
  wire \bs_src_reg[0] ;
  wire [1:0]\bs_src_reg[1] ;
  wire [2:1]check_current_tree;
  wire [31:0]fit_vec;
  wire [23:0]in;
  wire [12:6]lookup_data_addr;
  wire [31:0]lookup_data_current_word_i;
  wire [3:0]lookup_data_we;
  wire lookup_fetch_piperun;
  wire lookup_mem_piperun;
  wire lookup_piperun;
  wire lookup_push_write_miss;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire [11:0]lookup_stall_addr;
  wire [12:6]lookup_tag_addr;
  wire [59:11]lookup_tag_current_word_i;
  wire [55:0]lookup_tag_current_word_i__0;
  wire lookup_tag_en;
  wire lookup_wm_allocate;
  wire lookup_wm_allow_write;
  wire lookup_wm_evict;
  wire [5:0]lookup_wm_stp_bits;
  wire [5:0]lookup_wm_use_bits;
  wire lookup_wm_will_use;
  wire [5:2]lookup_word_offset;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire [1:0]lru_check_next_way;
  wire lru_check_use_lru;
  wire [3:0]lu_check_dirty_bits;
  wire [0:0]\lu_check_info_reg[Addr][12] ;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_locked_hit_reg[3] ;
  wire \lu_check_locked_hit_reg[3]_0 ;
  wire [3:0]lu_check_protected;
  wire lu_check_read_info_done_reg;
  wire [0:0]\lu_mem_info_reg[Addr][12] ;
  wire [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  wire [7:0]\lu_mem_info_reg[Len][7] ;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire [2:0]\lu_mem_info_reg[Size][2] ;
  wire [3:0]lu_mem_removed_way_hold;
  wire lu_mem_single_beat;
  wire lu_mem_valid_reg;
  wire lu_mem_write_alloc0;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_reg;
  wire lud_mem_conflict;
  wire [0:0]\lud_mem_port_one_hot_reg[1] ;
  wire lud_reg_port_num;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire lud_write_hit_done_reg;
  wire new_read_data_last;
  wire new_read_data_last_1;
  wire [31:0]new_read_data_word;
  wire [2:0]new_tree;
  wire [1:0]out;
  wire p_0_in0_out;
  wire p_0_in2_out;
  wire p_0_in4_out;
  wire p_0_in5_out;
  wire p_95_in;
  wire \pending_write_reg[0] ;
  wire queue_full;
  wire queue_push;
  wire queue_push26_out;
  wire r_hit_push;
  wire r_hit_push_7;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_6;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire ri_fifo_full;
  wire ud_new_tag_valid2;
  wire [1:0]update_cur_tag_rd_way;
  wire [12:2]update_data_addr;
  wire [31:0]update_data_new_word;
  wire update_data_we;
  wire update_done_ar;
  wire update_done_ar_reg;
  wire update_done_aw;
  wire [3:0]update_evict_busy_reg;
  wire [31:0]update_evict_busy_reg_0;
  wire update_evict_valid_reg;
  wire [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  wire [1:0]\update_info[Addr] ;
  wire [5:0]\update_info[Addr_Stp] ;
  wire [5:0]\update_info[Addr_Use] ;
  wire \update_info[Allocate] ;
  wire \update_info[Early] ;
  wire \update_info[Internal_Cmd] ;
  wire \update_info[Kind] ;
  wire [7:0]\update_info[Len] ;
  wire \update_info[Wr] ;
  wire [16:0]\update_info_reg[Addr][23] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [7:0]\update_info_reg[Len][7]_0 ;
  wire [1:0]\update_info_reg[Size][1] ;
  wire [2:0]\update_info_reg[Size][2] ;
  wire update_locked_tag_is_dead0;
  wire update_need_ar;
  wire update_need_aw;
  wire update_need_bs;
  wire update_need_tag_write;
  wire update_piperun;
  wire \update_read_data_info[0,0][Last] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_read_miss;
  wire update_readback_available;
  wire [12:6]update_tag_addr;
  wire update_tag_conflict;
  wire update_tag_en;
  wire [23:16]\update_tag_new_word[0][Addr] ;
  wire [15:13]\update_tag_new_word[3][Addr] ;
  wire \update_tag_new_word[3][Dirty] ;
  wire \update_tag_new_word[3][Locked] ;
  wire \update_tag_new_word[3][Reused] ;
  wire \update_tag_new_word[3][Valid] ;
  wire update_valid;
  wire [1:0]update_way;
  wire update_wm_pop_normal_hold_reg;
  wire \update_wma_data_reg[15] ;
  wire \update_wma_data_reg[23] ;
  wire \update_wma_data_reg[31] ;
  wire \update_wma_data_reg[7] ;
  wire [1:0]update_write_data_ready;
  wire [1:0]update_write_miss_busy;
  wire update_write_miss_full;
  wire update_write_miss_ongoing_reg;
  wire wm_allocate_reg;
  wire wm_allocate_reg_0;
  wire wm_allow;
  wire wm_port;
  wire wr_port_data_ready;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_req_info[0][Kind] ;
  wire \write_req_info[0][Line_Only] ;

  Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3 \Gen_Block[0].Gen_Set_Data[0].DATA 
       (.ACLK(ACLK),
        .ADDRA({lookup_data_addr,lookup_word_offset}),
        .ADDRB(update_data_addr),
        .DATA_INA(DATA_INA),
        .DATA_INB(update_data_new_word),
        .DATA_OUTA({\Gen_Block[0].Gen_Set_Data[0].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_31 }),
        .DATA_OUTB({\Gen_Block[0].Gen_Set_Data[0].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_63 }),
        .ENA(\Gen_Block[0].LU_n_14 ),
        .O(\Gen_Block[0].UD_n_188 ),
        .WEA(lookup_data_we),
        .update_data_we(update_data_we));
  Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3_107 \Gen_Block[0].Gen_Set_Data[1].DATA 
       (.ACLK(ACLK),
        .ADDRA({lookup_data_addr,lookup_word_offset}),
        .ADDRB(update_data_addr),
        .DATA_INA(DATA_INA),
        .DATA_INB(update_data_new_word),
        .DATA_OUTA({\Gen_Block[0].Gen_Set_Data[1].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_31 }),
        .DATA_OUTB({\Gen_Block[0].Gen_Set_Data[1].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_63 }),
        .ENA(\Gen_Block[0].LU_n_15 ),
        .O(\Gen_Block[0].UD_n_189 ),
        .WEA(lookup_data_we),
        .update_data_we(update_data_we));
  Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3_108 \Gen_Block[0].Gen_Set_Data[2].DATA 
       (.ACLK(ACLK),
        .ADDRA({lookup_data_addr,lookup_word_offset}),
        .ADDRB(update_data_addr),
        .DATA_INA(DATA_INA),
        .DATA_INB(update_data_new_word),
        .DATA_OUTA({\Gen_Block[0].Gen_Set_Data[2].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_31 }),
        .DATA_OUTB({\Gen_Block[0].Gen_Set_Data[2].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_63 }),
        .ENA(\Gen_Block[0].LU_n_16 ),
        .O(\Gen_Block[0].UD_n_190 ),
        .WEA(lookup_data_we),
        .update_data_we(update_data_we));
  Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3_109 \Gen_Block[0].Gen_Set_Data[3].DATA 
       (.ACLK(ACLK),
        .ADDRA({lookup_data_addr,lookup_word_offset}),
        .ADDRB(update_data_addr),
        .DATA_INA(DATA_INA),
        .DATA_INB(update_data_new_word),
        .DATA_OUTA(lookup_data_current_word_i),
        .DATA_OUTB(fit_vec),
        .ENA(\Gen_Block[0].LU_n_17 ),
        .O(\Gen_Block[0].UD_n_191 ),
        .WEA(lookup_data_we),
        .update_data_we(update_data_we));
  Fast_IP_Clock_system_cache_0_0_sc_lru_module \Gen_Block[0].LRU 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .D({\lu_check_info_reg[Addr][12] ,lookup_stall_addr[11:6]}),
        .DIBDI(new_tree),
        .Q(Q[12:6]),
        .S(\LU_PC_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_0(\LU_MD_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_1(\LU_PC_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .S_2(\LU_MD_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .S_3(\LU_PC_Or_Inst1/The_Compare[2].carry_or_I1/S ),
        .S_4(\LU_MD_Or_Inst1/The_Compare[2].carry_or_I1/S ),
        .S_5(\LU_PC_Or_Inst1/The_Compare[3].carry_or_I1/S ),
        .S_6(\LU_MD_Or_Inst1/The_Compare[3].carry_or_I1/S ),
        .\Using_FPGA.MUXCY_I (lu_check_protected),
        .\Using_FPGA.MUXCY_I_0 (lu_check_dirty_bits),
        .WEBWE(lru_check_use_lru),
        .\check_current_tree_reg[2]_0 (check_current_tree),
        .lookup_fetch_piperun(lookup_fetch_piperun),
        .lookup_mem_piperun(lookup_mem_piperun),
        .lru_check_next_way(lru_check_next_way));
  Fast_IP_Clock_system_cache_0_0_sc_lookup \Gen_Block[0].LU 
       (.A(A),
        .A161_out(A161_out),
        .ACLK(ACLK),
        .ADDRA({lookup_data_addr,lookup_word_offset}),
        .ARESET(ARESET),
        .A_13(\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/A ),
        .A_15(\Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/A ),
        .A_18(\Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/A ),
        .A_21(\Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/A ),
        .A_N(A_N),
        .B_Vec(B_Vec),
        .D(\lu_check_info_reg[Addr][12] ),
        .DIBDI(new_tree),
        .DPRA(lookup_tag_addr),
        .E(lookup_tag_en),
        .ENA(\Gen_Block[0].LU_n_14 ),
        .I206({\update_tag_new_word[3][Valid] ,\update_tag_new_word[3][Reused] ,\update_tag_new_word[3][Dirty] ,\update_tag_new_word[3][Locked] }),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (check_current_tree),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (\Gen_Block[0].UD_n_123 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] (\Gen_Block[0].UD_n_11 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] (\Gen_Block[0].UD_n_66 ),
        .Q(Q),
        .S(S),
        .S_0(S_0),
        .S_1(\UD_TagWrite_Or_Inst4/S ),
        .S_10(\LU_PC_Or_Inst1/The_Compare[2].carry_or_I1/S ),
        .S_11(\LU_PC_Or_Inst1/The_Compare[3].carry_or_I1/S ),
        .S_2(\UD_TagWrite_Or_Inst3/S ),
        .S_3(\UD_TagWrite_Or_Inst2/S ),
        .S_4(\LU_MD_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_5(\LU_MD_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .S_6(\LU_MD_Or_Inst1/The_Compare[2].carry_or_I1/S ),
        .S_7(\LU_MD_Or_Inst1/The_Compare[3].carry_or_I1/S ),
        .S_8(\LU_PC_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_9(\LU_PC_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (update_need_ar),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (update_need_aw),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\Gen_Block[0].LU_n_9 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\Gen_Block[0].LU_n_71 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (\Gen_Block[0].LU_n_273 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (\Gen_Block[0].UD_n_181 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ({lookup_tag_current_word_i[12],lookup_tag_current_word_i__0[10:0]}),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (\Gen_Block[0].UD_n_182 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\Gen_Block[0].UD_n_171 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ({lookup_tag_current_word_i[27],lookup_tag_current_word_i__0[25:15]}),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 (\Gen_Block[0].UD_n_172 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst (\Gen_Block[0].UD_n_186 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ({lookup_tag_current_word_i[42],lookup_tag_current_word_i__0[40:30]}),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 (\Gen_Block[0].UD_n_187 ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst (lu_check_dirty_bits),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 (\Gen_Block[0].UD_n_176 ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 (\Gen_Block[0].UD_n_177 ),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_12 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_14 (\Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_17 (\Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_20 (\Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_16 (\Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_19 (\Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_22 (\Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 ({\Gen_Block[0].Gen_Set_Data[0].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_31 }),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 ({\Gen_Block[0].Gen_Set_Data[1].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_31 }),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 ({\Gen_Block[0].Gen_Set_Data[2].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_31 }),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 (\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31] ),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 (lookup_data_current_word_i),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_1 (\Gen_Block[0].UD_n_180 ),
        .\Using_FPGA.MUXCY_I_2 (\Gen_Block[0].UD_n_166 ),
        .\Using_FPGA.MUXCY_I_3 (\Gen_Block[0].UD_n_185 ),
        .\Using_FPGA.MUXCY_I_4 (\Gen_Block[0].UD_n_175 ),
        .WEA(lookup_data_we),
        .WEBWE(lru_check_use_lru),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .\access_info[0][Allocate] (\access_info[0][Allocate] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .access_valid(access_valid),
        .\arb_access[Evict] (\arb_access[Evict] ),
        .\arb_access[Wr] (\arb_access[Wr] ),
        .aw_fifo_full(aw_fifo_full),
        .\bs_fifo_mem_reg[0][Src][0] (\Gen_Block[0].LU_n_66 ),
        .\bs_fifo_mem_reg[0][Src][1] (\Gen_Block[0].LU_n_65 ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\bs_fifo_mem_reg[0][Src] ),
        .\bs_fifo_mem_reg[0][Src][1]_1 (\Gen_Block[0].UD_n_8 ),
        .in(in),
        .lookup_fetch_piperun(lookup_fetch_piperun),
        .lookup_mem_piperun(lookup_mem_piperun),
        .\lookup_offset_len_cnt_reg[0]_0 (\Gen_Block[0].UD_n_131 ),
        .lookup_piperun(lookup_piperun),
        .lookup_push_write_miss(lookup_push_write_miss),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .lookup_tag_current_word_i({lookup_tag_current_word_i[57],lookup_tag_current_word_i__0[55:45]}),
        .lookup_wm_allocate(lookup_wm_allocate),
        .lookup_wm_allow_write(lookup_wm_allow_write),
        .lookup_wm_evict(lookup_wm_evict),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lru_check_next_way(lru_check_next_way),
        .\lu_check_info_reg[Addr][11]_0 (lookup_stall_addr),
        .\lu_check_info_reg[Addr][13]_0 (\Gen_Block[0].LU_n_180 ),
        .\lu_check_info_reg[Addr][14]_0 (\Gen_Block[0].LU_n_181 ),
        .\lu_check_info_reg[Addr][15]_0 (\Gen_Block[0].LU_n_182 ),
        .\lu_check_info_reg[Addr][16]_0 (\Gen_Block[0].LU_n_183 ),
        .\lu_check_info_reg[Addr][17]_0 (\Gen_Block[0].LU_n_184 ),
        .\lu_check_info_reg[Addr][18]_0 (\Gen_Block[0].LU_n_185 ),
        .\lu_check_info_reg[Addr][19]_0 (\Gen_Block[0].LU_n_186 ),
        .\lu_check_info_reg[Addr][20]_0 (\Gen_Block[0].LU_n_187 ),
        .\lu_check_info_reg[Addr][21]_0 (\Gen_Block[0].LU_n_188 ),
        .\lu_check_info_reg[Addr_Stp][5]_0 (lookup_wm_stp_bits),
        .\lu_check_info_reg[Addr_Use][5]_0 (lookup_wm_use_bits),
        .\lu_check_info_reg[Kind]_0 (\Gen_Block[0].LU_n_20 ),
        .\lu_check_info_reg[Port_Num][0]_0 (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_locked_hit_reg[3]_0 (\lu_check_locked_hit_reg[3] ),
        .\lu_check_locked_hit_reg[3]_1 (\lu_check_locked_hit_reg[3]_0 ),
        .\lu_check_protected_reg[3]_0 (lu_check_protected),
        .lu_check_read_info_done_reg_0(lu_check_read_info_done_reg),
        .\lu_check_valid_bits_reg[3]_0 ({A60_out,A58_out,A56_out,A54_out}),
        .\lu_mem_info_reg[Addr][12]_0 (\lu_mem_info_reg[Addr][12] ),
        .\lu_mem_info_reg[Addr_Stp][5]_0 (\lu_mem_info_reg[Addr_Stp][5] ),
        .\lu_mem_info_reg[Addr_Use][5]_0 (\lu_mem_info_reg[Addr_Use][5] ),
        .\lu_mem_info_reg[Len][7]_0 (\lu_mem_info_reg[Len][7] ),
        .\lu_mem_info_reg[Port_Num][0]_0 (\lu_mem_info_reg[Port_Num][0] ),
        .\lu_mem_info_reg[Size][2]_0 (\lu_mem_info_reg[Size][2] ),
        .\lu_mem_release_lock_hold_reg[0]_0 (\Gen_Block[0].LU_n_297 ),
        .\lu_mem_release_lock_hold_reg[0]_1 (\Gen_Block[0].UD_n_178 ),
        .\lu_mem_release_lock_hold_reg[1]_0 (\Gen_Block[0].LU_n_296 ),
        .\lu_mem_release_lock_hold_reg[1]_1 (\Gen_Block[0].UD_n_165 ),
        .\lu_mem_release_lock_hold_reg[2]_0 (\Gen_Block[0].LU_n_295 ),
        .\lu_mem_release_lock_hold_reg[2]_1 (\Gen_Block[0].UD_n_183 ),
        .\lu_mem_release_lock_hold_reg[3]_0 (\Gen_Block[0].LU_n_294 ),
        .\lu_mem_release_lock_hold_reg[3]_1 (\Gen_Block[0].UD_n_174 ),
        .lu_mem_removed_way_hold(lu_mem_removed_way_hold),
        .\lu_mem_removed_way_hold_reg[0]_0 (\Gen_Block[0].UD_n_179 ),
        .\lu_mem_removed_way_hold_reg[1]_0 (\Gen_Block[0].UD_n_164 ),
        .\lu_mem_removed_way_hold_reg[2]_0 (\Gen_Block[0].UD_n_184 ),
        .\lu_mem_removed_way_hold_reg[3]_0 (\Gen_Block[0].UD_n_173 ),
        .lu_mem_single_beat(lu_mem_single_beat),
        .lu_mem_valid_reg_0(lu_mem_valid_reg),
        .lu_mem_write_alloc0(lu_mem_write_alloc0),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .lud_addr_pipeline_full_reg_0(lud_addr_pipeline_full),
        .lud_addr_pipeline_full_reg_1(lud_addr_pipeline_full_reg),
        .lud_mem_conflict(lud_mem_conflict),
        .lud_mem_keep_single_during_stall_reg_0(p_95_in),
        .\lud_mem_port_one_hot_reg[1]_0 (\lud_mem_port_one_hot_reg[1] ),
        .lud_mem_waiting_for_pipe_reg_0(\Gen_Block[0].LU_n_15 ),
        .lud_mem_waiting_for_pipe_reg_1(\Gen_Block[0].LU_n_16 ),
        .lud_mem_waiting_for_pipe_reg_2(\Gen_Block[0].LU_n_17 ),
        .lud_mem_waiting_for_pipe_reg_3(\Gen_Block[0].LU_n_63 ),
        .\lud_reg_port_num_reg[0]_0 (lud_reg_port_num),
        .\lud_reg_valid_one_hot_reg[0]_0 (\lookup_read_data_info[0,0][Valid] ),
        .\lud_reg_valid_one_hot_reg[1]_0 (\lookup_read_data_info[0,1][Valid] ),
        .lud_reg_valid_reg_0(lud_reg_valid_reg),
        .lud_reg_valid_reg_1(lud_reg_valid_reg_0),
        .lud_write_hit_done_reg_0(lud_write_hit_done_reg),
        .new_read_data_last(new_read_data_last),
        .new_read_data_last_1(new_read_data_last_1),
        .new_read_data_word(new_read_data_word),
        .r_hit_push(r_hit_push),
        .r_hit_push_7(r_hit_push_7),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .ud_new_tag_valid2(ud_new_tag_valid2),
        .update_done_aw_reg(\pending_write_reg[0] ),
        .update_done_aw_reg_0(update_done_aw),
        .\update_info[Allocate] (\update_info[Allocate] ),
        .\update_info[Early] (\update_info[Early] ),
        .\update_info[Internal_Cmd] (\update_info[Internal_Cmd] ),
        .\update_info[Kind] (\update_info[Kind] ),
        .\update_info[Wr] (\update_info[Wr] ),
        .\update_info_reg[Addr][1]_0 (\update_info[Addr] ),
        .\update_info_reg[Addr][23]_0 (\update_info_reg[Addr][23] ),
        .\update_info_reg[Addr_Stp][5]_0 (\update_info[Addr_Stp] ),
        .\update_info_reg[Addr_Use][5]_0 (\update_info[Addr_Use] ),
        .\update_info_reg[Evict]_0 (\write_req_info[0][Line_Only] ),
        .\update_info_reg[Len][7]_0 (\update_info[Len] ),
        .\update_info_reg[Len][7]_1 (\update_info_reg[Len][7] ),
        .\update_info_reg[Len][7]_2 (\update_info_reg[Len][7]_0 ),
        .\update_info_reg[Port_Num][0]_0 (\Gen_Block[0].LU_n_22 ),
        .\update_info_reg[Size][1]_0 (\update_info_reg[Size][1] ),
        .\update_info_reg[Size][2]_0 (\update_info_reg[Size][2] ),
        .update_need_bs(update_need_bs),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun(update_piperun),
        .\update_read_data_info[0,0][Last] (\update_read_data_info[0,0][Last] ),
        .update_read_miss(update_read_miss),
        .update_readback_available(update_readback_available),
        .update_tag_conflict(update_tag_conflict),
        .update_valid(update_valid),
        .\update_way_reg[1]_0 (update_way),
        .update_write_data_ready(update_write_data_ready),
        .update_write_miss_busy(update_write_miss_busy),
        .update_write_miss_full(update_write_miss_full),
        .wr_port_data_ready(wr_port_data_ready),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ));
  Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized1 \Gen_Block[0].TAG 
       (.A(update_tag_addr),
        .ACLK(ACLK),
        .A_0(\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/A ),
        .A_10(\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/A ),
        .A_17(\Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/A ),
        .A_18(\Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/A ),
        .A_19(\Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/A ),
        .A_2(\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/A ),
        .A_20(\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/A ),
        .A_6(\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/A ),
        .CO(update_locked_tag_is_dead0),
        .DPRA(lookup_tag_addr),
        .E(update_tag_en),
        .I168({\update_tag_new_word[3][Valid] ,\update_tag_new_word[3][Reused] ,\update_tag_new_word[3][Dirty] ,\update_tag_new_word[3][Locked] ,\update_tag_new_word[0][Addr] ,\update_tag_new_word[3][Addr] }),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 (lookup_tag_en),
        .Q(A_Vec),
        .\The_Compare[0].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_1 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_13 (\Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_14 (\Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_15 (\Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_16 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_5 (\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_9 (\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_11 (\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_21 (\Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_22 (\Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_23 (\Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_24 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_3 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_7 (\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[3].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_12 (\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_4 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_8 (\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\Using_FPGA.MUXCY_I (\Gen_Block[0].LU_n_181 ),
        .\Using_FPGA.MUXCY_I_0 (\Gen_Block[0].LU_n_182 ),
        .\Using_FPGA.MUXCY_I_1 (\Gen_Block[0].LU_n_180 ),
        .\Using_FPGA.MUXCY_I_2 (\Gen_Block[0].LU_n_184 ),
        .\Using_FPGA.MUXCY_I_3 (\Gen_Block[0].LU_n_185 ),
        .\Using_FPGA.MUXCY_I_4 (\Gen_Block[0].LU_n_183 ),
        .\Using_FPGA.MUXCY_I_5 (\Gen_Block[0].LU_n_187 ),
        .\Using_FPGA.MUXCY_I_6 (\Gen_Block[0].LU_n_188 ),
        .\Using_FPGA.MUXCY_I_7 (\Gen_Block[0].LU_n_186 ),
        .lookup_tag_current_word_i({lookup_tag_current_word_i[59:56],lookup_tag_current_word_i[44:41],lookup_tag_current_word_i[29:26],lookup_tag_current_word_i[14:11]}),
        .lookup_tag_current_word_i__0({lookup_tag_current_word_i__0[55:45],lookup_tag_current_word_i__0[40:30],lookup_tag_current_word_i__0[25:15],lookup_tag_current_word_i__0[10:0]}),
        .p_0_in0_out(p_0_in0_out),
        .p_0_in2_out(p_0_in2_out),
        .p_0_in4_out(p_0_in4_out),
        .p_0_in5_out(p_0_in5_out),
        .update_cur_tag_rd_way(update_cur_tag_rd_way));
  Fast_IP_Clock_system_cache_0_0_sc_update \Gen_Block[0].UD 
       (.A(update_tag_addr),
        .ACLK(ACLK),
        .ADDRB(update_data_addr),
        .ARESET(ARESET),
        .A_13(\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/A ),
        .A_2(\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/A ),
        .A_4(A_4),
        .A_5(\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/A ),
        .A_9(\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/A ),
        .B_Vec(B_Vec),
        .CO(update_locked_tag_is_dead0),
        .D(\bs_fifo_mem_reg[0][Src] ),
        .DATA_INB(update_data_new_word),
        .DATA_OUTB(fit_vec),
        .E(E),
        .I168({\update_tag_new_word[0][Addr] ,\update_tag_new_word[3][Addr] }),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BRESP(M0_AXI_BRESP),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\M_AXI_WDATA_reg[31] (\M_AXI_WDATA_reg[31] ),
        .\M_AXI_WDATA_reg[31]_0 (\M_AXI_WDATA_reg[31]_0 ),
        .\M_AXI_WSTRB_reg[3] (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\M_AXI_WSTRB_reg[3]_0 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] (\Gen_Block[0].LU_n_71 ),
        .O(\Gen_Block[0].UD_n_188 ),
        .Q(\bs_src_reg[1] ),
        .S(\UD_TagWrite_Or_Inst2/S ),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S_0(\UD_TagWrite_Or_Inst3/S ),
        .S_1(\UD_TagWrite_Or_Inst4/S ),
        .S_2(S_2),
        .S_5(S_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Compare[0].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_12 (\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_3 (\The_Compare[0].sel_reg_3 ),
        .\The_Compare[0].sel_reg_4 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_8 (\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_10 (\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_14 (\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_6 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[3].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_11 (\Gen_Set_Tag[2].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_15 (\Gen_Set_Tag[3].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_7 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Empty_Inst (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_0 ),
        .\Use_FPGA.Full_Inst (ri_fifo_full),
        .\Use_FPGA.Full_Inst_0 (\read_req_info[0][Valid] ),
        .\Use_FPGA.Full_Inst_1 (\Gen_Block[0].UD_n_8 ),
        .\Use_FPGA.Full_Inst_2 (bp_fifo_full),
        .\Use_FPGA.Full_Inst_3 (\Use_FPGA.Full_Inst ),
        .\Use_FPGA.Full_Inst_4 (\Use_FPGA.Full_Inst_0 ),
        .\Use_FPGA.Full_Inst_5 (\Gen_Block[0].LU_n_9 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (bs_exist),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Using_FPGA.AND2B1L_Inst1_i_2_0 (lu_mem_valid_reg),
        .\Using_FPGA.AND2B1L_Inst1_i_2_1 (\lu_mem_info_reg[Addr][12] ),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I_1 ),
        .\Using_FPGA.MUXCY_I_i_1__50 (\Gen_Block[0].LU_n_63 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .access_valid(access_valid),
        .aw_fifo_full(aw_fifo_full),
        .\bs_fifo_mem_reg[0][Src][0]_0 (\Gen_Block[0].LU_n_66 ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\Gen_Block[0].LU_n_65 ),
        .\bs_port_num_reg[0]_0 (\bs_port_num_reg[0] ),
        .bs_slv(bs_slv),
        .\bs_src_reg[0]_0 (\bs_src_reg[0] ),
        .in({in[23:2],\update_info[Addr] }),
        .lookup_push_write_miss(lookup_push_write_miss),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lookup_tag_current_word_i({lookup_tag_current_word_i[59:58],lookup_tag_current_word_i[56],lookup_tag_current_word_i[44:43],lookup_tag_current_word_i[41],lookup_tag_current_word_i[29:28],lookup_tag_current_word_i[26],lookup_tag_current_word_i[14:13],lookup_tag_current_word_i[11]}),
        .lookup_wm_allocate(lookup_wm_allocate),
        .lookup_wm_allow_write(lookup_wm_allow_write),
        .lookup_wm_evict(lookup_wm_evict),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .\lu_mem_release_lock_hold_reg[0] (\Gen_Block[0].LU_n_297 ),
        .\lu_mem_release_lock_hold_reg[1] (\Gen_Block[0].LU_n_296 ),
        .\lu_mem_release_lock_hold_reg[2] (\Gen_Block[0].LU_n_295 ),
        .\lu_mem_release_lock_hold_reg[3] (\Gen_Block[0].LU_n_294 ),
        .lu_mem_removed_way_hold(lu_mem_removed_way_hold),
        .lud_mem_conflict(lud_mem_conflict),
        .lud_mem_waiting_for_pipe_reg(\Gen_Block[0].UD_n_131 ),
        .out(out),
        .p_0_in0_out(p_0_in0_out),
        .p_0_in2_out(p_0_in2_out),
        .p_0_in4_out(p_0_in4_out),
        .p_0_in5_out(p_0_in5_out),
        .\pending_write_reg[0] (\pending_write_reg[0] ),
        .queue_full(queue_full),
        .queue_push(queue_push),
        .queue_push26_out(queue_push26_out),
        .r_miss_fifo_full(r_miss_fifo_full),
        .r_miss_fifo_full_6(r_miss_fifo_full_6),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\ri_addr_reg[23]_0 (A_Vec),
        .\ri_len_reg[7]_0 (\update_info[Len] ),
        .ri_merge_reg_0(\Gen_Block[0].UD_n_11 ),
        .\ri_port_reg[0]_0 (\Gen_Block[0].LU_n_22 ),
        .\ri_stp_reg[5]_0 (\update_info[Addr_Stp] ),
        .\ri_use_reg[5]_0 (\update_info[Addr_Use] ),
        .\ri_way_reg[0]_0 (\Gen_Block[0].UD_n_190 ),
        .\ri_way_reg[1]_0 (\Gen_Block[0].UD_n_189 ),
        .\ri_way_reg[1]_1 (\Gen_Block[0].UD_n_191 ),
        .\ri_way_reg[1]_2 (update_way),
        .ud_new_tag_valid2(ud_new_tag_valid2),
        .update_cur_tag_rd_way(update_cur_tag_rd_way),
        .update_data_we(update_data_we),
        .update_done_ar_reg_0(update_done_ar),
        .update_done_ar_reg_1(update_done_ar_reg),
        .update_done_ar_reg_2(update_need_ar),
        .update_done_aw_reg_0(update_done_aw),
        .update_done_aw_reg_1(\Gen_Block[0].LU_n_273 ),
        .update_done_tag_write_reg_0(\Gen_Block[0].UD_n_66 ),
        .update_evict_busy_reg_0(update_evict_busy_reg),
        .update_evict_busy_reg_1(update_evict_busy_reg_0),
        .update_evict_valid_reg_0(update_evict_valid_reg),
        .\update_ext_bresp_info[0,0][BRESP] (\update_ext_bresp_info[0,0][BRESP] ),
        .\update_info[Allocate] (\update_info[Allocate] ),
        .\update_info[Early] (\update_info[Early] ),
        .\update_info[Internal_Cmd] (\update_info[Internal_Cmd] ),
        .\update_info[Kind] (\update_info[Kind] ),
        .\update_info[Wr] (\update_info[Wr] ),
        .\update_lock_way_reg[0]_0 (\Gen_Block[0].UD_n_164 ),
        .\update_lock_way_reg[0]_1 (\Gen_Block[0].UD_n_165 ),
        .\update_lock_way_reg[0]_10 (\Gen_Block[0].UD_n_177 ),
        .\update_lock_way_reg[0]_11 (\Gen_Block[0].UD_n_178 ),
        .\update_lock_way_reg[0]_12 (\Gen_Block[0].UD_n_179 ),
        .\update_lock_way_reg[0]_13 (\Gen_Block[0].UD_n_180 ),
        .\update_lock_way_reg[0]_14 (\Gen_Block[0].UD_n_181 ),
        .\update_lock_way_reg[0]_15 (\Gen_Block[0].UD_n_182 ),
        .\update_lock_way_reg[0]_16 (\Gen_Block[0].UD_n_183 ),
        .\update_lock_way_reg[0]_17 (\Gen_Block[0].UD_n_184 ),
        .\update_lock_way_reg[0]_18 (\Gen_Block[0].UD_n_185 ),
        .\update_lock_way_reg[0]_19 (\Gen_Block[0].UD_n_186 ),
        .\update_lock_way_reg[0]_2 (\Gen_Block[0].UD_n_166 ),
        .\update_lock_way_reg[0]_20 (\Gen_Block[0].UD_n_187 ),
        .\update_lock_way_reg[0]_3 ({A60_out,A58_out,A56_out,A54_out}),
        .\update_lock_way_reg[0]_4 (\Gen_Block[0].UD_n_171 ),
        .\update_lock_way_reg[0]_5 (\Gen_Block[0].UD_n_172 ),
        .\update_lock_way_reg[0]_6 (\Gen_Block[0].UD_n_173 ),
        .\update_lock_way_reg[0]_7 (\Gen_Block[0].UD_n_174 ),
        .\update_lock_way_reg[0]_8 (\Gen_Block[0].UD_n_175 ),
        .\update_lock_way_reg[0]_9 (\Gen_Block[0].UD_n_176 ),
        .update_need_aw(update_need_aw),
        .update_need_bs(update_need_bs),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun(update_piperun),
        .\update_read_data_info[0,0][Last] (\update_read_data_info[0,0][Last] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_read_miss(update_read_miss),
        .update_readback_available(update_readback_available),
        .\update_release_tag_reg[Addr][7]_0 (\Gen_Block[0].UD_n_123 ),
        .update_tag_conflict(update_tag_conflict),
        .update_valid(update_valid),
        .update_wm_pop_normal_hold_reg_0(update_wm_pop_normal_hold_reg),
        .\update_wma_data_reg[15]_0 (\update_wma_data_reg[15] ),
        .\update_wma_data_reg[23]_0 (\update_wma_data_reg[23] ),
        .\update_wma_data_reg[31]_0 (\update_wma_data_reg[31] ),
        .\update_wma_data_reg[31]_1 (D),
        .\update_wma_data_reg[7]_0 (\update_wma_data_reg[7] ),
        .update_word_cnt_almost_last_reg_0(update_tag_en),
        .update_write_data_ready(update_write_data_ready),
        .update_write_miss_busy(update_write_miss_busy),
        .\update_write_miss_busy_i_reg[1]_0 (\lu_check_info_reg[Port_Num][0] ),
        .update_write_miss_full(update_write_miss_full),
        .update_write_miss_ongoing_reg_0(update_write_miss_ongoing_reg),
        .\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 ({\Gen_Block[0].Gen_Set_Data[2].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[2].DATA_n_63 }),
        .\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 ({\Gen_Block[0].Gen_Set_Data[1].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[1].DATA_n_63 }),
        .\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 ({\Gen_Block[0].Gen_Set_Data[0].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_63 }),
        .wm_allocate_reg_0(wm_allocate_reg),
        .wm_allocate_reg_1(wm_allocate_reg_0),
        .wm_allow_reg_0(wm_allow),
        .wm_kind_reg_0(\Gen_Block[0].LU_n_20 ),
        .\wm_offset_reg[5]_0 (lookup_stall_addr[5:0]),
        .\wm_port_reg[0]_0 (wm_port),
        .\wm_stp_bits_reg[5]_0 (lookup_wm_stp_bits),
        .\wm_use_bits_reg[5]_0 (lookup_wm_use_bits),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ));
endmodule

(* ORIG_REF_NAME = "sc_crossbar" *) 
module Fast_IP_Clock_system_cache_0_0_sc_crossbar
   (\Use_FPGA.Full_Inst ,
    aw_fifo_empty,
    write_data_almost_full,
    write_data_full,
    \Use_FPGA.Empty_Inst ,
    \read_req_ordered_info[0][Valid] ,
    \Use_FPGA.Full_Inst_0 ,
    \read_req_ordered_info[0][Kind] ,
    \read_req_ordered_info[0][Prot] ,
    \write_req_ordered_info[0][Kind] ,
    \write_req_ordered_info[0][Prot] ,
    \write_data_ordered_info[0][Last] ,
    need_to_stall_write_reg,
    S,
    out,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ,
    ACLK,
    ARESET,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    queue_push26_out,
    queue_push,
    \Order_Optimization_4.buffer_addr_reg[0] ,
    \M_AXI_ARPROT_reg[1] ,
    S_0,
    \read_req_info[0][Kind] ,
    \write_req_info[0][Kind] ,
    \write_data_info[0][Last] ,
    \write_req_info[0][Line_Only] ,
    update_need_aw,
    update_done_aw,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_need_ar,
    update_done_ar,
    M0_AXI_BVALID,
    bp_fifo_full,
    M0_AXI_AWREADY,
    \Use_FPGA.Almost_Full_Inst ,
    M_AXI_WVALID_I_reg,
    M0_AXI_WREADY,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_1 ,
    \Use_FPGA.Almost_Full_Inst_2 ,
    \write_data_info[0][Valid] ,
    in,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_AWADDR_reg[23] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WDATA_reg[31] ,
    E);
  output \Use_FPGA.Full_Inst ;
  output aw_fifo_empty;
  output write_data_almost_full;
  output write_data_full;
  output \Use_FPGA.Empty_Inst ;
  output \read_req_ordered_info[0][Valid] ;
  output \Use_FPGA.Full_Inst_0 ;
  output \read_req_ordered_info[0][Kind] ;
  output [0:0]\read_req_ordered_info[0][Prot] ;
  output \write_req_ordered_info[0][Kind] ;
  output [0:0]\write_req_ordered_info[0][Prot] ;
  output \write_data_ordered_info[0][Last] ;
  output need_to_stall_write_reg;
  output S;
  output [23:0]out;
  output [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  output [2:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  output [23:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ;
  output [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ;
  output [1:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ;
  output [3:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  output [31:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  input ACLK;
  input ARESET;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input queue_push26_out;
  input queue_push;
  input \Order_Optimization_4.buffer_addr_reg[0] ;
  input \M_AXI_ARPROT_reg[1] ;
  input S_0;
  input \read_req_info[0][Kind] ;
  input \write_req_info[0][Kind] ;
  input \write_data_info[0][Last] ;
  input \write_req_info[0][Line_Only] ;
  input update_need_aw;
  input update_done_aw;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_need_ar;
  input update_done_ar;
  input M0_AXI_BVALID;
  input bp_fifo_full;
  input M0_AXI_AWREADY;
  input \Use_FPGA.Almost_Full_Inst ;
  input M_AXI_WVALID_I_reg;
  input M0_AXI_WREADY;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input \Use_FPGA.Almost_Full_Inst_1 ;
  input \Use_FPGA.Almost_Full_Inst_2 ;
  input \write_data_info[0][Valid] ;
  input [23:0]in;
  input [7:0]\M_AXI_ARLEN_reg[7] ;
  input [2:0]\M_AXI_ARSIZE_reg[2] ;
  input [16:0]\M_AXI_AWADDR_reg[23] ;
  input [7:0]\M_AXI_AWLEN_reg[7] ;
  input [1:0]\M_AXI_AWSIZE_reg[1] ;
  input [3:0]\M_AXI_WSTRB_reg[3] ;
  input [31:0]\M_AXI_WDATA_reg[31] ;
  input [0:0]E;

  wire ACLK;
  wire ARESET;
  wire [0:0]E;
  wire M0_AXI_AWREADY;
  wire M0_AXI_BVALID;
  wire M0_AXI_WREADY;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire \M_AXI_ARPROT_reg[1] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire [16:0]\M_AXI_AWADDR_reg[23] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire M_AXI_WVALID_I_reg;
  wire \Order_Optimization_4.buffer_addr_reg[0] ;
  wire S;
  wire S_0;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_1 ;
  wire \Use_FPGA.Almost_Full_Inst_2 ;
  wire [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire [2:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  wire [23:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ;
  wire [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ;
  wire [1:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire [3:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  wire [31:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire aw_fifo_empty;
  wire bp_fifo_full;
  wire [23:0]in;
  wire need_to_stall_write_reg;
  wire [23:0]out;
  wire queue_push;
  wire queue_push26_out;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire \read_req_ordered_info[0][Kind] ;
  wire [0:0]\read_req_ordered_info[0][Prot] ;
  wire \read_req_ordered_info[0][Valid] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_done_aw;
  wire update_need_ar;
  wire update_need_aw;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_data_ordered_info[0][Last] ;
  wire \write_req_info[0][Kind] ;
  wire \write_req_info[0][Line_Only] ;
  wire \write_req_ordered_info[0][Kind] ;
  wire [0:0]\write_req_ordered_info[0][Prot] ;

  Fast_IP_Clock_system_cache_0_0_sc_transaction_ordering \Gen_Master_Ports[0].TransOrd 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(E),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .\M_AXI_ARLEN_reg[7] (\M_AXI_ARLEN_reg[7] ),
        .\M_AXI_ARPROT_reg[1] (\M_AXI_ARPROT_reg[1] ),
        .\M_AXI_ARSIZE_reg[2] (\M_AXI_ARSIZE_reg[2] ),
        .\M_AXI_AWADDR_reg[23] (\M_AXI_AWADDR_reg[23] ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWSIZE_reg[1] (\M_AXI_AWSIZE_reg[1] ),
        .\M_AXI_WDATA_reg[31] (\M_AXI_WDATA_reg[31] ),
        .\M_AXI_WSTRB_reg[3] (\M_AXI_WSTRB_reg[3] ),
        .M_AXI_WVALID_I_reg(M_AXI_WVALID_I_reg),
        .\Order_Optimization_4.buffer_addr_reg[0]_0 (\Order_Optimization_4.buffer_addr_reg[0] ),
        .S(S),
        .S_0(S_0),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Almost_Full_Inst_1 (\Use_FPGA.Almost_Full_Inst_1 ),
        .\Use_FPGA.Almost_Full_Inst_2 (\Use_FPGA.Almost_Full_Inst_2 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 (\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 (\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 (\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 (\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst (\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 (\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ),
        .\Use_FPGA.Empty_Inst (aw_fifo_empty),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_0 ),
        .bp_fifo_full(bp_fifo_full),
        .in(in),
        .need_to_stall_write_reg_0(need_to_stall_write_reg),
        .out(out),
        .queue_push(queue_push),
        .queue_push26_out(queue_push26_out),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .\read_req_ordered_info[0][Kind] (\read_req_ordered_info[0][Kind] ),
        .\read_req_ordered_info[0][Prot] (\read_req_ordered_info[0][Prot] ),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ),
        .ri_fifo_full(ri_fifo_full),
        .update_done_ar(update_done_ar),
        .update_done_aw(update_done_aw),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_data_ordered_info[0][Last] (\write_data_ordered_info[0][Last] ),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ),
        .\write_req_ordered_info[0][Kind] (\write_req_ordered_info[0][Kind] ),
        .\write_req_ordered_info[0][Prot] (\write_req_ordered_info[0][Prot] ));
endmodule

(* ORIG_REF_NAME = "sc_front_end" *) 
module Fast_IP_Clock_system_cache_0_0_sc_front_end
   (\access_data_info[0,0][Valid] ,
    \read_data_status[0,0][Hit_Pop] ,
    r_hit_push,
    \read_data_status[0,0][Hit_Full] ,
    r_miss_fifo_full,
    \access_data_info[0,1][Valid] ,
    S_AXI_BVALID_I_reg,
    S0_AXI_GEN_BID,
    \read_data_status[0,1][Hit_Pop] ,
    r_hit_push_0,
    \read_data_status[0,1][Hit_Full] ,
    r_miss_fifo_full_1,
    S0_AXI_GEN_RID,
    Q,
    access_valid,
    S0_AXI_RID,
    S0_AXI_BID,
    \access_data_info[0,0][Last] ,
    \arb_access[Wr] ,
    \access_info[0][Port_Num] ,
    \access_info[0][Kind] ,
    \access_data_info[0,1][Last] ,
    S0_AXI_GEN_RVALID,
    S0_AXI_RVALID,
    S_AXI_BVALID_I_reg_0,
    ctrl_ready,
    \arb_access[Evict] ,
    \access_info[0][Early] ,
    \access_info[0][Keep] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    E,
    \bs_port_num_reg[0] ,
    \The_Compare[0].sel_reg ,
    \arb_access_i_reg[Addr][23] ,
    A,
    D,
    \wr_port_data_info_reg[0][Data][31] ,
    \wr_port_data_info_reg[0][Data][31]_0 ,
    wr_port_data_valid_i_reg,
    \The_Compare[0].sel_reg_2 ,
    lud_addr_pipeline_full0,
    A161_out,
    \Use_FPGA.Almost_Full_Inst ,
    A_3,
    A_N,
    DATA_INA,
    lu_mem_write_alloc0,
    S0_AXI_RLAST,
    S0_AXI_ARREADY,
    S0_AXI_GEN_WREADY,
    S0_AXI_WREADY,
    S0_AXI_GEN_RLAST,
    \access_info[0][Allocate] ,
    \wr_port_data_info_reg[0][Last] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    \wr_port_data_info_reg[0][BE][3]_1 ,
    \wr_port_data_info_reg[0][BE][2] ,
    \wr_port_data_info_reg[0][BE][1] ,
    \wr_port_data_info_reg[0][BE][0] ,
    \arb_access_i_reg[Size][1] ,
    \arb_access_i_reg[Size][2] ,
    \arb_access_i_reg[Addr][12] ,
    \arb_access_i_reg[Addr][12]_0 ,
    \arb_access_i_reg[Addr][12]_1 ,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_ARREADY,
    S0_AXI_AWREADY,
    ctrl_ready_i_reg,
    S0_AXI_GEN_BRESP,
    S0_AXI_GEN_RDATA,
    S0_AXI_GEN_RRESP,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    S0_AXI_BRESP,
    \arb_access_i_reg[Len][7] ,
    \arb_access_i_reg[Size][1]_0 ,
    lu_mem_single_beat,
    ACLK,
    ARESET,
    S0_AXI_WVALID,
    S,
    \lookup_read_data_new[0,0][Valid] ,
    S0_AXI_RREADY,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    S0_AXI_ARID,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    S0_AXI_AWID,
    S0_AXI_WLAST,
    S0_AXI_GEN_AWLOCK,
    S0_AXI_GEN_AWID,
    S0_AXI_GEN_AWADDR,
    S0_AXI_GEN_ARCACHE,
    S0_AXI_GEN_ARID,
    S0_AXI_GEN_ARADDR,
    S0_AXI_GEN_WVALID,
    S_4,
    \Use_FPGA.Almost_Full_Inst_0 ,
    S0_AXI_GEN_RREADY,
    \lookup_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    \arb_access_i_reg[Valid] ,
    dvm_2nd_part_reg,
    lookup_piperun,
    S0_AXI_AWBAR,
    wm_port,
    bs_exist,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \S_AXI_BID_reg[0] ,
    in,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    lud_addr_pipeline_full_reg,
    p_95_in,
    lud_addr_pipeline_full_reg_0,
    lud_reg_port_num,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_i_1__54 ,
    lud_addr_pipeline_full_reg_1,
    lud_addr_pipeline_full_reg_2,
    wr_port_data_valid_i_reg_0,
    \ctrl_access[Internal_Cmd] ,
    wr_port_data_ready,
    S0_AXI_GEN_BREADY,
    \S_AXI_BRESP_I_reg[0] ,
    \S_AXI_BID_reg[0]_0 ,
    S0_AXI_AWVALID,
    S0_AXI_ARVALID,
    S0_AXI_BREADY,
    S0_AXI_GEN_AWVALID,
    S0_AXI_GEN_ARVALID,
    S0_AXI_ARSNOOP,
    S0_AXI_ARADDR,
    S0_AXI_AWLEN,
    S0_AXI_ARLEN,
    S0_AXI_AWADDR,
    \ctrl_access[Addr] ,
    S0_AXI_AWSIZE,
    S0_AXI_ARSIZE,
    \ctrl_access[Size] ,
    S0_AXI_AWBURST,
    S0_AXI_ARBURST,
    S0_AXI_GEN_AWSIZE,
    S0_AXI_GEN_AWLEN,
    S0_AXI_GEN_ARSIZE,
    S0_AXI_GEN_ARLEN,
    S0_AXI_AWCACHE,
    update_wm_pop_normal_hold_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    bs_slv,
    wm_allow,
    lud_addr_pipeline_full,
    S0_AXI_ARCACHE,
    S0_AXI_GEN_AWBURST,
    S0_AXI_GEN_ARBURST,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    ctrl_init_done_i,
    M0_AXI_RRESP,
    S0_AXI_WSTRB,
    S0_AXI_WDATA,
    S0_AXI_GEN_AWCACHE,
    S0_AXI_GEN_WSTRB,
    S0_AXI_GEN_WDATA,
    \S_AXI_BRESP_I_reg[0]_0 ,
    out,
    new_read_data_word,
    new_read_data_last,
    \S0_AXI_RDATA[31] ,
    new_read_data_last_5,
    \update_ext_bresp_info[0,0][BRESP] );
  output \access_data_info[0,0][Valid] ;
  output \read_data_status[0,0][Hit_Pop] ;
  output r_hit_push;
  output \read_data_status[0,0][Hit_Full] ;
  output r_miss_fifo_full;
  output \access_data_info[0,1][Valid] ;
  output S_AXI_BVALID_I_reg;
  output [0:0]S0_AXI_GEN_BID;
  output \read_data_status[0,1][Hit_Pop] ;
  output r_hit_push_0;
  output \read_data_status[0,1][Hit_Full] ;
  output r_miss_fifo_full_1;
  output [0:0]S0_AXI_GEN_RID;
  output Q;
  output access_valid;
  output [0:0]S0_AXI_RID;
  output [0:0]S0_AXI_BID;
  output \access_data_info[0,0][Last] ;
  output \arb_access[Wr] ;
  output [0:0]\access_info[0][Port_Num] ;
  output \access_info[0][Kind] ;
  output \access_data_info[0,1][Last] ;
  output S0_AXI_GEN_RVALID;
  output S0_AXI_RVALID;
  output S_AXI_BVALID_I_reg_0;
  output ctrl_ready;
  output \arb_access[Evict] ;
  output \access_info[0][Early] ;
  output \access_info[0][Keep] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output [0:0]E;
  output \bs_port_num_reg[0] ;
  output \The_Compare[0].sel_reg ;
  output [23:0]\arb_access_i_reg[Addr][23] ;
  output A;
  output [31:0]D;
  output [31:0]\wr_port_data_info_reg[0][Data][31] ;
  output [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  output wr_port_data_valid_i_reg;
  output \The_Compare[0].sel_reg_2 ;
  output lud_addr_pipeline_full0;
  output A161_out;
  output \Use_FPGA.Almost_Full_Inst ;
  output A_3;
  output A_N;
  output [31:0]DATA_INA;
  output lu_mem_write_alloc0;
  output S0_AXI_RLAST;
  output S0_AXI_ARREADY;
  output S0_AXI_GEN_WREADY;
  output S0_AXI_WREADY;
  output S0_AXI_GEN_RLAST;
  output \access_info[0][Allocate] ;
  output \wr_port_data_info_reg[0][Last] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \wr_port_data_info_reg[0][BE][3] ;
  output [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  output [3:0]\wr_port_data_info_reg[0][BE][3]_1 ;
  output \wr_port_data_info_reg[0][BE][2] ;
  output \wr_port_data_info_reg[0][BE][1] ;
  output \wr_port_data_info_reg[0][BE][0] ;
  output [5:0]\arb_access_i_reg[Size][1] ;
  output [2:0]\arb_access_i_reg[Size][2] ;
  output \arb_access_i_reg[Addr][12] ;
  output \arb_access_i_reg[Addr][12]_0 ;
  output \arb_access_i_reg[Addr][12]_1 ;
  output S0_AXI_GEN_AWREADY;
  output S0_AXI_GEN_ARREADY;
  output S0_AXI_AWREADY;
  output [0:0]ctrl_ready_i_reg;
  output [1:0]S0_AXI_GEN_BRESP;
  output [31:0]S0_AXI_GEN_RDATA;
  output [1:0]S0_AXI_GEN_RRESP;
  output [31:0]S0_AXI_RDATA;
  output [1:0]S0_AXI_RRESP;
  output [1:0]S0_AXI_BRESP;
  output [7:0]\arb_access_i_reg[Len][7] ;
  output [5:0]\arb_access_i_reg[Size][1]_0 ;
  output lu_mem_single_beat;
  input ACLK;
  input ARESET;
  input S0_AXI_WVALID;
  input S;
  input \lookup_read_data_new[0,0][Valid] ;
  input S0_AXI_RREADY;
  input \lookup_read_data_info[0,0][Valid] ;
  input \update_read_data_info[0,0][Valid] ;
  input [0:0]S0_AXI_ARID;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input [0:0]S0_AXI_AWID;
  input S0_AXI_WLAST;
  input S0_AXI_GEN_AWLOCK;
  input [0:0]S0_AXI_GEN_AWID;
  input [23:0]S0_AXI_GEN_AWADDR;
  input [0:0]S0_AXI_GEN_ARCACHE;
  input [0:0]S0_AXI_GEN_ARID;
  input [23:0]S0_AXI_GEN_ARADDR;
  input S0_AXI_GEN_WVALID;
  input S_4;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input S0_AXI_GEN_RREADY;
  input \lookup_read_data_info[0,1][Valid] ;
  input \update_read_data_info[0,1][Valid] ;
  input \arb_access_i_reg[Valid] ;
  input dvm_2nd_part_reg;
  input lookup_piperun;
  input [0:0]S0_AXI_AWBAR;
  input wm_port;
  input bs_exist;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input \S_AXI_BID_reg[0] ;
  input [6:0]in;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input lud_addr_pipeline_full_reg;
  input p_95_in;
  input lud_addr_pipeline_full_reg_0;
  input lud_reg_port_num;
  input \Using_FPGA.MUXCY_I ;
  input \Using_FPGA.MUXCY_I_i_1__54 ;
  input lud_addr_pipeline_full_reg_1;
  input [0:0]lud_addr_pipeline_full_reg_2;
  input wr_port_data_valid_i_reg_0;
  input \ctrl_access[Internal_Cmd] ;
  input wr_port_data_ready;
  input S0_AXI_GEN_BREADY;
  input \S_AXI_BRESP_I_reg[0] ;
  input \S_AXI_BID_reg[0]_0 ;
  input S0_AXI_AWVALID;
  input S0_AXI_ARVALID;
  input S0_AXI_BREADY;
  input S0_AXI_GEN_AWVALID;
  input S0_AXI_GEN_ARVALID;
  input [3:0]S0_AXI_ARSNOOP;
  input [23:0]S0_AXI_ARADDR;
  input [7:0]S0_AXI_AWLEN;
  input [7:0]S0_AXI_ARLEN;
  input [23:0]S0_AXI_AWADDR;
  input [8:0]\ctrl_access[Addr] ;
  input [2:0]S0_AXI_AWSIZE;
  input [2:0]S0_AXI_ARSIZE;
  input [0:0]\ctrl_access[Size] ;
  input [1:0]S0_AXI_AWBURST;
  input [1:0]S0_AXI_ARBURST;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [7:0]S0_AXI_GEN_AWLEN;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [7:0]S0_AXI_GEN_ARLEN;
  input [2:0]S0_AXI_AWCACHE;
  input update_wm_pop_normal_hold_reg;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input bs_slv;
  input wm_allow;
  input lud_addr_pipeline_full;
  input [0:0]S0_AXI_ARCACHE;
  input [1:0]S0_AXI_GEN_AWBURST;
  input [1:0]S0_AXI_GEN_ARBURST;
  input [0:0]\Using_FPGA.MUXCY_I_0 ;
  input [0:0]\Using_FPGA.MUXCY_I_1 ;
  input ctrl_init_done_i;
  input [1:0]M0_AXI_RRESP;
  input [3:0]S0_AXI_WSTRB;
  input [31:0]S0_AXI_WDATA;
  input [2:0]S0_AXI_GEN_AWCACHE;
  input [3:0]S0_AXI_GEN_WSTRB;
  input [31:0]S0_AXI_GEN_WDATA;
  input [1:0]\S_AXI_BRESP_I_reg[0]_0 ;
  input [1:0]out;
  input [31:0]new_read_data_word;
  input new_read_data_last;
  input [31:0]\S0_AXI_RDATA[31] ;
  input new_read_data_last_5;
  input [1:0]\update_ext_bresp_info[0,0][BRESP] ;

  wire A;
  wire A161_out;
  wire ACLK;
  wire ARESET;
  wire [1:1]\AR_Channel/CE ;
  wire [2:0]\AR_Channel/port_access_q[Size] ;
  wire [1:1]\AW_Channel/CE ;
  wire \AW_Channel/Use_Write_Ready.FE_Gen_Ready_And_Inst1/S ;
  wire A_0;
  wire A_3;
  wire A_N;
  wire [31:0]D;
  wire [31:0]DATA_INA;
  wire [0:0]E;
  wire \Gen_Block[0].ARB_n_5 ;
  wire \Gen_Block[0].ARB_n_53 ;
  wire \Gen_Block[0].ARB_n_6 ;
  wire \Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst/SRI ;
  wire [1:0]M0_AXI_RRESP;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire O;
  wire Q;
  wire S;
  wire [23:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [0:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARID;
  wire [7:0]S0_AXI_ARLEN;
  wire S0_AXI_ARREADY;
  wire [2:0]S0_AXI_ARSIZE;
  wire [3:0]S0_AXI_ARSNOOP;
  wire S0_AXI_ARVALID;
  wire [23:0]S0_AXI_AWADDR;
  wire [0:0]S0_AXI_AWBAR;
  wire [1:0]S0_AXI_AWBURST;
  wire [2:0]S0_AXI_AWCACHE;
  wire [0:0]S0_AXI_AWID;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire [23:0]S0_AXI_GEN_ARADDR;
  wire [1:0]S0_AXI_GEN_ARBURST;
  wire [0:0]S0_AXI_GEN_ARCACHE;
  wire [0:0]S0_AXI_GEN_ARID;
  wire [7:0]S0_AXI_GEN_ARLEN;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARVALID;
  wire [23:0]S0_AXI_GEN_AWADDR;
  wire [1:0]S0_AXI_GEN_AWBURST;
  wire [2:0]S0_AXI_GEN_AWCACHE;
  wire [0:0]S0_AXI_GEN_AWID;
  wire [7:0]S0_AXI_GEN_AWLEN;
  wire S0_AXI_GEN_AWLOCK;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWVALID;
  wire [0:0]S0_AXI_GEN_BID;
  wire S0_AXI_GEN_BREADY;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire [31:0]S0_AXI_GEN_RDATA;
  wire [0:0]S0_AXI_GEN_RID;
  wire S0_AXI_GEN_RLAST;
  wire S0_AXI_GEN_RREADY;
  wire [1:0]S0_AXI_GEN_RRESP;
  wire S0_AXI_GEN_RVALID;
  wire [31:0]S0_AXI_GEN_WDATA;
  wire S0_AXI_GEN_WREADY;
  wire [3:0]S0_AXI_GEN_WSTRB;
  wire S0_AXI_GEN_WVALID;
  wire [31:0]S0_AXI_RDATA;
  wire [31:0]\S0_AXI_RDATA[31] ;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire S_4;
  wire \S_AXI_BID_reg[0] ;
  wire \S_AXI_BID_reg[0]_0 ;
  wire \S_AXI_BRESP_I_reg[0] ;
  wire [1:0]\S_AXI_BRESP_I_reg[0]_0 ;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_2 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1_n_1 ;
  wire \Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1_n_2 ;
  wire \Use_Generic_Port_0.AXI_0_n_187 ;
  wire \Use_Generic_Port_0.AXI_0_n_189 ;
  wire \Use_Generic_Port_0.AXI_0_n_192 ;
  wire \Use_Generic_Port_0.AXI_0_n_193 ;
  wire \Use_Generic_Port_0.AXI_0_n_194 ;
  wire \Use_Generic_Port_0.AXI_0_n_195 ;
  wire \Use_Generic_Port_0.AXI_0_n_196 ;
  wire \Use_Generic_Port_0.AXI_0_n_198 ;
  wire \Use_Generic_Port_0.AXI_0_n_199 ;
  wire \Use_Port_0.AXI_0_n_20 ;
  wire \Use_Port_0.AXI_0_n_29 ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Using_FPGA.MUXCY_I ;
  wire [0:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]\Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_i_1__54 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire \access_info[0][Allocate] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire access_piperun;
  wire access_valid;
  wire any_port_forbid_1;
  wire \arb_access[Evict] ;
  wire \arb_access[Wr] ;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i_reg[Addr][12] ;
  wire \arb_access_i_reg[Addr][12]_0 ;
  wire \arb_access_i_reg[Addr][12]_1 ;
  wire [23:0]\arb_access_i_reg[Addr][23] ;
  wire [7:0]\arb_access_i_reg[Len][7] ;
  wire [5:0]\arb_access_i_reg[Size][1] ;
  wire [5:0]\arb_access_i_reg[Size][1]_0 ;
  wire [2:0]\arb_access_i_reg[Size][2] ;
  wire \arb_access_i_reg[Valid] ;
  wire \arbiter_bp_push_i[1][Valid] ;
  wire \arbiter_bp_push_prt[0][Barrier] ;
  wire \arbiter_bp_push_prt[0][Early] ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire bs_exist;
  wire \bs_port_num_reg[0] ;
  wire bs_slv;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [0:0]\ctrl_access[Size] ;
  wire ctrl_init_done_i;
  wire ctrl_ready;
  wire [0:0]ctrl_ready_i_reg;
  wire dvm_2nd_part_reg;
  wire [6:0]in;
  wire lookup_piperun;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lu_mem_single_beat;
  wire lu_mem_write_alloc0;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire [0:0]lud_addr_pipeline_full_reg_2;
  wire lud_reg_port_num;
  wire new_read_data_last;
  wire new_read_data_last_5;
  wire [31:0]new_read_data_word;
  wire [1:0]out;
  wire p_95_in;
  wire port_ready_1;
  wire queue_full;
  wire queue_push9_out;
  wire r_hit_push;
  wire r_hit_push_0;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_1;
  wire \rd_port_access[0][Valid] ;
  wire [23:0]\rd_port_access[1][Addr] ;
  wire \rd_port_access[1][Allocate] ;
  wire \rd_port_access[1][Kind] ;
  wire [7:6]\rd_port_access[1][Len] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire rd_port_ready;
  wire rd_port_ready_cmb_0;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Fit] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire read_req_ready;
  wire reduce_or;
  wire [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_wm_pop_normal_hold_reg;
  wire wm_allow;
  wire wm_port;
  wire [23:0]\wr_port_access[1][Addr] ;
  wire \wr_port_access[1][Bufferable] ;
  wire \wr_port_access[1][Kind] ;
  wire [5:0]\wr_port_access[1][Len] ;
  wire \wr_port_access[1][Other_Allocate] ;
  wire [2:0]\wr_port_access[1][Size] ;
  wire \wr_port_access[1][Valid] ;
  wire \wr_port_data_info_reg[0][BE][0] ;
  wire \wr_port_data_info_reg[0][BE][1] ;
  wire \wr_port_data_info_reg[0][BE][2] ;
  wire \wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_1 ;
  wire [31:0]\wr_port_data_info_reg[0][Data][31] ;
  wire [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  wire \wr_port_data_info_reg[0][Last] ;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;
  wire wr_port_data_valid_i_reg_0;
  wire wr_port_early011_out;
  wire [0:0]wr_port_keep;
  wire wr_port_ready;

  Fast_IP_Clock_system_cache_0_0_sc_access \Gen_Block[0].ACS 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .access_piperun(access_piperun),
        .\arb_access_i_reg[Valid] (access_valid),
        .\arbiter_bp_push_i[1][Valid] (\arbiter_bp_push_i[1][Valid] ),
        .lookup_piperun(lookup_piperun),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .wr_port_ready(wr_port_ready));
  Fast_IP_Clock_system_cache_0_0_sc_arbiter \Gen_Block[0].ARB 
       (.A(A),
        .A161_out(A161_out),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .CE(\AR_Channel/CE ),
        .\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_0 (\Gen_Block[0].ARB_n_5 ),
        .\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_0 (\Gen_Block[0].ARB_n_6 ),
        .Q(Q),
        .S(\AW_Channel/Use_Write_Ready.FE_Gen_Ready_And_Inst1/S ),
        .S0_AXI_ARADDR(S0_AXI_ARADDR),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE),
        .S0_AXI_ARLEN(S0_AXI_ARLEN[7:6]),
        .S0_AXI_ARSIZE({S0_AXI_ARSIZE[2],S0_AXI_ARSIZE[0]}),
        .S0_AXI_ARSNOOP(S0_AXI_ARSNOOP),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBAR(S0_AXI_AWBAR),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWCACHE(S0_AXI_AWCACHE),
        .S0_AXI_AWLEN(S0_AXI_AWLEN[5:0]),
        .S0_AXI_AWREADY(S0_AXI_AWREADY),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .SRI(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst/SRI ),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_0 ),
        .\Using_FPGA.MUXCY_I_1 (\Using_FPGA.MUXCY_I_1 ),
        .\access_info[0][Allocate] (\access_info[0][Allocate] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .access_piperun(access_piperun),
        .any_port_forbid_1(any_port_forbid_1),
        .\arb_access[Wr] (\arb_access[Wr] ),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arb_access_i_reg[Addr][12]_0 (\arb_access_i_reg[Addr][12] ),
        .\arb_access_i_reg[Addr][12]_1 (\arb_access_i_reg[Addr][12]_0 ),
        .\arb_access_i_reg[Addr][12]_2 (\arb_access_i_reg[Addr][12]_1 ),
        .\arb_access_i_reg[Addr][23]_0 (\arb_access_i_reg[Addr][23] ),
        .\arb_access_i_reg[Evict]_0 (\arb_access[Evict] ),
        .\arb_access_i_reg[Len][0]_0 (\Use_Generic_Port_0.AXI_0_n_196 ),
        .\arb_access_i_reg[Len][1]_0 (\Use_Generic_Port_0.AXI_0_n_189 ),
        .\arb_access_i_reg[Len][2]_0 (\Use_Generic_Port_0.AXI_0_n_195 ),
        .\arb_access_i_reg[Len][3]_0 (\Use_Generic_Port_0.AXI_0_n_194 ),
        .\arb_access_i_reg[Len][4]_0 (\Use_Generic_Port_0.AXI_0_n_193 ),
        .\arb_access_i_reg[Len][5]_0 (\wr_port_access[1][Len] ),
        .\arb_access_i_reg[Len][5]_1 (\Use_Generic_Port_0.AXI_0_n_192 ),
        .\arb_access_i_reg[Len][6]_0 (\Use_Generic_Port_0.AXI_0_n_198 ),
        .\arb_access_i_reg[Len][7]_0 (\arb_access_i_reg[Len][7] ),
        .\arb_access_i_reg[Len][7]_1 (\Use_Generic_Port_0.AXI_0_n_199 ),
        .\arb_access_i_reg[Size][1]_0 (\arb_access_i_reg[Size][1] ),
        .\arb_access_i_reg[Size][1]_1 (\arb_access_i_reg[Size][1]_0 ),
        .\arb_access_i_reg[Size][1]_2 (\Use_Generic_Port_0.AXI_0_n_187 ),
        .\arb_access_i_reg[Size][2]_0 (\arb_access_i_reg[Size][2] ),
        .\arb_access_i_reg[Valid]_0 (access_valid),
        .\arb_access_i_reg[Valid]_1 (\Gen_Block[0].ARB_n_53 ),
        .\arb_access_i_reg[Valid]_2 (\arb_access_i_reg[Valid] ),
        .\arb_prohibit_quick_reg[0]_0 (\Use_Port_0.AXI_0_n_29 ),
        .\arb_prohibit_read_reg[1]_0 (\Use_FPGA.Almost_Full_Inst_0 ),
        .\arbiter_bp_push_i[1][Valid] (\arbiter_bp_push_i[1][Valid] ),
        .\arbiter_bp_push_prt[0][Barrier] (\arbiter_bp_push_prt[0][Barrier] ),
        .\arbiter_bp_push_prt[0][Early] (\arbiter_bp_push_prt[0][Early] ),
        .\arbiter_bp_push_prt[0][Valid] (\arbiter_bp_push_prt[0][Valid] ),
        .\arbiter_bp_push_prt[1][Early] (\arbiter_bp_push_prt[1][Early] ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .ctrl_init_done_i(ctrl_init_done_i),
        .ctrl_ready_i_reg_0(ctrl_ready),
        .ctrl_ready_i_reg_1(ctrl_ready_i_reg),
        .dvm_2nd_part_reg_0(dvm_2nd_part_reg),
        .in(in),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lu_mem_single_beat(lu_mem_single_beat),
        .lu_mem_write_alloc0(lu_mem_write_alloc0),
        .\port_access_q[Size] ({\AR_Channel/port_access_q[Size] [2],\AR_Channel/port_access_q[Size] [0]}),
        .port_ready_1(port_ready_1),
        .queue_full(queue_full),
        .queue_push9_out(queue_push9_out),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] ),
        .\rd_port_access[1][Allocate] (\rd_port_access[1][Allocate] ),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ),
        .\rd_port_access[1][Len] (\rd_port_access[1][Len] ),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .rd_port_ready(rd_port_ready),
        .rd_port_ready_cmb_0(rd_port_ready_cmb_0),
        .\read_data_status[0,1][Hit_Fit] (\read_data_status[0,1][Hit_Fit] ),
        .read_req_ready(read_req_ready),
        .reduce_or(reduce_or),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] ),
        .\wr_port_access[1][Bufferable] (\wr_port_access[1][Bufferable] ),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ),
        .\wr_port_access[1][Other_Allocate] (\wr_port_access[1][Other_Allocate] ),
        .\wr_port_access[1][Size] (\wr_port_access[1][Size] ),
        .\wr_port_access[1][Valid] (\wr_port_access[1][Valid] ),
        .wr_port_early011_out(wr_port_early011_out),
        .wr_port_keep(wr_port_keep),
        .wr_port_ready(wr_port_ready));
  Fast_IP_Clock_system_cache_0_0_carry_latch_or \Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1 
       (.A_0(A_0),
        .CE(\AW_Channel/CE ),
        .CE_0(\AR_Channel/CE ),
        .O(O),
        .\Using_FPGA.MUXCY_I (\Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1_n_1 ),
        .\Using_FPGA.MUXCY_I_0 (\Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1_n_2 ),
        .access_piperun(access_piperun));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_gen_interface \Use_Generic_Port_0.AXI_0 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .A_0(A_0),
        .A_3(A_3),
        .A_N(A_N),
        .CE(\AW_Channel/CE ),
        .CE_0(\AR_Channel/CE ),
        .D(D),
        .DATA_INA(DATA_INA),
        .E(\read_data_status[0,1][Hit_Pop] ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .O(O),
        .S(\AW_Channel/Use_Write_Ready.FE_Gen_Ready_And_Inst1/S ),
        .S0_AXI_ARLEN(S0_AXI_ARLEN[5:0]),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE[1]),
        .S0_AXI_AWLEN(S0_AXI_AWLEN[7:6]),
        .S0_AXI_GEN_ARADDR(S0_AXI_GEN_ARADDR),
        .S0_AXI_GEN_ARBURST(S0_AXI_GEN_ARBURST),
        .S0_AXI_GEN_ARCACHE(S0_AXI_GEN_ARCACHE),
        .S0_AXI_GEN_ARID(S0_AXI_GEN_ARID),
        .S0_AXI_GEN_ARLEN(S0_AXI_GEN_ARLEN),
        .S0_AXI_GEN_ARREADY(S0_AXI_GEN_ARREADY),
        .S0_AXI_GEN_ARSIZE(S0_AXI_GEN_ARSIZE),
        .S0_AXI_GEN_ARVALID(S0_AXI_GEN_ARVALID),
        .S0_AXI_GEN_AWADDR(S0_AXI_GEN_AWADDR),
        .S0_AXI_GEN_AWBURST(S0_AXI_GEN_AWBURST),
        .S0_AXI_GEN_AWCACHE(S0_AXI_GEN_AWCACHE),
        .S0_AXI_GEN_AWID(S0_AXI_GEN_AWID),
        .S0_AXI_GEN_AWLEN(S0_AXI_GEN_AWLEN),
        .S0_AXI_GEN_AWLOCK(S0_AXI_GEN_AWLOCK),
        .S0_AXI_GEN_AWREADY(S0_AXI_GEN_AWREADY),
        .S0_AXI_GEN_AWSIZE(S0_AXI_GEN_AWSIZE),
        .S0_AXI_GEN_AWVALID(S0_AXI_GEN_AWVALID),
        .S0_AXI_GEN_BID(S0_AXI_GEN_BID),
        .S0_AXI_GEN_BREADY(S0_AXI_GEN_BREADY),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S0_AXI_GEN_RDATA(S0_AXI_GEN_RDATA),
        .S0_AXI_GEN_RID(S0_AXI_GEN_RID),
        .S0_AXI_GEN_RLAST(S0_AXI_GEN_RLAST),
        .S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .S0_AXI_GEN_RRESP(S0_AXI_GEN_RRESP),
        .S0_AXI_GEN_RVALID(S0_AXI_GEN_RVALID),
        .S0_AXI_GEN_WDATA(S0_AXI_GEN_WDATA),
        .S0_AXI_GEN_WREADY(S0_AXI_GEN_WREADY),
        .S0_AXI_GEN_WSTRB(S0_AXI_GEN_WSTRB),
        .S0_AXI_GEN_WVALID(S0_AXI_GEN_WVALID),
        .SRI(\Gen_Port_Ready[1].Use_Fast_Port.Wr_Inst/SRI ),
        .S_4(S_4),
        .\S_AXI_BRESP_I_reg[0] (\S_AXI_BRESP_I_reg[0] ),
        .\S_AXI_BRESP_I_reg[0]_0 (\S_AXI_BRESP_I_reg[0]_0 ),
        .S_AXI_BVALID_I_reg(S_AXI_BVALID_I_reg),
        .S_AXI_BVALID_I_reg_0(\S_AXI_BID_reg[0] ),
        .S_AXI_BVALID_I_reg_1(\S_AXI_BID_reg[0]_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\access_data_info[0,1][Valid] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\Use_Generic_Port_0.AXI_0_n_187 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\Use_Generic_Port_0.AXI_0_n_196 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (\Gen_Block[0].ARB_n_53 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1_n_1 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\Use_Gen_Port.Gen_Port[0].FE_PR_Latch_Inst1_n_2 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ({\AR_Channel/port_access_q[Size] [2],\AR_Channel/port_access_q[Size] [0]}),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_189 ),
        .\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_195 ),
        .\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_194 ),
        .\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_193 ),
        .\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_192 ),
        .\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_198 ),
        .\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst (\Use_Generic_Port_0.AXI_0_n_199 ),
        .\Use_FPGA_Flag_Hit.Full_Inst (\read_data_status[0,1][Hit_Full] ),
        .\Use_FPGA_Flag_Miss.Full_Inst (r_miss_fifo_full_1),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (E),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\access_data_info[0,0][Valid] ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_2 (\Use_Port_0.AXI_0_n_20 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_3 (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .access_piperun(access_piperun),
        .access_valid(access_valid),
        .any_port_forbid_1(any_port_forbid_1),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arbiter_bp_push_prt[1][Early] (\arbiter_bp_push_prt[1][Early] ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .bs_exist(bs_exist),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .in(\wr_port_access[1][Len] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lud_addr_pipeline_full(lud_addr_pipeline_full),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg),
        .lud_addr_pipeline_full_reg_0(\read_data_status[0,0][Hit_Pop] ),
        .lud_addr_pipeline_full_reg_1(lud_addr_pipeline_full_reg_0),
        .lud_addr_pipeline_full_reg_2(\read_data_status[0,0][Hit_Full] ),
        .lud_addr_pipeline_full_reg_3(lud_addr_pipeline_full_reg_1),
        .lud_addr_pipeline_full_reg_4(lud_addr_pipeline_full_reg_2),
        .lud_reg_port_num(lud_reg_port_num),
        .\lud_reg_valid_one_hot_reg[1] (r_hit_push_0),
        .new_read_data_last(new_read_data_last),
        .new_read_data_word(new_read_data_word),
        .out(out),
        .p_95_in(p_95_in),
        .port_ready_1(port_ready_1),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] ),
        .\rd_port_access[1][Allocate] (\rd_port_access[1][Allocate] ),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ),
        .\rd_port_access[1][Len] (\rd_port_access[1][Len] ),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .rd_port_ready(rd_port_ready),
        .\read_data_status[0,0][Hit_Almost_Full] (\read_data_status[0,0][Hit_Almost_Full] ),
        .\read_data_status[0,1][Hit_Fit] (\read_data_status[0,1][Hit_Fit] ),
        .\read_info_status[0,1][Almost_Full] (\read_info_status[0,1][Almost_Full] ),
        .\read_info_status[0,1][Full] (\read_info_status[0,1][Full] ),
        .reduce_or(reduce_or),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_wm_pop_normal_hold_reg(update_wm_pop_normal_hold_reg),
        .\update_wma_data_reg[31] (\wr_port_data_info_reg[0][Data][31]_0 ),
        .wm_port(wm_port),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] ),
        .\wr_port_access[1][Bufferable] (\wr_port_access[1][Bufferable] ),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ),
        .\wr_port_access[1][Other_Allocate] (\wr_port_access[1][Other_Allocate] ),
        .\wr_port_access[1][Size] (\wr_port_access[1][Size] ),
        .\wr_port_access[1][Valid] (\wr_port_access[1][Valid] ),
        .\wr_port_data_info_reg[0][BE][3] (\wr_port_data_info_reg[0][BE][3]_1 ),
        .\wr_port_data_info_reg[0][Data][31] (\wr_port_data_info_reg[0][Data][31] ),
        .\wr_port_data_info_reg[0][Last] (\access_data_info[0,1][Last] ),
        .\wr_port_data_info_reg[0][Last]_0 (\wr_port_data_info_reg[0][Last] ),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_early011_out(wr_port_early011_out),
        .wr_port_keep(wr_port_keep));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_opt_interface \Use_Port_0.AXI_0 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(\read_data_status[0,0][Hit_Pop] ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .S(S),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARREADY_0(\Gen_Block[0].ARB_n_5 ),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWID(S0_AXI_AWID),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S0_AXI_BID(S0_AXI_BID),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .S0_AXI_RDATA(S0_AXI_RDATA),
        .\S0_AXI_RDATA[31] (\S0_AXI_RDATA[31] ),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RLAST(S0_AXI_RLAST),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RRESP(S0_AXI_RRESP),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .S0_AXI_WDATA(S0_AXI_WDATA),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WSTRB(S0_AXI_WSTRB),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .\S_AXI_BID_reg[0]_0 (\S_AXI_BID_reg[0] ),
        .\S_AXI_BID_reg[0]_1 (\S_AXI_BID_reg[0]_0 ),
        .S_AXI_BVALID_I_reg_0(S_AXI_BVALID_I_reg_0),
        .\The_Compare[0].sel_reg_2 (\The_Compare[0].sel_reg_2 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Almost_Full_Inst_0 (\Gen_Block[0].ARB_n_6 ),
        .\Use_FPGA_Flag_Hit.Full_Inst (\read_data_status[0,0][Hit_Full] ),
        .\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst (\Use_Port_0.AXI_0_n_29 ),
        .\Use_FPGA_Flag_Miss.Full_Inst (r_miss_fifo_full),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .\Using_FPGA.MUXCY_I_i_1__39 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\Using_FPGA.MUXCY_I_i_1__54 (\Using_FPGA.MUXCY_I_i_1__54 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .access_piperun(access_piperun),
        .\arbiter_bp_push_prt[0][Barrier] (\arbiter_bp_push_prt[0][Barrier] ),
        .\arbiter_bp_push_prt[0][Early] (\arbiter_bp_push_prt[0][Early] ),
        .\arbiter_bp_push_prt[0][Valid] (\arbiter_bp_push_prt[0][Valid] ),
        .\bs_port_num_reg[0] (\Use_Port_0.AXI_0_n_20 ),
        .bs_slv(bs_slv),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lud_reg_valid_one_hot_reg[0] (r_hit_push),
        .new_read_data_last_5(new_read_data_last_5),
        .queue_full(queue_full),
        .queue_push9_out(queue_push9_out),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_ready_cmb_0(rd_port_ready_cmb_0),
        .\read_data_status[0,0][Hit_Almost_Full] (\read_data_status[0,0][Hit_Almost_Full] ),
        .\read_info_status[0,1][Almost_Full] (\read_info_status[0,1][Almost_Full] ),
        .\read_info_status[0,1][Full] (\read_info_status[0,1][Full] ),
        .read_req_ready(read_req_ready),
        .\update_ext_bresp_info[0,0][BRESP] (\update_ext_bresp_info[0,0][BRESP] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_wma_data_reg[31] (\wr_port_data_info_reg[0][BE][3]_1 ),
        .wm_allow(wm_allow),
        .wm_port(wm_port),
        .\wr_port_data_info_reg[0][BE][0]_0 (\wr_port_data_info_reg[0][BE][0] ),
        .\wr_port_data_info_reg[0][BE][1]_0 (\wr_port_data_info_reg[0][BE][1] ),
        .\wr_port_data_info_reg[0][BE][2]_0 (\wr_port_data_info_reg[0][BE][2] ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3] ),
        .\wr_port_data_info_reg[0][BE][3]_1 (\wr_port_data_info_reg[0][BE][3]_0 ),
        .\wr_port_data_info_reg[0][Data][31]_0 (\wr_port_data_info_reg[0][Data][31]_0 ),
        .wr_port_data_valid_i_reg_0(\access_data_info[0,0][Valid] ),
        .wr_port_data_valid_i_reg_1(wr_port_data_valid_i_reg),
        .wr_port_data_valid_i_reg_2(wr_port_data_valid_i_reg_0));
endmodule

(* ORIG_REF_NAME = "sc_lookup" *) 
module Fast_IP_Clock_system_cache_0_0_sc_lookup
   (lookup_piperun,
    lookup_fetch_piperun,
    lookup_mem_piperun,
    lu_mem_valid_reg_0,
    lud_mem_conflict,
    update_valid,
    update_need_bs,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    update_need_tag_write,
    WEBWE,
    E,
    lud_reg_valid_reg_0,
    ENA,
    lud_mem_waiting_for_pipe_reg_0,
    lud_mem_waiting_for_pipe_reg_1,
    lud_mem_waiting_for_pipe_reg_2,
    \lu_mem_info_reg[Port_Num][0]_0 ,
    lud_addr_pipeline_full_reg_0,
    \lu_check_info_reg[Kind]_0 ,
    lookup_wm_allow_write,
    \update_info_reg[Port_Num][0]_0 ,
    \lu_check_info_reg[Port_Num][0]_0 ,
    \update_info[Allocate] ,
    \update_info_reg[Evict]_0 ,
    \update_info[Kind] ,
    \update_info[Wr] ,
    \update_info[Internal_Cmd] ,
    \update_info[Early] ,
    update_read_miss,
    B_Vec,
    \lu_mem_info_reg[Addr][12]_0 ,
    \lu_check_info_reg[Addr][11]_0 ,
    D,
    ADDRA,
    \lud_mem_port_one_hot_reg[1]_0 ,
    lud_mem_waiting_for_pipe_reg_3,
    \lud_reg_port_num_reg[0]_0 ,
    \bs_fifo_mem_reg[0][Src][1] ,
    \bs_fifo_mem_reg[0][Src][0] ,
    I206,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    S_1,
    S_2,
    in,
    \update_info_reg[Addr][1]_0 ,
    \read_req_info[0][Kind] ,
    \update_info_reg[Len][7]_0 ,
    \write_req_info[0][Kind] ,
    ud_new_tag_valid2,
    S_3,
    \update_info_reg[Size][2]_0 ,
    \update_info_reg[Len][7]_1 ,
    \update_info_reg[Size][1]_0 ,
    \update_info_reg[Len][7]_2 ,
    \update_info_reg[Addr][23]_0 ,
    lud_mem_keep_single_during_stall_reg_0,
    lookup_push_write_miss,
    \lu_check_locked_hit_reg[3]_0 ,
    \lu_check_info_reg[Addr_Use][5]_0 ,
    lookup_wm_will_use,
    lookup_wm_evict,
    \lookup_read_data_new[0,0][Valid] ,
    DIBDI,
    DPRA,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ,
    \lu_check_protected_reg[3]_0 ,
    \lu_check_info_reg[Addr][13]_0 ,
    \lu_check_info_reg[Addr][14]_0 ,
    \lu_check_info_reg[Addr][15]_0 ,
    \lu_check_info_reg[Addr][16]_0 ,
    \lu_check_info_reg[Addr][17]_0 ,
    \lu_check_info_reg[Addr][18]_0 ,
    \lu_check_info_reg[Addr][19]_0 ,
    \lu_check_info_reg[Addr][20]_0 ,
    \lu_check_info_reg[Addr][21]_0 ,
    lud_reg_valid_reg_1,
    WEA,
    lookup_wm_allocate,
    \lu_check_info_reg[Addr_Stp][5]_0 ,
    S,
    lud_addr_pipeline_full_reg_1,
    S_0,
    wr_port_data_ready,
    new_read_data_last,
    new_read_data_last_1,
    new_read_data_word,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 ,
    \lu_check_locked_hit_reg[3]_1 ,
    lu_check_read_info_done_reg_0,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    \lud_reg_valid_one_hot_reg[1]_0 ,
    \lud_reg_valid_one_hot_reg[0]_0 ,
    lu_mem_removed_way_hold,
    \update_way_reg[1]_0 ,
    \update_info_reg[Addr_Use][5]_0 ,
    \update_info_reg[Addr_Stp][5]_0 ,
    \lu_mem_release_lock_hold_reg[3]_0 ,
    \lu_mem_release_lock_hold_reg[2]_0 ,
    \lu_mem_release_lock_hold_reg[1]_0 ,
    \lu_mem_release_lock_hold_reg[0]_0 ,
    ACLK,
    ARESET,
    access_valid,
    update_piperun,
    update_write_miss_full,
    \Using_FPGA.MUXCY_I ,
    A161_out,
    \Using_FPGA.MUXCY_I_0 ,
    \The_Compare[0].sel_reg ,
    A,
    S_4,
    S_5,
    S_6,
    S_7,
    S_8,
    S_9,
    S_10,
    S_11,
    A_N,
    \Using_FPGA.MUXCY_I_1 ,
    \The_Compare[0].sel_reg_12 ,
    A_13,
    \The_Compare[2].sel_reg ,
    \Using_FPGA.MUXCY_I_2 ,
    \The_Compare[0].sel_reg_14 ,
    A_15,
    \The_Compare[2].sel_reg_16 ,
    \Using_FPGA.MUXCY_I_3 ,
    \The_Compare[0].sel_reg_17 ,
    A_18,
    \The_Compare[2].sel_reg_19 ,
    \Using_FPGA.MUXCY_I_4 ,
    \The_Compare[0].sel_reg_20 ,
    A_21,
    \The_Compare[2].sel_reg_22 ,
    \access_info[0][Port_Num] ,
    \arb_access[Wr] ,
    \access_info[0][Early] ,
    \access_info[0][Keep] ,
    lu_mem_single_beat,
    lud_addr_pipeline_full0,
    \access_info[0][Kind] ,
    \access_info[0][Allocate] ,
    \arb_access[Evict] ,
    lu_mem_write_alloc0,
    Q,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    \bs_fifo_mem_reg[0][Src][1]_1 ,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ,
    update_readback_available,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ,
    \access_data_info[0,1][Last] ,
    \access_data_info[0,0][Last] ,
    lud_write_hit_done_reg_0,
    \lookup_offset_len_cnt_reg[0]_0 ,
    \access_data_info[0,0][Valid] ,
    \read_data_status[0,0][Hit_Full] ,
    lru_check_next_way,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    update_tag_conflict,
    \lu_check_valid_bits_reg[3]_0 ,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    lookup_tag_current_word_i,
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    update_write_miss_busy,
    \read_data_status[0,1][Hit_Full] ,
    \access_data_info[0,1][Valid] ,
    \read_data_status[0,0][Hit_Pop] ,
    \read_data_status[0,1][Hit_Pop] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    update_write_data_ready,
    r_hit_push,
    \update_read_data_info[0,0][Last] ,
    r_hit_push_7,
    M0_AXI_RDATA,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    aw_fifo_full,
    update_done_aw_reg,
    update_done_aw_reg_0,
    \lu_mem_info_reg[Len][7]_0 ,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 ,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 ,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 ,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 ,
    \lu_mem_info_reg[Addr_Use][5]_0 ,
    \lu_mem_info_reg[Addr_Stp][5]_0 ,
    \lu_mem_removed_way_hold_reg[3]_0 ,
    \lu_mem_removed_way_hold_reg[2]_0 ,
    \lu_mem_removed_way_hold_reg[1]_0 ,
    \lu_mem_removed_way_hold_reg[0]_0 ,
    \lu_mem_info_reg[Size][2]_0 ,
    \lu_mem_release_lock_hold_reg[3]_1 ,
    \lu_mem_release_lock_hold_reg[2]_1 ,
    \lu_mem_release_lock_hold_reg[1]_1 ,
    \lu_mem_release_lock_hold_reg[0]_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output lookup_piperun;
  output lookup_fetch_piperun;
  output lookup_mem_piperun;
  output lu_mem_valid_reg_0;
  output lud_mem_conflict;
  output update_valid;
  output update_need_bs;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output update_need_tag_write;
  output [0:0]WEBWE;
  output [0:0]E;
  output lud_reg_valid_reg_0;
  output ENA;
  output lud_mem_waiting_for_pipe_reg_0;
  output lud_mem_waiting_for_pipe_reg_1;
  output lud_mem_waiting_for_pipe_reg_2;
  output \lu_mem_info_reg[Port_Num][0]_0 ;
  output lud_addr_pipeline_full_reg_0;
  output \lu_check_info_reg[Kind]_0 ;
  output lookup_wm_allow_write;
  output \update_info_reg[Port_Num][0]_0 ;
  output \lu_check_info_reg[Port_Num][0]_0 ;
  output \update_info[Allocate] ;
  output \update_info_reg[Evict]_0 ;
  output \update_info[Kind] ;
  output \update_info[Wr] ;
  output \update_info[Internal_Cmd] ;
  output \update_info[Early] ;
  output update_read_miss;
  output [5:0]B_Vec;
  output \lu_mem_info_reg[Addr][12]_0 ;
  output [11:0]\lu_check_info_reg[Addr][11]_0 ;
  output [0:0]D;
  output [10:0]ADDRA;
  output [0:0]\lud_mem_port_one_hot_reg[1]_0 ;
  output lud_mem_waiting_for_pipe_reg_3;
  output \lud_reg_port_num_reg[0]_0 ;
  output \bs_fifo_mem_reg[0][Src][1] ;
  output \bs_fifo_mem_reg[0][Src][0] ;
  output [3:0]I206;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output S_1;
  output S_2;
  output [23:0]in;
  output [1:0]\update_info_reg[Addr][1]_0 ;
  output \read_req_info[0][Kind] ;
  output [7:0]\update_info_reg[Len][7]_0 ;
  output \write_req_info[0][Kind] ;
  output ud_new_tag_valid2;
  output S_3;
  output [2:0]\update_info_reg[Size][2]_0 ;
  output [7:0]\update_info_reg[Len][7]_1 ;
  output [1:0]\update_info_reg[Size][1]_0 ;
  output [7:0]\update_info_reg[Len][7]_2 ;
  output [16:0]\update_info_reg[Addr][23]_0 ;
  output lud_mem_keep_single_during_stall_reg_0;
  output lookup_push_write_miss;
  output \lu_check_locked_hit_reg[3]_0 ;
  output [5:0]\lu_check_info_reg[Addr_Use][5]_0 ;
  output lookup_wm_will_use;
  output lookup_wm_evict;
  output \lookup_read_data_new[0,0][Valid] ;
  output [2:0]DIBDI;
  output [6:0]DPRA;
  output [3:0]\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  output [3:0]\lu_check_protected_reg[3]_0 ;
  output \lu_check_info_reg[Addr][13]_0 ;
  output \lu_check_info_reg[Addr][14]_0 ;
  output \lu_check_info_reg[Addr][15]_0 ;
  output \lu_check_info_reg[Addr][16]_0 ;
  output \lu_check_info_reg[Addr][17]_0 ;
  output \lu_check_info_reg[Addr][18]_0 ;
  output \lu_check_info_reg[Addr][19]_0 ;
  output \lu_check_info_reg[Addr][20]_0 ;
  output \lu_check_info_reg[Addr][21]_0 ;
  output lud_reg_valid_reg_1;
  output [3:0]WEA;
  output lookup_wm_allocate;
  output [5:0]\lu_check_info_reg[Addr_Stp][5]_0 ;
  output S;
  output lud_addr_pipeline_full_reg_1;
  output S_0;
  output wr_port_data_ready;
  output new_read_data_last;
  output new_read_data_last_1;
  output [31:0]new_read_data_word;
  output [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 ;
  output \lu_check_locked_hit_reg[3]_1 ;
  output lu_check_read_info_done_reg_0;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output \lud_reg_valid_one_hot_reg[1]_0 ;
  output \lud_reg_valid_one_hot_reg[0]_0 ;
  output [3:0]lu_mem_removed_way_hold;
  output [1:0]\update_way_reg[1]_0 ;
  output [5:0]\update_info_reg[Addr_Use][5]_0 ;
  output [5:0]\update_info_reg[Addr_Stp][5]_0 ;
  output \lu_mem_release_lock_hold_reg[3]_0 ;
  output \lu_mem_release_lock_hold_reg[2]_0 ;
  output \lu_mem_release_lock_hold_reg[1]_0 ;
  output \lu_mem_release_lock_hold_reg[0]_0 ;
  input ACLK;
  input ARESET;
  input access_valid;
  input update_piperun;
  input update_write_miss_full;
  input \Using_FPGA.MUXCY_I ;
  input A161_out;
  input \Using_FPGA.MUXCY_I_0 ;
  input \The_Compare[0].sel_reg ;
  input A;
  input S_4;
  input S_5;
  input S_6;
  input S_7;
  input S_8;
  input S_9;
  input S_10;
  input S_11;
  input A_N;
  input \Using_FPGA.MUXCY_I_1 ;
  input \The_Compare[0].sel_reg_12 ;
  input A_13;
  input \The_Compare[2].sel_reg ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \The_Compare[0].sel_reg_14 ;
  input A_15;
  input \The_Compare[2].sel_reg_16 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \The_Compare[0].sel_reg_17 ;
  input A_18;
  input \The_Compare[2].sel_reg_19 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input \The_Compare[0].sel_reg_20 ;
  input A_21;
  input \The_Compare[2].sel_reg_22 ;
  input [0:0]\access_info[0][Port_Num] ;
  input \arb_access[Wr] ;
  input \access_info[0][Early] ;
  input \access_info[0][Keep] ;
  input lu_mem_single_beat;
  input lud_addr_pipeline_full0;
  input \access_info[0][Kind] ;
  input \access_info[0][Allocate] ;
  input \arb_access[Evict] ;
  input lu_mem_write_alloc0;
  input [23:0]Q;
  input [1:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  input \bs_fifo_mem_reg[0][Src][1]_1 ;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  input update_readback_available;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ;
  input \access_data_info[0,1][Last] ;
  input \access_data_info[0,0][Last] ;
  input lud_write_hit_done_reg_0;
  input \lookup_offset_len_cnt_reg[0]_0 ;
  input \access_data_info[0,0][Valid] ;
  input \read_data_status[0,0][Hit_Full] ;
  input [1:0]lru_check_next_way;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input update_tag_conflict;
  input [3:0]\lu_check_valid_bits_reg[3]_0 ;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  input [11:0]lookup_tag_current_word_i;
  input \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input [11:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input [11:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input [11:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  input [1:0]update_write_miss_busy;
  input \read_data_status[0,1][Hit_Full] ;
  input \access_data_info[0,1][Valid] ;
  input \read_data_status[0,0][Hit_Pop] ;
  input \read_data_status[0,1][Hit_Pop] ;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input [1:0]update_write_data_ready;
  input r_hit_push;
  input \update_read_data_info[0,0][Last] ;
  input r_hit_push_7;
  input [31:0]M0_AXI_RDATA;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input aw_fifo_full;
  input update_done_aw_reg;
  input update_done_aw_reg_0;
  input [7:0]\lu_mem_info_reg[Len][7]_0 ;
  input [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 ;
  input [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 ;
  input [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 ;
  input [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 ;
  input [5:0]\lu_mem_info_reg[Addr_Use][5]_0 ;
  input [5:0]\lu_mem_info_reg[Addr_Stp][5]_0 ;
  input \lu_mem_removed_way_hold_reg[3]_0 ;
  input \lu_mem_removed_way_hold_reg[2]_0 ;
  input \lu_mem_removed_way_hold_reg[1]_0 ;
  input \lu_mem_removed_way_hold_reg[0]_0 ;
  input [2:0]\lu_mem_info_reg[Size][2]_0 ;
  input \lu_mem_release_lock_hold_reg[3]_1 ;
  input \lu_mem_release_lock_hold_reg[2]_1 ;
  input \lu_mem_release_lock_hold_reg[1]_1 ;
  input \lu_mem_release_lock_hold_reg[0]_1 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;

  wire A;
  wire A159_out;
  wire A161_out;
  wire A172_out;
  wire A187_out;
  wire A35_out;
  wire A46_out;
  wire ACLK;
  wire [10:0]ADDRA;
  wire ARESET;
  wire ARESET_I;
  wire AW_Need_Inst_n_2;
  wire A_13;
  wire A_15;
  wire A_18;
  wire A_21;
  wire A_N;
  wire BS_Need_Inst_n_1;
  wire [5:0]B_Vec;
  wire Chk_Valid_Inst_n_1;
  wire Chk_Valid_Inst_n_10;
  wire Chk_Valid_Inst_n_100;
  wire Chk_Valid_Inst_n_101;
  wire Chk_Valid_Inst_n_102;
  wire Chk_Valid_Inst_n_103;
  wire Chk_Valid_Inst_n_104;
  wire Chk_Valid_Inst_n_105;
  wire Chk_Valid_Inst_n_106;
  wire Chk_Valid_Inst_n_107;
  wire Chk_Valid_Inst_n_108;
  wire Chk_Valid_Inst_n_109;
  wire Chk_Valid_Inst_n_11;
  wire Chk_Valid_Inst_n_111;
  wire Chk_Valid_Inst_n_116;
  wire Chk_Valid_Inst_n_12;
  wire Chk_Valid_Inst_n_13;
  wire Chk_Valid_Inst_n_15;
  wire Chk_Valid_Inst_n_19;
  wire Chk_Valid_Inst_n_21;
  wire Chk_Valid_Inst_n_24;
  wire Chk_Valid_Inst_n_27;
  wire Chk_Valid_Inst_n_3;
  wire Chk_Valid_Inst_n_32;
  wire Chk_Valid_Inst_n_33;
  wire Chk_Valid_Inst_n_4;
  wire Chk_Valid_Inst_n_52;
  wire Chk_Valid_Inst_n_53;
  wire Chk_Valid_Inst_n_6;
  wire Chk_Valid_Inst_n_61;
  wire Chk_Valid_Inst_n_62;
  wire Chk_Valid_Inst_n_64;
  wire Chk_Valid_Inst_n_66;
  wire Chk_Valid_Inst_n_68;
  wire Chk_Valid_Inst_n_69;
  wire Chk_Valid_Inst_n_70;
  wire Chk_Valid_Inst_n_71;
  wire Chk_Valid_Inst_n_72;
  wire Chk_Valid_Inst_n_73;
  wire Chk_Valid_Inst_n_74;
  wire Chk_Valid_Inst_n_75;
  wire Chk_Valid_Inst_n_76;
  wire Chk_Valid_Inst_n_77;
  wire Chk_Valid_Inst_n_78;
  wire Chk_Valid_Inst_n_79;
  wire Chk_Valid_Inst_n_8;
  wire Chk_Valid_Inst_n_80;
  wire Chk_Valid_Inst_n_81;
  wire Chk_Valid_Inst_n_82;
  wire Chk_Valid_Inst_n_83;
  wire Chk_Valid_Inst_n_84;
  wire Chk_Valid_Inst_n_85;
  wire Chk_Valid_Inst_n_97;
  wire Chk_Valid_Inst_n_99;
  wire [0:0]D;
  wire [2:0]DIBDI;
  wire [6:0]DPRA;
  wire [0:0]E;
  wire ENA;
  wire [0:0]\Gen_Block[0].UD/new_bs_src ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_10 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2_n_1 ;
  wire [3:0]I206;
  wire I4;
  wire I5;
  wire LUD_Addr_PR_And_Inst1_n_1;
  wire LUD_Addr_PR_Or_Inst2_n_1;
  wire LUD_Addr_PR_Or_Inst2_n_2;
  wire LUD_Mem_PR_And_Inst1_n_5;
  wire LUD_Mem_PR_And_Inst1_n_6;
  wire LUD_Mem_PR_And_Inst1_n_7;
  wire LUD_Step_PR_And_Inst1_n_2;
  wire LU_Check_PR_And_Inst1_n_1;
  wire LU_Check_PR_And_Inst2_n_1;
  wire LU_Check_PR_And_Inst2_n_2;
  wire LU_Check_PR_And_Inst2_n_3;
  wire LU_Check_PR_And_Inst2_n_4;
  wire LU_MD_And_Inst6_n_2;
  wire LU_Mem_PR_And_Inst1_n_1;
  wire LU_Mem_PR_And_Inst1_n_2;
  wire LU_Mem_PR_And_Inst1_n_4;
  wire LU_PC_And_Inst5_n_1;
  wire LU_PC_And_Inst5_n_16;
  wire LU_PC_And_Inst5_n_17;
  wire LU_PC_And_Inst5_n_18;
  wire LU_PC_And_Inst5_n_2;
  wire LU_PC_And_Inst5_n_3;
  wire Late_Inst_n_2;
  wire [31:0]M0_AXI_RDATA;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4__0_n_0 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ;
  wire Par_Dirty_Inst_n_0;
  wire Par_Locked_Inst_n_0;
  wire Par_Reuse_Inst_n_0;
  wire Par_Reuse_Inst_n_1;
  wire [23:0]Q;
  wire S;
  wire SRI;
  wire SRI_0;
  wire SRI_1;
  wire SRI_16;
  wire SRI_2;
  wire S_0;
  wire S_1;
  wire S_10;
  wire S_11;
  wire S_12;
  wire S_13;
  wire S_14;
  wire S_15;
  wire S_17;
  wire S_18;
  wire S_19;
  wire S_2;
  wire S_20;
  wire S_21;
  wire S_3;
  wire S_4;
  wire S_5;
  wire S_6;
  wire S_7;
  wire S_8;
  wire S_9;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire [11:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [11:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [11:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [3:0]\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Compare[0].carry_and_I1/S ;
  wire \The_Compare[0].carry_and_I1/S_22 ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_12 ;
  wire \The_Compare[0].sel_reg_14 ;
  wire \The_Compare[0].sel_reg_17 ;
  wire \The_Compare[0].sel_reg_20 ;
  wire \The_Compare[1].carry_and_I1/S ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[2].sel_reg_16 ;
  wire \The_Compare[2].sel_reg_19 ;
  wire \The_Compare[2].sel_reg_22 ;
  wire \Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[0].MUXF7_Inst_n_0 ;
  wire \Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[1].MUXF7_Inst_n_0 ;
  wire [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 ;
  wire [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 ;
  wire [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 ;
  wire [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 ;
  wire [31:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire [3:0]WEA;
  wire [0:0]WEBWE;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire \access_info[0][Allocate] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire access_valid;
  wire \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2_n_0 ;
  wire \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3_n_0 ;
  wire \arb_access[Evict] ;
  wire \arb_access[Wr] ;
  wire aw_fifo_full;
  wire \aw_fifo_mem_reg[15][Len][3]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][4]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][4]_srl16_i_3_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][5]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][5]_srl16_i_3_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][5]_srl16_i_4_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][6]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][6]_srl16_i_3_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][6]_srl16_i_4_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][7]_srl16_i_2_n_0 ;
  wire \bs_fifo_mem_reg[0][Src][0] ;
  wire \bs_fifo_mem_reg[0][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  wire \bs_fifo_mem_reg[0][Src][1]_1 ;
  wire dirty_bit;
  wire dirty_bit_miss;
  wire dirty_bit_miss_valid;
  wire dirty_bit_valid;
  wire dirty_miss_valid;
  wire filtered_protection_bit;
  wire [1:0]hit_way_i;
  wire [23:0]in;
  wire lookup_access_data_late;
  wire lookup_data_en_ii_2;
  wire lookup_data_en_ii_3;
  wire lookup_data_en_ii_4;
  wire lookup_data_hit_pre_stall;
  wire lookup_data_hit_stall;
  wire lookup_fetch_piperun;
  wire lookup_first_write_hit;
  wire lookup_hit_carry;
  wire lookup_io_and_conflict_stall;
  wire lookup_io_data_stall;
  wire lookup_io_stall_carry;
  wire lookup_io_stall_carry_no_wait;
  wire lookup_io_stall_hit_carry;
  wire lookup_io_stall_hit_carry_no_last;
  wire lookup_io_stall_pre_valid;
  wire lookup_io_stall_valid;
  wire lookup_last_beat;
  wire lookup_md_or_wm;
  wire lookup_md_or_wm_or_whne;
  wire lookup_md_or_wm_or_whne2;
  wire lookup_md_wm_whne_valid;
  wire lookup_mem_piperun;
  wire lookup_miss;
  wire lookup_miss_dirty;
  wire lookup_miss_dirty_no_clean;
  wire lookup_miss_dirty_pre;
  wire lookup_next_is_last_beat;
  wire lookup_next_is_last_beat_reg_n_0;
  wire [5:0]lookup_offset_cnt;
  wire [5:0]lookup_offset_cnt_cmb;
  wire lookup_offset_cnt_cmb0_carry__0_n_3;
  wire lookup_offset_cnt_cmb0_carry__0_n_6;
  wire lookup_offset_cnt_cmb0_carry__0_n_7;
  wire lookup_offset_cnt_cmb0_carry_n_0;
  wire lookup_offset_cnt_cmb0_carry_n_1;
  wire lookup_offset_cnt_cmb0_carry_n_2;
  wire lookup_offset_cnt_cmb0_carry_n_3;
  wire lookup_offset_cnt_cmb0_carry_n_4;
  wire lookup_offset_cnt_cmb0_carry_n_7;
  wire lookup_offset_first;
  wire lookup_offset_first1;
  wire [7:0]lookup_offset_len_cnt_reg;
  wire \lookup_offset_len_cnt_reg[0]_0 ;
  wire lookup_piperun;
  wire lookup_protect_conflict;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss;
  wire lookup_push_write_miss_pre;
  wire lookup_raw_hit_carry2;
  wire [31:0]\lookup_read_data_info[0,0][Data][0] ;
  wire [31:0]\lookup_read_data_info[0,0][Data][1] ;
  wire [31:0]\lookup_read_data_info[0,0][Data][2] ;
  wire [31:0]\lookup_read_data_info[0,0][Data][3] ;
  wire \lookup_read_data_info[0,0][Last] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lookup_read_done_i;
  wire lookup_read_hit_d1;
  wire lookup_read_miss;
  wire lookup_restart_mem;
  wire lookup_restart_mem_done;
  wire [23:13]lookup_stall_addr;
  wire [11:0]lookup_tag_current_word_i;
  wire lookup_wm_allocate;
  wire lookup_wm_allow_write;
  wire lookup_wm_evict;
  wire lookup_wm_will_use;
  wire [1:0]lookup_word_offset__0;
  wire lookup_write_hit;
  wire lookup_write_hit_carry;
  wire lookup_write_hit_no_busy;
  wire lookup_write_hit_no_conflict;
  wire lookup_write_miss;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire lopt_128;
  wire lopt_129;
  wire lopt_13;
  wire lopt_130;
  wire lopt_131;
  wire lopt_132;
  wire lopt_133;
  wire lopt_134;
  wire lopt_135;
  wire lopt_136;
  wire lopt_137;
  wire lopt_138;
  wire lopt_139;
  wire lopt_14;
  wire lopt_140;
  wire lopt_141;
  wire lopt_142;
  wire lopt_143;
  wire lopt_144;
  wire lopt_145;
  wire lopt_146;
  wire lopt_147;
  wire lopt_148;
  wire lopt_149;
  wire lopt_15;
  wire lopt_150;
  wire lopt_151;
  wire lopt_152;
  wire lopt_153;
  wire lopt_154;
  wire lopt_155;
  wire lopt_156;
  wire lopt_157;
  wire lopt_158;
  wire lopt_159;
  wire lopt_16;
  wire lopt_160;
  wire lopt_161;
  wire lopt_162;
  wire lopt_163;
  wire lopt_164;
  wire lopt_165;
  wire lopt_166;
  wire lopt_167;
  wire lopt_168;
  wire lopt_169;
  wire lopt_17;
  wire lopt_170;
  wire lopt_171;
  wire lopt_172;
  wire lopt_173;
  wire lopt_174;
  wire lopt_175;
  wire lopt_176;
  wire lopt_177;
  wire lopt_178;
  wire lopt_179;
  wire lopt_18;
  wire lopt_180;
  wire lopt_181;
  wire lopt_182;
  wire lopt_183;
  wire lopt_184;
  wire lopt_185;
  wire lopt_186;
  wire lopt_187;
  wire lopt_188;
  wire lopt_189;
  wire lopt_19;
  wire lopt_190;
  wire lopt_191;
  wire lopt_192;
  wire lopt_193;
  wire lopt_194;
  wire lopt_195;
  wire lopt_196;
  wire lopt_197;
  wire lopt_198;
  wire lopt_199;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_200;
  wire lopt_201;
  wire lopt_202;
  wire lopt_203;
  wire lopt_204;
  wire lopt_205;
  wire lopt_206;
  wire lopt_207;
  wire lopt_208;
  wire lopt_209;
  wire lopt_21;
  wire lopt_210;
  wire lopt_211;
  wire lopt_212;
  wire lopt_213;
  wire lopt_214;
  wire lopt_215;
  wire lopt_216;
  wire lopt_217;
  wire lopt_218;
  wire lopt_219;
  wire lopt_22;
  wire lopt_220;
  wire lopt_221;
  wire lopt_222;
  wire lopt_223;
  wire lopt_224;
  wire lopt_225;
  wire lopt_226;
  wire lopt_227;
  wire lopt_228;
  wire lopt_229;
  wire lopt_23;
  wire lopt_230;
  wire lopt_231;
  wire lopt_232;
  wire lopt_233;
  wire lopt_234;
  wire lopt_235;
  wire lopt_236;
  wire lopt_237;
  wire lopt_238;
  wire lopt_239;
  wire lopt_24;
  wire lopt_240;
  wire lopt_241;
  wire lopt_242;
  wire lopt_243;
  wire lopt_244;
  wire lopt_245;
  wire lopt_246;
  wire lopt_247;
  wire lopt_248;
  wire lopt_249;
  wire lopt_25;
  wire lopt_250;
  wire lopt_251;
  wire lopt_252;
  wire lopt_253;
  wire lopt_254;
  wire lopt_255;
  wire lopt_256;
  wire lopt_257;
  wire lopt_258;
  wire lopt_259;
  wire lopt_26;
  wire lopt_260;
  wire lopt_261;
  wire lopt_262;
  wire lopt_263;
  wire lopt_264;
  wire lopt_265;
  wire lopt_266;
  wire lopt_267;
  wire lopt_268;
  wire lopt_269;
  wire lopt_27;
  wire lopt_270;
  wire lopt_271;
  wire lopt_272;
  wire lopt_273;
  wire lopt_274;
  wire lopt_275;
  wire lopt_276;
  wire lopt_277;
  wire lopt_278;
  wire lopt_279;
  wire lopt_28;
  wire lopt_280;
  wire lopt_281;
  wire lopt_282;
  wire lopt_283;
  wire lopt_284;
  wire lopt_285;
  wire lopt_286;
  wire lopt_287;
  wire lopt_288;
  wire lopt_289;
  wire lopt_29;
  wire lopt_290;
  wire lopt_291;
  wire lopt_292;
  wire lopt_293;
  wire lopt_294;
  wire lopt_295;
  wire lopt_296;
  wire lopt_297;
  wire lopt_298;
  wire lopt_299;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_300;
  wire lopt_301;
  wire lopt_302;
  wire lopt_303;
  wire lopt_304;
  wire lopt_305;
  wire lopt_306;
  wire lopt_307;
  wire lopt_308;
  wire lopt_309;
  wire lopt_31;
  wire lopt_310;
  wire lopt_311;
  wire lopt_312;
  wire lopt_313;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire [1:0]lru_check_next_way;
  wire [1:0]lru_check_used_way;
  wire lru_dirty_bit;
  wire lru_protected_bit;
  wire lu_check_done0;
  wire \lu_check_info_delayed_reg[Wr_n_0_] ;
  wire [11:0]\lu_check_info_reg[Addr][11]_0 ;
  wire \lu_check_info_reg[Addr][13]_0 ;
  wire \lu_check_info_reg[Addr][14]_0 ;
  wire \lu_check_info_reg[Addr][15]_0 ;
  wire \lu_check_info_reg[Addr][16]_0 ;
  wire \lu_check_info_reg[Addr][17]_0 ;
  wire \lu_check_info_reg[Addr][18]_0 ;
  wire \lu_check_info_reg[Addr][19]_0 ;
  wire \lu_check_info_reg[Addr][20]_0 ;
  wire \lu_check_info_reg[Addr][21]_0 ;
  wire [5:0]\lu_check_info_reg[Addr_Stp][5]_0 ;
  wire [5:0]\lu_check_info_reg[Addr_Use][5]_0 ;
  wire \lu_check_info_reg[Allocate]__0 ;
  wire \lu_check_info_reg[Early]__0 ;
  wire \lu_check_info_reg[Evict]__0 ;
  wire \lu_check_info_reg[Keep_n_0_] ;
  wire \lu_check_info_reg[Kind]_0 ;
  wire [7:0]\lu_check_info_reg[Len] ;
  wire \lu_check_info_reg[Port_Num][0]_0 ;
  wire \lu_check_info_reg[Size_n_0_][0] ;
  wire \lu_check_info_reg[Size_n_0_][1] ;
  wire \lu_check_info_reg[Size_n_0_][2] ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire [3:0]lu_check_locked_hit_copy_lb;
  wire \lu_check_locked_hit_reg[3]_0 ;
  wire \lu_check_locked_hit_reg[3]_1 ;
  wire \lu_check_locked_hit_reg_n_0_[0] ;
  wire \lu_check_locked_hit_reg_n_0_[1] ;
  wire \lu_check_locked_hit_reg_n_0_[3] ;
  wire \lu_check_locked_write_reg_n_0_[0] ;
  wire \lu_check_locked_write_reg_n_0_[3] ;
  wire lu_check_match_addr;
  wire lu_check_multi_beat;
  wire lu_check_multi_beat_i_1_n_0;
  wire lu_check_piperun;
  wire lu_check_piperun_pre1;
  wire lu_check_piperun_pre2;
  wire \lu_check_port_one_hot[0]_i_1_n_0 ;
  wire \lu_check_port_one_hot_reg_n_0_[0] ;
  wire [3:0]\lu_check_protected_reg[3]_0 ;
  wire [1:0]lu_check_protected_way;
  wire \lu_check_protected_way[1]_i_1_n_0 ;
  wire lu_check_read_info_done;
  wire lu_check_read_info_done_i_1_n_0;
  wire lu_check_read_info_done_reg_0;
  wire lu_check_single_beat;
  wire lu_check_tag_conflict;
  wire lu_check_tag_hit_all_carry;
  wire \lu_check_tag_hit_copy_ds_reg_n_0_[0] ;
  wire \lu_check_tag_hit_copy_ds_reg_n_0_[2] ;
  wire \lu_check_tag_hit_copy_lb_reg_n_0_[0] ;
  wire \lu_check_tag_hit_copy_lb_reg_n_0_[3] ;
  wire [3:0]lu_check_tag_hit_copy_md;
  wire [3:0]lu_check_tag_hit_copy_pc;
  wire [3:0]lu_check_tag_hit_copy_rs;
  wire \lu_check_tag_hit_copy_wm_reg_n_0_[0] ;
  wire \lu_check_tag_hit_copy_wm_reg_n_0_[3] ;
  wire \lu_check_tag_hit_reg_n_0_[0] ;
  wire [23:13]\lu_check_tag_reg[0][Addr] ;
  wire [23:13]\lu_check_tag_reg[1][Addr] ;
  wire [23:13]\lu_check_tag_reg[2][Addr] ;
  wire [23:13]\lu_check_tag_reg[3][Addr] ;
  wire lu_check_valid;
  wire [3:0]lu_check_valid_bits;
  wire [3:0]\lu_check_valid_bits_reg[3]_0 ;
  wire lu_check_valid_delayed;
  wire lu_check_wait_for_update;
  wire lu_check_wait_for_update_i_1_n_0;
  wire lu_check_wr_already_pushed;
  wire lu_check_write_alloc;
  wire lu_ds_last_beat;
  wire lu_ds_last_beat_hit;
  wire lu_ds_last_beat_multi_start;
  wire lu_ds_last_beat_next_last_n;
  wire lu_ds_last_beat_next_last_n_reg_n_0;
  wire lu_ds_last_beat_no_wait;
  wire lu_ds_last_beat_stall_pre;
  wire lu_ds_last_beat_valid;
  wire lu_ds_last_beat_valid_hit;
  wire lu_ds_lb_delayed_restart_conflict;
  wire lu_ds_rs_del_restart_no_rs;
  wire lu_ds_rs_miss;
  wire lu_ds_rs_new_read_no_rs;
  wire lu_ds_rs_read_miss;
  wire lu_fetch_piperun_pre1;
  wire lu_fetch_piperun_pre2;
  wire lu_io_full_block_read;
  wire lu_io_lud_stall_pipe;
  wire lu_io_selected_full;
  wire [1:0]lu_mem_force_way;
  wire \lu_mem_info_reg[Addr][12]_0 ;
  wire [5:0]\lu_mem_info_reg[Addr_Stp][5]_0 ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][0] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][1] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][2] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][3] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][4] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][5] ;
  wire [5:0]\lu_mem_info_reg[Addr_Use][5]_0 ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][0] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][1] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][2] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][3] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][4] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][5] ;
  wire \lu_mem_info_reg[Addr_n_0_][0] ;
  wire \lu_mem_info_reg[Addr_n_0_][15] ;
  wire \lu_mem_info_reg[Addr_n_0_][16] ;
  wire \lu_mem_info_reg[Addr_n_0_][17] ;
  wire \lu_mem_info_reg[Addr_n_0_][18] ;
  wire \lu_mem_info_reg[Addr_n_0_][19] ;
  wire \lu_mem_info_reg[Addr_n_0_][1] ;
  wire \lu_mem_info_reg[Addr_n_0_][20] ;
  wire \lu_mem_info_reg[Addr_n_0_][21] ;
  wire \lu_mem_info_reg[Addr_n_0_][22] ;
  wire \lu_mem_info_reg[Addr_n_0_][23] ;
  wire \lu_mem_info_reg[Addr_n_0_][2] ;
  wire \lu_mem_info_reg[Addr_n_0_][3] ;
  wire \lu_mem_info_reg[Addr_n_0_][4] ;
  wire \lu_mem_info_reg[Addr_n_0_][5] ;
  wire \lu_mem_info_reg[Allocate]__0 ;
  wire \lu_mem_info_reg[Early]__0 ;
  wire \lu_mem_info_reg[Force_Hit_n_0_] ;
  wire \lu_mem_info_reg[Keep]__0 ;
  wire \lu_mem_info_reg[Kind_n_0_] ;
  wire [7:0]\lu_mem_info_reg[Len] ;
  wire [7:0]\lu_mem_info_reg[Len][7]_0 ;
  wire \lu_mem_info_reg[Port_Num][0]_0 ;
  wire [2:0]\lu_mem_info_reg[Size] ;
  wire [2:0]\lu_mem_info_reg[Size][2]_0 ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lu_mem_locked_hit_0;
  wire lu_mem_locked_hit_1;
  wire lu_mem_locked_hit_2;
  wire lu_mem_locked_hit_3;
  wire lu_mem_locked_hit_copy_lb_0;
  wire lu_mem_locked_hit_copy_lb_1;
  wire lu_mem_locked_hit_copy_lb_2;
  wire lu_mem_locked_hit_copy_lb_3;
  wire lu_mem_locked_write_0;
  wire lu_mem_locked_write_1;
  wire lu_mem_locked_write_2;
  wire lu_mem_locked_write_3;
  wire lu_mem_masked_valid_tag_0;
  wire lu_mem_masked_valid_tag_1;
  wire lu_mem_masked_valid_tag_2;
  wire lu_mem_masked_valid_tag_3;
  wire lu_mem_match_addr;
  wire lu_mem_piperun_or_conflict;
  wire lu_mem_piperun_pre1;
  wire lu_mem_piperun_pre2;
  wire lu_mem_pre_pure_valid_tag_0;
  wire lu_mem_pre_pure_valid_tag_1;
  wire lu_mem_pre_pure_valid_tag_2;
  wire lu_mem_pre_pure_valid_tag_3;
  wire lu_mem_protect_conflict_d1;
  wire [3:0]lu_mem_protected;
  wire lu_mem_protected_pre1_0;
  wire lu_mem_protected_pre1_1;
  wire lu_mem_protected_pre1_2;
  wire lu_mem_protected_pre1_3;
  wire lu_mem_protected_pre2_0;
  wire lu_mem_protected_pre2_1;
  wire lu_mem_protected_pre2_2;
  wire lu_mem_protected_pre2_3;
  wire lu_mem_release_lock_hold;
  wire \lu_mem_release_lock_hold_reg[0]_0 ;
  wire \lu_mem_release_lock_hold_reg[0]_1 ;
  wire \lu_mem_release_lock_hold_reg[1]_0 ;
  wire \lu_mem_release_lock_hold_reg[1]_1 ;
  wire \lu_mem_release_lock_hold_reg[2]_0 ;
  wire \lu_mem_release_lock_hold_reg[2]_1 ;
  wire \lu_mem_release_lock_hold_reg[3]_0 ;
  wire \lu_mem_release_lock_hold_reg[3]_1 ;
  wire [3:0]lu_mem_removed_way_hold;
  wire \lu_mem_removed_way_hold_reg[0]_0 ;
  wire \lu_mem_removed_way_hold_reg[1]_0 ;
  wire \lu_mem_removed_way_hold_reg[2]_0 ;
  wire \lu_mem_removed_way_hold_reg[3]_0 ;
  wire lu_mem_single_beat;
  wire lu_mem_single_beat_reg_n_0;
  wire lu_mem_tag_conflict;
  wire lu_mem_tag_hit_0;
  wire lu_mem_tag_hit_1;
  wire lu_mem_tag_hit_2;
  wire lu_mem_tag_hit_3;
  wire lu_mem_tag_hit_copy_ds_0;
  wire lu_mem_tag_hit_copy_ds_1;
  wire lu_mem_tag_hit_copy_ds_2;
  wire lu_mem_tag_hit_copy_ds_3;
  wire lu_mem_tag_hit_copy_lb_0;
  wire lu_mem_tag_hit_copy_lb_1;
  wire lu_mem_tag_hit_copy_lb_2;
  wire lu_mem_tag_hit_copy_lb_3;
  wire lu_mem_tag_hit_copy_md_0;
  wire lu_mem_tag_hit_copy_md_1;
  wire lu_mem_tag_hit_copy_md_2;
  wire lu_mem_tag_hit_copy_md_3;
  wire lu_mem_tag_hit_copy_pc_0;
  wire lu_mem_tag_hit_copy_pc_1;
  wire lu_mem_tag_hit_copy_pc_2;
  wire lu_mem_tag_hit_copy_pc_3;
  wire lu_mem_tag_hit_copy_rs_0;
  wire lu_mem_tag_hit_copy_rs_1;
  wire lu_mem_tag_hit_copy_rs_2;
  wire lu_mem_tag_hit_copy_rs_3;
  wire lu_mem_tag_hit_copy_wm_0;
  wire lu_mem_tag_hit_copy_wm_1;
  wire lu_mem_tag_hit_copy_wm_2;
  wire lu_mem_tag_hit_copy_wm_3;
  wire lu_mem_valid_carry_0;
  wire lu_mem_valid_carry_1;
  wire lu_mem_valid_carry_2;
  wire lu_mem_valid_carry_3;
  wire lu_mem_valid_reg_0;
  wire lu_mem_valid_tag_0;
  wire lu_mem_valid_tag_1;
  wire lu_mem_valid_tag_2;
  wire lu_mem_valid_tag_3;
  wire lu_mem_write_alloc;
  wire lu_mem_write_alloc0;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire lud_addr_piperun;
  wire lud_addr_piperun_pre1;
  wire lud_addr_piperun_pre2;
  wire lud_mem_already_used;
  wire lud_mem_completed_reg_n_0;
  wire lud_mem_conflict;
  wire lud_mem_delayed_read_data0;
  wire lud_mem_keep_single_during_stall0;
  wire lud_mem_keep_single_during_stall_reg_0;
  wire lud_mem_last;
  wire lud_mem_piperun;
  wire [0:0]lud_mem_port_one_hot;
  wire [0:0]\lud_mem_port_one_hot_reg[1]_0 ;
  wire lud_mem_speculative_valid;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg_0;
  wire lud_mem_waiting_for_pipe_reg_1;
  wire lud_mem_waiting_for_pipe_reg_2;
  wire lud_mem_waiting_for_pipe_reg_3;
  wire \lud_mem_way_d1[0]_i_1_n_0 ;
  wire \lud_mem_way_d1[1]_i_1_n_0 ;
  wire \lud_mem_way_d1_reg_n_0_[0] ;
  wire lud_reg_piperun;
  wire lud_reg_piperun_pre1;
  wire \lud_reg_port_num_reg[0]_0 ;
  wire \lud_reg_valid_one_hot[0]_i_1_n_0 ;
  wire \lud_reg_valid_one_hot[1]_i_1_n_0 ;
  wire \lud_reg_valid_one_hot_reg[0]_0 ;
  wire \lud_reg_valid_one_hot_reg[1]_0 ;
  wire lud_reg_valid_reg_0;
  wire lud_reg_valid_reg_1;
  wire lud_step_delayed_restart;
  wire lud_step_offset;
  wire lud_step_want_step_offset;
  wire lud_write_hit_done;
  wire lud_write_hit_done0;
  wire lud_write_hit_done_i_1_n_0;
  wire lud_write_hit_done_reg_0;
  wire lud_write_hit_done_reg_n_0;
  wire [7:0]minusOp;
  wire new_read_data_last;
  wire new_read_data_last_1;
  wire [31:0]new_read_data_word;
  wire p_0_in16_in;
  wire p_0_in1_in;
  wire p_0_in28_in;
  wire p_0_in4_in;
  wire p_0_in8_in;
  wire p_10_out;
  wire p_12_out;
  wire p_14_in;
  wire p_14_out;
  wire p_16_out;
  wire p_1_in13_in;
  wire p_1_in17_in;
  wire p_1_in29_in;
  wire p_1_in5_in;
  wire p_1_in9_in;
  wire p_200_in;
  wire p_223_in;
  wire p_6_in;
  wire p_7_in;
  wire p_9_in;
  wire protected_bit;
  wire protected_bit_miss;
  wire protected_bit_miss_valid;
  wire protected_miss_valid;
  wire protection_with_coherency;
  wire r_hit_push;
  wire r_hit_push_7;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire read_idx_i0_0;
  wire read_idx_i0_1;
  wire \read_req_info[0][Kind] ;
  wire reduce_or11_out__0;
  wire reduce_or15_out__0;
  wire ud_new_tag_valid2;
  wire update_done_aw_reg;
  wire update_done_aw_reg_0;
  wire update_first_write_hit;
  wire \update_info[Allocate] ;
  wire \update_info[Early] ;
  wire \update_info[Internal_Cmd] ;
  wire \update_info[Keep] ;
  wire \update_info[Kind] ;
  wire [2:0]\update_info[Size] ;
  wire \update_info[Wr] ;
  wire [1:0]\update_info_reg[Addr][1]_0 ;
  wire [16:0]\update_info_reg[Addr][23]_0 ;
  wire [5:0]\update_info_reg[Addr_Stp][5]_0 ;
  wire [5:0]\update_info_reg[Addr_Use][5]_0 ;
  wire \update_info_reg[Evict]_0 ;
  wire [7:0]\update_info_reg[Len][7]_0 ;
  wire [7:0]\update_info_reg[Len][7]_1 ;
  wire [7:0]\update_info_reg[Len][7]_2 ;
  wire \update_info_reg[Port_Num][0]_0 ;
  wire [1:0]\update_info_reg[Size][1]_0 ;
  wire [2:0]\update_info_reg[Size][2]_0 ;
  wire update_miss;
  wire update_need_bs;
  wire update_need_tag_write;
  wire [23:13]\update_old_tag[Addr] ;
  wire update_piperun;
  wire \update_read_data_info[0,0][Last] ;
  wire update_read_miss;
  wire update_readback_available;
  wire update_reused_tag;
  wire update_reused_tag2;
  wire update_reused_tag2_carry_n_1;
  wire update_reused_tag2_carry_n_2;
  wire update_reused_tag2_carry_n_3;
  wire update_tag_conflict;
  wire update_valid;
  wire \update_way[1]_i_3_n_0 ;
  wire [1:0]\update_way_reg[1]_0 ;
  wire [1:0]update_write_data_ready;
  wire update_write_hit;
  wire update_write_miss;
  wire [1:0]update_write_miss_busy;
  wire update_write_miss_full;
  wire wr_port_data_ready;
  wire \write_req_info[0][Kind] ;
  wire [3:1]NLW_lookup_offset_cnt_cmb0_carry__0_CO_UNCONNECTED;
  wire [3:2]NLW_lookup_offset_cnt_cmb0_carry__0_O_UNCONNECTED;
  wire [3:0]NLW_update_reused_tag2_carry_O_UNCONNECTED;

  assign lopt_1 = lopt_178;
  assign lopt_177 = lopt;
  assign lopt_179 = lopt_2;
  assign lopt_3 = lopt_180;
  assign lopt_4 = Chk_Valid_Inst_n_99;
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_183 AR_Need_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Chk_Valid_Inst_n_12));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_184 AW_Need_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (AW_Need_Inst_n_2),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (Chk_Valid_Inst_n_8),
        .aw_fifo_full(aw_fifo_full),
        .\bs_fifo_mem_reg[0][Src][1] (\bs_fifo_mem_reg[0][Src][1] ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\bs_fifo_mem_reg[0][Src][1]_0 [1]),
        .\bs_fifo_mem_reg[0][Src][1]_1 (\bs_fifo_mem_reg[0][Src][1]_1 ),
        .lu_check_piperun(lu_check_piperun),
        .new_bs_src(\Gen_Block[0].UD/new_bs_src ),
        .update_done_aw_reg(update_done_aw_reg),
        .update_done_aw_reg_0(update_done_aw_reg_0),
        .\update_info[Keep] (\update_info[Keep] ),
        .update_piperun(update_piperun),
        .update_write_hit(update_write_hit));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_185 BS_Need_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (BS_Need_Inst_n_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Chk_Valid_Inst_n_11),
        .\lu_check_info_reg[Early]__0 (\lu_check_info_reg[Early]__0 ),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_piperun(lu_check_piperun),
        .lu_check_valid(lu_check_valid),
        .update_need_bs(update_need_bs),
        .update_piperun(update_piperun));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_186 Chk_Valid_Inst
       (.A159_out(A159_out),
        .A172_out(A172_out),
        .A187_out(A187_out),
        .ACLK(ACLK),
        .ADDRA(ADDRA[10:2]),
        .CO(update_reused_tag2),
        .D({lookup_stall_addr,D,\lu_check_info_reg[Addr][11]_0 }),
        .DI({ADDRA[1:0],lookup_word_offset__0}),
        .DIBDI(DIBDI),
        .I5(I5),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (lookup_offset_cnt),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ({\lu_mem_info_reg[Addr_n_0_][5] ,\lu_mem_info_reg[Addr_n_0_][4] ,\lu_mem_info_reg[Addr_n_0_][3] ,\lu_mem_info_reg[Addr_n_0_][2] ,\lu_mem_info_reg[Addr_n_0_][1] ,\lu_mem_info_reg[Addr_n_0_][0] }),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (B_Vec[0]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (B_Vec[1]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (B_Vec[2]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 (B_Vec[3]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 (B_Vec[4]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 (B_Vec[5]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 (\lu_mem_info_reg[Addr][12]_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ),
        .O({lookup_offset_cnt_cmb0_carry_n_4,p_9_in,p_7_in,lookup_offset_cnt_cmb0_carry_n_7}),
        .Q(ARESET_I),
        .S({Chk_Valid_Inst_n_71,Chk_Valid_Inst_n_72,Chk_Valid_Inst_n_73,Chk_Valid_Inst_n_74}),
        .SRI(SRI_16),
        .SRI_6(SRI_2),
        .SRI_7(SRI_1),
        .SRI_8(SRI_0),
        .SRI_9(SRI),
        .S_0(S_19),
        .S_1(S_18),
        .S_10(\The_Compare[0].carry_and_I1/S ),
        .S_12(S_12),
        .S_2(S_17),
        .S_3(S_15),
        .S_4(S_14),
        .S_5(S_13),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_10),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Chk_Valid_Inst_n_12),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (Chk_Valid_Inst_n_19),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_10 (BS_Need_Inst_n_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_11 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_12 (lu_mem_valid_reg_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_13 (lookup_mem_piperun),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_14 ({\lu_check_locked_hit_reg_n_0_[3] ,p_0_in1_in,\lu_check_locked_hit_reg_n_0_[1] ,\lu_check_locked_hit_reg_n_0_[0] }),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_15 (LU_Mem_PR_And_Inst1_n_4),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (Chk_Valid_Inst_n_66),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (Chk_Valid_Inst_n_97),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (Chk_Valid_Inst_n_100),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (Chk_Valid_Inst_n_116),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (Par_Reuse_Inst_n_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 (LU_Check_PR_And_Inst2_n_2),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 (LU_MD_And_Inst6_n_2),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 (AW_Need_Inst_n_2),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 (LU_PC_And_Inst5_n_16),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0_0 (LU_Check_PR_And_Inst1_n_1),
        .\Use_FPGA.Empty_Inst (\lu_check_port_one_hot_reg_n_0_[0] ),
        .\Use_FPGA.Full_Inst (Chk_Valid_Inst_n_99),
        .\Using_FPGA.MUXCY_I (lud_write_hit_done_reg_0),
        .\Using_FPGA.MUXCY_I_0 (LUD_Addr_PR_And_Inst1_n_1),
        .\Using_FPGA.MUXCY_I_1 (lud_write_hit_done_reg_n_0),
        .access_valid(access_valid),
        .hit_way_i(hit_way_i),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_data_hit_stall(lookup_data_hit_stall),
        .lookup_first_write_hit(lookup_first_write_hit),
        .lookup_last_beat(lookup_last_beat),
        .lookup_miss(lookup_miss),
        .lookup_next_is_last_beat(lookup_next_is_last_beat),
        .lookup_offset_cnt_cmb0_carry__0(\lu_check_info_reg[Addr_Stp][5]_0 ),
        .lookup_offset_cnt_cmb0_carry__0_0({\lu_mem_info_reg[Addr_Stp_n_0_][5] ,\lu_mem_info_reg[Addr_Stp_n_0_][4] ,\lu_mem_info_reg[Addr_Stp_n_0_][3] ,\lu_mem_info_reg[Addr_Stp_n_0_][2] ,\lu_mem_info_reg[Addr_Stp_n_0_][1] ,\lu_mem_info_reg[Addr_Stp_n_0_][0] }),
        .\lookup_offset_cnt_reg[5] (\lu_check_info_reg[Addr_Use][5]_0 ),
        .\lookup_offset_cnt_reg[5]_0 ({\lu_mem_info_reg[Addr_Use_n_0_][5] ,\lu_mem_info_reg[Addr_Use_n_0_][4] ,\lu_mem_info_reg[Addr_Use_n_0_][3] ,\lu_mem_info_reg[Addr_Use_n_0_][2] ,\lu_mem_info_reg[Addr_Use_n_0_][1] ,\lu_mem_info_reg[Addr_Use_n_0_][0] }),
        .\lookup_offset_cnt_reg[5]_1 ({lookup_offset_cnt_cmb0_carry__0_n_6,lookup_offset_cnt_cmb0_carry__0_n_7}),
        .\lookup_offset_cnt_reg[5]_2 (\lu_mem_info_reg[Kind_n_0_] ),
        .\lookup_offset_cnt_reg[5]_3 (\lu_check_info_reg[Kind]_0 ),
        .lookup_offset_first(lookup_offset_first),
        .\lookup_offset_len_cnt_reg[0] (Chk_Valid_Inst_n_109),
        .\lookup_offset_len_cnt_reg[0]_0 (\lookup_offset_len_cnt_reg[0]_0 ),
        .\lookup_offset_len_cnt_reg[0]_1 (lud_mem_waiting_for_pipe_reg_3),
        .\lookup_offset_len_cnt_reg[7] (lookup_offset_len_cnt_reg),
        .\lookup_offset_len_cnt_reg[7]_0 (\lu_check_info_reg[Len] ),
        .\lookup_offset_len_cnt_reg[7]_1 (\lu_mem_info_reg[Len] ),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_push_wm_stall(lookup_push_wm_stall),
        .lookup_push_write_miss(lookup_push_write_miss),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .lookup_read_miss(lookup_read_miss),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lookup_write_hit(lookup_write_hit),
        .lookup_write_miss(lookup_write_miss),
        .lru_check_next_way(lru_check_next_way),
        .\lru_check_next_way_i_reg[0] (Chk_Valid_Inst_n_70),
        .\lru_check_next_way_i_reg[1] (Chk_Valid_Inst_n_69),
        .lru_check_used_way(lru_check_used_way),
        .lu_check_done0(lu_check_done0),
        .\lu_check_info_reg[Addr_Stp][3] ({Chk_Valid_Inst_n_102,Chk_Valid_Inst_n_103,Chk_Valid_Inst_n_104,Chk_Valid_Inst_n_105}),
        .\lu_check_info_reg[Addr_Stp][5] ({Chk_Valid_Inst_n_106,Chk_Valid_Inst_n_107}),
        .\lu_check_info_reg[Addr_Use][5] (lookup_offset_cnt_cmb),
        .\lu_check_info_reg[Allocate] (Chk_Valid_Inst_n_8),
        .\lu_check_info_reg[Allocate]_0 (Chk_Valid_Inst_n_11),
        .\lu_check_info_reg[Allocate]__0 (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_info_reg[Evict] (Chk_Valid_Inst_n_13),
        .\lu_check_info_reg[Evict]_0 (Chk_Valid_Inst_n_27),
        .\lu_check_info_reg[Evict]_1 (Chk_Valid_Inst_n_53),
        .\lu_check_info_reg[Evict]_2 (Chk_Valid_Inst_n_111),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_info_reg[Keep] (Chk_Valid_Inst_n_68),
        .\lu_check_info_reg[Port_Num][0] (Chk_Valid_Inst_n_61),
        .\lu_check_info_reg[Wr] (Chk_Valid_Inst_n_32),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_locked_hit_reg[0] (Chk_Valid_Inst_n_15),
        .\lu_check_locked_hit_reg[3] (Chk_Valid_Inst_n_21),
        .lu_check_piperun(lu_check_piperun),
        .lu_check_protected_way(lu_check_protected_way[0]),
        .\lu_check_protected_way_reg[0] (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4__0_n_0 ),
        .lu_check_read_info_done(lu_check_read_info_done),
        .lu_check_read_info_done_reg(lu_check_read_info_done_reg_0),
        .lu_check_single_beat(lu_check_single_beat),
        .\lu_check_tag_hit_reg[3] (Chk_Valid_Inst_n_52),
        .\lu_check_tag_reg[0][Addr][23] ({Chk_Valid_Inst_n_75,Chk_Valid_Inst_n_76,Chk_Valid_Inst_n_77,Chk_Valid_Inst_n_78,Chk_Valid_Inst_n_79,Chk_Valid_Inst_n_80,Chk_Valid_Inst_n_81,Chk_Valid_Inst_n_82,Chk_Valid_Inst_n_83,Chk_Valid_Inst_n_84,Chk_Valid_Inst_n_85}),
        .lu_check_valid(lu_check_valid),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_check_wait_for_update_reg(Chk_Valid_Inst_n_24),
        .lu_check_wr_already_pushed(lu_check_wr_already_pushed),
        .lu_check_wr_already_pushed_reg(Chk_Valid_Inst_n_108),
        .lu_ds_last_beat_next_last_n(lu_ds_last_beat_next_last_n),
        .\lu_mem_info_reg[Port_Num][0] (Chk_Valid_Inst_n_62),
        .\lu_mem_info_reg[Wr] (Chk_Valid_Inst_n_64),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(Chk_Valid_Inst_n_6),
        .lu_mem_valid_reg(Chk_Valid_Inst_n_33),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_already_used_reg(Chk_Valid_Inst_n_3),
        .lud_mem_already_used_reg_0(LU_PC_And_Inst5_n_3),
        .lud_mem_delayed_read_data0(lud_mem_delayed_read_data0),
        .lud_mem_keep_single_during_stall0(lud_mem_keep_single_during_stall0),
        .lud_mem_keep_single_during_stall_reg(lud_mem_keep_single_during_stall_reg_0),
        .lud_mem_last_reg(lookup_next_is_last_beat_reg_n_0),
        .lud_mem_last_reg_0(lu_mem_single_beat_reg_n_0),
        .lud_mem_piperun(lud_mem_piperun),
        .\lud_mem_port_one_hot_reg[1] (\lu_check_info_reg[Port_Num][0]_0 ),
        .\lud_mem_port_one_hot_reg[1]_0 (\lu_mem_info_reg[Port_Num][0]_0 ),
        .lud_mem_speculative_valid(lud_mem_speculative_valid),
        .lud_mem_speculative_valid_reg(Chk_Valid_Inst_n_101),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .\lud_mem_way_d1_reg[0] (lud_mem_completed_reg_n_0),
        .lud_reg_piperun(lud_reg_piperun),
        .lud_reg_valid_reg(Chk_Valid_Inst_n_1),
        .lud_reg_valid_reg_0(lud_reg_valid_reg_0),
        .lud_step_delayed_restart(lud_step_delayed_restart),
        .lud_step_delayed_restart_reg(Chk_Valid_Inst_n_4),
        .lud_step_delayed_restart_reg_0(lud_addr_pipeline_full_reg_0),
        .lud_step_delayed_restart_reg_1(lud_mem_conflict),
        .lud_step_offset(lud_step_offset),
        .lud_write_hit_done(lud_write_hit_done),
        .minusOp({minusOp[7:3],minusOp[1:0]}),
        .p_200_in(p_200_in),
        .p_223_in(p_223_in),
        .update_first_write_hit_reg(Par_Dirty_Inst_n_0),
        .\update_info_reg[Evict] (\lu_check_info_reg[Keep_n_0_] ),
        .update_miss_reg({p_6_in,p_0_in4_in,p_1_in5_in,\lu_check_tag_hit_reg_n_0_[0] }),
        .\update_old_tag_reg[Addr][23] (\lu_check_tag_reg[1][Addr] ),
        .\update_old_tag_reg[Addr][23]_0 (\lu_check_tag_reg[2][Addr] ),
        .\update_old_tag_reg[Addr][23]_1 (\lu_check_tag_reg[3][Addr] ),
        .\update_old_tag_reg[Addr][23]_2 (\lu_check_tag_reg[0][Addr] ),
        .update_piperun(update_piperun),
        .\update_way_reg[1] (lu_check_valid_bits),
        .\update_way_reg[1]_0 (\update_way[1]_i_3_n_0 ),
        .update_write_miss_full(update_write_miss_full));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_187 E_Need_Inst
       (.ACLK(ACLK),
        .\M_AXI_AWADDR_reg[23] ({in[23:13],in[5:2],\update_info_reg[Addr][1]_0 }),
        .\M_AXI_AWADDR_reg[23]_0 (\update_info_reg[Evict]_0 ),
        .\M_AXI_AWADDR_reg[23]_1 (\update_old_tag[Addr] ),
        .\M_AXI_AWLEN_reg[3] (\update_info[Size] ),
        .\M_AXI_AWLEN_reg[3]_0 (\aw_fifo_mem_reg[15][Len][3]_srl16_i_2_n_0 ),
        .\M_AXI_AWLEN_reg[4] (\aw_fifo_mem_reg[15][Len][4]_srl16_i_2_n_0 ),
        .\M_AXI_AWLEN_reg[4]_0 (\aw_fifo_mem_reg[15][Len][4]_srl16_i_3_n_0 ),
        .\M_AXI_AWLEN_reg[5] (\aw_fifo_mem_reg[15][Len][5]_srl16_i_3_n_0 ),
        .\M_AXI_AWLEN_reg[6] (\aw_fifo_mem_reg[15][Len][6]_srl16_i_3_n_0 ),
        .\M_AXI_AWLEN_reg[6]_0 (\aw_fifo_mem_reg[15][Len][6]_srl16_i_4_n_0 ),
        .\M_AXI_AWLEN_reg[7] ({\update_info_reg[Len][7]_0 [7:5],\update_info_reg[Len][7]_0 [3:0]}),
        .\M_AXI_AWLEN_reg[7]_0 (\aw_fifo_mem_reg[15][Len][6]_srl16_i_2_n_0 ),
        .\M_AXI_AWLEN_reg[7]_1 (\aw_fifo_mem_reg[15][Len][5]_srl16_i_4_n_0 ),
        .\M_AXI_AWLEN_reg[7]_2 (\aw_fifo_mem_reg[15][Len][5]_srl16_i_2_n_0 ),
        .\M_AXI_AWLEN_reg[7]_3 (\aw_fifo_mem_reg[15][Len][7]_srl16_i_2_n_0 ),
        .Q(ARESET_I),
        .S(\The_Compare[0].carry_and_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LU_Check_PR_And_Inst2_n_3),
        .\aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 (\update_info[Kind] ),
        .\lu_check_protected_way_reg[0] ({p_6_in,p_0_in4_in,p_1_in5_in,\lu_check_tag_hit_reg_n_0_[0] }),
        .\update_info_reg[Addr][23] (\update_info_reg[Addr][23]_0 ),
        .\update_info_reg[Len][7] (\update_info_reg[Len][7]_1 ),
        .\update_info_reg[Size][1] (\update_info_reg[Size][1]_0 ),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ));
  Fast_IP_Clock_system_cache_0_0_carry_and_188 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_1 ),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\The_Compare[0].sel_reg_12 ),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(A_13),
        .lopt_6(\^lopt_4 ),
        .lopt_7(lopt_5),
        .lopt_8(\The_Compare[2].sel_reg ),
        .lu_mem_valid_carry_0(lu_mem_valid_carry_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_189 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\Using_FPGA.MUXCY_I_1 (lud_mem_conflict),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_masked_valid_tag_0(lu_mem_masked_valid_tag_0),
        .lu_mem_pre_pure_valid_tag_0(lu_mem_pre_pure_valid_tag_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_190 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3 
       (.D(lu_mem_tag_hit_0),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .\lu_check_tag_hit_reg[0] (lu_mem_valid_reg_0),
        .\lu_check_tag_hit_reg[0]_0 (lud_mem_conflict),
        .lu_mem_valid_tag_0(lu_mem_valid_tag_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_191 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3b 
       (.D(lu_mem_tag_hit_copy_pc_0),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_18),
        .lopt_4(lopt_19),
        .lopt_5(lopt_20),
        .lopt_6(lopt_21),
        .lopt_7(lopt_22),
        .lopt_8(lopt_23),
        .\lu_check_tag_hit_copy_pc_reg[0] (lu_mem_tag_hit_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_192 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3c 
       (.D(lu_mem_tag_hit_copy_md_0),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .\lu_check_tag_hit_copy_md_reg[0] (lu_mem_tag_hit_copy_pc_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_193 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3d 
       (.D(lu_mem_tag_hit_copy_wm_0),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .\lu_check_tag_hit_copy_wm_reg[0] (lu_mem_tag_hit_copy_md_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_194 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3e 
       (.D(lu_mem_tag_hit_copy_ds_0),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .lopt_2(lopt_23),
        .\lu_check_tag_hit_copy_ds_reg[0] (lu_mem_tag_hit_copy_wm_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_195 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3f 
       (.D(lu_mem_tag_hit_copy_lb_0),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lopt_3(lopt_27),
        .lopt_4(lopt_28),
        .lopt_5(lopt_29),
        .lopt_6(lopt_30),
        .lopt_7(lopt_31),
        .lopt_8(lopt_32),
        .\lu_check_tag_hit_copy_lb_reg[0] (lu_mem_tag_hit_copy_ds_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_196 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3g 
       (.D(lu_mem_tag_hit_copy_rs_0),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .\lu_check_tag_hit_copy_rs_reg[0] (lu_mem_tag_hit_copy_lb_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_197 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst4 
       (.D(lu_mem_locked_hit_0),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_locked_hit_reg[0] (lu_mem_tag_hit_copy_rs_0),
        .\lu_check_locked_hit_reg[0]_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .\lu_check_locked_hit_reg[0]_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\lu_check_locked_hit_reg[0]_2 (lud_mem_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_and_198 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst4b 
       (.D(lu_mem_locked_hit_copy_lb_0),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .\lu_check_locked_hit_copy_lb_reg[0] (lu_mem_locked_hit_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_199 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst5 
       (.D(lu_mem_locked_write_0),
        .lopt(lopt_33),
        .lopt_1(lopt_34),
        .lopt_2(lopt_35),
        .lopt_3(lopt_36),
        .lopt_4(lopt_37),
        .lopt_5(lopt_38),
        .lopt_6(lopt_39),
        .lopt_7(lopt_40),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_locked_write_reg[0] (lu_mem_locked_hit_copy_lb_0),
        .\lu_check_locked_write_reg[0]_0 (lud_mem_conflict),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_200 \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1 
       (.A_13(A_13),
        .Q(lookup_stall_addr),
        .\The_Compare[0].sel_reg_12 (\The_Compare[0].sel_reg_12 ),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .\Using_FPGA.MUXCY_I ({\lu_mem_info_reg[Addr_n_0_][23] ,\lu_mem_info_reg[Addr_n_0_][22] ,\lu_mem_info_reg[Addr_n_0_][21] ,\lu_mem_info_reg[Addr_n_0_][20] ,\lu_mem_info_reg[Addr_n_0_][19] ,\lu_mem_info_reg[Addr_n_0_][18] ,\lu_mem_info_reg[Addr_n_0_][17] ,\lu_mem_info_reg[Addr_n_0_][16] ,\lu_mem_info_reg[Addr_n_0_][15] }),
        .\Using_FPGA.MUXCY_I_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [10:9]),
        .\Using_FPGA.MUXCY_I_i_1__109 (lud_mem_conflict),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_12(lopt_12),
        .lopt_13(lopt_13),
        .lopt_14(lopt_14),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .\lu_check_info_reg[Addr][13] (\lu_check_info_reg[Addr][13]_0 ),
        .\lu_check_info_reg[Addr][14] (\lu_check_info_reg[Addr][14]_0 ),
        .\lu_check_info_reg[Addr][15] (\lu_check_info_reg[Addr][15]_0 ),
        .\lu_check_info_reg[Addr][16] (\lu_check_info_reg[Addr][16]_0 ),
        .\lu_check_info_reg[Addr][17] (\lu_check_info_reg[Addr][17]_0 ),
        .\lu_check_info_reg[Addr][18] (\lu_check_info_reg[Addr][18]_0 ),
        .\lu_check_info_reg[Addr][19] (\lu_check_info_reg[Addr][19]_0 ),
        .\lu_check_info_reg[Addr][20] (\lu_check_info_reg[Addr][20]_0 ),
        .\lu_check_info_reg[Addr][21] (\lu_check_info_reg[Addr][21]_0 ),
        .\lu_check_info_reg[Addr][22] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_10 ),
        .lu_mem_force_way(lu_mem_force_way),
        .lu_mem_pre_pure_valid_tag_0(lu_mem_pre_pure_valid_tag_0),
        .lu_mem_valid_carry_0(lu_mem_valid_carry_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_201 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_11),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_force_way(lu_mem_force_way),
        .lu_mem_masked_valid_tag_0(lu_mem_masked_valid_tag_0),
        .lu_mem_valid_tag_0(lu_mem_valid_tag_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_202 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2 
       (.D(lu_mem_locked_write_0),
        .\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [0]),
        .\Using_FPGA.MUXCY_I_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [11]),
        .\Using_FPGA.MUXCY_I_2 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_3 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_4 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .\Using_FPGA.MUXCY_I_i_1__63 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lopt(lopt_33),
        .lopt_1(lopt_34),
        .lopt_2(lopt_35),
        .\lu_check_info_reg[Evict] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2_n_1 ),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_protected_pre1_0(lu_mem_protected_pre1_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_203 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst3 
       (.\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [0]),
        .\Using_FPGA.MUXCY_I_1 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_2 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_3 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lu_check_write_alloc(lu_check_write_alloc),
        .lu_mem_protected_pre1_0(lu_mem_protected_pre1_0),
        .lu_mem_protected_pre2_0(lu_mem_protected_pre2_0),
        .lu_mem_write_alloc(lu_mem_write_alloc));
  Fast_IP_Clock_system_cache_0_0_carry_or_204 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst4 
       (.D(lu_mem_protected[0]),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .lu_mem_protected_pre2_0(lu_mem_protected_pre2_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_205 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_2 ),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(\The_Compare[0].sel_reg_14 ),
        .lopt_3(lopt_43),
        .lopt_4(lopt_44),
        .lopt_5(A_15),
        .lopt_6(lopt_45),
        .lopt_7(lopt_46),
        .lopt_8(\The_Compare[2].sel_reg_16 ),
        .lu_mem_valid_carry_1(lu_mem_valid_carry_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_206 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\Using_FPGA.MUXCY_I_1 (lud_mem_conflict),
        .lopt(lopt_47),
        .lopt_1(lopt_48),
        .lopt_2(lopt_49),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_masked_valid_tag_1(lu_mem_masked_valid_tag_1),
        .lu_mem_pre_pure_valid_tag_1(lu_mem_pre_pure_valid_tag_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_207 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3 
       (.D(lu_mem_tag_hit_1),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .\lu_check_tag_hit_reg[1] (lu_mem_valid_reg_0),
        .\lu_check_tag_hit_reg[1]_0 (lud_mem_conflict),
        .lu_mem_valid_tag_1(lu_mem_valid_tag_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_208 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3b 
       (.D(lu_mem_tag_hit_copy_pc_1),
        .lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(lopt_58),
        .lopt_3(lopt_59),
        .lopt_4(lopt_60),
        .lopt_5(lopt_61),
        .lopt_6(lopt_62),
        .lopt_7(lopt_63),
        .lopt_8(lopt_64),
        .\lu_check_tag_hit_copy_pc_reg[1] (lu_mem_tag_hit_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_209 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3c 
       (.D(lu_mem_tag_hit_copy_md_1),
        .lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(lopt_58),
        .\lu_check_tag_hit_copy_md_reg[1] (lu_mem_tag_hit_copy_pc_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_210 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3d 
       (.D(lu_mem_tag_hit_copy_wm_1),
        .lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_2(lopt_61),
        .\lu_check_tag_hit_copy_wm_reg[1] (lu_mem_tag_hit_copy_md_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_211 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3e 
       (.D(lu_mem_tag_hit_copy_ds_1),
        .lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .\lu_check_tag_hit_copy_ds_reg[1] (lu_mem_tag_hit_copy_wm_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_212 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3f 
       (.D(lu_mem_tag_hit_copy_lb_1),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_67),
        .lopt_3(lopt_68),
        .lopt_4(lopt_69),
        .lopt_5(lopt_70),
        .lopt_6(lopt_71),
        .lopt_7(lopt_72),
        .lopt_8(lopt_73),
        .\lu_check_tag_hit_copy_lb_reg[1] (lu_mem_tag_hit_copy_ds_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_213 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3g 
       (.D(lu_mem_tag_hit_copy_rs_1),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_67),
        .\lu_check_tag_hit_copy_rs_reg[1] (lu_mem_tag_hit_copy_lb_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_214 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst4 
       (.D(lu_mem_locked_hit_1),
        .lopt(lopt_68),
        .lopt_1(lopt_69),
        .lopt_2(lopt_70),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_locked_hit_reg[1] (lu_mem_tag_hit_copy_rs_1),
        .\lu_check_locked_hit_reg[1]_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\lu_check_locked_hit_reg[1]_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\lu_check_locked_hit_reg[1]_2 (lud_mem_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_and_215 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst4b 
       (.D(lu_mem_locked_hit_copy_lb_1),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_2(lopt_73),
        .\lu_check_locked_hit_copy_lb_reg[1] (lu_mem_locked_hit_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_216 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst5 
       (.D(lu_mem_locked_write_1),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_76),
        .lopt_3(lopt_77),
        .lopt_4(lopt_78),
        .lopt_5(lopt_79),
        .lopt_6(lopt_80),
        .lopt_7(lopt_81),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_locked_write_reg[1] (lu_mem_locked_hit_copy_lb_1),
        .\lu_check_locked_write_reg[1]_0 (lud_mem_conflict),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_217 \Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1 
       (.A_15(A_15),
        .Q(lookup_stall_addr[23]),
        .\The_Compare[0].sel_reg_14 (\The_Compare[0].sel_reg_14 ),
        .\The_Compare[2].sel_reg_16 (\The_Compare[2].sel_reg_16 ),
        .\Using_FPGA.MUXCY_I (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Addr_n_0_][23] ),
        .\Using_FPGA.MUXCY_I_1 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [10:9]),
        .\Using_FPGA.MUXCY_I_2 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_10 ),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_10(lopt_51),
        .lopt_11(lopt_52),
        .lopt_12(lopt_53),
        .lopt_13(lopt_54),
        .lopt_14(lopt_55),
        .lopt_2(lopt_43),
        .lopt_3(lopt_44),
        .lopt_4(lopt_45),
        .lopt_5(lopt_46),
        .lopt_6(lopt_47),
        .lopt_7(lopt_48),
        .lopt_8(lopt_49),
        .lopt_9(lopt_50),
        .lu_mem_pre_pure_valid_tag_1(lu_mem_pre_pure_valid_tag_1),
        .lu_mem_valid_carry_1(lu_mem_valid_carry_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_218 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lopt(lopt_50),
        .lopt_1(lopt_51),
        .lopt_2(lopt_52),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_force_way(lu_mem_force_way),
        .lu_mem_masked_valid_tag_1(lu_mem_masked_valid_tag_1),
        .lu_mem_valid_tag_1(lu_mem_valid_tag_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_219 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst2 
       (.D(lu_mem_locked_write_1),
        .\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [1]),
        .\Using_FPGA.MUXCY_I_1 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [11]),
        .\Using_FPGA.MUXCY_I_2 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2_n_1 ),
        .\Using_FPGA.MUXCY_I_3 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_4 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_5 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_76),
        .lu_mem_protected_pre1_1(lu_mem_protected_pre1_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_220 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst3 
       (.\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [1]),
        .\Using_FPGA.MUXCY_I_1 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_2 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_3 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt(lopt_77),
        .lopt_1(lopt_78),
        .lopt_2(lopt_79),
        .lu_check_write_alloc(lu_check_write_alloc),
        .lu_mem_protected_pre1_1(lu_mem_protected_pre1_1),
        .lu_mem_protected_pre2_1(lu_mem_protected_pre2_1),
        .lu_mem_write_alloc(lu_mem_write_alloc));
  Fast_IP_Clock_system_cache_0_0_carry_or_221 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst4 
       (.D(lu_mem_protected[1]),
        .lopt(lopt_80),
        .lopt_1(lopt_81),
        .lu_mem_protected_pre2_1(lu_mem_protected_pre2_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_222 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_3 ),
        .lopt(lopt_82),
        .lopt_1(lopt_83),
        .lopt_2(\The_Compare[0].sel_reg_17 ),
        .lopt_3(lopt_84),
        .lopt_4(lopt_85),
        .lopt_5(A_18),
        .lopt_6(lopt_86),
        .lopt_7(lopt_87),
        .lopt_8(\The_Compare[2].sel_reg_19 ),
        .lu_mem_valid_carry_2(lu_mem_valid_carry_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_223 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\Using_FPGA.MUXCY_I_1 (lud_mem_conflict),
        .lopt(lopt_88),
        .lopt_1(lopt_89),
        .lopt_2(lopt_90),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_masked_valid_tag_2(lu_mem_masked_valid_tag_2),
        .lu_mem_pre_pure_valid_tag_2(lu_mem_pre_pure_valid_tag_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_224 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3 
       (.D(lu_mem_tag_hit_2),
        .lopt(lopt_94),
        .lopt_1(lopt_95),
        .lopt_2(lopt_96),
        .\lu_check_tag_hit_reg[2] (lu_mem_valid_reg_0),
        .\lu_check_tag_hit_reg[2]_0 (lud_mem_conflict),
        .lu_mem_valid_tag_2(lu_mem_valid_tag_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_225 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3b 
       (.D(lu_mem_tag_hit_copy_pc_2),
        .lopt(lopt_97),
        .lopt_1(lopt_98),
        .lopt_2(lopt_99),
        .lopt_3(lopt_100),
        .lopt_4(lopt_101),
        .lopt_5(lopt_102),
        .lopt_6(lopt_103),
        .lopt_7(lopt_104),
        .lopt_8(lopt_105),
        .\lu_check_tag_hit_copy_pc_reg[2] (lu_mem_tag_hit_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_226 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3c 
       (.D(lu_mem_tag_hit_copy_md_2),
        .lopt(lopt_97),
        .lopt_1(lopt_98),
        .lopt_2(lopt_99),
        .\lu_check_tag_hit_copy_md_reg[2] (lu_mem_tag_hit_copy_pc_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_227 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3d 
       (.D(lu_mem_tag_hit_copy_wm_2),
        .lopt(lopt_100),
        .lopt_1(lopt_101),
        .lopt_2(lopt_102),
        .\lu_check_tag_hit_copy_wm_reg[2] (lu_mem_tag_hit_copy_md_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_228 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3e 
       (.D(lu_mem_tag_hit_copy_ds_2),
        .lopt(lopt_103),
        .lopt_1(lopt_104),
        .lopt_2(lopt_105),
        .\lu_check_tag_hit_copy_ds_reg[2] (lu_mem_tag_hit_copy_wm_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_229 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3f 
       (.D(lu_mem_tag_hit_copy_lb_2),
        .lopt(lopt_106),
        .lopt_1(lopt_107),
        .lopt_2(lopt_108),
        .lopt_3(lopt_109),
        .lopt_4(lopt_110),
        .lopt_5(lopt_111),
        .lopt_6(lopt_112),
        .lopt_7(lopt_113),
        .lopt_8(lopt_114),
        .\lu_check_tag_hit_copy_lb_reg[2] (lu_mem_tag_hit_copy_ds_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_230 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst3g 
       (.D(lu_mem_tag_hit_copy_rs_2),
        .lopt(lopt_106),
        .lopt_1(lopt_107),
        .lopt_2(lopt_108),
        .\lu_check_tag_hit_copy_rs_reg[2] (lu_mem_tag_hit_copy_lb_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_231 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst4 
       (.D(lu_mem_locked_hit_2),
        .lopt(lopt_109),
        .lopt_1(lopt_110),
        .lopt_2(lopt_111),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_locked_hit_reg[2] (lu_mem_tag_hit_copy_rs_2),
        .\lu_check_locked_hit_reg[2]_0 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\lu_check_locked_hit_reg[2]_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\lu_check_locked_hit_reg[2]_2 (lud_mem_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_and_232 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst4b 
       (.D(lu_mem_locked_hit_copy_lb_2),
        .lopt(lopt_112),
        .lopt_1(lopt_113),
        .lopt_2(lopt_114),
        .\lu_check_locked_hit_copy_lb_reg[2] (lu_mem_locked_hit_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_233 \Gen_Set_Cachehit_Mem[2].LU_Tag_And_Inst5 
       (.D(lu_mem_locked_write_2),
        .lopt(lopt_115),
        .lopt_1(lopt_116),
        .lopt_2(lopt_117),
        .lopt_3(lopt_118),
        .lopt_4(lopt_119),
        .lopt_5(lopt_120),
        .lopt_6(lopt_121),
        .lopt_7(lopt_122),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_locked_write_reg[2] (lu_mem_locked_hit_copy_lb_2),
        .\lu_check_locked_write_reg[2]_0 (lud_mem_conflict),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_234 \Gen_Set_Cachehit_Mem[2].LU_Tag_Compare_Inst1 
       (.A_18(A_18),
        .Q(lookup_stall_addr[23]),
        .\The_Compare[0].sel_reg_17 (\The_Compare[0].sel_reg_17 ),
        .\The_Compare[2].sel_reg_19 (\The_Compare[2].sel_reg_19 ),
        .\Using_FPGA.MUXCY_I (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Addr_n_0_][23] ),
        .\Using_FPGA.MUXCY_I_1 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [10:9]),
        .\Using_FPGA.MUXCY_I_2 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_10 ),
        .lopt(lopt_82),
        .lopt_1(lopt_83),
        .lopt_10(lopt_92),
        .lopt_11(lopt_93),
        .lopt_12(lopt_94),
        .lopt_13(lopt_95),
        .lopt_14(lopt_96),
        .lopt_2(lopt_84),
        .lopt_3(lopt_85),
        .lopt_4(lopt_86),
        .lopt_5(lopt_87),
        .lopt_6(lopt_88),
        .lopt_7(lopt_89),
        .lopt_8(lopt_90),
        .lopt_9(lopt_91),
        .lu_mem_pre_pure_valid_tag_2(lu_mem_pre_pure_valid_tag_2),
        .lu_mem_valid_carry_2(lu_mem_valid_carry_2));
  Fast_IP_Clock_system_cache_0_0_carry_or_235 \Gen_Set_Cachehit_Mem[2].LU_Tag_Or_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lopt(lopt_91),
        .lopt_1(lopt_92),
        .lopt_2(lopt_93),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_force_way(lu_mem_force_way),
        .lu_mem_masked_valid_tag_2(lu_mem_masked_valid_tag_2),
        .lu_mem_valid_tag_2(lu_mem_valid_tag_2));
  Fast_IP_Clock_system_cache_0_0_carry_or_236 \Gen_Set_Cachehit_Mem[2].LU_Tag_Or_Inst2 
       (.D(lu_mem_locked_write_2),
        .\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [2]),
        .\Using_FPGA.MUXCY_I_1 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [11]),
        .\Using_FPGA.MUXCY_I_2 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2_n_1 ),
        .\Using_FPGA.MUXCY_I_3 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_4 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_5 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .lopt(lopt_115),
        .lopt_1(lopt_116),
        .lopt_2(lopt_117),
        .lu_mem_protected_pre1_2(lu_mem_protected_pre1_2));
  Fast_IP_Clock_system_cache_0_0_carry_or_237 \Gen_Set_Cachehit_Mem[2].LU_Tag_Or_Inst3 
       (.\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [2]),
        .\Using_FPGA.MUXCY_I_1 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_2 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_3 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt(lopt_118),
        .lopt_1(lopt_119),
        .lopt_2(lopt_120),
        .lu_check_write_alloc(lu_check_write_alloc),
        .lu_mem_protected_pre1_2(lu_mem_protected_pre1_2),
        .lu_mem_protected_pre2_2(lu_mem_protected_pre2_2),
        .lu_mem_write_alloc(lu_mem_write_alloc));
  Fast_IP_Clock_system_cache_0_0_carry_or_238 \Gen_Set_Cachehit_Mem[2].LU_Tag_Or_Inst4 
       (.D(lu_mem_protected[2]),
        .lopt(lopt_121),
        .lopt_1(lopt_122),
        .lu_mem_protected_pre2_2(lu_mem_protected_pre2_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_239 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\Using_FPGA.MUXCY_I_4 ),
        .lopt(lopt_123),
        .lopt_1(lopt_124),
        .lopt_2(\The_Compare[0].sel_reg_20 ),
        .lopt_3(lopt_125),
        .lopt_4(lopt_126),
        .lopt_5(A_21),
        .lopt_6(lopt_127),
        .lopt_7(lopt_128),
        .lopt_8(\The_Compare[2].sel_reg_22 ),
        .lu_mem_valid_carry_3(lu_mem_valid_carry_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_240 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\Using_FPGA.MUXCY_I_1 (lud_mem_conflict),
        .lopt(lopt_129),
        .lopt_1(lopt_130),
        .lopt_2(lopt_131),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_masked_valid_tag_3(lu_mem_masked_valid_tag_3),
        .lu_mem_pre_pure_valid_tag_3(lu_mem_pre_pure_valid_tag_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_241 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3 
       (.D(lu_mem_tag_hit_3),
        .lopt(lopt_135),
        .lopt_1(lopt_136),
        .lopt_2(lopt_137),
        .\lu_check_tag_hit_reg[3] (lu_mem_valid_reg_0),
        .\lu_check_tag_hit_reg[3]_0 (lud_mem_conflict),
        .lu_mem_valid_tag_3(lu_mem_valid_tag_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_242 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3b 
       (.D(lu_mem_tag_hit_copy_pc_3),
        .lopt(lopt_138),
        .lopt_1(lopt_139),
        .lopt_2(lopt_140),
        .lopt_3(lopt_141),
        .lopt_4(lopt_142),
        .lopt_5(lopt_143),
        .lopt_6(lopt_144),
        .lopt_7(lopt_145),
        .lopt_8(lopt_146),
        .\lu_check_tag_hit_copy_pc_reg[3] (lu_mem_tag_hit_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_243 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3c 
       (.D(lu_mem_tag_hit_copy_md_3),
        .lopt(lopt_138),
        .lopt_1(lopt_139),
        .lopt_2(lopt_140),
        .\lu_check_tag_hit_copy_md_reg[3] (lu_mem_tag_hit_copy_pc_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_244 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3d 
       (.D(lu_mem_tag_hit_copy_wm_3),
        .lopt(lopt_141),
        .lopt_1(lopt_142),
        .lopt_2(lopt_143),
        .\lu_check_tag_hit_copy_wm_reg[3] (lu_mem_tag_hit_copy_md_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_245 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3e 
       (.D(lu_mem_tag_hit_copy_ds_3),
        .lopt(lopt_144),
        .lopt_1(lopt_145),
        .lopt_2(lopt_146),
        .\lu_check_tag_hit_copy_ds_reg[3] (lu_mem_tag_hit_copy_wm_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_246 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3f 
       (.D(lu_mem_tag_hit_copy_lb_3),
        .lopt(lopt_147),
        .lopt_1(lopt_148),
        .lopt_2(lopt_149),
        .lopt_3(lopt_150),
        .lopt_4(lopt_151),
        .lopt_5(lopt_152),
        .lopt_6(lopt_153),
        .lopt_7(lopt_154),
        .lopt_8(lopt_155),
        .\lu_check_tag_hit_copy_lb_reg[3] (lu_mem_tag_hit_copy_ds_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_247 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst3g 
       (.D(lu_mem_tag_hit_copy_rs_3),
        .lopt(lopt_147),
        .lopt_1(lopt_148),
        .lopt_2(lopt_149),
        .\lu_check_tag_hit_copy_rs_reg[3] (lu_mem_tag_hit_copy_lb_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_248 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst4 
       (.D(lu_mem_locked_hit_3),
        .lopt(lopt_150),
        .lopt_1(lopt_151),
        .lopt_2(lopt_152),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_locked_hit_reg[3] (lu_mem_tag_hit_copy_rs_3),
        .\lu_check_locked_hit_reg[3]_0 (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\lu_check_locked_hit_reg[3]_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\lu_check_locked_hit_reg[3]_2 (lud_mem_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_and_249 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst4b 
       (.D(lu_mem_locked_hit_copy_lb_3),
        .lopt(lopt_153),
        .lopt_1(lopt_154),
        .lopt_2(lopt_155),
        .\lu_check_locked_hit_copy_lb_reg[3] (lu_mem_locked_hit_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_250 \Gen_Set_Cachehit_Mem[3].LU_Tag_And_Inst5 
       (.D(lu_mem_locked_write_3),
        .lopt(lopt_156),
        .lopt_1(lopt_157),
        .lopt_2(lopt_158),
        .lopt_3(lopt_159),
        .lopt_4(lopt_160),
        .lopt_5(lopt_161),
        .lopt_6(lopt_162),
        .lopt_7(lopt_163),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_locked_write_reg[3] (lu_mem_locked_hit_copy_lb_3),
        .\lu_check_locked_write_reg[3]_0 (lud_mem_conflict),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_251 \Gen_Set_Cachehit_Mem[3].LU_Tag_Compare_Inst1 
       (.A_21(A_21),
        .Q(lookup_stall_addr[23]),
        .\The_Compare[0].sel_reg_20 (\The_Compare[0].sel_reg_20 ),
        .\The_Compare[2].sel_reg_22 (\The_Compare[2].sel_reg_22 ),
        .\Using_FPGA.MUXCY_I (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_0 (\lu_mem_info_reg[Addr_n_0_][23] ),
        .\Using_FPGA.MUXCY_I_1 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_10 ),
        .lookup_tag_current_word_i(lookup_tag_current_word_i[10:9]),
        .lopt(lopt_123),
        .lopt_1(lopt_124),
        .lopt_10(lopt_133),
        .lopt_11(lopt_134),
        .lopt_12(lopt_135),
        .lopt_13(lopt_136),
        .lopt_14(lopt_137),
        .lopt_2(lopt_125),
        .lopt_3(lopt_126),
        .lopt_4(lopt_127),
        .lopt_5(lopt_128),
        .lopt_6(lopt_129),
        .lopt_7(lopt_130),
        .lopt_8(lopt_131),
        .lopt_9(lopt_132),
        .lu_mem_pre_pure_valid_tag_3(lu_mem_pre_pure_valid_tag_3),
        .lu_mem_valid_carry_3(lu_mem_valid_carry_3));
  Fast_IP_Clock_system_cache_0_0_carry_or_252 \Gen_Set_Cachehit_Mem[3].LU_Tag_Or_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lopt(lopt_132),
        .lopt_1(lopt_133),
        .lopt_2(lopt_134),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_mem_force_way(lu_mem_force_way),
        .lu_mem_masked_valid_tag_3(lu_mem_masked_valid_tag_3),
        .lu_mem_valid_tag_3(lu_mem_valid_tag_3));
  Fast_IP_Clock_system_cache_0_0_carry_or_253 \Gen_Set_Cachehit_Mem[3].LU_Tag_Or_Inst2 
       (.D(lu_mem_locked_write_3),
        .\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [3]),
        .\Using_FPGA.MUXCY_I_1 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2_n_1 ),
        .\Using_FPGA.MUXCY_I_2 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_3 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_4 (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .lookup_tag_current_word_i(lookup_tag_current_word_i[11]),
        .lopt(lopt_156),
        .lopt_1(lopt_157),
        .lopt_2(lopt_158),
        .lu_mem_protected_pre1_3(lu_mem_protected_pre1_3));
  Fast_IP_Clock_system_cache_0_0_carry_or_254 \Gen_Set_Cachehit_Mem[3].LU_Tag_Or_Inst3 
       (.\Using_FPGA.MUXCY_I_0 (\lu_check_valid_bits_reg[3]_0 [3]),
        .\Using_FPGA.MUXCY_I_1 (lu_mem_valid_reg_0),
        .\Using_FPGA.MUXCY_I_2 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_3 (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .lopt(lopt_159),
        .lopt_1(lopt_160),
        .lopt_2(lopt_161),
        .lu_check_write_alloc(lu_check_write_alloc),
        .lu_mem_protected_pre1_3(lu_mem_protected_pre1_3),
        .lu_mem_protected_pre2_3(lu_mem_protected_pre2_3),
        .lu_mem_write_alloc(lu_mem_write_alloc));
  Fast_IP_Clock_system_cache_0_0_carry_or_255 \Gen_Set_Cachehit_Mem[3].LU_Tag_Or_Inst4 
       (.D(lu_mem_protected[3]),
        .lopt(lopt_162),
        .lopt_1(lopt_163),
        .lu_mem_protected_pre2_3(lu_mem_protected_pre2_3));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_256 \Gen_Set_Data_En[0].LUD_WStep_PR_And_Inst1 
       (.ENA(ENA),
        .SRI(SRI_2),
        .lud_step_want_step_offset(lud_step_want_step_offset));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized6 \Gen_Set_Data_En[1].LUD_WStep_PR_And_Inst1 
       (.SRI(SRI_1),
        .lookup_data_en_ii_2(lookup_data_en_ii_2),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg_0),
        .lud_step_want_step_offset(lud_step_want_step_offset));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized6_257 \Gen_Set_Data_En[2].LUD_WStep_PR_And_Inst1 
       (.SRI(SRI_0),
        .lookup_data_en_ii_2(lookup_data_en_ii_2),
        .lookup_data_en_ii_3(lookup_data_en_ii_3),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg_1));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized6_258 \Gen_Set_Data_En[3].LUD_WStep_PR_And_Inst1 
       (.SRI(SRI),
        .lookup_data_en_ii_3(lookup_data_en_ii_3),
        .lookup_data_en_ii_4(lookup_data_en_ii_4),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_259 LUD_Addr_PR_And_Inst1
       (.S(S_15),
        .lopt(lopt_169),
        .lopt_1(lopt_170),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_check_wait_for_update_reg(LUD_Addr_PR_And_Inst1_n_1),
        .lud_addr_piperun_pre1(lud_addr_piperun_pre1),
        .lud_addr_piperun_pre2(lud_addr_piperun_pre2),
        .lud_mem_already_used(lud_mem_already_used));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_260 LUD_Addr_PR_Or_Inst1
       (.\Using_FPGA.MUXCY_I_0 (Chk_Valid_Inst_n_101),
        .lopt(lopt_169),
        .lopt_1(lopt_170),
        .lopt_2(S_15),
        .lopt_3(lopt_171),
        .lopt_4(lopt_172),
        .lopt_5(S_18),
        .lopt_6(lopt_173),
        .lopt_7(lopt_174),
        .lopt_8(S_14),
        .lud_addr_piperun_pre1(lud_addr_piperun_pre1),
        .lud_mem_piperun(lud_mem_piperun));
  Fast_IP_Clock_system_cache_0_0_carry_or_261 LUD_Addr_PR_Or_Inst2
       (.S(S_18),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (lud_mem_conflict),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (lud_mem_waiting_for_pipe_reg_3),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (Chk_Valid_Inst_n_24),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_2 (lu_mem_valid_reg_0),
        .lopt(lopt_171),
        .lopt_1(lopt_172),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(LUD_Addr_PR_Or_Inst2_n_1),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_addr_piperun_pre2(lud_addr_piperun_pre2),
        .lud_mem_piperun(lud_mem_piperun),
        .lud_mem_speculative_valid(lud_mem_speculative_valid),
        .lud_mem_speculative_valid_reg(LUD_Addr_PR_Or_Inst2_n_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_262 LUD_Mem_PR_And_Inst1
       (.I5(I5),
        .SR(p_10_out),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] (lud_mem_waiting_for_pipe_reg_3),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] (\Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[0].MUXF7_Inst_n_0 ),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0]_0 (\Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[1].MUXF7_Inst_n_0 ),
        .lookup_protect_conflict(lookup_protect_conflict),
        .\lookup_read_data_info[0,0][Last] (\lookup_read_data_info[0,0][Last] ),
        .lopt(lopt_166),
        .lopt_1(lopt_167),
        .lopt_2(lopt_168),
        .lud_mem_completed_reg(LUD_Mem_PR_And_Inst1_n_5),
        .lud_mem_delayed_read_data_reg(p_12_out),
        .lud_mem_delayed_read_data_reg_0(p_14_out),
        .lud_mem_delayed_read_data_reg_1(p_16_out),
        .lud_mem_keep_single_during_stall_reg(lud_mem_completed_reg_n_0),
        .lud_mem_keep_single_during_stall_reg_0(Chk_Valid_Inst_n_15),
        .lud_mem_last(lud_mem_last),
        .lud_mem_last_reg(LUD_Mem_PR_And_Inst1_n_7),
        .lud_mem_piperun(lud_mem_piperun),
        .\lud_mem_port_one_hot_reg[1] (LUD_Mem_PR_And_Inst1_n_6),
        .lud_reg_piperun(lud_reg_piperun),
        .\lud_reg_port_num_reg[0] (\lud_mem_port_one_hot_reg[1]_0 ),
        .\lud_reg_port_num_reg[0]_0 (\lud_reg_port_num_reg[0]_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_263 LUD_Read_PR_And_Inst1
       (.lopt(lopt_175),
        .lopt_1(lopt_176),
        .\lu_check_locked_hit_reg[3] (\lu_check_locked_hit_reg[3]_0 ),
        .lud_addr_pipeline_full_i_2_0(Chk_Valid_Inst_n_64),
        .lud_addr_pipeline_full_reg(LU_PC_And_Inst5_n_3),
        .lud_addr_pipeline_full_reg_0(Chk_Valid_Inst_n_6),
        .lud_step_offset(lud_step_offset));
  Fast_IP_Clock_system_cache_0_0_carry_select_or_n LUD_Reg_PR_Or_Inst1
       (.A_N(A_N),
        .\Using_FPGA.MUXCY_I (\lud_reg_port_num_reg[0]_0 ),
        .lopt(lopt_164),
        .lopt_1(lopt_165),
        .lopt_2(lud_reg_valid_reg_0),
        .lopt_3(lopt_166),
        .lopt_4(lopt_167),
        .lopt_5(lopt_168),
        .lud_reg_piperun_pre1(lud_reg_piperun_pre1),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_264 LUD_Reg_PR_Or_Inst2
       (.\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] (lud_reg_valid_reg_0),
        .lopt(lopt_164),
        .lopt_1(lopt_165),
        .lud_reg_piperun(lud_reg_piperun),
        .lud_reg_piperun_pre1(lud_reg_piperun_pre1));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_265 LUD_Step_PR_And_Inst1
       (.E(lookup_offset_first1),
        .Q(ARESET_I),
        .S(S_19),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (LUD_Step_PR_And_Inst1_n_2),
        .lookup_data_en_ii_4(lookup_data_en_ii_4),
        .lookup_last_beat(lookup_last_beat),
        .lookup_offset_first(lookup_offset_first),
        .lookup_offset_first_reg(Chk_Valid_Inst_n_53),
        .lookup_offset_first_reg_0(lud_mem_conflict),
        .lookup_offset_first_reg_1(lud_mem_waiting_for_pipe_reg_3),
        .\lookup_offset_len_cnt_reg[0] (LU_PC_And_Inst5_n_3),
        .\lookup_offset_len_cnt_reg[0]_0 (Chk_Valid_Inst_n_24),
        .lopt(lopt_175),
        .lopt_1(lopt_176),
        .lopt_2(Chk_Valid_Inst_n_64),
        .lud_step_offset(lud_step_offset));
  Fast_IP_Clock_system_cache_0_0_carry_or_266 LUD_WStep_PR_Or_Inst1
       (.S(S_14),
        .lopt(lopt_173),
        .lopt_1(lopt_174),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_step_want_step_offset(lud_step_want_step_offset));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_267 LU_Check_PR_And_Inst1
       (.Q({\lu_check_tag_hit_copy_wm_reg_n_0_[3] ,p_0_in16_in,p_1_in17_in,\lu_check_tag_hit_copy_wm_reg_n_0_[0] }),
        .lopt(lopt_179),
        .lopt_1(lopt_180),
        .lu_check_piperun_pre1(lu_check_piperun_pre1),
        .lu_check_piperun_pre2(lu_check_piperun_pre2),
        .\lu_check_tag_hit_copy_wm_reg[2] (LU_Check_PR_And_Inst1_n_1),
        .\update_old_tag_reg[Addr][13] (Chk_Valid_Inst_n_99));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_268 LU_Check_PR_And_Inst2
       (.S(\The_Compare[0].carry_and_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (LU_Check_PR_And_Inst2_n_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LU_Check_PR_And_Inst2_n_3),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (LU_Check_PR_And_Inst2_n_4),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (update_need_tag_write),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (Par_Reuse_Inst_n_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (Chk_Valid_Inst_n_66),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (LU_MD_And_Inst6_n_2),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (Chk_Valid_Inst_n_10),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 (update_valid),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_9 (Chk_Valid_Inst_n_21),
        .lookup_miss(lookup_miss),
        .lopt(lopt_181),
        .lopt_1(lopt_182),
        .lopt_2(S_17),
        .lopt_3(lopt_183),
        .lopt_4(lopt_184),
        .lopt_5(lopt_185),
        .lopt_6(lopt_186),
        .lopt_7(S_21),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_info_reg[Wr] (LU_Check_PR_And_Inst2_n_2),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_piperun(lu_check_piperun),
        .lu_check_piperun_pre2(lu_check_piperun_pre2),
        .lu_check_valid(lu_check_valid),
        .update_piperun(update_piperun));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_269 LU_Check_PR_Or_Inst1
       (.\Using_FPGA.MUXCY_I_0 (update_valid),
        .lopt(lopt_177),
        .lopt_1(lopt_178),
        .lu_check_piperun_pre1(lu_check_piperun_pre1),
        .update_piperun(update_piperun));
  Fast_IP_Clock_system_cache_0_0_carry_and_270 LU_Check_TagConf_And_Inst1
       (.A159_out(A159_out),
        .lopt(lopt_187),
        .lopt_1(lopt_188),
        .lu_check_match_addr(lu_check_match_addr),
        .lu_check_tag_conflict(lu_check_tag_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_compare_271 LU_Check_TagConf_Compare_Inst1
       (.D(\lu_check_info_reg[Addr][11]_0 [11:6]),
        .Q(Q[11:6]),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I_0 ),
        .lopt(lopt_187),
        .lopt_1(lopt_188),
        .lopt_2(A159_out),
        .lu_check_match_addr(lu_check_match_addr));
  Fast_IP_Clock_system_cache_0_0_carry_select_or LU_DHS_Or_Inst1
       (.\Using_FPGA.MUXCY_I (\lu_check_info_reg[Port_Num][0]_0 ),
        .lookup_data_hit_pre_stall(lookup_data_hit_pre_stall),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lopt(lopt_210),
        .lopt_1(lopt_211),
        .lopt_2(lopt_212),
        .lopt_3(lopt_213),
        .lopt_4(lopt_214),
        .lopt_5(lopt_215),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy));
  Fast_IP_Clock_system_cache_0_0_carry_or_272 LU_DHS_Or_Inst2
       (.S(S),
        .S_0(S_0),
        .\Using_FPGA.MUXCY_I_0 (lud_write_hit_done_reg_n_0),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .lookup_data_hit_pre_stall(lookup_data_hit_pre_stall),
        .lookup_data_hit_stall(lookup_data_hit_stall),
        .lookup_write_hit(lookup_write_hit),
        .lopt(lopt_213),
        .lopt_1(lopt_214),
        .lopt_2(lopt_215),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_valid(lu_check_valid),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg_1),
        .lud_write_hit_done0(lud_write_hit_done0),
        .lud_write_hit_done_i_2_0(Chk_Valid_Inst_n_52),
        .lud_write_hit_done_reg(lud_write_hit_done_reg_0),
        .update_write_data_ready(update_write_data_ready),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(\lu_check_info_reg[Port_Num][0]_0 ),
        .wr_port_data_valid_i_reg_0(lud_addr_pipeline_full_reg_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_273 LU_DS_IO_And_Inst1
       (.I5(I5),
        .\Using_FPGA.MUXCY_I_0 (lud_mem_completed_reg_n_0),
        .\Using_FPGA.MUXCY_I_1 (lud_addr_pipeline_full_reg_0),
        .lopt(lopt_216),
        .lopt_1(lopt_217),
        .lopt_2(lopt_218),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_io_full_block_read(lu_io_full_block_read),
        .lu_io_selected_full(lu_io_selected_full));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_274 LU_DS_IO_And_Inst2
       (.lookup_io_stall_carry(lookup_io_stall_carry),
        .lookup_io_stall_carry_no_wait(lookup_io_stall_carry_no_wait),
        .lopt(lopt_221),
        .lopt_1(lopt_222),
        .lopt_2(lopt_223),
        .lu_check_wait_for_update(lu_check_wait_for_update));
  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3 LU_DS_IO_And_Inst3
       (.A(reduce_or15_out__0),
        .Carry_IN(lookup_io_and_conflict_stall),
        .Carry_OUT(lookup_io_stall_hit_carry),
        .lopt(lopt_227),
        .lopt_1(lopt_228));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_275 LU_DS_IO_And_Inst4
       (.Carry_OUT(lookup_io_stall_hit_carry),
        .\Using_FPGA.MUXCY_I_0 (Late_Inst_n_2),
        .lookup_io_stall_hit_carry_no_last(lookup_io_stall_hit_carry_no_last),
        .lopt(lopt_229),
        .lopt_1(lopt_230));
  Fast_IP_Clock_system_cache_0_0_carry_and_276 LU_DS_IO_And_Inst5
       (.A172_out(A172_out),
        .lookup_io_stall_hit_carry_no_last(lookup_io_stall_hit_carry_no_last),
        .lookup_io_stall_pre_valid(lookup_io_stall_pre_valid),
        .lopt(lopt_231),
        .lopt_1(lopt_232));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_277 LU_DS_IO_And_Inst6
       (.lookup_io_stall_pre_valid(lookup_io_stall_pre_valid),
        .lookup_io_stall_valid(lookup_io_stall_valid),
        .lopt(lopt_233),
        .lopt_1(lopt_234),
        .lopt_2(lopt_235),
        .lopt_3(lopt_236),
        .lopt_4(lopt_237),
        .lopt_5(lopt_238),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized3 LU_DS_IO_And_Inst7
       (.Q({\lu_check_locked_hit_reg_n_0_[3] ,p_0_in1_in,\lu_check_locked_hit_reg_n_0_[1] ,\lu_check_locked_hit_reg_n_0_[0] }),
        .lookup_io_data_stall(lookup_io_data_stall),
        .lookup_io_stall_valid(lookup_io_stall_valid),
        .lopt(lopt_233),
        .lopt_1(lopt_234),
        .lopt_2(lopt_235),
        .lopt_3(lopt_236),
        .lopt_4(lopt_237),
        .lopt_5(lopt_238),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_select_or_278 LU_DS_IO_Or_Inst1
       (.\Using_FPGA.MUXCY_I (\lud_reg_port_num_reg[0]_0 ),
        .lopt(lopt_216),
        .lopt_1(lopt_217),
        .lopt_2(lopt_218),
        .lopt_3(lopt_219),
        .lopt_4(lopt_220),
        .lopt_5(S_13),
        .lu_io_selected_full(lu_io_selected_full),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ));
  Fast_IP_Clock_system_cache_0_0_carry_or_279 LU_DS_IO_Or_Inst2
       (.S(S_13),
        .lopt(lopt_219),
        .lopt_1(lopt_220),
        .lu_io_full_block_read(lu_io_full_block_read),
        .lu_io_lud_stall_pipe(lu_io_lud_stall_pipe));
  Fast_IP_Clock_system_cache_0_0_carry_select_or_280 LU_DS_IO_Or_Inst3
       (.\Using_FPGA.MUXCY_I (\lu_check_info_reg[Port_Num][0]_0 ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .lookup_io_stall_carry(lookup_io_stall_carry),
        .lopt(lopt_221),
        .lopt_1(lopt_222),
        .lopt_2(lopt_223),
        .lopt_3(lopt_224),
        .lopt_4(lopt_225),
        .lopt_5(lopt_226),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_io_lud_stall_pipe(lu_io_lud_stall_pipe));
  Fast_IP_Clock_system_cache_0_0_carry_select_or_281 LU_DS_IO_Or_Inst4
       (.Carry_IN(lookup_io_and_conflict_stall),
        .\Using_FPGA.MUXCY_I (\lu_check_info_reg[Port_Num][0]_0 ),
        .lookup_io_stall_carry_no_wait(lookup_io_stall_carry_no_wait),
        .lopt(lopt_224),
        .lopt_1(lopt_225),
        .lopt_10(lopt_232),
        .lopt_11(A172_out),
        .lopt_2(lopt_226),
        .lopt_3(lopt_227),
        .lopt_4(lopt_228),
        .lopt_5(reduce_or15_out__0),
        .lopt_6(lopt_229),
        .lopt_7(lopt_230),
        .lopt_8(Late_Inst_n_2),
        .lopt_9(lopt_231),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy));
  Fast_IP_Clock_system_cache_0_0_carry_and_282 LU_DS_LB_And_Inst0
       (.lopt(lopt_239),
        .lopt_1(lu_ds_last_beat_next_last_n_reg_n_0),
        .lopt_2(A46_out),
        .lopt_3(lopt_240),
        .lopt_4(lopt_241),
        .lopt_5(lopt_242),
        .lopt_6(lopt_243),
        .lopt_7(lopt_244),
        .lopt_8(reduce_or11_out__0),
        .lu_check_multi_beat(lu_check_multi_beat),
        .lu_ds_last_beat_multi_start(lu_ds_last_beat_multi_start));
  Fast_IP_Clock_system_cache_0_0_carry_and_di LU_DS_LB_And_Inst1
       (.A46_out(A46_out),
        .\Using_FPGA.MUXCY_I_0 (lu_ds_last_beat_next_last_n_reg_n_0),
        .lopt(lopt_239),
        .lu_ds_last_beat(lu_ds_last_beat),
        .lu_ds_last_beat_multi_start(lu_ds_last_beat_multi_start));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_283 LU_DS_LB_And_Inst2
       (.Carry_IN(lu_ds_last_beat_no_wait),
        .\Using_FPGA.MUXCY_I_0 (lud_write_hit_done_reg_n_0),
        .lopt(lopt_240),
        .lopt_1(lopt_241),
        .lopt_2(lopt_242),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_ds_last_beat(lu_ds_last_beat));
  Fast_IP_Clock_system_cache_0_0_carry_and__parameterized3_284 LU_DS_LB_And_Inst3
       (.A(reduce_or11_out__0),
        .Carry_IN(lu_ds_last_beat_no_wait),
        .Carry_OUT(lu_ds_last_beat_hit),
        .lopt(lopt_243),
        .lopt_1(lopt_244));
  Fast_IP_Clock_system_cache_0_0_carry_and_285 LU_DS_LB_And_Inst4
       (.Carry_OUT(lu_ds_last_beat_hit),
        .lopt(lopt_245),
        .lopt_1(lopt_246),
        .lopt_2(lopt_247),
        .lopt_3(lopt_248),
        .lopt_4(lopt_249),
        .lopt_5(lopt_250),
        .lopt_6(lopt_251),
        .lopt_7(lopt_252),
        .lopt_8(lopt_253),
        .lu_check_valid(lu_check_valid),
        .lu_ds_last_beat_valid_hit(lu_ds_last_beat_valid_hit));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_286 LU_DS_LB_And_Inst5
       (.Carry_IN(lu_ds_last_beat_valid),
        .lopt(lopt_245),
        .lopt_1(lopt_246),
        .lopt_2(lopt_247),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_ds_last_beat_valid_hit(lu_ds_last_beat_valid_hit));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized5 LU_DS_LB_And_Inst6
       (.Carry_IN(lu_ds_last_beat_valid),
        .Carry_OUT(lu_ds_last_beat_stall_pre),
        .Q(lu_check_locked_hit_copy_lb),
        .lopt(lopt_248),
        .lopt_1(lopt_249),
        .lopt_2(lopt_250),
        .lopt_3(lopt_251),
        .lopt_4(lopt_252),
        .lopt_5(lopt_253),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized7 LU_DS_RS_And_Inst1
       (.Carry_Out(lu_ds_rs_miss),
        .Q(lu_check_tag_hit_copy_rs),
        .lopt(lopt_254),
        .lopt_1(lopt_255),
        .lopt_2(Chk_Valid_Inst_n_111),
        .lopt_3(lopt_256),
        .lopt_4(lopt_257),
        .lopt_5(lopt_258),
        .lopt_6(lopt_259),
        .lopt_7(lopt_260),
        .lopt_8(lopt_261));
  Fast_IP_Clock_system_cache_0_0_carry_and_287 LU_DS_RS_And_Inst2
       (.Carry_Out(lu_ds_rs_miss),
        .\Using_FPGA.MUXCY_I_0 (Chk_Valid_Inst_n_111),
        .lopt(lopt_254),
        .lopt_1(lopt_255),
        .lu_ds_rs_read_miss(lu_ds_rs_read_miss));
  Fast_IP_Clock_system_cache_0_0_carry_and_288 LU_DS_RS_And_Inst3
       (.\Using_FPGA.MUXCY_I_0 (lu_mem_valid_reg_0),
        .lopt(lopt_256),
        .lopt_1(lopt_257),
        .lopt_2(lopt_258),
        .lu_ds_rs_new_read_no_rs(lu_ds_rs_new_read_no_rs),
        .lu_ds_rs_read_miss(lu_ds_rs_read_miss),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_289 LU_DS_RS_And_Inst4
       (.\Using_FPGA.MUXCY_I_0 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I_1 (lud_addr_pipeline_full_reg_0),
        .lopt(lopt_259),
        .lopt_1(lopt_260),
        .lopt_2(lopt_261),
        .lu_ds_rs_del_restart_no_rs(lu_ds_rs_del_restart_no_rs),
        .lu_ds_rs_new_read_no_rs(lu_ds_rs_new_read_no_rs));
  Fast_IP_Clock_system_cache_0_0_carry_and_290 LU_DS_RS_And_Inst5
       (.\Using_FPGA.MUXCY_I_0 (lud_mem_conflict),
        .lookup_restart_mem_done(lookup_restart_mem_done),
        .lu_ds_lb_delayed_restart_conflict(lu_ds_lb_delayed_restart_conflict),
        .lu_ds_rs_del_restart_no_rs(lu_ds_rs_del_restart_no_rs));
  Fast_IP_Clock_system_cache_0_0_carry_and_291 LU_Data_WE_And_Inst1
       (.lookup_raw_hit_carry2(lookup_raw_hit_carry2),
        .lopt(lopt_262),
        .lopt_1(lopt_263),
        .lu_check_tag_hit_all_carry(lu_check_tag_hit_all_carry),
        .lu_check_valid(lu_check_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_292 LU_Data_WE_And_Inst2
       (.lookup_hit_carry(lookup_hit_carry),
        .lookup_raw_hit_carry2(lookup_raw_hit_carry2),
        .lopt(lopt_264),
        .lopt_1(lopt_265),
        .lopt_2(lopt_266));
  Fast_IP_Clock_system_cache_0_0_carry_and_293 LU_Data_WE_And_Inst3
       (.lookup_hit_carry(lookup_hit_carry),
        .lookup_write_hit_carry(lookup_write_hit_carry),
        .lopt(lopt_267),
        .lopt_1(lopt_268),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_select_and_n LU_Data_WE_And_Inst4
       (.Carry_In(lookup_write_hit_no_busy),
        .\Using_FPGA.MUXCY_I (\lu_check_info_reg[Port_Num][0]_0 ),
        .lookup_write_hit_carry(lookup_write_hit_carry),
        .lopt(lopt_269),
        .lopt_1(lopt_270),
        .lopt_2(lopt_271),
        .lopt_3(lopt_272),
        .lopt_4(lopt_273),
        .lopt_5(\The_Compare[0].sel_reg ),
        .update_write_miss_busy(update_write_miss_busy));
  Fast_IP_Clock_system_cache_0_0_carry_select_and_294 LU_Data_WE_And_Inst5
       (.A(A),
        .Carry_Out(lookup_write_hit_no_conflict),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (lookup_wm_allow_write),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (\lu_check_info_reg[Port_Num][0]_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .WEA(WEA),
        .lopt(lopt_272),
        .lopt_1(lopt_273),
        .lu_check_wait_for_update(lu_check_wait_for_update));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized9 LU_Data_WE_Const_Inst1
       (.Carry_In(lookup_write_hit_no_busy),
        .Carry_Out(lookup_write_hit_no_conflict),
        .Q({\lu_check_locked_write_reg_n_0_[3] ,p_0_in28_in,p_1_in29_in,\lu_check_locked_write_reg_n_0_[0] }),
        .lopt(lopt_269),
        .lopt_1(lopt_270),
        .lopt_2(lopt_271));
  Fast_IP_Clock_system_cache_0_0_carry_vec_or LU_Data_WE_Or_Inst1
       (.Q({p_6_in,p_0_in4_in,p_1_in5_in,\lu_check_tag_hit_reg_n_0_[0] }),
        .lopt(lopt_262),
        .lopt_1(lopt_263),
        .lopt_2(lu_check_valid),
        .lopt_3(lopt_264),
        .lopt_4(lopt_265),
        .lopt_5(lopt_266),
        .lopt_6(lopt_267),
        .lopt_7(lopt_268),
        .lopt_8(\lu_check_info_reg[Wr]__0 ),
        .lu_check_tag_hit_all_carry(lu_check_tag_hit_all_carry));
  Fast_IP_Clock_system_cache_0_0_carry_and_295 LU_Fetch_PR_And_Inst1
       (.\Using_FPGA.MUXCY_I_0 (lookup_mem_piperun),
        .lopt(lopt_274),
        .lopt_1(lopt_275),
        .lopt_2(lu_mem_valid_reg_0),
        .lopt_3(lopt_276),
        .lopt_4(lopt_277),
        .lopt_5(LU_PC_And_Inst5_n_17),
        .lopt_6(lopt_278),
        .lopt_7(lopt_279),
        .lopt_8(access_valid),
        .lu_fetch_piperun_pre2(lu_fetch_piperun_pre2));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_296 LU_Fetch_PR_And_Inst2
       (.Q(ARESET_I),
        .lopt(lopt_276),
        .lopt_1(lopt_277),
        .lu_fetch_piperun_pre1(lu_fetch_piperun_pre1),
        .\lu_mem_info_reg[Port_Num][0] (LU_PC_And_Inst5_n_17),
        .lu_mem_protect_conflict_reg(lookup_fetch_piperun),
        .lu_mem_release_lock_hold(lu_mem_release_lock_hold));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_297 LU_Fetch_PR_Or_Inst2
       (.lopt(lopt_274),
        .lopt_1(lopt_275),
        .lu_fetch_piperun_pre1(lu_fetch_piperun_pre1),
        .lu_fetch_piperun_pre2(lu_fetch_piperun_pre2),
        .\lu_mem_info_reg[Port_Num][0] (lu_mem_valid_reg_0));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_298 LU_LRU_Latch_Inst1
       (.SRI(SRI_16),
        .WEBWE(WEBWE),
        .lu_check_piperun(lu_check_piperun));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized11 LU_MD_And_Inst1
       (.Carry_IN(dirty_bit_miss),
        .\Using_FPGA_Keep.MUXCY_I (Chk_Valid_Inst_n_97),
        .lopt(lopt_280),
        .lopt_1(lopt_281),
        .lopt_2(lopt_282),
        .lopt_3(lopt_283),
        .lopt_4(lopt_284),
        .lopt_5(Chk_Valid_Inst_n_100),
        .lopt_6(lopt_285),
        .lopt_7(lopt_286),
        .lopt_8(\The_Compare[0].carry_and_I1/S_22 ),
        .lru_dirty_bit(lru_dirty_bit));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized7_299 LU_MD_And_Inst2
       (.Carry_IN(dirty_bit_miss),
        .Carry_OUT(dirty_bit_miss_valid),
        .Q(lu_check_tag_hit_copy_md),
        .lopt(lopt_280),
        .lopt_1(lopt_281),
        .lopt_2(lopt_282));
  Fast_IP_Clock_system_cache_0_0_carry_and_300 LU_MD_And_Inst3
       (.Carry_OUT(dirty_bit_miss_valid),
        .\Using_FPGA.MUXCY_I_0 (Chk_Valid_Inst_n_100),
        .dirty_miss_valid(dirty_miss_valid),
        .lopt(lopt_283),
        .lopt_1(lopt_284));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized3_301 LU_MD_And_Inst4
       (.Q({p_6_in,p_0_in4_in,p_1_in5_in,\lu_check_tag_hit_reg_n_0_[0] }),
        .dirty_bit(dirty_bit),
        .dirty_bit_valid(dirty_bit_valid),
        .lopt(lopt_287),
        .lopt_1(lopt_288),
        .lopt_2(lopt_289),
        .lopt_3(lopt_290),
        .lopt_4(lopt_291),
        .lopt_5(lopt_292),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_302 LU_MD_And_Inst5
       (.dirty_bit_valid(dirty_bit_valid),
        .lookup_miss_dirty_pre(lookup_miss_dirty_pre),
        .lopt(lopt_293),
        .lopt_1(lopt_294),
        .lopt_2(lopt_295));
  Fast_IP_Clock_system_cache_0_0_carry_and_303 LU_MD_And_Inst6
       (.S(\The_Compare[0].carry_and_I1/S ),
        .lookup_miss_dirty(lookup_miss_dirty),
        .lookup_miss_dirty_pre(lookup_miss_dirty_pre),
        .lookup_wm_evict(lookup_wm_evict),
        .lopt(lopt_296),
        .lopt_1(lopt_297),
        .lopt_2(lopt_298),
        .lopt_3(lopt_299),
        .lopt_4(lopt_300),
        .lopt_5(lopt_301),
        .lopt_6(lopt_302),
        .lopt_7(lopt_303),
        .lopt_8(lopt_304),
        .\lu_check_info_reg[Evict] (LU_MD_And_Inst6_n_2),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_valid(lu_check_valid),
        .wm_evict_reg(\lu_check_info_reg[Keep_n_0_] ));
  Fast_IP_Clock_system_cache_0_0_carry_select_or__parameterized2 LU_MD_Or_Inst1
       (.S_4(S_4),
        .S_5(S_5),
        .S_6(S_6),
        .S_7(S_7),
        .lru_dirty_bit(lru_dirty_bit));
  Fast_IP_Clock_system_cache_0_0_carry_vec_or__parameterized1 LU_MD_Or_Inst3
       (.S(\The_Compare[0].carry_and_I1/S_22 ),
        .S_0(\The_Compare[1].carry_and_I1/S ),
        .dirty_bit(dirty_bit),
        .dirty_miss_valid(dirty_miss_valid),
        .lopt(lopt_285),
        .lopt_1(lopt_286),
        .lopt_10(lopt_295),
        .lopt_2(lopt_287),
        .lopt_3(lopt_288),
        .lopt_4(lopt_289),
        .lopt_5(lopt_290),
        .lopt_6(lopt_291),
        .lopt_7(lopt_292),
        .lopt_8(lopt_293),
        .lopt_9(lopt_294));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_304 LU_Mem_PR_And_Inst1
       (.Q(ARESET_I),
        .S(S_21),
        .S_0(S_20),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lud_mem_completed_reg_n_0),
        .access_valid(access_valid),
        .\arb_access_i_reg[Valid] (LU_Mem_PR_And_Inst1_n_2),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lopt(lopt_185),
        .lopt_1(lopt_186),
        .lu_mem_piperun_pre1(lu_mem_piperun_pre1),
        .lu_mem_valid_reg(lookup_mem_piperun),
        .lu_mem_valid_reg_0(lookup_fetch_piperun),
        .lu_mem_valid_reg_1(lu_mem_valid_reg_0),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .lud_mem_waiting_for_pipe_reg(LU_Mem_PR_And_Inst1_n_1),
        .lud_mem_waiting_for_pipe_reg_0(LU_Mem_PR_And_Inst1_n_4),
        .lud_mem_waiting_for_pipe_reg_1(LU_PC_And_Inst5_n_2),
        .lud_mem_waiting_for_pipe_reg_2(Chk_Valid_Inst_n_32),
        .lud_mem_waiting_for_pipe_reg_3(lud_mem_waiting_for_pipe_reg_3),
        .lud_write_hit_done(lud_write_hit_done));
  Fast_IP_Clock_system_cache_0_0_carry_latch_or__parameterized1 LU_Mem_PR_Latch_Inst1
       (.E(lu_mem_piperun_or_conflict),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst (lookup_mem_piperun),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 (lud_mem_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_or_305 LU_Mem_PR_Or_Inst1
       (.S(S_17),
        .lopt(lopt_181),
        .lopt_1(lopt_182),
        .lu_check_piperun(lu_check_piperun),
        .lu_mem_piperun_pre2(lu_mem_piperun_pre2));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_306 LU_Mem_PR_Or_Inst2
       (.lopt(lopt_183),
        .lopt_1(lopt_184),
        .lu_check_valid(lu_check_valid),
        .lu_mem_piperun_pre1(lu_mem_piperun_pre1),
        .lu_mem_piperun_pre2(lu_mem_piperun_pre2));
  Fast_IP_Clock_system_cache_0_0_carry_and_307 LU_Mem_TagConf_And_Inst1
       (.A161_out(A161_out),
        .lopt(lopt_305),
        .lopt_1(lopt_306),
        .lu_mem_match_addr(lu_mem_match_addr),
        .lu_mem_tag_conflict(lu_mem_tag_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_compare_308 LU_Mem_TagConf_Compare_Inst1
       (.Q(Q[11:6]),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .\Using_FPGA.MUXCY_I_0 (B_Vec[1]),
        .\Using_FPGA.MUXCY_I_1 (B_Vec[0]),
        .\Using_FPGA.MUXCY_I_2 (B_Vec[2]),
        .\Using_FPGA.MUXCY_I_3 (B_Vec[4]),
        .\Using_FPGA.MUXCY_I_4 (B_Vec[3]),
        .\Using_FPGA.MUXCY_I_5 (B_Vec[5]),
        .lopt(lopt_305),
        .lopt_1(lopt_306),
        .lopt_2(A161_out),
        .lu_mem_match_addr(lu_mem_match_addr));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized11_309 LU_PC_And_Inst1
       (.Carry_IN(protected_bit_miss),
        .Q(lu_check_valid_bits),
        .lopt(lopt_189),
        .lopt_1(lopt_190),
        .lopt_2(lopt_191),
        .lopt_3(lopt_192),
        .lopt_4(lopt_193),
        .lopt_5(A187_out),
        .lopt_6(lopt_194),
        .lopt_7(lopt_195),
        .lopt_8(lopt_196),
        .lru_protected_bit(lru_protected_bit));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized7_310 LU_PC_And_Inst2
       (.Carry_In(protected_bit_miss),
        .Carry_Out(protected_bit_miss_valid),
        .Q(lu_check_tag_hit_copy_pc),
        .lopt(lopt_189),
        .lopt_1(lopt_190),
        .lopt_2(lopt_191));
  Fast_IP_Clock_system_cache_0_0_carry_and_311 LU_PC_And_Inst3
       (.A187_out(A187_out),
        .Carry_Out(protected_bit_miss_valid),
        .lopt(lopt_192),
        .lopt_1(lopt_193),
        .protected_miss_valid(protected_miss_valid));
  Fast_IP_Clock_system_cache_0_0_carry_select_and_n__parameterized1 LU_PC_And_Inst4
       (.\Using_FPGA.MUXCY_I (\lu_check_protected_reg[3]_0 ),
        .filtered_protection_bit(filtered_protection_bit),
        .lopt(lopt_197),
        .lopt_1(lopt_198),
        .lopt_10(lopt_207),
        .lopt_11(lopt_208),
        .lopt_12(lopt_209),
        .lopt_13(lu_check_valid),
        .lopt_14(lopt_210),
        .lopt_15(lopt_211),
        .lopt_16(lopt_212),
        .lopt_2(lopt_199),
        .lopt_3(lopt_200),
        .lopt_4(lopt_201),
        .lopt_5(lopt_202),
        .lopt_6(lopt_203),
        .lopt_7(lopt_204),
        .lopt_8(lopt_205),
        .lopt_9(lopt_206),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .protected_bit(protected_bit));
  Fast_IP_Clock_system_cache_0_0_carry_and_312 LU_PC_And_Inst5
       (.A35_out(A35_out),
        .Carry_OUT(lu_ds_last_beat_stall_pre),
        .D({D,\lu_check_info_reg[Addr][11]_0 [11:6]}),
        .DPRA(DPRA),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] (\lu_mem_info_reg[Addr][12]_0 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 (Q[12:6]),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_1 (B_Vec[5]),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_2 (B_Vec[4]),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_3 (B_Vec[3]),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_4 (B_Vec[2]),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_5 (B_Vec[1]),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_6 (B_Vec[0]),
        .Q(ARESET_I),
        .S(S_21),
        .S_0(S_20),
        .S_1(\The_Compare[0].carry_and_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg ({\lu_check_locked_hit_reg_n_0_[3] ,p_0_in1_in,\lu_check_locked_hit_reg_n_0_[1] ,\lu_check_locked_hit_reg_n_0_[0] }),
        .\Using_FPGA.MUXCY_I_i_2__3 (lud_addr_pipeline_full_reg_0),
        .lookup_io_data_stall(lookup_io_data_stall),
        .lookup_last_beat(lookup_last_beat),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_read_done_i(lookup_read_done_i),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_restart_mem_done(lookup_restart_mem_done),
        .lookup_restart_mem_done_reg(LU_PC_And_Inst5_n_18),
        .lookup_restart_mem_done_reg_0(lud_mem_conflict),
        .lookup_restart_mem_done_reg_1(lookup_mem_piperun),
        .lopt(lopt_208),
        .lopt_1(lopt_209),
        .\lu_check_locked_hit_reg[3] (LU_PC_And_Inst5_n_3),
        .\lu_check_locked_hit_reg[3]_0 (\lu_check_locked_hit_reg[3]_1 ),
        .lu_check_read_info_done(lu_check_read_info_done),
        .lu_check_read_info_done_reg(Chk_Valid_Inst_n_27),
        .lu_check_tag_conflict(lu_check_tag_conflict),
        .lu_check_valid(lu_check_valid),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_ds_lb_delayed_restart_conflict(lu_ds_lb_delayed_restart_conflict),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(LU_PC_And_Inst5_n_17),
        .lu_mem_tag_conflict(lu_mem_tag_conflict),
        .lu_mem_valid_reg(LU_PC_And_Inst5_n_2),
        .lud_addr_pipeline_full_reg(LU_PC_And_Inst5_n_16),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_completed_reg(LU_PC_And_Inst5_n_1),
        .lud_mem_completed_reg_0(lud_mem_completed_reg_n_0),
        .lud_mem_completed_reg_1(lu_mem_valid_reg_0),
        .lud_mem_completed_reg_2(Chk_Valid_Inst_n_24),
        .lud_mem_piperun(lud_mem_piperun),
        .lud_step_delayed_restart(lud_step_delayed_restart),
        .p_223_in(p_223_in),
        .protection_with_coherency(protection_with_coherency),
        .update_tag_conflict(update_tag_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_select_or__parameterized2_313 LU_PC_Or_Inst1
       (.S_10(S_10),
        .S_11(S_11),
        .S_8(S_8),
        .S_9(S_9),
        .lru_protected_bit(lru_protected_bit));
  Fast_IP_Clock_system_cache_0_0_carry_vec_or__parameterized1_314 LU_PC_Or_Inst3
       (.Q({p_6_in,p_0_in4_in,p_1_in5_in,\lu_check_tag_hit_reg_n_0_[0] }),
        .\Using_FPGA.MUXCY_I (\lu_check_protected_reg[3]_0 ),
        .lopt(lopt_194),
        .lopt_1(lopt_195),
        .lopt_10(lopt_204),
        .lopt_11(lopt_205),
        .lopt_2(lopt_196),
        .lopt_3(lopt_197),
        .lopt_4(lopt_198),
        .lopt_5(lopt_199),
        .lopt_6(lopt_200),
        .lopt_7(lopt_201),
        .lopt_8(lopt_202),
        .lopt_9(lopt_203),
        .protected_bit(protected_bit),
        .protected_miss_valid(protected_miss_valid));
  Fast_IP_Clock_system_cache_0_0_carry_or_315 LU_PC_Or_Inst4
       (.filtered_protection_bit(filtered_protection_bit),
        .lopt(lopt_206),
        .lopt_1(lopt_207),
        .protection_with_coherency(protection_with_coherency));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_316 LU_PR_Or_Inst1
       (.\Using_FPGA.MUXCY_I_0 (lookup_fetch_piperun),
        .access_valid(access_valid),
        .lookup_piperun(lookup_piperun),
        .lopt(lopt_278),
        .lopt_1(lopt_279));
  Fast_IP_Clock_system_cache_0_0_carry_latch_or__parameterized1_317 LU_Tag_En_Latch_Inst1
       (.A35_out(A35_out),
        .E(E),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] (lookup_fetch_piperun));
  Fast_IP_Clock_system_cache_0_0_carry_and_318 LU_WMS_And_Inst1
       (.lookup_push_wm_stall(lookup_push_wm_stall),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .lopt(lopt_312),
        .lopt_1(lopt_313),
        .update_write_miss_full(update_write_miss_full));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_319 LU_WM_And_Inst0
       (.lookup_miss_dirty(lookup_miss_dirty),
        .lookup_miss_dirty_no_clean(lookup_miss_dirty_no_clean),
        .lopt(lopt_296),
        .lopt_1(lopt_297),
        .lopt_2(lopt_298),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_320 LU_WM_And_Inst1
       (.lookup_md_or_wm_or_whne2(lookup_md_or_wm_or_whne2),
        .lookup_md_wm_whne_valid(lookup_md_wm_whne_valid),
        .lopt(lopt_307),
        .lopt_1(lopt_308),
        .lu_check_valid(lu_check_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_321 LU_WM_And_Inst2
       (.lookup_md_wm_whne_valid(lookup_md_wm_whne_valid),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .lopt(lopt_309),
        .lopt_1(lopt_310),
        .lopt_2(lopt_311),
        .lu_check_wait_for_update(lu_check_wait_for_update));
  Fast_IP_Clock_system_cache_0_0_carry_or__parameterized2 LU_WM_Or_Inst1
       (.Q({\lu_check_tag_hit_copy_wm_reg_n_0_[3] ,p_0_in16_in,p_1_in17_in,\lu_check_tag_hit_copy_wm_reg_n_0_[0] }),
        .lookup_md_or_wm(lookup_md_or_wm),
        .lookup_miss_dirty_no_clean(lookup_miss_dirty_no_clean),
        .lopt(lopt_299),
        .lopt_1(lopt_300),
        .lopt_2(lopt_301),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ));
  Fast_IP_Clock_system_cache_0_0_carry_or__parameterized2_322 LU_WM_Or_Inst2
       (.lookup_md_or_wm(lookup_md_or_wm),
        .lookup_md_or_wm_or_whne(lookup_md_or_wm_or_whne),
        .lopt(lopt_302),
        .lopt_1(lopt_303),
        .lopt_2(lopt_304));
  Fast_IP_Clock_system_cache_0_0_carry_or__parameterized2_323 LU_WM_Or_Inst3
       (.lookup_md_or_wm_or_whne(lookup_md_or_wm_or_whne),
        .lookup_md_or_wm_or_whne2(lookup_md_or_wm_or_whne2),
        .lopt(lopt_307),
        .lopt_1(lopt_308),
        .lopt_2(lu_check_valid),
        .lopt_3(lopt_309),
        .lopt_4(lopt_310),
        .lopt_5(lopt_311),
        .lopt_6(lopt_312),
        .lopt_7(lopt_313),
        .lopt_8(update_write_miss_full));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_324 Late_Inst
       (.A46_out(A46_out),
        .ACLK(ACLK),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (lookup_mem_piperun),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (LUD_Addr_PR_Or_Inst2_n_1),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (lud_mem_conflict),
        .\Using_FPGA.MUXCY_I (\lu_check_info_delayed_reg[Wr_n_0_] ),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_offset_first(lookup_offset_first),
        .lookup_read_hit_d1(lookup_read_hit_d1),
        .\lu_check_info_reg[Wr]__0 (\lu_check_info_reg[Wr]__0 ),
        .lu_check_valid_delayed(lu_check_valid_delayed),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_already_used_reg(Late_Inst_n_2),
        .lud_mem_last(lud_mem_last),
        .lud_mem_speculative_valid(lud_mem_speculative_valid));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'h40CCFFFF)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4__0 
       (.I0(lru_check_next_way[0]),
        .I1(lu_check_valid_bits[1]),
        .I2(lu_check_valid_bits[3]),
        .I3(lu_check_valid_bits[2]),
        .I4(lu_check_valid_bits[0]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4__0_n_0 ));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized11 Par_Dirty_Inst
       (.ACLK(ACLK),
        .E(lu_mem_piperun_or_conflict),
        .Q(lu_check_tag_hit_copy_md),
        .S(\The_Compare[0].carry_and_I1/S_22 ),
        .S_0(\The_Compare[1].carry_and_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [11]),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [11]),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [11]),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 (Par_Dirty_Inst_n_0),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_2 (lud_mem_conflict),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_3 (ARESET_I),
        .hit_way_i(hit_way_i),
        .lookup_tag_current_word_i(lookup_tag_current_word_i[11]),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized11_325 Par_Locked_Inst
       (.ACLK(ACLK),
        .E(lu_mem_piperun_or_conflict),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 (lud_mem_conflict),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\lu_check_info_reg[Allocate] (Par_Locked_Inst_n_0),
        .\lu_check_info_reg[Allocate]__0 (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .lu_check_piperun(lu_check_piperun),
        .update_reused_tag(update_reused_tag),
        .update_reused_tag_reg(Chk_Valid_Inst_n_13),
        .update_reused_tag_reg_0(Chk_Valid_Inst_n_69),
        .update_reused_tag_reg_1(Chk_Valid_Inst_n_70));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized11_326 Par_Reuse_Inst
       (.ACLK(ACLK),
        .E(lu_mem_piperun_or_conflict),
        .Q(ARESET_I),
        .S(\The_Compare[0].carry_and_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_0 (Chk_Valid_Inst_n_69),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_1 (Chk_Valid_Inst_n_70),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 (lud_mem_conflict),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\lu_check_info_reg[Allocate] (Par_Reuse_Inst_n_0),
        .\lu_check_info_reg[Allocate]_0 (Par_Reuse_Inst_n_1),
        .\lu_check_info_reg[Allocate]__0 (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_info_reg[Evict]__0 (\lu_check_info_reg[Evict]__0 ),
        .\update_info_reg[Allocate] (Chk_Valid_Inst_n_27),
        .\update_info_reg[Allocate]_0 (Chk_Valid_Inst_n_21));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__16 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_327 TAG_Need_Inst
       (.ACLK(ACLK),
        .I206(I206),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 (\update_info_reg[Evict]_0 ),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_1 (update_valid),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_2 (\update_info[Allocate] ),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (update_need_tag_write),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (LU_Check_PR_And_Inst2_n_1),
        .update_first_write_hit(update_first_write_hit),
        .update_miss(update_miss),
        .update_readback_available(update_readback_available),
        .update_reused_tag(update_reused_tag),
        .update_write_miss(update_write_miss));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_328 USpec_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_33),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (lu_mem_valid_reg_0),
        .\lu_mem_info_reg[Wr]__0 (\lu_mem_info_reg[Wr]__0 ),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .p_200_in(p_200_in));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_329 Ud_Valid_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (update_valid),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LU_Check_PR_And_Inst2_n_4));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFFF0000FFFEFFFE)) 
    \Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[0].LUT_Inst 
       (.I0(p_1_in5_in),
        .I1(p_6_in),
        .I2(1'b0),
        .I3(1'b0),
        .I4(\lud_mem_way_d1_reg_n_0_[0] ),
        .I5(I5),
        .O5(hit_way_i[0]),
        .O6(read_idx_i0_0));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[0].MUXF7_Inst 
       (.I0(read_idx_i0_0),
        .I1(\lud_mem_way_d1_reg_n_0_[0] ),
        .O(\Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[0].MUXF7_Inst_n_0 ),
        .S(S_12));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFFF0000FFFEFFFE)) 
    \Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[1].LUT_Inst 
       (.I0(p_0_in4_in),
        .I1(p_6_in),
        .I2(1'b0),
        .I3(1'b0),
        .I4(I4),
        .I5(I5),
        .O5(hit_way_i[1]),
        .O6(read_idx_i0_1));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[1].MUXF7_Inst 
       (.I0(read_idx_i0_1),
        .I1(I4),
        .O(\Use_Par_RdData.Use_FPGA.Use_4_8.Gen_Detect[1].MUXF7_Inst_n_0 ),
        .S(S_12));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [0]),
        .Q(\lookup_read_data_info[0,0][Data][0] [0]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][10] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [10]),
        .Q(\lookup_read_data_info[0,0][Data][0] [10]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][11] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [11]),
        .Q(\lookup_read_data_info[0,0][Data][0] [11]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][12] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [12]),
        .Q(\lookup_read_data_info[0,0][Data][0] [12]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][13] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [13]),
        .Q(\lookup_read_data_info[0,0][Data][0] [13]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][14] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [14]),
        .Q(\lookup_read_data_info[0,0][Data][0] [14]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][15] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [15]),
        .Q(\lookup_read_data_info[0,0][Data][0] [15]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][16] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [16]),
        .Q(\lookup_read_data_info[0,0][Data][0] [16]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][17] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [17]),
        .Q(\lookup_read_data_info[0,0][Data][0] [17]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][18] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [18]),
        .Q(\lookup_read_data_info[0,0][Data][0] [18]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][19] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [19]),
        .Q(\lookup_read_data_info[0,0][Data][0] [19]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][1] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [1]),
        .Q(\lookup_read_data_info[0,0][Data][0] [1]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][20] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [20]),
        .Q(\lookup_read_data_info[0,0][Data][0] [20]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][21] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [21]),
        .Q(\lookup_read_data_info[0,0][Data][0] [21]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][22] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [22]),
        .Q(\lookup_read_data_info[0,0][Data][0] [22]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][23] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [23]),
        .Q(\lookup_read_data_info[0,0][Data][0] [23]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][24] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [24]),
        .Q(\lookup_read_data_info[0,0][Data][0] [24]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][25] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [25]),
        .Q(\lookup_read_data_info[0,0][Data][0] [25]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][26] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [26]),
        .Q(\lookup_read_data_info[0,0][Data][0] [26]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][27] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [27]),
        .Q(\lookup_read_data_info[0,0][Data][0] [27]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][28] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [28]),
        .Q(\lookup_read_data_info[0,0][Data][0] [28]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][29] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [29]),
        .Q(\lookup_read_data_info[0,0][Data][0] [29]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][2] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [2]),
        .Q(\lookup_read_data_info[0,0][Data][0] [2]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][30] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [30]),
        .Q(\lookup_read_data_info[0,0][Data][0] [30]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [31]),
        .Q(\lookup_read_data_info[0,0][Data][0] [31]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][3] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [3]),
        .Q(\lookup_read_data_info[0,0][Data][0] [3]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][4] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [4]),
        .Q(\lookup_read_data_info[0,0][Data][0] [4]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][5] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [5]),
        .Q(\lookup_read_data_info[0,0][Data][0] [5]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][6] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [6]),
        .Q(\lookup_read_data_info[0,0][Data][0] [6]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][7] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [7]),
        .Q(\lookup_read_data_info[0,0][Data][0] [7]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][8] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [8]),
        .Q(\lookup_read_data_info[0,0][Data][0] [8]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][9] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31]_0 [9]),
        .Q(\lookup_read_data_info[0,0][Data][0] [9]),
        .R(p_16_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [0]),
        .Q(\lookup_read_data_info[0,0][Data][1] [0]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][10] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [10]),
        .Q(\lookup_read_data_info[0,0][Data][1] [10]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][11] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [11]),
        .Q(\lookup_read_data_info[0,0][Data][1] [11]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][12] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [12]),
        .Q(\lookup_read_data_info[0,0][Data][1] [12]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][13] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [13]),
        .Q(\lookup_read_data_info[0,0][Data][1] [13]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][14] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [14]),
        .Q(\lookup_read_data_info[0,0][Data][1] [14]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][15] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [15]),
        .Q(\lookup_read_data_info[0,0][Data][1] [15]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][16] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [16]),
        .Q(\lookup_read_data_info[0,0][Data][1] [16]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][17] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [17]),
        .Q(\lookup_read_data_info[0,0][Data][1] [17]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][18] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [18]),
        .Q(\lookup_read_data_info[0,0][Data][1] [18]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][19] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [19]),
        .Q(\lookup_read_data_info[0,0][Data][1] [19]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][1] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [1]),
        .Q(\lookup_read_data_info[0,0][Data][1] [1]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][20] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [20]),
        .Q(\lookup_read_data_info[0,0][Data][1] [20]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][21] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [21]),
        .Q(\lookup_read_data_info[0,0][Data][1] [21]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][22] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [22]),
        .Q(\lookup_read_data_info[0,0][Data][1] [22]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][23] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [23]),
        .Q(\lookup_read_data_info[0,0][Data][1] [23]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][24] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [24]),
        .Q(\lookup_read_data_info[0,0][Data][1] [24]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][25] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [25]),
        .Q(\lookup_read_data_info[0,0][Data][1] [25]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][26] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [26]),
        .Q(\lookup_read_data_info[0,0][Data][1] [26]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][27] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [27]),
        .Q(\lookup_read_data_info[0,0][Data][1] [27]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][28] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [28]),
        .Q(\lookup_read_data_info[0,0][Data][1] [28]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][29] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [29]),
        .Q(\lookup_read_data_info[0,0][Data][1] [29]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][2] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [2]),
        .Q(\lookup_read_data_info[0,0][Data][1] [2]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][30] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [30]),
        .Q(\lookup_read_data_info[0,0][Data][1] [30]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [31]),
        .Q(\lookup_read_data_info[0,0][Data][1] [31]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][3] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [3]),
        .Q(\lookup_read_data_info[0,0][Data][1] [3]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][4] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [4]),
        .Q(\lookup_read_data_info[0,0][Data][1] [4]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][5] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [5]),
        .Q(\lookup_read_data_info[0,0][Data][1] [5]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][6] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [6]),
        .Q(\lookup_read_data_info[0,0][Data][1] [6]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][7] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [7]),
        .Q(\lookup_read_data_info[0,0][Data][1] [7]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][8] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [8]),
        .Q(\lookup_read_data_info[0,0][Data][1] [8]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][9] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31]_0 [9]),
        .Q(\lookup_read_data_info[0,0][Data][1] [9]),
        .R(p_14_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][0] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [0]),
        .Q(\lookup_read_data_info[0,0][Data][2] [0]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][10] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [10]),
        .Q(\lookup_read_data_info[0,0][Data][2] [10]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][11] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [11]),
        .Q(\lookup_read_data_info[0,0][Data][2] [11]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][12] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [12]),
        .Q(\lookup_read_data_info[0,0][Data][2] [12]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][13] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [13]),
        .Q(\lookup_read_data_info[0,0][Data][2] [13]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][14] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [14]),
        .Q(\lookup_read_data_info[0,0][Data][2] [14]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][15] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [15]),
        .Q(\lookup_read_data_info[0,0][Data][2] [15]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][16] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [16]),
        .Q(\lookup_read_data_info[0,0][Data][2] [16]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][17] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [17]),
        .Q(\lookup_read_data_info[0,0][Data][2] [17]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][18] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [18]),
        .Q(\lookup_read_data_info[0,0][Data][2] [18]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][19] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [19]),
        .Q(\lookup_read_data_info[0,0][Data][2] [19]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][1] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [1]),
        .Q(\lookup_read_data_info[0,0][Data][2] [1]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][20] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [20]),
        .Q(\lookup_read_data_info[0,0][Data][2] [20]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][21] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [21]),
        .Q(\lookup_read_data_info[0,0][Data][2] [21]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][22] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [22]),
        .Q(\lookup_read_data_info[0,0][Data][2] [22]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][23] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [23]),
        .Q(\lookup_read_data_info[0,0][Data][2] [23]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][24] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [24]),
        .Q(\lookup_read_data_info[0,0][Data][2] [24]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][25] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [25]),
        .Q(\lookup_read_data_info[0,0][Data][2] [25]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][26] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [26]),
        .Q(\lookup_read_data_info[0,0][Data][2] [26]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][27] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [27]),
        .Q(\lookup_read_data_info[0,0][Data][2] [27]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][28] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [28]),
        .Q(\lookup_read_data_info[0,0][Data][2] [28]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][29] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [29]),
        .Q(\lookup_read_data_info[0,0][Data][2] [29]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][2] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [2]),
        .Q(\lookup_read_data_info[0,0][Data][2] [2]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][30] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [30]),
        .Q(\lookup_read_data_info[0,0][Data][2] [30]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [31]),
        .Q(\lookup_read_data_info[0,0][Data][2] [31]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][3] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [3]),
        .Q(\lookup_read_data_info[0,0][Data][2] [3]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][4] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [4]),
        .Q(\lookup_read_data_info[0,0][Data][2] [4]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][5] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [5]),
        .Q(\lookup_read_data_info[0,0][Data][2] [5]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][6] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [6]),
        .Q(\lookup_read_data_info[0,0][Data][2] [6]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][7] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [7]),
        .Q(\lookup_read_data_info[0,0][Data][2] [7]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][8] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [8]),
        .Q(\lookup_read_data_info[0,0][Data][2] [8]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][9] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[2].lookup_read_data_word_i_reg[2][31]_0 [9]),
        .Q(\lookup_read_data_info[0,0][Data][2] [9]),
        .R(p_12_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][0] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [0]),
        .Q(\lookup_read_data_info[0,0][Data][3] [0]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][10] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [10]),
        .Q(\lookup_read_data_info[0,0][Data][3] [10]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][11] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [11]),
        .Q(\lookup_read_data_info[0,0][Data][3] [11]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][12] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [12]),
        .Q(\lookup_read_data_info[0,0][Data][3] [12]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][13] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [13]),
        .Q(\lookup_read_data_info[0,0][Data][3] [13]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][14] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [14]),
        .Q(\lookup_read_data_info[0,0][Data][3] [14]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][15] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [15]),
        .Q(\lookup_read_data_info[0,0][Data][3] [15]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][16] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [16]),
        .Q(\lookup_read_data_info[0,0][Data][3] [16]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][17] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [17]),
        .Q(\lookup_read_data_info[0,0][Data][3] [17]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][18] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [18]),
        .Q(\lookup_read_data_info[0,0][Data][3] [18]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][19] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [19]),
        .Q(\lookup_read_data_info[0,0][Data][3] [19]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][1] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [1]),
        .Q(\lookup_read_data_info[0,0][Data][3] [1]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][20] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [20]),
        .Q(\lookup_read_data_info[0,0][Data][3] [20]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][21] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [21]),
        .Q(\lookup_read_data_info[0,0][Data][3] [21]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][22] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [22]),
        .Q(\lookup_read_data_info[0,0][Data][3] [22]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][23] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [23]),
        .Q(\lookup_read_data_info[0,0][Data][3] [23]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][24] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [24]),
        .Q(\lookup_read_data_info[0,0][Data][3] [24]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][25] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [25]),
        .Q(\lookup_read_data_info[0,0][Data][3] [25]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][26] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [26]),
        .Q(\lookup_read_data_info[0,0][Data][3] [26]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][27] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [27]),
        .Q(\lookup_read_data_info[0,0][Data][3] [27]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][28] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [28]),
        .Q(\lookup_read_data_info[0,0][Data][3] [28]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][29] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [29]),
        .Q(\lookup_read_data_info[0,0][Data][3] [29]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][2] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [2]),
        .Q(\lookup_read_data_info[0,0][Data][3] [2]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][30] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [30]),
        .Q(\lookup_read_data_info[0,0][Data][3] [30]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [31]),
        .Q(\lookup_read_data_info[0,0][Data][3] [31]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][3] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [3]),
        .Q(\lookup_read_data_info[0,0][Data][3] [3]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][4] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [4]),
        .Q(\lookup_read_data_info[0,0][Data][3] [4]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][5] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [5]),
        .Q(\lookup_read_data_info[0,0][Data][3] [5]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][6] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [6]),
        .Q(\lookup_read_data_info[0,0][Data][3] [6]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][7] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [7]),
        .Q(\lookup_read_data_info[0,0][Data][3] [7]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][8] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [8]),
        .Q(\lookup_read_data_info[0,0][Data][3] [8]),
        .R(p_10_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][9] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_1 [9]),
        .Q(\lookup_read_data_info[0,0][Data][3] [9]),
        .R(p_10_out));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__10 
       (.I0(\update_info[Allocate] ),
        .O(ud_new_tag_valid2));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__11 
       (.I0(\update_info_reg[Evict]_0 ),
        .O(S_3));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__8 
       (.I0(update_write_miss),
        .I1(\update_info[Allocate] ),
        .O(S_1));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__9 
       (.I0(update_first_write_hit),
        .O(S_2));
  LUT6 #(
    .INIT(64'h4440404444444444)) 
    \ar_fifo_mem_reg[15][Addr][0]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info_reg[Addr][1]_0 [0]),
        .I2(\update_info[Size] [2]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info[Size] [0]),
        .I5(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2_n_0 ),
        .O(in[0]));
  LUT6 #(
    .INIT(64'h4440444444444444)) 
    \ar_fifo_mem_reg[15][Addr][1]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info_reg[Addr][1]_0 [1]),
        .I2(\update_info[Size] [0]),
        .I3(\update_info[Size] [2]),
        .I4(\update_info[Size] [1]),
        .I5(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2_n_0 ),
        .O(in[1]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2_n_0 ),
        .I2(\update_info[Kind] ),
        .O(\read_req_info[0][Kind] ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2 
       (.I0(\update_info_reg[Len][7]_0 [4]),
        .I1(\update_info_reg[Len][7]_0 [5]),
        .I2(\update_info_reg[Len][7]_0 [0]),
        .I3(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3_n_0 ),
        .O(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3 
       (.I0(\update_info_reg[Len][7]_0 [6]),
        .I1(\update_info_reg[Len][7]_0 [2]),
        .I2(\update_info_reg[Len][7]_0 [7]),
        .I3(\update_info[Kind] ),
        .I4(\update_info_reg[Len][7]_0 [1]),
        .I5(\update_info_reg[Len][7]_0 [3]),
        .O(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][0]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info_reg[Len][7]_0 [0]),
        .O(\update_info_reg[Len][7]_2 [0]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][1]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info_reg[Len][7]_0 [1]),
        .O(\update_info_reg[Len][7]_2 [1]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][2]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info_reg[Len][7]_0 [2]),
        .O(\update_info_reg[Len][7]_2 [2]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][3]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info_reg[Len][7]_0 [3]),
        .O(\update_info_reg[Len][7]_2 [3]));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][4]_srl16_i_1 
       (.I0(\update_info_reg[Len][7]_0 [4]),
        .I1(\update_info[Allocate] ),
        .O(\update_info_reg[Len][7]_2 [4]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][5]_srl16_i_1 
       (.I0(\update_info_reg[Len][7]_0 [5]),
        .I1(\update_info[Allocate] ),
        .O(\update_info_reg[Len][7]_2 [5]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][6]_srl16_i_1 
       (.I0(\update_info_reg[Len][7]_0 [6]),
        .I1(\update_info[Allocate] ),
        .O(\update_info_reg[Len][7]_2 [6]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][7]_srl16_i_1 
       (.I0(\update_info_reg[Len][7]_0 [7]),
        .I1(\update_info[Allocate] ),
        .O(\update_info_reg[Len][7]_2 [7]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Size][0]_srl16_i_1 
       (.I0(\update_info[Size] [0]),
        .I1(\update_info[Allocate] ),
        .O(\update_info_reg[Size][2]_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Size][1]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info[Size] [1]),
        .O(\update_info_reg[Size][2]_0 [1]));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Size][2]_srl16_i_1 
       (.I0(\update_info[Size] [2]),
        .I1(\update_info[Allocate] ),
        .O(\update_info_reg[Size][2]_0 [2]));
  LUT6 #(
    .INIT(64'hFFF0AA00FF00CC00)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16_i_2 
       (.I0(\update_info_reg[Len][7]_0 [0]),
        .I1(\update_info_reg[Len][7]_0 [1]),
        .I2(\update_info_reg[Len][7]_0 [2]),
        .I3(\update_info[Size] [2]),
        .I4(\update_info[Size] [1]),
        .I5(\update_info[Size] [0]),
        .O(\aw_fifo_mem_reg[15][Len][3]_srl16_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h0000CAAA)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16_i_2 
       (.I0(\update_info_reg[Len][7]_0 [4]),
        .I1(\update_info_reg[Len][7]_0 [3]),
        .I2(\update_info[Size] [0]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info[Size] [2]),
        .O(\aw_fifo_mem_reg[15][Len][4]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0F5F0F3F0F5FFF3F)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16_i_3 
       (.I0(\update_info_reg[Len][7]_0 [1]),
        .I1(\update_info_reg[Len][7]_0 [2]),
        .I2(\update_info[Size] [2]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info[Size] [0]),
        .I5(\update_info_reg[Len][7]_0 [0]),
        .O(\aw_fifo_mem_reg[15][Len][4]_srl16_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16_i_2 
       (.I0(\update_info_reg[Len][7]_0 [2]),
        .I1(\update_info[Size] [0]),
        .I2(\update_info_reg[Len][7]_0 [3]),
        .O(\aw_fifo_mem_reg[15][Len][5]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h500F5F0F3F0F3F0F)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16_i_3 
       (.I0(\update_info_reg[Len][7]_0 [0]),
        .I1(\update_info_reg[Len][7]_0 [1]),
        .I2(\update_info[Size] [2]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info_reg[Len][7]_0 [4]),
        .I5(\update_info[Size] [0]),
        .O(\aw_fifo_mem_reg[15][Len][5]_srl16_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'h15)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16_i_4 
       (.I0(\update_info[Size] [2]),
        .I1(\update_info[Size] [1]),
        .I2(\update_info[Size] [0]),
        .O(\aw_fifo_mem_reg[15][Len][5]_srl16_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16_i_2 
       (.I0(\update_info[Size] [1]),
        .I1(\update_info[Size] [2]),
        .O(\aw_fifo_mem_reg[15][Len][6]_srl16_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16_i_3 
       (.I0(\update_info_reg[Len][7]_0 [1]),
        .I1(\update_info[Size] [0]),
        .I2(\update_info_reg[Len][7]_0 [2]),
        .O(\aw_fifo_mem_reg[15][Len][6]_srl16_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h111111110F000FFF)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16_i_4 
       (.I0(\update_info_reg[Len][7]_0 [5]),
        .I1(\update_info[Size] [2]),
        .I2(\update_info_reg[Len][7]_0 [3]),
        .I3(\update_info[Size] [0]),
        .I4(\update_info_reg[Len][7]_0 [4]),
        .I5(\update_info[Size] [1]),
        .O(\aw_fifo_mem_reg[15][Len][6]_srl16_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h111111110F000FFF)) 
    \aw_fifo_mem_reg[15][Len][7]_srl16_i_2 
       (.I0(\update_info_reg[Len][7]_0 [6]),
        .I1(\update_info[Size] [2]),
        .I2(\update_info_reg[Len][7]_0 [4]),
        .I3(\update_info[Size] [0]),
        .I4(\update_info_reg[Len][7]_0 [5]),
        .I5(\update_info[Size] [1]),
        .O(\aw_fifo_mem_reg[15][Len][7]_srl16_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT5 #(
    .INIT(32'h00AAC0AA)) 
    \bs_fifo_mem[0][Src][0]_i_1 
       (.I0(\bs_fifo_mem_reg[0][Src][1]_0 [0]),
        .I1(update_write_miss),
        .I2(\update_info[Allocate] ),
        .I3(\bs_fifo_mem_reg[0][Src][1]_1 ),
        .I4(update_write_hit),
        .O(\bs_fifo_mem_reg[0][Src][0] ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \bs_fifo_mem[0][Src][1]_i_2 
       (.I0(\update_info[Allocate] ),
        .I1(update_write_miss),
        .O(\Gen_Block[0].UD/new_bs_src ));
  FDRE lookup_next_is_last_beat_reg
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_next_is_last_beat),
        .Q(lookup_next_is_last_beat_reg_n_0),
        .R(ARESET_I));
  CARRY4 lookup_offset_cnt_cmb0_carry
       (.CI(1'b0),
        .CO({lookup_offset_cnt_cmb0_carry_n_0,lookup_offset_cnt_cmb0_carry_n_1,lookup_offset_cnt_cmb0_carry_n_2,lookup_offset_cnt_cmb0_carry_n_3}),
        .CYINIT(1'b0),
        .DI({ADDRA[1:0],lookup_word_offset__0}),
        .O({lookup_offset_cnt_cmb0_carry_n_4,p_9_in,p_7_in,lookup_offset_cnt_cmb0_carry_n_7}),
        .S({Chk_Valid_Inst_n_102,Chk_Valid_Inst_n_103,Chk_Valid_Inst_n_104,Chk_Valid_Inst_n_105}));
  CARRY4 lookup_offset_cnt_cmb0_carry__0
       (.CI(lookup_offset_cnt_cmb0_carry_n_0),
        .CO({NLW_lookup_offset_cnt_cmb0_carry__0_CO_UNCONNECTED[3:1],lookup_offset_cnt_cmb0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,ADDRA[2]}),
        .O({NLW_lookup_offset_cnt_cmb0_carry__0_O_UNCONNECTED[3:2],lookup_offset_cnt_cmb0_carry__0_n_6,lookup_offset_cnt_cmb0_carry__0_n_7}),
        .S({1'b0,1'b0,Chk_Valid_Inst_n_106,Chk_Valid_Inst_n_107}));
  FDRE \lookup_offset_cnt_reg[0] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[0]),
        .Q(lookup_offset_cnt[0]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[1] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[1]),
        .Q(lookup_offset_cnt[1]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[2] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[2]),
        .Q(lookup_offset_cnt[2]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[3] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[3]),
        .Q(lookup_offset_cnt[3]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[4] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[4]),
        .Q(lookup_offset_cnt[4]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[5] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[5]),
        .Q(lookup_offset_cnt[5]),
        .R(ARESET_I));
  FDRE lookup_offset_first_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Step_PR_And_Inst1_n_2),
        .Q(lookup_offset_first),
        .R(1'b0));
  FDRE \lookup_offset_len_cnt_reg[0] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[0]),
        .Q(lookup_offset_len_cnt_reg[0]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[1] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[1]),
        .Q(lookup_offset_len_cnt_reg[1]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[2] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(Chk_Valid_Inst_n_109),
        .Q(lookup_offset_len_cnt_reg[2]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[3] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[3]),
        .Q(lookup_offset_len_cnt_reg[3]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[4] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[4]),
        .Q(lookup_offset_len_cnt_reg[4]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[5] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[5]),
        .Q(lookup_offset_len_cnt_reg[5]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[6] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[6]),
        .Q(lookup_offset_len_cnt_reg[6]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[7] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[7]),
        .Q(lookup_offset_len_cnt_reg[7]),
        .R(ARESET_I));
  FDRE lookup_read_hit_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(p_223_in),
        .Q(lookup_read_hit_d1),
        .R(ARESET_I));
  FDRE lookup_restart_mem_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_PC_And_Inst5_n_18),
        .Q(lookup_restart_mem_done),
        .R(1'b0));
  FDRE lu_check_allow_write_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(1'b1),
        .Q(lookup_wm_allow_write),
        .R(ARESET_I));
  FDRE \lu_check_info_delayed_reg[Wr] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_check_info_reg[Wr]__0 ),
        .Q(\lu_check_info_delayed_reg[Wr_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][0] ),
        .Q(\lu_check_info_reg[Addr][11]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][10] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[4]),
        .Q(\lu_check_info_reg[Addr][11]_0 [10]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][11] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[5]),
        .Q(\lu_check_info_reg[Addr][11]_0 [11]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][12] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr][12]_0 ),
        .Q(D),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][13] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_force_way[0]),
        .Q(lookup_stall_addr[13]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][14] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_force_way[1]),
        .Q(lookup_stall_addr[14]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][15] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][15] ),
        .Q(lookup_stall_addr[15]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][16] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][16] ),
        .Q(lookup_stall_addr[16]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][17] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][17] ),
        .Q(lookup_stall_addr[17]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][18] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][18] ),
        .Q(lookup_stall_addr[18]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][19] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][19] ),
        .Q(lookup_stall_addr[19]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][1] ),
        .Q(\lu_check_info_reg[Addr][11]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][20] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][20] ),
        .Q(lookup_stall_addr[20]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][21] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][21] ),
        .Q(lookup_stall_addr[21]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][22] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][22] ),
        .Q(lookup_stall_addr[22]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][23] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][23] ),
        .Q(lookup_stall_addr[23]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][2] ),
        .Q(\lu_check_info_reg[Addr][11]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][3] ),
        .Q(\lu_check_info_reg[Addr][11]_0 [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][4] ),
        .Q(\lu_check_info_reg[Addr][11]_0 [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][5] ),
        .Q(\lu_check_info_reg[Addr][11]_0 [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][6] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[0]),
        .Q(\lu_check_info_reg[Addr][11]_0 [6]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][7] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[1]),
        .Q(\lu_check_info_reg[Addr][11]_0 [7]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][8] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[2]),
        .Q(\lu_check_info_reg[Addr][11]_0 [8]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][9] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[3]),
        .Q(\lu_check_info_reg[Addr][11]_0 [9]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][0] ),
        .Q(\lu_check_info_reg[Addr_Stp][5]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][1] ),
        .Q(\lu_check_info_reg[Addr_Stp][5]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][2] ),
        .Q(\lu_check_info_reg[Addr_Stp][5]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][3] ),
        .Q(\lu_check_info_reg[Addr_Stp][5]_0 [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][4] ),
        .Q(\lu_check_info_reg[Addr_Stp][5]_0 [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][5] ),
        .Q(\lu_check_info_reg[Addr_Stp][5]_0 [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][0] ),
        .Q(\lu_check_info_reg[Addr_Use][5]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][1] ),
        .Q(\lu_check_info_reg[Addr_Use][5]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][2] ),
        .Q(\lu_check_info_reg[Addr_Use][5]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][3] ),
        .Q(\lu_check_info_reg[Addr_Use][5]_0 [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][4] ),
        .Q(\lu_check_info_reg[Addr_Use][5]_0 [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][5] ),
        .Q(\lu_check_info_reg[Addr_Use][5]_0 [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Allocate] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Allocate]__0 ),
        .Q(\lu_check_info_reg[Allocate]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Early] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Early]__0 ),
        .Q(\lu_check_info_reg[Early]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Evict] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Force_Hit_n_0_] ),
        .Q(\lu_check_info_reg[Evict]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Keep] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Keep]__0 ),
        .Q(\lu_check_info_reg[Keep_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Kind] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Kind_n_0_] ),
        .Q(\lu_check_info_reg[Kind]_0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [0]),
        .Q(\lu_check_info_reg[Len] [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [1]),
        .Q(\lu_check_info_reg[Len] [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [2]),
        .Q(\lu_check_info_reg[Len] [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [3]),
        .Q(\lu_check_info_reg[Len] [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [4]),
        .Q(\lu_check_info_reg[Len] [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [5]),
        .Q(\lu_check_info_reg[Len] [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][6] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [6]),
        .Q(\lu_check_info_reg[Len] [6]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][7] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [7]),
        .Q(\lu_check_info_reg[Len] [7]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Port_Num][0]_0 ),
        .Q(\lu_check_info_reg[Port_Num][0]_0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Size][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Size] [0]),
        .Q(\lu_check_info_reg[Size_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Size][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Size] [1]),
        .Q(\lu_check_info_reg[Size_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Size][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Size] [2]),
        .Q(\lu_check_info_reg[Size_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Wr] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Wr]__0 ),
        .Q(\lu_check_info_reg[Wr]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_copy_lb_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_copy_lb_0),
        .Q(lu_check_locked_hit_copy_lb[0]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_copy_lb_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_copy_lb_1),
        .Q(lu_check_locked_hit_copy_lb[1]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_copy_lb_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_copy_lb_2),
        .Q(lu_check_locked_hit_copy_lb[2]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_copy_lb_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_copy_lb_3),
        .Q(lu_check_locked_hit_copy_lb[3]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_0),
        .Q(\lu_check_locked_hit_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_1),
        .Q(\lu_check_locked_hit_reg_n_0_[1] ),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_2),
        .Q(p_0_in1_in),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_3),
        .Q(\lu_check_locked_hit_reg_n_0_[3] ),
        .R(ARESET_I));
  FDRE \lu_check_locked_write_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_write_0),
        .Q(\lu_check_locked_write_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_locked_write_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_write_1),
        .Q(p_1_in29_in),
        .R(ARESET_I));
  FDRE \lu_check_locked_write_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_write_2),
        .Q(p_0_in28_in),
        .R(ARESET_I));
  FDRE \lu_check_locked_write_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_write_3),
        .Q(\lu_check_locked_write_reg_n_0_[3] ),
        .R(ARESET_I));
  LUT1 #(
    .INIT(2'h1)) 
    lu_check_multi_beat_i_1
       (.I0(lu_mem_single_beat_reg_n_0),
        .O(lu_check_multi_beat_i_1_n_0));
  FDSE lu_check_multi_beat_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_check_multi_beat_i_1_n_0),
        .Q(lu_check_multi_beat),
        .S(ARESET_I));
  LUT1 #(
    .INIT(2'h1)) 
    \lu_check_port_one_hot[0]_i_1 
       (.I0(\lu_mem_info_reg[Port_Num][0]_0 ),
        .O(\lu_check_port_one_hot[0]_i_1_n_0 ));
  FDRE \lu_check_port_one_hot_reg[0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_port_one_hot[0]_i_1_n_0 ),
        .Q(\lu_check_port_one_hot_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_protected_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_protected[0]),
        .Q(\lu_check_protected_reg[3]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_protected_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_protected[1]),
        .Q(\lu_check_protected_reg[3]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_protected_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_protected[2]),
        .Q(\lu_check_protected_reg[3]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_protected_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_protected[3]),
        .Q(\lu_check_protected_reg[3]_0 [3]),
        .R(ARESET_I));
  LUT3 #(
    .INIT(8'hB8)) 
    \lu_check_protected_way[1]_i_1 
       (.I0(lru_check_used_way[1]),
        .I1(lookup_protect_conflict),
        .I2(lu_check_protected_way[1]),
        .O(\lu_check_protected_way[1]_i_1_n_0 ));
  FDRE \lu_check_protected_way_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_116),
        .Q(lu_check_protected_way[0]),
        .R(ARESET_I));
  FDRE \lu_check_protected_way_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_check_protected_way[1]_i_1_n_0 ),
        .Q(lu_check_protected_way[1]),
        .R(ARESET_I));
  LUT4 #(
    .INIT(16'h000E)) 
    lu_check_read_info_done_i_1
       (.I0(lu_check_read_info_done),
        .I1(lookup_read_done_i),
        .I2(ARESET_I),
        .I3(lookup_mem_piperun),
        .O(lu_check_read_info_done_i_1_n_0));
  FDRE lu_check_read_info_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lu_check_read_info_done_i_1_n_0),
        .Q(lu_check_read_info_done),
        .R(1'b0));
  FDRE lu_check_single_beat_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_single_beat_reg_n_0),
        .Q(lu_check_single_beat),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_ds_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_ds_0),
        .Q(\lu_check_tag_hit_copy_ds_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_ds_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_ds_1),
        .Q(p_1_in13_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_ds_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_ds_2),
        .Q(\lu_check_tag_hit_copy_ds_reg_n_0_[2] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_ds_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_ds_3),
        .Q(p_14_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_lb_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_lb_0),
        .Q(\lu_check_tag_hit_copy_lb_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_lb_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_lb_1),
        .Q(p_1_in9_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_lb_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_lb_2),
        .Q(p_0_in8_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_lb_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_lb_3),
        .Q(\lu_check_tag_hit_copy_lb_reg_n_0_[3] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_md_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_md_0),
        .Q(lu_check_tag_hit_copy_md[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_md_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_md_1),
        .Q(lu_check_tag_hit_copy_md[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_md_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_md_2),
        .Q(lu_check_tag_hit_copy_md[2]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_md_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_md_3),
        .Q(lu_check_tag_hit_copy_md[3]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_pc_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_pc_0),
        .Q(lu_check_tag_hit_copy_pc[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_pc_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_pc_1),
        .Q(lu_check_tag_hit_copy_pc[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_pc_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_pc_2),
        .Q(lu_check_tag_hit_copy_pc[2]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_pc_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_pc_3),
        .Q(lu_check_tag_hit_copy_pc[3]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_rs_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_rs_0),
        .Q(lu_check_tag_hit_copy_rs[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_rs_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_rs_1),
        .Q(lu_check_tag_hit_copy_rs[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_rs_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_rs_2),
        .Q(lu_check_tag_hit_copy_rs[2]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_rs_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_rs_3),
        .Q(lu_check_tag_hit_copy_rs[3]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_wm_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_wm_0),
        .Q(\lu_check_tag_hit_copy_wm_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_wm_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_wm_1),
        .Q(p_1_in17_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_wm_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_wm_2),
        .Q(p_0_in16_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_wm_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_wm_3),
        .Q(\lu_check_tag_hit_copy_wm_reg_n_0_[3] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_0),
        .Q(\lu_check_tag_hit_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_1),
        .Q(p_1_in5_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_2),
        .Q(p_0_in4_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_3),
        .Q(p_6_in),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][13] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [0]),
        .Q(\lu_check_tag_reg[0][Addr] [13]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][14] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [1]),
        .Q(\lu_check_tag_reg[0][Addr] [14]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][15] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [2]),
        .Q(\lu_check_tag_reg[0][Addr] [15]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][16] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [3]),
        .Q(\lu_check_tag_reg[0][Addr] [16]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][17] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [4]),
        .Q(\lu_check_tag_reg[0][Addr] [17]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][18] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [5]),
        .Q(\lu_check_tag_reg[0][Addr] [18]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][19] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [6]),
        .Q(\lu_check_tag_reg[0][Addr] [19]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][20] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [7]),
        .Q(\lu_check_tag_reg[0][Addr] [20]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][21] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [8]),
        .Q(\lu_check_tag_reg[0][Addr] [21]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][22] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [9]),
        .Q(\lu_check_tag_reg[0][Addr] [22]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][23] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 [10]),
        .Q(\lu_check_tag_reg[0][Addr] [23]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][13] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [0]),
        .Q(\lu_check_tag_reg[1][Addr] [13]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][14] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [1]),
        .Q(\lu_check_tag_reg[1][Addr] [14]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][15] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [2]),
        .Q(\lu_check_tag_reg[1][Addr] [15]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][16] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [3]),
        .Q(\lu_check_tag_reg[1][Addr] [16]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][17] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [4]),
        .Q(\lu_check_tag_reg[1][Addr] [17]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][18] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [5]),
        .Q(\lu_check_tag_reg[1][Addr] [18]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][19] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [6]),
        .Q(\lu_check_tag_reg[1][Addr] [19]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][20] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [7]),
        .Q(\lu_check_tag_reg[1][Addr] [20]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][21] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [8]),
        .Q(\lu_check_tag_reg[1][Addr] [21]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][22] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [9]),
        .Q(\lu_check_tag_reg[1][Addr] [22]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][23] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [10]),
        .Q(\lu_check_tag_reg[1][Addr] [23]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][13] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [0]),
        .Q(\lu_check_tag_reg[2][Addr] [13]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][14] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [1]),
        .Q(\lu_check_tag_reg[2][Addr] [14]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][15] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [2]),
        .Q(\lu_check_tag_reg[2][Addr] [15]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][16] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [3]),
        .Q(\lu_check_tag_reg[2][Addr] [16]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][17] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [4]),
        .Q(\lu_check_tag_reg[2][Addr] [17]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][18] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [5]),
        .Q(\lu_check_tag_reg[2][Addr] [18]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][19] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [6]),
        .Q(\lu_check_tag_reg[2][Addr] [19]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][20] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [7]),
        .Q(\lu_check_tag_reg[2][Addr] [20]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][21] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [8]),
        .Q(\lu_check_tag_reg[2][Addr] [21]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][22] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [9]),
        .Q(\lu_check_tag_reg[2][Addr] [22]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[2][Addr][23] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 [10]),
        .Q(\lu_check_tag_reg[2][Addr] [23]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][13] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[0]),
        .Q(\lu_check_tag_reg[3][Addr] [13]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][14] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[1]),
        .Q(\lu_check_tag_reg[3][Addr] [14]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][15] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[2]),
        .Q(\lu_check_tag_reg[3][Addr] [15]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][16] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[3]),
        .Q(\lu_check_tag_reg[3][Addr] [16]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][17] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[4]),
        .Q(\lu_check_tag_reg[3][Addr] [17]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][18] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[5]),
        .Q(\lu_check_tag_reg[3][Addr] [18]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][19] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[6]),
        .Q(\lu_check_tag_reg[3][Addr] [19]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][20] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[7]),
        .Q(\lu_check_tag_reg[3][Addr] [20]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][21] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[8]),
        .Q(\lu_check_tag_reg[3][Addr] [21]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][22] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[9]),
        .Q(\lu_check_tag_reg[3][Addr] [22]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[3][Addr][23] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lookup_tag_current_word_i[10]),
        .Q(\lu_check_tag_reg[3][Addr] [23]),
        .R(ARESET_I));
  FDRE \lu_check_valid_bits_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\lu_check_valid_bits_reg[3]_0 [0]),
        .Q(lu_check_valid_bits[0]),
        .R(ARESET_I));
  FDRE \lu_check_valid_bits_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\lu_check_valid_bits_reg[3]_0 [1]),
        .Q(lu_check_valid_bits[1]),
        .R(ARESET_I));
  FDRE \lu_check_valid_bits_reg[2] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\lu_check_valid_bits_reg[3]_0 [2]),
        .Q(lu_check_valid_bits[2]),
        .R(ARESET_I));
  FDRE \lu_check_valid_bits_reg[3] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\lu_check_valid_bits_reg[3]_0 [3]),
        .Q(lu_check_valid_bits[3]),
        .R(ARESET_I));
  FDRE lu_check_valid_delayed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lu_check_valid),
        .Q(lu_check_valid_delayed),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h000000AE)) 
    lu_check_wait_for_update_i_1
       (.I0(lu_check_wait_for_update),
        .I1(lu_check_done0),
        .I2(Chk_Valid_Inst_n_19),
        .I3(lu_check_piperun),
        .I4(ARESET_I),
        .O(lu_check_wait_for_update_i_1_n_0));
  FDRE lu_check_wait_for_update_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lu_check_wait_for_update_i_1_n_0),
        .Q(lu_check_wait_for_update),
        .R(1'b0));
  FDRE lu_check_wr_already_pushed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_108),
        .Q(lu_check_wr_already_pushed),
        .R(1'b0));
  FDRE lu_check_write_alloc_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_write_alloc),
        .Q(lu_check_write_alloc),
        .R(ARESET_I));
  FDSE lu_ds_last_beat_next_last_n_reg
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lu_ds_last_beat_next_last_n),
        .Q(lu_ds_last_beat_next_last_n_reg_n_0),
        .S(ARESET_I));
  FDRE \lu_mem_force_way_reg[0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[13]),
        .Q(lu_mem_force_way[0]),
        .R(ARESET_I));
  FDRE \lu_mem_force_way_reg[1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[14]),
        .Q(lu_mem_force_way[1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[0]),
        .Q(\lu_mem_info_reg[Addr_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][10] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[10]),
        .Q(B_Vec[4]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][11] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[11]),
        .Q(B_Vec[5]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][12] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[12]),
        .Q(\lu_mem_info_reg[Addr][12]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][15] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[15]),
        .Q(\lu_mem_info_reg[Addr_n_0_][15] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][16] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[16]),
        .Q(\lu_mem_info_reg[Addr_n_0_][16] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][17] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[17]),
        .Q(\lu_mem_info_reg[Addr_n_0_][17] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][18] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[18]),
        .Q(\lu_mem_info_reg[Addr_n_0_][18] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][19] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[19]),
        .Q(\lu_mem_info_reg[Addr_n_0_][19] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[1]),
        .Q(\lu_mem_info_reg[Addr_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][20] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[20]),
        .Q(\lu_mem_info_reg[Addr_n_0_][20] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][21] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[21]),
        .Q(\lu_mem_info_reg[Addr_n_0_][21] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][22] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[22]),
        .Q(\lu_mem_info_reg[Addr_n_0_][22] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][23] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[23]),
        .Q(\lu_mem_info_reg[Addr_n_0_][23] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[2]),
        .Q(\lu_mem_info_reg[Addr_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[3]),
        .Q(\lu_mem_info_reg[Addr_n_0_][3] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[4]),
        .Q(\lu_mem_info_reg[Addr_n_0_][4] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[5]),
        .Q(\lu_mem_info_reg[Addr_n_0_][5] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][6] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[6]),
        .Q(B_Vec[0]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][7] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[7]),
        .Q(B_Vec[1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][8] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[8]),
        .Q(B_Vec[2]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][9] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[9]),
        .Q(B_Vec[3]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Stp][5]_0 [0]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Stp][5]_0 [1]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Stp][5]_0 [2]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Stp][5]_0 [3]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][3] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Stp][5]_0 [4]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][4] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Stp][5]_0 [5]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][5] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Use][5]_0 [0]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Use][5]_0 [1]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Use][5]_0 [2]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Use][5]_0 [3]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][3] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Use][5]_0 [4]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][4] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Addr_Use][5]_0 [5]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][5] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Allocate] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Allocate] ),
        .Q(\lu_mem_info_reg[Allocate]__0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Early] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Early] ),
        .Q(\lu_mem_info_reg[Early]__0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Force_Hit] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access[Evict] ),
        .Q(\lu_mem_info_reg[Force_Hit_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Keep] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Keep] ),
        .Q(\lu_mem_info_reg[Keep]__0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Kind] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Kind] ),
        .Q(\lu_mem_info_reg[Kind_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [0]),
        .Q(\lu_mem_info_reg[Len] [0]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [1]),
        .Q(\lu_mem_info_reg[Len] [1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [2]),
        .Q(\lu_mem_info_reg[Len] [2]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [3]),
        .Q(\lu_mem_info_reg[Len] [3]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [4]),
        .Q(\lu_mem_info_reg[Len] [4]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [5]),
        .Q(\lu_mem_info_reg[Len] [5]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][6] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [6]),
        .Q(\lu_mem_info_reg[Len] [6]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][7] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Len][7]_0 [7]),
        .Q(\lu_mem_info_reg[Len] [7]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Port_Num] ),
        .Q(\lu_mem_info_reg[Port_Num][0]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Size][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Size][2]_0 [0]),
        .Q(\lu_mem_info_reg[Size] [0]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Size][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Size][2]_0 [1]),
        .Q(\lu_mem_info_reg[Size] [1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Size][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\lu_mem_info_reg[Size][2]_0 [2]),
        .Q(\lu_mem_info_reg[Size] [2]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Wr] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access[Wr] ),
        .Q(\lu_mem_info_reg[Wr]__0 ),
        .R(ARESET_I));
  FDRE lu_mem_protect_conflict_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lud_mem_conflict),
        .Q(lu_mem_protect_conflict_d1),
        .R(ARESET_I));
  FDRE lu_mem_protect_conflict_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lookup_protect_conflict),
        .Q(lud_mem_conflict),
        .R(ARESET_I));
  FDRE \lu_mem_release_lock_hold_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_release_lock_hold_reg[0]_1 ),
        .Q(\lu_mem_release_lock_hold_reg[0]_0 ),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_release_lock_hold_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_release_lock_hold_reg[1]_1 ),
        .Q(\lu_mem_release_lock_hold_reg[1]_0 ),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_release_lock_hold_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_release_lock_hold_reg[2]_1 ),
        .Q(\lu_mem_release_lock_hold_reg[2]_0 ),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_release_lock_hold_reg[3] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_release_lock_hold_reg[3]_1 ),
        .Q(\lu_mem_release_lock_hold_reg[3]_0 ),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_removed_way_hold_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_removed_way_hold_reg[0]_0 ),
        .Q(lu_mem_removed_way_hold[0]),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_removed_way_hold_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_removed_way_hold_reg[1]_0 ),
        .Q(lu_mem_removed_way_hold[1]),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_removed_way_hold_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_removed_way_hold_reg[2]_0 ),
        .Q(lu_mem_removed_way_hold[2]),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_removed_way_hold_reg[3] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_removed_way_hold_reg[3]_0 ),
        .Q(lu_mem_removed_way_hold[3]),
        .R(lu_mem_release_lock_hold));
  FDRE lu_mem_single_beat_reg
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(lu_mem_single_beat),
        .Q(lu_mem_single_beat_reg_n_0),
        .R(ARESET_I));
  FDRE lu_mem_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_Mem_PR_And_Inst1_n_2),
        .Q(lu_mem_valid_reg_0),
        .R(1'b0));
  FDRE lu_mem_write_alloc_reg
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(lu_mem_write_alloc0),
        .Q(lu_mem_write_alloc),
        .R(ARESET_I));
  LUT4 #(
    .INIT(16'h02A2)) 
    lud_addr_pipeline_full_i_9
       (.I0(lud_reg_valid_reg_0),
        .I1(\read_data_status[0,0][Hit_Pop] ),
        .I2(\lud_reg_port_num_reg[0]_0 ),
        .I3(\read_data_status[0,1][Hit_Pop] ),
        .O(lud_reg_valid_reg_1));
  FDRE lud_addr_pipeline_full_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lud_addr_pipeline_full0),
        .Q(lud_addr_pipeline_full_reg_0),
        .R(ARESET_I));
  FDRE lud_mem_already_used_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_3),
        .Q(lud_mem_already_used),
        .R(1'b0));
  FDRE lud_mem_completed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_PC_And_Inst5_n_1),
        .Q(lud_mem_completed_reg_n_0),
        .R(1'b0));
  FDRE lud_mem_delayed_read_data_reg
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(lud_mem_delayed_read_data0),
        .Q(S_12),
        .R(ARESET_I));
  FDRE lud_mem_keep_single_during_stall_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_5),
        .Q(I5),
        .R(ARESET_I));
  FDRE lud_mem_last_reg
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(lookup_last_beat),
        .Q(lud_mem_last),
        .R(ARESET_I));
  FDRE \lud_mem_port_one_hot_reg[0] 
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(Chk_Valid_Inst_n_61),
        .Q(lud_mem_port_one_hot),
        .R(ARESET_I));
  FDRE \lud_mem_port_one_hot_reg[1] 
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(Chk_Valid_Inst_n_62),
        .Q(\lud_mem_port_one_hot_reg[1]_0 ),
        .R(ARESET_I));
  FDRE lud_mem_speculative_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Addr_PR_Or_Inst2_n_2),
        .Q(lud_mem_speculative_valid),
        .R(ARESET_I));
  FDRE lud_mem_waiting_for_pipe_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_Mem_PR_And_Inst1_n_1),
        .Q(lud_mem_waiting_for_pipe_reg_3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hBABB8A88)) 
    \lud_mem_way_d1[0]_i_1 
       (.I0(hit_way_i[0]),
        .I1(lud_addr_piperun),
        .I2(I5),
        .I3(lud_mem_keep_single_during_stall0),
        .I4(\lud_mem_way_d1_reg_n_0_[0] ),
        .O(\lud_mem_way_d1[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hBABB8A88)) 
    \lud_mem_way_d1[1]_i_1 
       (.I0(hit_way_i[1]),
        .I1(lud_addr_piperun),
        .I2(I5),
        .I3(lud_mem_keep_single_during_stall0),
        .I4(I4),
        .O(\lud_mem_way_d1[1]_i_1_n_0 ));
  FDRE \lud_mem_way_d1_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lud_mem_way_d1[0]_i_1_n_0 ),
        .Q(\lud_mem_way_d1_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lud_mem_way_d1_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lud_mem_way_d1[1]_i_1_n_0 ),
        .Q(I4),
        .R(ARESET_I));
  FDRE lud_reg_last_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_7),
        .Q(\lookup_read_data_info[0,0][Last] ),
        .R(ARESET_I));
  FDRE \lud_reg_port_num_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_6),
        .Q(\lud_reg_port_num_reg[0]_0 ),
        .R(ARESET_I));
  LUT6 #(
    .INIT(64'h00000000C0C000AA)) 
    \lud_reg_valid_one_hot[0]_i_1 
       (.I0(\lud_reg_valid_one_hot_reg[0]_0 ),
        .I1(lud_mem_keep_single_during_stall_reg_0),
        .I2(lud_mem_port_one_hot),
        .I3(lud_reg_piperun),
        .I4(lud_mem_piperun),
        .I5(ARESET_I),
        .O(\lud_reg_valid_one_hot[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000C0C000AA)) 
    \lud_reg_valid_one_hot[1]_i_1 
       (.I0(\lud_reg_valid_one_hot_reg[1]_0 ),
        .I1(lud_mem_keep_single_during_stall_reg_0),
        .I2(\lud_mem_port_one_hot_reg[1]_0 ),
        .I3(lud_reg_piperun),
        .I4(lud_mem_piperun),
        .I5(ARESET_I),
        .O(\lud_reg_valid_one_hot[1]_i_1_n_0 ));
  FDRE \lud_reg_valid_one_hot_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lud_reg_valid_one_hot[0]_i_1_n_0 ),
        .Q(\lud_reg_valid_one_hot_reg[0]_0 ),
        .R(1'b0));
  FDRE \lud_reg_valid_one_hot_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lud_reg_valid_one_hot[1]_i_1_n_0 ),
        .Q(\lud_reg_valid_one_hot_reg[1]_0 ),
        .R(1'b0));
  FDRE lud_reg_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_1),
        .Q(lud_reg_valid_reg_0),
        .R(1'b0));
  FDRE lud_step_delayed_restart_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_4),
        .Q(lud_step_delayed_restart),
        .R(ARESET_I));
  LUT4 #(
    .INIT(16'h000E)) 
    lud_write_hit_done_i_1
       (.I0(lud_write_hit_done_reg_n_0),
        .I1(lud_write_hit_done0),
        .I2(ARESET_I),
        .I3(lookup_mem_piperun),
        .O(lud_write_hit_done_i_1_n_0));
  FDRE lud_write_hit_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lud_write_hit_done_i_1_n_0),
        .Q(lud_write_hit_done_reg_n_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    reduce_or11_out
       (.I0(\lu_check_tag_hit_copy_lb_reg_n_0_[0] ),
        .I1(\lu_check_tag_hit_copy_lb_reg_n_0_[3] ),
        .I2(p_0_in8_in),
        .I3(p_1_in9_in),
        .O(reduce_or11_out__0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    reduce_or15_out
       (.I0(\lu_check_tag_hit_copy_ds_reg_n_0_[0] ),
        .I1(\lu_check_tag_hit_copy_ds_reg_n_0_[2] ),
        .I2(p_1_in13_in),
        .I3(p_14_in),
        .O(reduce_or15_out__0));
  LUT3 #(
    .INIT(8'hB8)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_1
       (.I0(\lookup_read_data_info[0,0][Last] ),
        .I1(r_hit_push),
        .I2(\update_read_data_info[0,0][Last] ),
        .O(new_read_data_last));
  LUT3 #(
    .INIT(8'hB8)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_1__0
       (.I0(\lookup_read_data_info[0,0][Last] ),
        .I1(r_hit_push_7),
        .I2(\update_read_data_info[0,0][Last] ),
        .O(new_read_data_last_1));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_1
       (.I0(\lookup_read_data_info[0,0][Data][3] [1]),
        .I1(\lookup_read_data_info[0,0][Data][0] [1]),
        .I2(\lookup_read_data_info[0,0][Data][1] [1]),
        .I3(\lookup_read_data_info[0,0][Data][2] [1]),
        .I4(M0_AXI_RDATA[1]),
        .I5(r_hit_push),
        .O(new_read_data_word[1]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [1]),
        .I1(\lookup_read_data_info[0,0][Data][0] [1]),
        .I2(\lookup_read_data_info[0,0][Data][1] [1]),
        .I3(\lookup_read_data_info[0,0][Data][2] [1]),
        .I4(M0_AXI_RDATA[1]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [1]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_2
       (.I0(\lookup_read_data_info[0,0][Data][3] [0]),
        .I1(\lookup_read_data_info[0,0][Data][0] [0]),
        .I2(\lookup_read_data_info[0,0][Data][1] [0]),
        .I3(\lookup_read_data_info[0,0][Data][2] [0]),
        .I4(M0_AXI_RDATA[0]),
        .I5(r_hit_push),
        .O(new_read_data_word[0]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [0]),
        .I1(\lookup_read_data_info[0,0][Data][0] [0]),
        .I2(\lookup_read_data_info[0,0][Data][1] [0]),
        .I3(\lookup_read_data_info[0,0][Data][2] [0]),
        .I4(M0_AXI_RDATA[0]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [0]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_3
       (.I0(\lookup_read_data_info[0,0][Data][3] [3]),
        .I1(\lookup_read_data_info[0,0][Data][0] [3]),
        .I2(\lookup_read_data_info[0,0][Data][1] [3]),
        .I3(\lookup_read_data_info[0,0][Data][2] [3]),
        .I4(M0_AXI_RDATA[3]),
        .I5(r_hit_push),
        .O(new_read_data_word[3]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [3]),
        .I1(\lookup_read_data_info[0,0][Data][0] [3]),
        .I2(\lookup_read_data_info[0,0][Data][1] [3]),
        .I3(\lookup_read_data_info[0,0][Data][2] [3]),
        .I4(M0_AXI_RDATA[3]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [3]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_4
       (.I0(\lookup_read_data_info[0,0][Data][3] [2]),
        .I1(\lookup_read_data_info[0,0][Data][0] [2]),
        .I2(\lookup_read_data_info[0,0][Data][1] [2]),
        .I3(\lookup_read_data_info[0,0][Data][2] [2]),
        .I4(M0_AXI_RDATA[2]),
        .I5(r_hit_push),
        .O(new_read_data_word[2]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [2]),
        .I1(\lookup_read_data_info[0,0][Data][0] [2]),
        .I2(\lookup_read_data_info[0,0][Data][1] [2]),
        .I3(\lookup_read_data_info[0,0][Data][2] [2]),
        .I4(M0_AXI_RDATA[2]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [2]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_5
       (.I0(\lookup_read_data_info[0,0][Data][3] [5]),
        .I1(\lookup_read_data_info[0,0][Data][0] [5]),
        .I2(\lookup_read_data_info[0,0][Data][1] [5]),
        .I3(\lookup_read_data_info[0,0][Data][2] [5]),
        .I4(M0_AXI_RDATA[5]),
        .I5(r_hit_push),
        .O(new_read_data_word[5]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [5]),
        .I1(\lookup_read_data_info[0,0][Data][0] [5]),
        .I2(\lookup_read_data_info[0,0][Data][1] [5]),
        .I3(\lookup_read_data_info[0,0][Data][2] [5]),
        .I4(M0_AXI_RDATA[5]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [5]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_6
       (.I0(\lookup_read_data_info[0,0][Data][3] [4]),
        .I1(\lookup_read_data_info[0,0][Data][0] [4]),
        .I2(\lookup_read_data_info[0,0][Data][1] [4]),
        .I3(\lookup_read_data_info[0,0][Data][2] [4]),
        .I4(M0_AXI_RDATA[4]),
        .I5(r_hit_push),
        .O(new_read_data_word[4]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_0_5_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [4]),
        .I1(\lookup_read_data_info[0,0][Data][0] [4]),
        .I2(\lookup_read_data_info[0,0][Data][1] [4]),
        .I3(\lookup_read_data_info[0,0][Data][2] [4]),
        .I4(M0_AXI_RDATA[4]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [4]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_1
       (.I0(\lookup_read_data_info[0,0][Data][3] [13]),
        .I1(\lookup_read_data_info[0,0][Data][0] [13]),
        .I2(\lookup_read_data_info[0,0][Data][1] [13]),
        .I3(\lookup_read_data_info[0,0][Data][2] [13]),
        .I4(M0_AXI_RDATA[13]),
        .I5(r_hit_push),
        .O(new_read_data_word[13]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [13]),
        .I1(\lookup_read_data_info[0,0][Data][0] [13]),
        .I2(\lookup_read_data_info[0,0][Data][1] [13]),
        .I3(\lookup_read_data_info[0,0][Data][2] [13]),
        .I4(M0_AXI_RDATA[13]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [13]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_2
       (.I0(\lookup_read_data_info[0,0][Data][3] [12]),
        .I1(\lookup_read_data_info[0,0][Data][0] [12]),
        .I2(\lookup_read_data_info[0,0][Data][1] [12]),
        .I3(\lookup_read_data_info[0,0][Data][2] [12]),
        .I4(M0_AXI_RDATA[12]),
        .I5(r_hit_push),
        .O(new_read_data_word[12]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [12]),
        .I1(\lookup_read_data_info[0,0][Data][0] [12]),
        .I2(\lookup_read_data_info[0,0][Data][1] [12]),
        .I3(\lookup_read_data_info[0,0][Data][2] [12]),
        .I4(M0_AXI_RDATA[12]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [12]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_3
       (.I0(\lookup_read_data_info[0,0][Data][3] [15]),
        .I1(\lookup_read_data_info[0,0][Data][0] [15]),
        .I2(\lookup_read_data_info[0,0][Data][1] [15]),
        .I3(\lookup_read_data_info[0,0][Data][2] [15]),
        .I4(M0_AXI_RDATA[15]),
        .I5(r_hit_push),
        .O(new_read_data_word[15]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [15]),
        .I1(\lookup_read_data_info[0,0][Data][0] [15]),
        .I2(\lookup_read_data_info[0,0][Data][1] [15]),
        .I3(\lookup_read_data_info[0,0][Data][2] [15]),
        .I4(M0_AXI_RDATA[15]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [15]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_4
       (.I0(\lookup_read_data_info[0,0][Data][3] [14]),
        .I1(\lookup_read_data_info[0,0][Data][0] [14]),
        .I2(\lookup_read_data_info[0,0][Data][1] [14]),
        .I3(\lookup_read_data_info[0,0][Data][2] [14]),
        .I4(M0_AXI_RDATA[14]),
        .I5(r_hit_push),
        .O(new_read_data_word[14]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [14]),
        .I1(\lookup_read_data_info[0,0][Data][0] [14]),
        .I2(\lookup_read_data_info[0,0][Data][1] [14]),
        .I3(\lookup_read_data_info[0,0][Data][2] [14]),
        .I4(M0_AXI_RDATA[14]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [14]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_5
       (.I0(\lookup_read_data_info[0,0][Data][3] [17]),
        .I1(\lookup_read_data_info[0,0][Data][0] [17]),
        .I2(\lookup_read_data_info[0,0][Data][1] [17]),
        .I3(\lookup_read_data_info[0,0][Data][2] [17]),
        .I4(M0_AXI_RDATA[17]),
        .I5(r_hit_push),
        .O(new_read_data_word[17]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [17]),
        .I1(\lookup_read_data_info[0,0][Data][0] [17]),
        .I2(\lookup_read_data_info[0,0][Data][1] [17]),
        .I3(\lookup_read_data_info[0,0][Data][2] [17]),
        .I4(M0_AXI_RDATA[17]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [17]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_6
       (.I0(\lookup_read_data_info[0,0][Data][3] [16]),
        .I1(\lookup_read_data_info[0,0][Data][0] [16]),
        .I2(\lookup_read_data_info[0,0][Data][1] [16]),
        .I3(\lookup_read_data_info[0,0][Data][2] [16]),
        .I4(M0_AXI_RDATA[16]),
        .I5(r_hit_push),
        .O(new_read_data_word[16]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_12_17_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [16]),
        .I1(\lookup_read_data_info[0,0][Data][0] [16]),
        .I2(\lookup_read_data_info[0,0][Data][1] [16]),
        .I3(\lookup_read_data_info[0,0][Data][2] [16]),
        .I4(M0_AXI_RDATA[16]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [16]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_1
       (.I0(\lookup_read_data_info[0,0][Data][3] [19]),
        .I1(\lookup_read_data_info[0,0][Data][0] [19]),
        .I2(\lookup_read_data_info[0,0][Data][1] [19]),
        .I3(\lookup_read_data_info[0,0][Data][2] [19]),
        .I4(M0_AXI_RDATA[19]),
        .I5(r_hit_push),
        .O(new_read_data_word[19]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [19]),
        .I1(\lookup_read_data_info[0,0][Data][0] [19]),
        .I2(\lookup_read_data_info[0,0][Data][1] [19]),
        .I3(\lookup_read_data_info[0,0][Data][2] [19]),
        .I4(M0_AXI_RDATA[19]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [19]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_2
       (.I0(\lookup_read_data_info[0,0][Data][3] [18]),
        .I1(\lookup_read_data_info[0,0][Data][0] [18]),
        .I2(\lookup_read_data_info[0,0][Data][1] [18]),
        .I3(\lookup_read_data_info[0,0][Data][2] [18]),
        .I4(M0_AXI_RDATA[18]),
        .I5(r_hit_push),
        .O(new_read_data_word[18]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [18]),
        .I1(\lookup_read_data_info[0,0][Data][0] [18]),
        .I2(\lookup_read_data_info[0,0][Data][1] [18]),
        .I3(\lookup_read_data_info[0,0][Data][2] [18]),
        .I4(M0_AXI_RDATA[18]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [18]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_3
       (.I0(\lookup_read_data_info[0,0][Data][3] [21]),
        .I1(\lookup_read_data_info[0,0][Data][0] [21]),
        .I2(\lookup_read_data_info[0,0][Data][1] [21]),
        .I3(\lookup_read_data_info[0,0][Data][2] [21]),
        .I4(M0_AXI_RDATA[21]),
        .I5(r_hit_push),
        .O(new_read_data_word[21]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [21]),
        .I1(\lookup_read_data_info[0,0][Data][0] [21]),
        .I2(\lookup_read_data_info[0,0][Data][1] [21]),
        .I3(\lookup_read_data_info[0,0][Data][2] [21]),
        .I4(M0_AXI_RDATA[21]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [21]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_4
       (.I0(\lookup_read_data_info[0,0][Data][3] [20]),
        .I1(\lookup_read_data_info[0,0][Data][0] [20]),
        .I2(\lookup_read_data_info[0,0][Data][1] [20]),
        .I3(\lookup_read_data_info[0,0][Data][2] [20]),
        .I4(M0_AXI_RDATA[20]),
        .I5(r_hit_push),
        .O(new_read_data_word[20]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [20]),
        .I1(\lookup_read_data_info[0,0][Data][0] [20]),
        .I2(\lookup_read_data_info[0,0][Data][1] [20]),
        .I3(\lookup_read_data_info[0,0][Data][2] [20]),
        .I4(M0_AXI_RDATA[20]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [20]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_5
       (.I0(\lookup_read_data_info[0,0][Data][3] [23]),
        .I1(\lookup_read_data_info[0,0][Data][0] [23]),
        .I2(\lookup_read_data_info[0,0][Data][1] [23]),
        .I3(\lookup_read_data_info[0,0][Data][2] [23]),
        .I4(M0_AXI_RDATA[23]),
        .I5(r_hit_push),
        .O(new_read_data_word[23]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [23]),
        .I1(\lookup_read_data_info[0,0][Data][0] [23]),
        .I2(\lookup_read_data_info[0,0][Data][1] [23]),
        .I3(\lookup_read_data_info[0,0][Data][2] [23]),
        .I4(M0_AXI_RDATA[23]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [23]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_6
       (.I0(\lookup_read_data_info[0,0][Data][3] [22]),
        .I1(\lookup_read_data_info[0,0][Data][0] [22]),
        .I2(\lookup_read_data_info[0,0][Data][1] [22]),
        .I3(\lookup_read_data_info[0,0][Data][2] [22]),
        .I4(M0_AXI_RDATA[22]),
        .I5(r_hit_push),
        .O(new_read_data_word[22]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_18_23_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [22]),
        .I1(\lookup_read_data_info[0,0][Data][0] [22]),
        .I2(\lookup_read_data_info[0,0][Data][1] [22]),
        .I3(\lookup_read_data_info[0,0][Data][2] [22]),
        .I4(M0_AXI_RDATA[22]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [22]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_1
       (.I0(\lookup_read_data_info[0,0][Data][3] [25]),
        .I1(\lookup_read_data_info[0,0][Data][0] [25]),
        .I2(\lookup_read_data_info[0,0][Data][1] [25]),
        .I3(\lookup_read_data_info[0,0][Data][2] [25]),
        .I4(M0_AXI_RDATA[25]),
        .I5(r_hit_push),
        .O(new_read_data_word[25]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [25]),
        .I1(\lookup_read_data_info[0,0][Data][0] [25]),
        .I2(\lookup_read_data_info[0,0][Data][1] [25]),
        .I3(\lookup_read_data_info[0,0][Data][2] [25]),
        .I4(M0_AXI_RDATA[25]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [25]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_2
       (.I0(\lookup_read_data_info[0,0][Data][3] [24]),
        .I1(\lookup_read_data_info[0,0][Data][0] [24]),
        .I2(\lookup_read_data_info[0,0][Data][1] [24]),
        .I3(\lookup_read_data_info[0,0][Data][2] [24]),
        .I4(M0_AXI_RDATA[24]),
        .I5(r_hit_push),
        .O(new_read_data_word[24]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [24]),
        .I1(\lookup_read_data_info[0,0][Data][0] [24]),
        .I2(\lookup_read_data_info[0,0][Data][1] [24]),
        .I3(\lookup_read_data_info[0,0][Data][2] [24]),
        .I4(M0_AXI_RDATA[24]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [24]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_3
       (.I0(\lookup_read_data_info[0,0][Data][3] [27]),
        .I1(\lookup_read_data_info[0,0][Data][0] [27]),
        .I2(\lookup_read_data_info[0,0][Data][1] [27]),
        .I3(\lookup_read_data_info[0,0][Data][2] [27]),
        .I4(M0_AXI_RDATA[27]),
        .I5(r_hit_push),
        .O(new_read_data_word[27]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [27]),
        .I1(\lookup_read_data_info[0,0][Data][0] [27]),
        .I2(\lookup_read_data_info[0,0][Data][1] [27]),
        .I3(\lookup_read_data_info[0,0][Data][2] [27]),
        .I4(M0_AXI_RDATA[27]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [27]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_4
       (.I0(\lookup_read_data_info[0,0][Data][3] [26]),
        .I1(\lookup_read_data_info[0,0][Data][0] [26]),
        .I2(\lookup_read_data_info[0,0][Data][1] [26]),
        .I3(\lookup_read_data_info[0,0][Data][2] [26]),
        .I4(M0_AXI_RDATA[26]),
        .I5(r_hit_push),
        .O(new_read_data_word[26]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [26]),
        .I1(\lookup_read_data_info[0,0][Data][0] [26]),
        .I2(\lookup_read_data_info[0,0][Data][1] [26]),
        .I3(\lookup_read_data_info[0,0][Data][2] [26]),
        .I4(M0_AXI_RDATA[26]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [26]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_5
       (.I0(\lookup_read_data_info[0,0][Data][3] [29]),
        .I1(\lookup_read_data_info[0,0][Data][0] [29]),
        .I2(\lookup_read_data_info[0,0][Data][1] [29]),
        .I3(\lookup_read_data_info[0,0][Data][2] [29]),
        .I4(M0_AXI_RDATA[29]),
        .I5(r_hit_push),
        .O(new_read_data_word[29]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [29]),
        .I1(\lookup_read_data_info[0,0][Data][0] [29]),
        .I2(\lookup_read_data_info[0,0][Data][1] [29]),
        .I3(\lookup_read_data_info[0,0][Data][2] [29]),
        .I4(M0_AXI_RDATA[29]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [29]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_6
       (.I0(\lookup_read_data_info[0,0][Data][3] [28]),
        .I1(\lookup_read_data_info[0,0][Data][0] [28]),
        .I2(\lookup_read_data_info[0,0][Data][1] [28]),
        .I3(\lookup_read_data_info[0,0][Data][2] [28]),
        .I4(M0_AXI_RDATA[28]),
        .I5(r_hit_push),
        .O(new_read_data_word[28]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_24_29_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [28]),
        .I1(\lookup_read_data_info[0,0][Data][0] [28]),
        .I2(\lookup_read_data_info[0,0][Data][1] [28]),
        .I3(\lookup_read_data_info[0,0][Data][2] [28]),
        .I4(M0_AXI_RDATA[28]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [28]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_30_31_i_1
       (.I0(\lookup_read_data_info[0,0][Data][3] [31]),
        .I1(\lookup_read_data_info[0,0][Data][0] [31]),
        .I2(\lookup_read_data_info[0,0][Data][1] [31]),
        .I3(\lookup_read_data_info[0,0][Data][2] [31]),
        .I4(M0_AXI_RDATA[31]),
        .I5(r_hit_push),
        .O(new_read_data_word[31]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_30_31_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [31]),
        .I1(\lookup_read_data_info[0,0][Data][0] [31]),
        .I2(\lookup_read_data_info[0,0][Data][1] [31]),
        .I3(\lookup_read_data_info[0,0][Data][2] [31]),
        .I4(M0_AXI_RDATA[31]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [31]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_30_31_i_2
       (.I0(\lookup_read_data_info[0,0][Data][3] [30]),
        .I1(\lookup_read_data_info[0,0][Data][0] [30]),
        .I2(\lookup_read_data_info[0,0][Data][1] [30]),
        .I3(\lookup_read_data_info[0,0][Data][2] [30]),
        .I4(M0_AXI_RDATA[30]),
        .I5(r_hit_push),
        .O(new_read_data_word[30]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_30_31_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [30]),
        .I1(\lookup_read_data_info[0,0][Data][0] [30]),
        .I2(\lookup_read_data_info[0,0][Data][1] [30]),
        .I3(\lookup_read_data_info[0,0][Data][2] [30]),
        .I4(M0_AXI_RDATA[30]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [30]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_1
       (.I0(\lookup_read_data_info[0,0][Data][3] [7]),
        .I1(\lookup_read_data_info[0,0][Data][0] [7]),
        .I2(\lookup_read_data_info[0,0][Data][1] [7]),
        .I3(\lookup_read_data_info[0,0][Data][2] [7]),
        .I4(M0_AXI_RDATA[7]),
        .I5(r_hit_push),
        .O(new_read_data_word[7]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [7]),
        .I1(\lookup_read_data_info[0,0][Data][0] [7]),
        .I2(\lookup_read_data_info[0,0][Data][1] [7]),
        .I3(\lookup_read_data_info[0,0][Data][2] [7]),
        .I4(M0_AXI_RDATA[7]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [7]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_2
       (.I0(\lookup_read_data_info[0,0][Data][3] [6]),
        .I1(\lookup_read_data_info[0,0][Data][0] [6]),
        .I2(\lookup_read_data_info[0,0][Data][1] [6]),
        .I3(\lookup_read_data_info[0,0][Data][2] [6]),
        .I4(M0_AXI_RDATA[6]),
        .I5(r_hit_push),
        .O(new_read_data_word[6]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [6]),
        .I1(\lookup_read_data_info[0,0][Data][0] [6]),
        .I2(\lookup_read_data_info[0,0][Data][1] [6]),
        .I3(\lookup_read_data_info[0,0][Data][2] [6]),
        .I4(M0_AXI_RDATA[6]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [6]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_3
       (.I0(\lookup_read_data_info[0,0][Data][3] [9]),
        .I1(\lookup_read_data_info[0,0][Data][0] [9]),
        .I2(\lookup_read_data_info[0,0][Data][1] [9]),
        .I3(\lookup_read_data_info[0,0][Data][2] [9]),
        .I4(M0_AXI_RDATA[9]),
        .I5(r_hit_push),
        .O(new_read_data_word[9]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [9]),
        .I1(\lookup_read_data_info[0,0][Data][0] [9]),
        .I2(\lookup_read_data_info[0,0][Data][1] [9]),
        .I3(\lookup_read_data_info[0,0][Data][2] [9]),
        .I4(M0_AXI_RDATA[9]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [9]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_4
       (.I0(\lookup_read_data_info[0,0][Data][3] [8]),
        .I1(\lookup_read_data_info[0,0][Data][0] [8]),
        .I2(\lookup_read_data_info[0,0][Data][1] [8]),
        .I3(\lookup_read_data_info[0,0][Data][2] [8]),
        .I4(M0_AXI_RDATA[8]),
        .I5(r_hit_push),
        .O(new_read_data_word[8]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [8]),
        .I1(\lookup_read_data_info[0,0][Data][0] [8]),
        .I2(\lookup_read_data_info[0,0][Data][1] [8]),
        .I3(\lookup_read_data_info[0,0][Data][2] [8]),
        .I4(M0_AXI_RDATA[8]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [8]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_5
       (.I0(\lookup_read_data_info[0,0][Data][3] [11]),
        .I1(\lookup_read_data_info[0,0][Data][0] [11]),
        .I2(\lookup_read_data_info[0,0][Data][1] [11]),
        .I3(\lookup_read_data_info[0,0][Data][2] [11]),
        .I4(M0_AXI_RDATA[11]),
        .I5(r_hit_push),
        .O(new_read_data_word[11]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [11]),
        .I1(\lookup_read_data_info[0,0][Data][0] [11]),
        .I2(\lookup_read_data_info[0,0][Data][1] [11]),
        .I3(\lookup_read_data_info[0,0][Data][2] [11]),
        .I4(M0_AXI_RDATA[11]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [11]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_6
       (.I0(\lookup_read_data_info[0,0][Data][3] [10]),
        .I1(\lookup_read_data_info[0,0][Data][0] [10]),
        .I2(\lookup_read_data_info[0,0][Data][1] [10]),
        .I3(\lookup_read_data_info[0,0][Data][2] [10]),
        .I4(M0_AXI_RDATA[10]),
        .I5(r_hit_push),
        .O(new_read_data_word[10]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFF0000)) 
    rw_fifo_mem_reg_0_15_6_11_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][3] [10]),
        .I1(\lookup_read_data_info[0,0][Data][0] [10]),
        .I2(\lookup_read_data_info[0,0][Data][1] [10]),
        .I3(\lookup_read_data_info[0,0][Data][2] [10]),
        .I4(M0_AXI_RDATA[10]),
        .I5(r_hit_push_7),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31]_0 [10]));
  FDRE update_first_write_hit_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_first_write_hit),
        .Q(update_first_write_hit),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [0]),
        .Q(\update_info_reg[Addr][1]_0 [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][10] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [10]),
        .Q(in[10]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][11] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [11]),
        .Q(in[11]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][12] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D),
        .Q(in[12]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][13] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[13]),
        .Q(in[13]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][14] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[14]),
        .Q(in[14]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][15] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[15]),
        .Q(in[15]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][16] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[16]),
        .Q(in[16]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][17] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[17]),
        .Q(in[17]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][18] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[18]),
        .Q(in[18]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][19] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[19]),
        .Q(in[19]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [1]),
        .Q(\update_info_reg[Addr][1]_0 [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][20] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[20]),
        .Q(in[20]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][21] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[21]),
        .Q(in[21]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][22] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[22]),
        .Q(in[22]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][23] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[23]),
        .Q(in[23]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [2]),
        .Q(in[2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [3]),
        .Q(in[3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [4]),
        .Q(in[4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [5]),
        .Q(in[5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][6] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [6]),
        .Q(in[6]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][7] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [7]),
        .Q(in[7]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][8] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [8]),
        .Q(in[8]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][9] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr][11]_0 [9]),
        .Q(in[9]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Stp][5]_0 [0]),
        .Q(\update_info_reg[Addr_Stp][5]_0 [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Stp][5]_0 [1]),
        .Q(\update_info_reg[Addr_Stp][5]_0 [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Stp][5]_0 [2]),
        .Q(\update_info_reg[Addr_Stp][5]_0 [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Stp][5]_0 [3]),
        .Q(\update_info_reg[Addr_Stp][5]_0 [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Stp][5]_0 [4]),
        .Q(\update_info_reg[Addr_Stp][5]_0 [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Stp][5]_0 [5]),
        .Q(\update_info_reg[Addr_Stp][5]_0 [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Use][5]_0 [0]),
        .Q(\update_info_reg[Addr_Use][5]_0 [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Use][5]_0 [1]),
        .Q(\update_info_reg[Addr_Use][5]_0 [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Use][5]_0 [2]),
        .Q(\update_info_reg[Addr_Use][5]_0 [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Use][5]_0 [3]),
        .Q(\update_info_reg[Addr_Use][5]_0 [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Use][5]_0 [4]),
        .Q(\update_info_reg[Addr_Use][5]_0 [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Addr_Use][5]_0 [5]),
        .Q(\update_info_reg[Addr_Use][5]_0 [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Allocate] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Reuse_Inst_n_0),
        .Q(\update_info[Allocate] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Early] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Early]__0 ),
        .Q(\update_info[Early] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Evict] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_68),
        .Q(\update_info_reg[Evict]_0 ),
        .R(ARESET_I));
  FDRE \update_info_reg[Internal_Cmd] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Evict]__0 ),
        .Q(\update_info[Internal_Cmd] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Keep] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Keep_n_0_] ),
        .Q(\update_info[Keep] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Kind] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Kind]_0 ),
        .Q(\update_info[Kind] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [0]),
        .Q(\update_info_reg[Len][7]_0 [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [1]),
        .Q(\update_info_reg[Len][7]_0 [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [2]),
        .Q(\update_info_reg[Len][7]_0 [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [3]),
        .Q(\update_info_reg[Len][7]_0 [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [4]),
        .Q(\update_info_reg[Len][7]_0 [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [5]),
        .Q(\update_info_reg[Len][7]_0 [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][6] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [6]),
        .Q(\update_info_reg[Len][7]_0 [6]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][7] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [7]),
        .Q(\update_info_reg[Len][7]_0 [7]),
        .R(ARESET_I));
  FDRE \update_info_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Port_Num][0]_0 ),
        .Q(\update_info_reg[Port_Num][0]_0 ),
        .R(ARESET_I));
  FDRE \update_info_reg[Size][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Size_n_0_][0] ),
        .Q(\update_info[Size] [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Size][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Size_n_0_][1] ),
        .Q(\update_info[Size] [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Size][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Size_n_0_][2] ),
        .Q(\update_info[Size] [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Wr] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Wr]__0 ),
        .Q(\update_info[Wr] ),
        .R(ARESET_I));
  FDRE update_miss_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_miss),
        .Q(update_miss),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][13] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_85),
        .Q(\update_old_tag[Addr] [13]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][14] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_84),
        .Q(\update_old_tag[Addr] [14]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][15] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_83),
        .Q(\update_old_tag[Addr] [15]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][16] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_82),
        .Q(\update_old_tag[Addr] [16]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][17] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_81),
        .Q(\update_old_tag[Addr] [17]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][18] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_80),
        .Q(\update_old_tag[Addr] [18]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][19] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_79),
        .Q(\update_old_tag[Addr] [19]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][20] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_78),
        .Q(\update_old_tag[Addr] [20]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][21] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_77),
        .Q(\update_old_tag[Addr] [21]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][22] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_76),
        .Q(\update_old_tag[Addr] [22]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][23] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_75),
        .Q(\update_old_tag[Addr] [23]),
        .R(ARESET_I));
  FDRE update_read_miss_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_read_miss),
        .Q(update_read_miss),
        .R(ARESET_I));
  CARRY4 update_reused_tag2_carry
       (.CI(1'b0),
        .CO({update_reused_tag2,update_reused_tag2_carry_n_1,update_reused_tag2_carry_n_2,update_reused_tag2_carry_n_3}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(NLW_update_reused_tag2_carry_O_UNCONNECTED[3:0]),
        .S({Chk_Valid_Inst_n_71,Chk_Valid_Inst_n_72,Chk_Valid_Inst_n_73,Chk_Valid_Inst_n_74}));
  FDRE update_reused_tag_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Par_Locked_Inst_n_0),
        .Q(update_reused_tag),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \update_way[1]_i_3 
       (.I0(lu_check_valid_bits[1]),
        .I1(lu_check_valid_bits[0]),
        .O(\update_way[1]_i_3_n_0 ));
  FDRE \update_way_reg[0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lru_check_used_way[0]),
        .Q(\update_way_reg[1]_0 [0]),
        .R(ARESET_I));
  FDRE \update_way_reg[1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lru_check_used_way[1]),
        .Q(\update_way_reg[1]_0 [1]),
        .R(ARESET_I));
  FDRE update_write_hit_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_write_hit),
        .Q(update_write_hit),
        .R(ARESET_I));
  FDRE update_write_miss_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_write_miss),
        .Q(update_write_miss),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'h8)) 
    \wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_i_1 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_info_reg[Allocate]__0 ),
        .O(lookup_wm_allocate));
endmodule

(* ORIG_REF_NAME = "sc_lru_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_lru_module
   (lru_check_next_way,
    S,
    S_0,
    S_1,
    S_2,
    S_3,
    S_4,
    S_5,
    S_6,
    \check_current_tree_reg[2]_0 ,
    ACLK,
    lookup_fetch_piperun,
    WEBWE,
    Q,
    D,
    DIBDI,
    ARESET,
    lookup_mem_piperun,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 );
  output [1:0]lru_check_next_way;
  output S;
  output S_0;
  output S_1;
  output S_2;
  output S_3;
  output S_4;
  output S_5;
  output S_6;
  output [1:0]\check_current_tree_reg[2]_0 ;
  input ACLK;
  input lookup_fetch_piperun;
  input [0:0]WEBWE;
  input [6:0]Q;
  input [6:0]D;
  input [2:0]DIBDI;
  input ARESET;
  input lookup_mem_piperun;
  input [3:0]\Using_FPGA.MUXCY_I ;
  input [3:0]\Using_FPGA.MUXCY_I_0 ;

  wire ACLK;
  wire ARESET;
  wire [6:0]D;
  wire [2:0]DIBDI;
  wire [6:0]Q;
  wire S;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire S_6;
  wire [3:0]\Using_FPGA.MUXCY_I ;
  wire [3:0]\Using_FPGA.MUXCY_I_0 ;
  wire [0:0]WEBWE;
  wire [1:0]\check_current_tree_reg[2]_0 ;
  wire lookup_fetch_piperun;
  wire lookup_mem_piperun;
  wire [1:0]lru_check_next_way;
  wire [2:0]mem_current_tree;
  wire [1:1]next_way;

  Fast_IP_Clock_system_cache_0_0_sc_ram_module LRU
       (.ACLK(ACLK),
        .D(D),
        .DIBDI(DIBDI),
        .DOADO(mem_current_tree),
        .Q(Q),
        .WEBWE(WEBWE),
        .lookup_fetch_piperun(lookup_fetch_piperun),
        .next_way(next_way));
  LUT3 #(
    .INIT(8'hEF)) 
    \Using_FPGA.MUXCY_I_i_1__83 
       (.I0(lru_check_next_way[0]),
        .I1(lru_check_next_way[1]),
        .I2(\Using_FPGA.MUXCY_I [0]),
        .O(S));
  LUT3 #(
    .INIT(8'hEF)) 
    \Using_FPGA.MUXCY_I_i_1__84 
       (.I0(lru_check_next_way[0]),
        .I1(lru_check_next_way[1]),
        .I2(\Using_FPGA.MUXCY_I_0 [0]),
        .O(S_0));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__85 
       (.I0(lru_check_next_way[0]),
        .I1(lru_check_next_way[1]),
        .I2(\Using_FPGA.MUXCY_I [1]),
        .O(S_1));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__86 
       (.I0(lru_check_next_way[0]),
        .I1(lru_check_next_way[1]),
        .I2(\Using_FPGA.MUXCY_I_0 [1]),
        .O(S_2));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__87 
       (.I0(lru_check_next_way[1]),
        .I1(lru_check_next_way[0]),
        .I2(\Using_FPGA.MUXCY_I [2]),
        .O(S_3));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__88 
       (.I0(lru_check_next_way[1]),
        .I1(lru_check_next_way[0]),
        .I2(\Using_FPGA.MUXCY_I_0 [2]),
        .O(S_4));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.MUXCY_I_i_1__89 
       (.I0(lru_check_next_way[0]),
        .I1(lru_check_next_way[1]),
        .I2(\Using_FPGA.MUXCY_I [3]),
        .O(S_5));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.MUXCY_I_i_1__90 
       (.I0(lru_check_next_way[0]),
        .I1(lru_check_next_way[1]),
        .I2(\Using_FPGA.MUXCY_I_0 [3]),
        .O(S_6));
  FDRE \check_current_tree_reg[1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(mem_current_tree[1]),
        .Q(\check_current_tree_reg[2]_0 [0]),
        .R(ARESET));
  FDRE \check_current_tree_reg[2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(mem_current_tree[2]),
        .Q(\check_current_tree_reg[2]_0 [1]),
        .R(ARESET));
  FDRE \lru_check_next_way_i_reg[0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(mem_current_tree[0]),
        .Q(lru_check_next_way[0]),
        .R(ARESET));
  FDRE \lru_check_next_way_i_reg[1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(next_way),
        .Q(lru_check_next_way[1]),
        .R(ARESET));
endmodule

(* ORIG_REF_NAME = "sc_m_axi_interface" *) 
module Fast_IP_Clock_system_cache_0_0_sc_m_axi_interface
   (M0_AXI_AWPROT,
    M0_AXI_WLAST,
    M0_AXI_ARPROT,
    M_AXI_WVALID_I_reg_0,
    M_AXI_AWVALID_I_reg_0,
    M_AXI_ARVALID_I_reg_0,
    M0_AXI_ARREADY_0,
    M_AXI_AWVALID_I_reg_1,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    ACLK,
    ARESET,
    \write_req_ordered_info[0][Prot] ,
    \write_data_ordered_info[0][Last] ,
    \read_req_ordered_info[0][Prot] ,
    M_AXI_WVALID_I_reg_1,
    M0_AXI_AWREADY,
    M0_AXI_ARREADY,
    M0_AXI_WREADY,
    aw_fifo_empty,
    \read_req_ordered_info[0][Valid] ,
    D,
    \M_AXI_AWLEN_reg[7]_0 ,
    \M_AXI_AWSIZE_reg[1]_0 ,
    \write_req_ordered_info[0][Kind] ,
    \M_AXI_WDATA_reg[31]_0 ,
    \M_AXI_WSTRB_reg[3]_0 ,
    \M_AXI_ARADDR_reg[23]_0 ,
    \M_AXI_ARLEN_reg[7]_0 ,
    \M_AXI_ARSIZE_reg[2]_0 ,
    \read_req_ordered_info[0][Kind] );
  output [0:0]M0_AXI_AWPROT;
  output M0_AXI_WLAST;
  output [0:0]M0_AXI_ARPROT;
  output M_AXI_WVALID_I_reg_0;
  output M_AXI_AWVALID_I_reg_0;
  output M_AXI_ARVALID_I_reg_0;
  output M0_AXI_ARREADY_0;
  output M_AXI_AWVALID_I_reg_1;
  output [23:0]M0_AXI_AWADDR;
  output [7:0]M0_AXI_AWLEN;
  output [1:0]M0_AXI_AWSIZE;
  output [1:0]M0_AXI_AWBURST;
  output [31:0]M0_AXI_WDATA;
  output [3:0]M0_AXI_WSTRB;
  output [23:0]M0_AXI_ARADDR;
  output [7:0]M0_AXI_ARLEN;
  output [2:0]M0_AXI_ARSIZE;
  output [1:0]M0_AXI_ARBURST;
  input ACLK;
  input ARESET;
  input [0:0]\write_req_ordered_info[0][Prot] ;
  input \write_data_ordered_info[0][Last] ;
  input [0:0]\read_req_ordered_info[0][Prot] ;
  input M_AXI_WVALID_I_reg_1;
  input M0_AXI_AWREADY;
  input M0_AXI_ARREADY;
  input M0_AXI_WREADY;
  input aw_fifo_empty;
  input \read_req_ordered_info[0][Valid] ;
  input [23:0]D;
  input [7:0]\M_AXI_AWLEN_reg[7]_0 ;
  input [1:0]\M_AXI_AWSIZE_reg[1]_0 ;
  input \write_req_ordered_info[0][Kind] ;
  input [31:0]\M_AXI_WDATA_reg[31]_0 ;
  input [3:0]\M_AXI_WSTRB_reg[3]_0 ;
  input [23:0]\M_AXI_ARADDR_reg[23]_0 ;
  input [7:0]\M_AXI_ARLEN_reg[7]_0 ;
  input [2:0]\M_AXI_ARSIZE_reg[2]_0 ;
  input \read_req_ordered_info[0][Kind] ;

  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [23:0]D;
  wire [23:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [7:0]M0_AXI_ARLEN;
  wire [0:0]M0_AXI_ARPROT;
  wire M0_AXI_ARREADY;
  wire M0_AXI_ARREADY_0;
  wire [2:0]M0_AXI_ARSIZE;
  wire [23:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [7:0]M0_AXI_AWLEN;
  wire [0:0]M0_AXI_AWPROT;
  wire M0_AXI_AWREADY;
  wire [1:0]M0_AXI_AWSIZE;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire \M_AXI_ARADDR[23]_i_1_n_0 ;
  wire [23:0]\M_AXI_ARADDR_reg[23]_0 ;
  wire \M_AXI_ARBURST[0]_i_1_n_0 ;
  wire \M_AXI_ARBURST[1]_i_1_n_0 ;
  wire [7:0]\M_AXI_ARLEN_reg[7]_0 ;
  wire [2:0]\M_AXI_ARSIZE_reg[2]_0 ;
  wire M_AXI_ARVALID_I_i_1_n_0;
  wire M_AXI_ARVALID_I_reg_0;
  wire \M_AXI_AWADDR[23]_i_1_n_0 ;
  wire \M_AXI_AWBURST[0]_i_1_n_0 ;
  wire \M_AXI_AWBURST[1]_i_1_n_0 ;
  wire [7:0]\M_AXI_AWLEN_reg[7]_0 ;
  wire [1:0]\M_AXI_AWSIZE_reg[1]_0 ;
  wire M_AXI_AWVALID_I_i_1_n_0;
  wire M_AXI_AWVALID_I_reg_0;
  wire M_AXI_AWVALID_I_reg_1;
  wire [31:0]\M_AXI_WDATA_reg[31]_0 ;
  wire [3:0]\M_AXI_WSTRB_reg[3]_0 ;
  wire M_AXI_WVALID_I_reg_0;
  wire M_AXI_WVALID_I_reg_1;
  wire aw_fifo_empty;
  wire \read_req_ordered_info[0][Kind] ;
  wire [0:0]\read_req_ordered_info[0][Prot] ;
  wire \read_req_ordered_info[0][Valid] ;
  wire read_req_ordered_ready;
  wire \write_data_ordered_info[0][Last] ;
  wire write_data_ordered_ready;
  wire \write_req_ordered_info[0][Kind] ;
  wire [0:0]\write_req_ordered_info[0][Prot] ;
  wire write_req_ordered_ready;

  LUT2 #(
    .INIT(4'hD)) 
    \M_AXI_ARADDR[23]_i_1 
       (.I0(M_AXI_ARVALID_I_reg_0),
        .I1(M0_AXI_ARREADY),
        .O(\M_AXI_ARADDR[23]_i_1_n_0 ));
  FDRE \M_AXI_ARADDR_reg[0] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [0]),
        .Q(M0_AXI_ARADDR[0]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[10] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [10]),
        .Q(M0_AXI_ARADDR[10]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[11] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [11]),
        .Q(M0_AXI_ARADDR[11]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[12] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [12]),
        .Q(M0_AXI_ARADDR[12]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[13] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [13]),
        .Q(M0_AXI_ARADDR[13]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[14] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [14]),
        .Q(M0_AXI_ARADDR[14]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[15] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [15]),
        .Q(M0_AXI_ARADDR[15]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[16] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [16]),
        .Q(M0_AXI_ARADDR[16]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[17] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [17]),
        .Q(M0_AXI_ARADDR[17]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[18] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [18]),
        .Q(M0_AXI_ARADDR[18]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[19] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [19]),
        .Q(M0_AXI_ARADDR[19]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[1] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [1]),
        .Q(M0_AXI_ARADDR[1]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[20] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [20]),
        .Q(M0_AXI_ARADDR[20]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[21] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [21]),
        .Q(M0_AXI_ARADDR[21]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[22] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [22]),
        .Q(M0_AXI_ARADDR[22]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[23] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [23]),
        .Q(M0_AXI_ARADDR[23]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[2] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [2]),
        .Q(M0_AXI_ARADDR[2]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[3] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [3]),
        .Q(M0_AXI_ARADDR[3]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[4] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [4]),
        .Q(M0_AXI_ARADDR[4]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[5] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [5]),
        .Q(M0_AXI_ARADDR[5]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[6] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [6]),
        .Q(M0_AXI_ARADDR[6]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[7] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [7]),
        .Q(M0_AXI_ARADDR[7]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[8] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [8]),
        .Q(M0_AXI_ARADDR[8]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[9] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[23]_i_1_n_0 ),
        .D(\M_AXI_ARADDR_reg[23]_0 [9]),
        .Q(M0_AXI_ARADDR[9]),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h03030A03)) 
    \M_AXI_ARBURST[0]_i_1 
       (.I0(M0_AXI_ARBURST[0]),
        .I1(\read_req_ordered_info[0][Kind] ),
        .I2(ARESET_I),
        .I3(M_AXI_ARVALID_I_reg_0),
        .I4(M0_AXI_ARREADY),
        .O(\M_AXI_ARBURST[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h22322202)) 
    \M_AXI_ARBURST[1]_i_1 
       (.I0(\read_req_ordered_info[0][Kind] ),
        .I1(ARESET_I),
        .I2(M_AXI_ARVALID_I_reg_0),
        .I3(M0_AXI_ARREADY),
        .I4(M0_AXI_ARBURST[1]),
        .O(\M_AXI_ARBURST[1]_i_1_n_0 ));
  FDRE \M_AXI_ARBURST_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\M_AXI_ARBURST[0]_i_1_n_0 ),
        .Q(M0_AXI_ARBURST[0]),
        .R(1'b0));
  FDRE \M_AXI_ARBURST_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\M_AXI_ARBURST[1]_i_1_n_0 ),
        .Q(M0_AXI_ARBURST[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \M_AXI_ARLEN[7]_i_1 
       (.I0(M0_AXI_ARREADY),
        .I1(M_AXI_ARVALID_I_reg_0),
        .O(read_req_ordered_ready));
  FDRE \M_AXI_ARLEN_reg[0] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [0]),
        .Q(M0_AXI_ARLEN[0]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[1] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [1]),
        .Q(M0_AXI_ARLEN[1]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[2] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [2]),
        .Q(M0_AXI_ARLEN[2]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[3] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [3]),
        .Q(M0_AXI_ARLEN[3]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[4] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [4]),
        .Q(M0_AXI_ARLEN[4]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[5] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [5]),
        .Q(M0_AXI_ARLEN[5]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[6] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [6]),
        .Q(M0_AXI_ARLEN[6]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[7] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARLEN_reg[7]_0 [7]),
        .Q(M0_AXI_ARLEN[7]),
        .R(ARESET_I));
  FDSE \M_AXI_ARPROT_reg[1] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\read_req_ordered_info[0][Prot] ),
        .Q(M0_AXI_ARPROT),
        .S(ARESET_I));
  FDRE \M_AXI_ARSIZE_reg[0] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARSIZE_reg[2]_0 [0]),
        .Q(M0_AXI_ARSIZE[0]),
        .R(ARESET_I));
  FDSE \M_AXI_ARSIZE_reg[1] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARSIZE_reg[2]_0 [1]),
        .Q(M0_AXI_ARSIZE[1]),
        .S(ARESET_I));
  FDRE \M_AXI_ARSIZE_reg[2] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\M_AXI_ARSIZE_reg[2]_0 [2]),
        .Q(M0_AXI_ARSIZE[2]),
        .R(ARESET_I));
  LUT4 #(
    .INIT(16'h00F4)) 
    M_AXI_ARVALID_I_i_1
       (.I0(M0_AXI_ARREADY),
        .I1(M_AXI_ARVALID_I_reg_0),
        .I2(\read_req_ordered_info[0][Valid] ),
        .I3(ARESET_I),
        .O(M_AXI_ARVALID_I_i_1_n_0));
  FDRE M_AXI_ARVALID_I_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(M_AXI_ARVALID_I_i_1_n_0),
        .Q(M_AXI_ARVALID_I_reg_0),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hD)) 
    \M_AXI_AWADDR[23]_i_1 
       (.I0(M_AXI_AWVALID_I_reg_0),
        .I1(M0_AXI_AWREADY),
        .O(\M_AXI_AWADDR[23]_i_1_n_0 ));
  FDRE \M_AXI_AWADDR_reg[0] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[0]),
        .Q(M0_AXI_AWADDR[0]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[10] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[10]),
        .Q(M0_AXI_AWADDR[10]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[11] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[11]),
        .Q(M0_AXI_AWADDR[11]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[12] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[12]),
        .Q(M0_AXI_AWADDR[12]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[13] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[13]),
        .Q(M0_AXI_AWADDR[13]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[14] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[14]),
        .Q(M0_AXI_AWADDR[14]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[15] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[15]),
        .Q(M0_AXI_AWADDR[15]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[16] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[16]),
        .Q(M0_AXI_AWADDR[16]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[17] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[17]),
        .Q(M0_AXI_AWADDR[17]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[18] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[18]),
        .Q(M0_AXI_AWADDR[18]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[19] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[19]),
        .Q(M0_AXI_AWADDR[19]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[1] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[1]),
        .Q(M0_AXI_AWADDR[1]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[20] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[20]),
        .Q(M0_AXI_AWADDR[20]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[21] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[21]),
        .Q(M0_AXI_AWADDR[21]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[22] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[22]),
        .Q(M0_AXI_AWADDR[22]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[23] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[23]),
        .Q(M0_AXI_AWADDR[23]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[2] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[2]),
        .Q(M0_AXI_AWADDR[2]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[3] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[3]),
        .Q(M0_AXI_AWADDR[3]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[4] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[4]),
        .Q(M0_AXI_AWADDR[4]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[5] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[5]),
        .Q(M0_AXI_AWADDR[5]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[6] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[6]),
        .Q(M0_AXI_AWADDR[6]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[7] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[7]),
        .Q(M0_AXI_AWADDR[7]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[8] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[8]),
        .Q(M0_AXI_AWADDR[8]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[9] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[23]_i_1_n_0 ),
        .D(D[9]),
        .Q(M0_AXI_AWADDR[9]),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h03030A03)) 
    \M_AXI_AWBURST[0]_i_1 
       (.I0(M0_AXI_AWBURST[0]),
        .I1(\write_req_ordered_info[0][Kind] ),
        .I2(ARESET_I),
        .I3(M_AXI_AWVALID_I_reg_0),
        .I4(M0_AXI_AWREADY),
        .O(\M_AXI_AWBURST[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h22322202)) 
    \M_AXI_AWBURST[1]_i_1 
       (.I0(\write_req_ordered_info[0][Kind] ),
        .I1(ARESET_I),
        .I2(M_AXI_AWVALID_I_reg_0),
        .I3(M0_AXI_AWREADY),
        .I4(M0_AXI_AWBURST[1]),
        .O(\M_AXI_AWBURST[1]_i_1_n_0 ));
  FDRE \M_AXI_AWBURST_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\M_AXI_AWBURST[0]_i_1_n_0 ),
        .Q(M0_AXI_AWBURST[0]),
        .R(1'b0));
  FDRE \M_AXI_AWBURST_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\M_AXI_AWBURST[1]_i_1_n_0 ),
        .Q(M0_AXI_AWBURST[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \M_AXI_AWLEN[7]_i_1 
       (.I0(M0_AXI_AWREADY),
        .I1(M_AXI_AWVALID_I_reg_0),
        .O(write_req_ordered_ready));
  FDRE \M_AXI_AWLEN_reg[0] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [0]),
        .Q(M0_AXI_AWLEN[0]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[1] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [1]),
        .Q(M0_AXI_AWLEN[1]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[2] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [2]),
        .Q(M0_AXI_AWLEN[2]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[3] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [3]),
        .Q(M0_AXI_AWLEN[3]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[4] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [4]),
        .Q(M0_AXI_AWLEN[4]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[5] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [5]),
        .Q(M0_AXI_AWLEN[5]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[6] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [6]),
        .Q(M0_AXI_AWLEN[6]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[7] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWLEN_reg[7]_0 [7]),
        .Q(M0_AXI_AWLEN[7]),
        .R(ARESET_I));
  FDSE \M_AXI_AWPROT_reg[1] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\write_req_ordered_info[0][Prot] ),
        .Q(M0_AXI_AWPROT),
        .S(ARESET_I));
  FDRE \M_AXI_AWSIZE_reg[0] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWSIZE_reg[1]_0 [0]),
        .Q(M0_AXI_AWSIZE[0]),
        .R(ARESET_I));
  FDSE \M_AXI_AWSIZE_reg[1] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\M_AXI_AWSIZE_reg[1]_0 [1]),
        .Q(M0_AXI_AWSIZE[1]),
        .S(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h004F)) 
    M_AXI_AWVALID_I_i_1
       (.I0(M0_AXI_AWREADY),
        .I1(M_AXI_AWVALID_I_reg_0),
        .I2(aw_fifo_empty),
        .I3(ARESET_I),
        .O(M_AXI_AWVALID_I_i_1_n_0));
  FDRE M_AXI_AWVALID_I_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(M_AXI_AWVALID_I_i_1_n_0),
        .Q(M_AXI_AWVALID_I_reg_0),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \M_AXI_WDATA[31]_i_1 
       (.I0(M0_AXI_WREADY),
        .I1(M_AXI_WVALID_I_reg_0),
        .O(write_data_ordered_ready));
  FDRE \M_AXI_WDATA_reg[0] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [0]),
        .Q(M0_AXI_WDATA[0]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[10] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [10]),
        .Q(M0_AXI_WDATA[10]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[11] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [11]),
        .Q(M0_AXI_WDATA[11]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[12] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [12]),
        .Q(M0_AXI_WDATA[12]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[13] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [13]),
        .Q(M0_AXI_WDATA[13]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[14] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [14]),
        .Q(M0_AXI_WDATA[14]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[15] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [15]),
        .Q(M0_AXI_WDATA[15]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[16] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [16]),
        .Q(M0_AXI_WDATA[16]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[17] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [17]),
        .Q(M0_AXI_WDATA[17]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[18] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [18]),
        .Q(M0_AXI_WDATA[18]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[19] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [19]),
        .Q(M0_AXI_WDATA[19]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[1] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [1]),
        .Q(M0_AXI_WDATA[1]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[20] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [20]),
        .Q(M0_AXI_WDATA[20]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[21] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [21]),
        .Q(M0_AXI_WDATA[21]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[22] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [22]),
        .Q(M0_AXI_WDATA[22]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[23] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [23]),
        .Q(M0_AXI_WDATA[23]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[24] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [24]),
        .Q(M0_AXI_WDATA[24]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[25] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [25]),
        .Q(M0_AXI_WDATA[25]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[26] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [26]),
        .Q(M0_AXI_WDATA[26]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[27] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [27]),
        .Q(M0_AXI_WDATA[27]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[28] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [28]),
        .Q(M0_AXI_WDATA[28]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[29] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [29]),
        .Q(M0_AXI_WDATA[29]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[2] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [2]),
        .Q(M0_AXI_WDATA[2]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[30] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [30]),
        .Q(M0_AXI_WDATA[30]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[31] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [31]),
        .Q(M0_AXI_WDATA[31]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[3] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [3]),
        .Q(M0_AXI_WDATA[3]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[4] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [4]),
        .Q(M0_AXI_WDATA[4]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[5] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [5]),
        .Q(M0_AXI_WDATA[5]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[6] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [6]),
        .Q(M0_AXI_WDATA[6]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[7] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [7]),
        .Q(M0_AXI_WDATA[7]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[8] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [8]),
        .Q(M0_AXI_WDATA[8]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[9] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WDATA_reg[31]_0 [9]),
        .Q(M0_AXI_WDATA[9]),
        .R(ARESET_I));
  FDRE M_AXI_WLAST_I_reg
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\write_data_ordered_info[0][Last] ),
        .Q(M0_AXI_WLAST),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[0] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WSTRB_reg[3]_0 [0]),
        .Q(M0_AXI_WSTRB[0]),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[1] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WSTRB_reg[3]_0 [1]),
        .Q(M0_AXI_WSTRB[1]),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[2] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WSTRB_reg[3]_0 [2]),
        .Q(M0_AXI_WSTRB[2]),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[3] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\M_AXI_WSTRB_reg[3]_0 [3]),
        .Q(M0_AXI_WSTRB[3]),
        .R(ARESET_I));
  FDRE M_AXI_WVALID_I_reg
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(M_AXI_WVALID_I_reg_1),
        .Q(M_AXI_WVALID_I_reg_0),
        .R(ARESET_I));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__19 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h0D)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__9 
       (.I0(M_AXI_AWVALID_I_reg_0),
        .I1(M0_AXI_AWREADY),
        .I2(aw_fifo_empty),
        .O(M_AXI_AWVALID_I_reg_1));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__187 
       (.I0(M0_AXI_ARREADY),
        .I1(M_AXI_ARVALID_I_reg_0),
        .O(M0_AXI_ARREADY_0));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_ram_module
   (DOADO,
    next_way,
    ACLK,
    lookup_fetch_piperun,
    WEBWE,
    Q,
    D,
    DIBDI);
  output [2:0]DOADO;
  output [0:0]next_way;
  input ACLK;
  input lookup_fetch_piperun;
  input [0:0]WEBWE;
  input [6:0]Q;
  input [6:0]D;
  input [2:0]DIBDI;

  wire ACLK;
  wire [6:0]D;
  wire [2:0]DIBDI;
  wire [2:0]DOADO;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_65 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_66 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_67 ;
  wire [6:0]Q;
  wire [0:0]WEBWE;
  wire lookup_fetch_piperun;
  wire [0:0]next_way;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:3]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:3]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,Q,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,D,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DIBDI}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:3],DOADO}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:3],\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_65 ,\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_66 ,\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_67 }),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lookup_fetch_piperun),
        .ENBWREN(WEBWE),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEBWE}));
  LUT3 #(
    .INIT(8'hB8)) 
    \lru_check_next_way_i[1]_i_1 
       (.I0(DOADO[2]),
        .I1(DOADO[0]),
        .I2(DOADO[1]),
        .O(next_way));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized1
   (\The_Compare[0].sel_reg ,
    A_0,
    \The_Compare[2].sel_reg ,
    \The_Compare[3].sel_reg ,
    \The_Compare[0].sel_reg_1 ,
    A_2,
    \The_Compare[2].sel_reg_3 ,
    \The_Compare[3].sel_reg_4 ,
    \The_Compare[0].sel_reg_5 ,
    A_6,
    \The_Compare[2].sel_reg_7 ,
    \The_Compare[3].sel_reg_8 ,
    \The_Compare[0].sel_reg_9 ,
    A_10,
    \The_Compare[2].sel_reg_11 ,
    \The_Compare[3].sel_reg_12 ,
    CO,
    \The_Compare[0].sel_reg_13 ,
    lookup_tag_current_word_i__0,
    \The_Compare[0].sel_reg_14 ,
    \The_Compare[0].sel_reg_15 ,
    \The_Compare[0].sel_reg_16 ,
    A_17,
    A_18,
    A_19,
    A_20,
    \The_Compare[2].sel_reg_21 ,
    \The_Compare[2].sel_reg_22 ,
    \The_Compare[2].sel_reg_23 ,
    \The_Compare[2].sel_reg_24 ,
    lookup_tag_current_word_i,
    Q,
    update_cur_tag_rd_way,
    \Using_FPGA.MUXCY_I ,
    \Using_FPGA.MUXCY_I_0 ,
    \Using_FPGA.MUXCY_I_1 ,
    \Using_FPGA.MUXCY_I_2 ,
    \Using_FPGA.MUXCY_I_3 ,
    \Using_FPGA.MUXCY_I_4 ,
    \Using_FPGA.MUXCY_I_5 ,
    \Using_FPGA.MUXCY_I_6 ,
    \Using_FPGA.MUXCY_I_7 ,
    ACLK,
    I168,
    p_0_in5_out,
    A,
    DPRA,
    E,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ,
    p_0_in4_out,
    p_0_in2_out,
    p_0_in0_out);
  output \The_Compare[0].sel_reg ;
  output A_0;
  output \The_Compare[2].sel_reg ;
  output \The_Compare[3].sel_reg ;
  output \The_Compare[0].sel_reg_1 ;
  output A_2;
  output \The_Compare[2].sel_reg_3 ;
  output \The_Compare[3].sel_reg_4 ;
  output \The_Compare[0].sel_reg_5 ;
  output A_6;
  output \The_Compare[2].sel_reg_7 ;
  output \The_Compare[3].sel_reg_8 ;
  output \The_Compare[0].sel_reg_9 ;
  output A_10;
  output \The_Compare[2].sel_reg_11 ;
  output \The_Compare[3].sel_reg_12 ;
  output [0:0]CO;
  output \The_Compare[0].sel_reg_13 ;
  output [43:0]lookup_tag_current_word_i__0;
  output \The_Compare[0].sel_reg_14 ;
  output \The_Compare[0].sel_reg_15 ;
  output \The_Compare[0].sel_reg_16 ;
  output A_17;
  output A_18;
  output A_19;
  output A_20;
  output \The_Compare[2].sel_reg_21 ;
  output \The_Compare[2].sel_reg_22 ;
  output \The_Compare[2].sel_reg_23 ;
  output \The_Compare[2].sel_reg_24 ;
  output [15:0]lookup_tag_current_word_i;
  input [10:0]Q;
  input [1:0]update_cur_tag_rd_way;
  input \Using_FPGA.MUXCY_I ;
  input \Using_FPGA.MUXCY_I_0 ;
  input \Using_FPGA.MUXCY_I_1 ;
  input \Using_FPGA.MUXCY_I_2 ;
  input \Using_FPGA.MUXCY_I_3 ;
  input \Using_FPGA.MUXCY_I_4 ;
  input \Using_FPGA.MUXCY_I_5 ;
  input \Using_FPGA.MUXCY_I_6 ;
  input \Using_FPGA.MUXCY_I_7 ;
  input ACLK;
  input [14:0]I168;
  input p_0_in5_out;
  input [6:0]A;
  input [6:0]DPRA;
  input [0:0]E;
  input [0:0]\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ;
  input p_0_in4_out;
  input p_0_in2_out;
  input p_0_in0_out;

  wire [6:0]A;
  wire ACLK;
  wire A_0;
  wire A_10;
  wire A_17;
  wire A_18;
  wire A_19;
  wire A_2;
  wire A_20;
  wire A_6;
  wire [0:0]CO;
  wire [6:0]DPRA;
  wire [0:0]E;
  wire [14:0]I168;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ;
  wire [0:0]\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ;
  wire [10:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_1 ;
  wire \The_Compare[0].sel_reg_13 ;
  wire \The_Compare[0].sel_reg_14 ;
  wire \The_Compare[0].sel_reg_15 ;
  wire \The_Compare[0].sel_reg_16 ;
  wire \The_Compare[0].sel_reg_5 ;
  wire \The_Compare[0].sel_reg_9 ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[2].sel_reg_11 ;
  wire \The_Compare[2].sel_reg_21 ;
  wire \The_Compare[2].sel_reg_22 ;
  wire \The_Compare[2].sel_reg_23 ;
  wire \The_Compare[2].sel_reg_24 ;
  wire \The_Compare[2].sel_reg_3 ;
  wire \The_Compare[2].sel_reg_7 ;
  wire \The_Compare[3].sel_reg ;
  wire \The_Compare[3].sel_reg_12 ;
  wire \The_Compare[3].sel_reg_4 ;
  wire \The_Compare[3].sel_reg_8 ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_0 ;
  wire \Using_FPGA.MUXCY_I_1 ;
  wire \Using_FPGA.MUXCY_I_2 ;
  wire \Using_FPGA.MUXCY_I_3 ;
  wire \Using_FPGA.MUXCY_I_4 ;
  wire \Using_FPGA.MUXCY_I_5 ;
  wire \Using_FPGA.MUXCY_I_6 ;
  wire \Using_FPGA.MUXCY_I_7 ;
  wire [15:0]lookup_tag_current_word_i;
  wire [43:0]lookup_tag_current_word_i__0;
  wire p_0_in0_out;
  wire p_0_in2_out;
  wire p_0_in4_out;
  wire p_0_in5_out;
  wire [10:0]p_2_out;
  wire [14:0]p_3_out;
  wire [1:0]update_cur_tag_rd_way;
  wire update_lock_release_i_10_n_0;
  wire update_lock_release_i_11_n_0;
  wire update_lock_release_i_12_n_0;
  wire update_lock_release_i_13_n_0;
  wire update_lock_release_i_14_n_0;
  wire update_lock_release_i_15_n_0;
  wire update_lock_release_i_16_n_0;
  wire update_lock_release_i_17_n_0;
  wire update_lock_release_i_3_n_0;
  wire update_lock_release_i_4_n_0;
  wire update_lock_release_i_5_n_0;
  wire update_lock_release_i_6_n_0;
  wire update_lock_release_i_7_n_0;
  wire update_lock_release_i_8_n_0;
  wire update_lock_release_i_9_n_0;
  wire update_lock_release_reg_i_2_n_1;
  wire update_lock_release_reg_i_2_n_2;
  wire update_lock_release_reg_i_2_n_3;
  wire [55:0]update_tag_current_word_i;
  wire [3:0]NLW_update_lock_release_reg_i_2_O_UNCONNECTED;

  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0 
       (.A(A),
        .D(I168[0]),
        .DPO(p_3_out[0]),
        .DPRA(DPRA),
        .SPO(p_2_out[0]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_10_10 
       (.A(A),
        .D(I168[10]),
        .DPO(p_3_out[10]),
        .DPRA(DPRA),
        .SPO(p_2_out[10]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_11_11 
       (.A(A),
        .D(I168[11]),
        .DPO(p_3_out[11]),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_12_12 
       (.A(A),
        .D(I168[12]),
        .DPO(p_3_out[12]),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_13_13 
       (.A(A),
        .D(I168[13]),
        .DPO(p_3_out[13]),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_14_14 
       (.A(A),
        .D(I168[14]),
        .DPO(p_3_out[14]),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_1_1 
       (.A(A),
        .D(I168[1]),
        .DPO(p_3_out[1]),
        .DPRA(DPRA),
        .SPO(p_2_out[1]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_2_2 
       (.A(A),
        .D(I168[2]),
        .DPO(p_3_out[2]),
        .DPRA(DPRA),
        .SPO(p_2_out[2]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_3_3 
       (.A(A),
        .D(I168[3]),
        .DPO(p_3_out[3]),
        .DPRA(DPRA),
        .SPO(p_2_out[3]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_4_4 
       (.A(A),
        .D(I168[4]),
        .DPO(p_3_out[4]),
        .DPRA(DPRA),
        .SPO(p_2_out[4]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_5_5 
       (.A(A),
        .D(I168[5]),
        .DPO(p_3_out[5]),
        .DPRA(DPRA),
        .SPO(p_2_out[5]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_6_6 
       (.A(A),
        .D(I168[6]),
        .DPO(p_3_out[6]),
        .DPRA(DPRA),
        .SPO(p_2_out[6]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_7_7 
       (.A(A),
        .D(I168[7]),
        .DPO(p_3_out[7]),
        .DPRA(DPRA),
        .SPO(p_2_out[7]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_8_8 
       (.A(A),
        .D(I168[8]),
        .DPO(p_3_out[8]),
        .DPRA(DPRA),
        .SPO(p_2_out[8]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_9_9 
       (.A(A),
        .D(I168[9]),
        .DPO(p_3_out[9]),
        .DPRA(DPRA),
        .SPO(p_2_out[9]),
        .WCLK(ACLK),
        .WE(p_0_in5_out));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[0] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[0]),
        .Q(lookup_tag_current_word_i__0[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[10] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[10]),
        .Q(lookup_tag_current_word_i__0[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[11] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[11]),
        .Q(lookup_tag_current_word_i[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[12] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[12]),
        .Q(lookup_tag_current_word_i[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[13] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[13]),
        .Q(lookup_tag_current_word_i[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[14]),
        .Q(lookup_tag_current_word_i[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[1] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[1]),
        .Q(lookup_tag_current_word_i__0[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[2] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[2]),
        .Q(lookup_tag_current_word_i__0[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[3] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[3]),
        .Q(lookup_tag_current_word_i__0[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[4] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[4]),
        .Q(lookup_tag_current_word_i__0[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[5] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[5]),
        .Q(lookup_tag_current_word_i__0[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[6] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[6]),
        .Q(lookup_tag_current_word_i__0[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[7] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[7]),
        .Q(lookup_tag_current_word_i__0[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[8] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[8]),
        .Q(lookup_tag_current_word_i__0[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[9] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(p_3_out[9]),
        .Q(lookup_tag_current_word_i__0[9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[0]),
        .Q(update_tag_current_word_i[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[10] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[10]),
        .Q(update_tag_current_word_i[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[1] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[1]),
        .Q(update_tag_current_word_i[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[2] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[2]),
        .Q(update_tag_current_word_i[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[3] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[3]),
        .Q(update_tag_current_word_i[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[4] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[4]),
        .Q(update_tag_current_word_i[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[5] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[5]),
        .Q(update_tag_current_word_i[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[6] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[6]),
        .Q(update_tag_current_word_i[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[7] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[7]),
        .Q(update_tag_current_word_i[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[8] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[8]),
        .Q(update_tag_current_word_i[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii_reg[9] 
       (.C(ACLK),
        .CE(E),
        .D(p_2_out[9]),
        .Q(update_tag_current_word_i[9]),
        .R(1'b0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0 
       (.A(A),
        .D(I168[0]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10 
       (.A(A),
        .D(I168[10]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_11_11 
       (.A(A),
        .D(I168[11]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_12_12 
       (.A(A),
        .D(I168[12]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_13_13 
       (.A(A),
        .D(I168[13]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_14_14 
       (.A(A),
        .D(I168[14]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1 
       (.A(A),
        .D(I168[1]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2 
       (.A(A),
        .D(I168[2]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3 
       (.A(A),
        .D(I168[3]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4 
       (.A(A),
        .D(I168[4]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5 
       (.A(A),
        .D(I168[5]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6 
       (.A(A),
        .D(I168[6]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7 
       (.A(A),
        .D(I168[7]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8 
       (.A(A),
        .D(I168[8]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9 
       (.A(A),
        .D(I168[9]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in4_out));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[15] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ),
        .Q(lookup_tag_current_word_i__0[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[16] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ),
        .Q(lookup_tag_current_word_i__0[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[17] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ),
        .Q(lookup_tag_current_word_i__0[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[18] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ),
        .Q(lookup_tag_current_word_i__0[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[19] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ),
        .Q(lookup_tag_current_word_i__0[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[20] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ),
        .Q(lookup_tag_current_word_i__0[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[21] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ),
        .Q(lookup_tag_current_word_i__0[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[22] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ),
        .Q(lookup_tag_current_word_i__0[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[23] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ),
        .Q(lookup_tag_current_word_i__0[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[24] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ),
        .Q(lookup_tag_current_word_i__0[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[25] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ),
        .Q(lookup_tag_current_word_i__0[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[26] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ),
        .Q(lookup_tag_current_word_i[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[27] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ),
        .Q(lookup_tag_current_word_i[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[28] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ),
        .Q(lookup_tag_current_word_i[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ),
        .Q(lookup_tag_current_word_i[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[15] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ),
        .Q(update_tag_current_word_i[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[16] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ),
        .Q(update_tag_current_word_i[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[17] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ),
        .Q(update_tag_current_word_i[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[18] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ),
        .Q(update_tag_current_word_i[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[19] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ),
        .Q(update_tag_current_word_i[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[20] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ),
        .Q(update_tag_current_word_i[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[21] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ),
        .Q(update_tag_current_word_i[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[22] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ),
        .Q(update_tag_current_word_i[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[23] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ),
        .Q(update_tag_current_word_i[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[24] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ),
        .Q(update_tag_current_word_i[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outb_ii_reg[25] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ),
        .Q(update_tag_current_word_i[25]),
        .R(1'b0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0 
       (.A(A),
        .D(I168[0]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10 
       (.A(A),
        .D(I168[10]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_11_11 
       (.A(A),
        .D(I168[11]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_12_12 
       (.A(A),
        .D(I168[12]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_13_13 
       (.A(A),
        .D(I168[13]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_14_14 
       (.A(A),
        .D(I168[14]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1 
       (.A(A),
        .D(I168[1]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2 
       (.A(A),
        .D(I168[2]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3 
       (.A(A),
        .D(I168[3]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4 
       (.A(A),
        .D(I168[4]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5 
       (.A(A),
        .D(I168[5]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6 
       (.A(A),
        .D(I168[6]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7 
       (.A(A),
        .D(I168[7]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8 
       (.A(A),
        .D(I168[8]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9 
       (.A(A),
        .D(I168[9]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in2_out));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ),
        .Q(lookup_tag_current_word_i__0[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[31] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ),
        .Q(lookup_tag_current_word_i__0[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[32] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ),
        .Q(lookup_tag_current_word_i__0[24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[33] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ),
        .Q(lookup_tag_current_word_i__0[25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[34] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ),
        .Q(lookup_tag_current_word_i__0[26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[35] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ),
        .Q(lookup_tag_current_word_i__0[27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[36] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ),
        .Q(lookup_tag_current_word_i__0[28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[37] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ),
        .Q(lookup_tag_current_word_i__0[29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[38] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ),
        .Q(lookup_tag_current_word_i__0[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[39] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ),
        .Q(lookup_tag_current_word_i__0[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[40] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ),
        .Q(lookup_tag_current_word_i__0[32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[41] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ),
        .Q(lookup_tag_current_word_i[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[42] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ),
        .Q(lookup_tag_current_word_i[9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[43] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ),
        .Q(lookup_tag_current_word_i[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ),
        .Q(lookup_tag_current_word_i[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[30] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ),
        .Q(update_tag_current_word_i[30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[31] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ),
        .Q(update_tag_current_word_i[31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[32] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ),
        .Q(update_tag_current_word_i[32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[33] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ),
        .Q(update_tag_current_word_i[33]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[34] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ),
        .Q(update_tag_current_word_i[34]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[35] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ),
        .Q(update_tag_current_word_i[35]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[36] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ),
        .Q(update_tag_current_word_i[36]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[37] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ),
        .Q(update_tag_current_word_i[37]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[38] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ),
        .Q(update_tag_current_word_i[38]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[39] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ),
        .Q(update_tag_current_word_i[39]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outb_ii_reg[40] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ),
        .Q(update_tag_current_word_i[40]),
        .R(1'b0));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0 
       (.A(A),
        .D(I168[0]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "10" *) 
  (* ram_slice_end = "10" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10 
       (.A(A),
        .D(I168[10]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "11" *) 
  (* ram_slice_end = "11" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_11_11 
       (.A(A),
        .D(I168[11]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_11_11_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_12_12 
       (.A(A),
        .D(I168[12]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_12_12_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "13" *) 
  (* ram_slice_end = "13" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_13_13 
       (.A(A),
        .D(I168[13]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_13_13_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "14" *) 
  (* ram_slice_end = "14" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_14_14 
       (.A(A),
        .D(I168[14]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_14_14_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1 
       (.A(A),
        .D(I168[1]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2 
       (.A(A),
        .D(I168[2]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3 
       (.A(A),
        .D(I168[3]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4 
       (.A(A),
        .D(I168[4]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5 
       (.A(A),
        .D(I168[5]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6 
       (.A(A),
        .D(I168[6]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7 
       (.A(A),
        .D(I168[7]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "8" *) 
  (* ram_slice_end = "8" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8 
       (.A(A),
        .D(I168[8]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "127" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "9" *) 
  (* ram_slice_end = "9" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9 
       (.A(A),
        .D(I168[9]),
        .DPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ),
        .DPRA(DPRA),
        .SPO(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ),
        .WCLK(ACLK),
        .WE(p_0_in0_out));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[45] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_n_0 ),
        .Q(lookup_tag_current_word_i__0[33]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[46] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1_n_0 ),
        .Q(lookup_tag_current_word_i__0[34]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[47] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2_n_0 ),
        .Q(lookup_tag_current_word_i__0[35]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[48] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3_n_0 ),
        .Q(lookup_tag_current_word_i__0[36]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[49] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4_n_0 ),
        .Q(lookup_tag_current_word_i__0[37]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[50] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5_n_0 ),
        .Q(lookup_tag_current_word_i__0[38]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[51] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6_n_0 ),
        .Q(lookup_tag_current_word_i__0[39]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[52] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7_n_0 ),
        .Q(lookup_tag_current_word_i__0[40]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[53] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8_n_0 ),
        .Q(lookup_tag_current_word_i__0[41]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[54] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9_n_0 ),
        .Q(lookup_tag_current_word_i__0[42]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[55] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10_n_0 ),
        .Q(lookup_tag_current_word_i__0[43]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[56] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_11_11_n_0 ),
        .Q(lookup_tag_current_word_i[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[57] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_12_12_n_0 ),
        .Q(lookup_tag_current_word_i[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[58] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_13_13_n_0 ),
        .Q(lookup_tag_current_word_i[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] 
       (.C(ACLK),
        .CE(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30]_0 ),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_14_14_n_0 ),
        .Q(lookup_tag_current_word_i[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[45] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_0_0_n_1 ),
        .Q(update_tag_current_word_i[45]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[46] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_1_1_n_1 ),
        .Q(update_tag_current_word_i[46]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[47] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_2_2_n_1 ),
        .Q(update_tag_current_word_i[47]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[48] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_3_3_n_1 ),
        .Q(update_tag_current_word_i[48]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[49] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_4_4_n_1 ),
        .Q(update_tag_current_word_i[49]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[50] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_5_5_n_1 ),
        .Q(update_tag_current_word_i[50]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[51] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_6_6_n_1 ),
        .Q(update_tag_current_word_i[51]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[52] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_7_7_n_1 ),
        .Q(update_tag_current_word_i[52]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[53] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_8_8_n_1 ),
        .Q(update_tag_current_word_i[53]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[54] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_9_9_n_1 ),
        .Q(update_tag_current_word_i[54]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outb_ii_reg[55] 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.RAM_reg_0_127_10_10_n_1 ),
        .Q(update_tag_current_word_i[55]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__106 
       (.I0(lookup_tag_current_word_i__0[34]),
        .I1(\Using_FPGA.MUXCY_I ),
        .I2(lookup_tag_current_word_i__0[35]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .I4(\Using_FPGA.MUXCY_I_1 ),
        .I5(lookup_tag_current_word_i__0[33]),
        .O(\The_Compare[0].sel_reg_13 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__107 
       (.I0(lookup_tag_current_word_i__0[23]),
        .I1(\Using_FPGA.MUXCY_I ),
        .I2(lookup_tag_current_word_i__0[24]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .I4(\Using_FPGA.MUXCY_I_1 ),
        .I5(lookup_tag_current_word_i__0[22]),
        .O(\The_Compare[0].sel_reg_14 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__108 
       (.I0(lookup_tag_current_word_i__0[12]),
        .I1(\Using_FPGA.MUXCY_I ),
        .I2(lookup_tag_current_word_i__0[13]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .I4(\Using_FPGA.MUXCY_I_1 ),
        .I5(lookup_tag_current_word_i__0[11]),
        .O(\The_Compare[0].sel_reg_15 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__109 
       (.I0(lookup_tag_current_word_i__0[1]),
        .I1(\Using_FPGA.MUXCY_I ),
        .I2(lookup_tag_current_word_i__0[2]),
        .I3(\Using_FPGA.MUXCY_I_0 ),
        .I4(\Using_FPGA.MUXCY_I_1 ),
        .I5(lookup_tag_current_word_i__0[0]),
        .O(\The_Compare[0].sel_reg_16 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__110 
       (.I0(lookup_tag_current_word_i__0[37]),
        .I1(\Using_FPGA.MUXCY_I_2 ),
        .I2(lookup_tag_current_word_i__0[38]),
        .I3(\Using_FPGA.MUXCY_I_3 ),
        .I4(\Using_FPGA.MUXCY_I_4 ),
        .I5(lookup_tag_current_word_i__0[36]),
        .O(A_17));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__111 
       (.I0(lookup_tag_current_word_i__0[26]),
        .I1(\Using_FPGA.MUXCY_I_2 ),
        .I2(lookup_tag_current_word_i__0[27]),
        .I3(\Using_FPGA.MUXCY_I_3 ),
        .I4(\Using_FPGA.MUXCY_I_4 ),
        .I5(lookup_tag_current_word_i__0[25]),
        .O(A_18));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__112 
       (.I0(lookup_tag_current_word_i__0[15]),
        .I1(\Using_FPGA.MUXCY_I_2 ),
        .I2(lookup_tag_current_word_i__0[16]),
        .I3(\Using_FPGA.MUXCY_I_3 ),
        .I4(\Using_FPGA.MUXCY_I_4 ),
        .I5(lookup_tag_current_word_i__0[14]),
        .O(A_19));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__113 
       (.I0(lookup_tag_current_word_i__0[4]),
        .I1(\Using_FPGA.MUXCY_I_2 ),
        .I2(lookup_tag_current_word_i__0[5]),
        .I3(\Using_FPGA.MUXCY_I_3 ),
        .I4(\Using_FPGA.MUXCY_I_4 ),
        .I5(lookup_tag_current_word_i__0[3]),
        .O(A_20));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__114 
       (.I0(lookup_tag_current_word_i__0[40]),
        .I1(\Using_FPGA.MUXCY_I_5 ),
        .I2(lookup_tag_current_word_i__0[41]),
        .I3(\Using_FPGA.MUXCY_I_6 ),
        .I4(\Using_FPGA.MUXCY_I_7 ),
        .I5(lookup_tag_current_word_i__0[39]),
        .O(\The_Compare[2].sel_reg_21 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__115 
       (.I0(lookup_tag_current_word_i__0[29]),
        .I1(\Using_FPGA.MUXCY_I_5 ),
        .I2(lookup_tag_current_word_i__0[30]),
        .I3(\Using_FPGA.MUXCY_I_6 ),
        .I4(\Using_FPGA.MUXCY_I_7 ),
        .I5(lookup_tag_current_word_i__0[28]),
        .O(\The_Compare[2].sel_reg_22 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__116 
       (.I0(lookup_tag_current_word_i__0[18]),
        .I1(\Using_FPGA.MUXCY_I_5 ),
        .I2(lookup_tag_current_word_i__0[19]),
        .I3(\Using_FPGA.MUXCY_I_6 ),
        .I4(\Using_FPGA.MUXCY_I_7 ),
        .I5(lookup_tag_current_word_i__0[17]),
        .O(\The_Compare[2].sel_reg_23 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__117 
       (.I0(lookup_tag_current_word_i__0[7]),
        .I1(\Using_FPGA.MUXCY_I_5 ),
        .I2(lookup_tag_current_word_i__0[8]),
        .I3(\Using_FPGA.MUXCY_I_6 ),
        .I4(\Using_FPGA.MUXCY_I_7 ),
        .I5(lookup_tag_current_word_i__0[6]),
        .O(\The_Compare[2].sel_reg_24 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__20 
       (.I0(update_tag_current_word_i[0]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(update_tag_current_word_i[2]),
        .I4(Q[1]),
        .I5(update_tag_current_word_i[1]),
        .O(\The_Compare[0].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__21 
       (.I0(update_tag_current_word_i[3]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(update_tag_current_word_i[4]),
        .I4(Q[5]),
        .I5(update_tag_current_word_i[5]),
        .O(A_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__22 
       (.I0(update_tag_current_word_i[6]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(update_tag_current_word_i[7]),
        .I4(Q[8]),
        .I5(update_tag_current_word_i[8]),
        .O(\The_Compare[2].sel_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__23 
       (.I0(update_tag_current_word_i[9]),
        .I1(Q[9]),
        .I2(update_tag_current_word_i[10]),
        .I3(Q[10]),
        .O(\The_Compare[3].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__24 
       (.I0(update_tag_current_word_i[15]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(update_tag_current_word_i[16]),
        .I4(Q[2]),
        .I5(update_tag_current_word_i[17]),
        .O(\The_Compare[0].sel_reg_1 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__25 
       (.I0(update_tag_current_word_i[18]),
        .I1(Q[3]),
        .I2(Q[5]),
        .I3(update_tag_current_word_i[20]),
        .I4(Q[4]),
        .I5(update_tag_current_word_i[19]),
        .O(A_2));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__26 
       (.I0(update_tag_current_word_i[21]),
        .I1(Q[6]),
        .I2(Q[8]),
        .I3(update_tag_current_word_i[23]),
        .I4(Q[7]),
        .I5(update_tag_current_word_i[22]),
        .O(\The_Compare[2].sel_reg_3 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__27 
       (.I0(update_tag_current_word_i[24]),
        .I1(Q[9]),
        .I2(update_tag_current_word_i[25]),
        .I3(Q[10]),
        .O(\The_Compare[3].sel_reg_4 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__28 
       (.I0(update_tag_current_word_i[30]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(update_tag_current_word_i[31]),
        .I4(Q[2]),
        .I5(update_tag_current_word_i[32]),
        .O(\The_Compare[0].sel_reg_5 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__29 
       (.I0(update_tag_current_word_i[33]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(update_tag_current_word_i[34]),
        .I4(Q[5]),
        .I5(update_tag_current_word_i[35]),
        .O(A_6));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__30 
       (.I0(update_tag_current_word_i[36]),
        .I1(Q[6]),
        .I2(Q[8]),
        .I3(update_tag_current_word_i[38]),
        .I4(Q[7]),
        .I5(update_tag_current_word_i[37]),
        .O(\The_Compare[2].sel_reg_7 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__31 
       (.I0(update_tag_current_word_i[39]),
        .I1(Q[9]),
        .I2(update_tag_current_word_i[40]),
        .I3(Q[10]),
        .O(\The_Compare[3].sel_reg_8 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__32 
       (.I0(update_tag_current_word_i[45]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(update_tag_current_word_i[46]),
        .I4(Q[2]),
        .I5(update_tag_current_word_i[47]),
        .O(\The_Compare[0].sel_reg_9 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__33 
       (.I0(update_tag_current_word_i[48]),
        .I1(Q[3]),
        .I2(Q[4]),
        .I3(update_tag_current_word_i[49]),
        .I4(Q[5]),
        .I5(update_tag_current_word_i[50]),
        .O(A_10));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__34 
       (.I0(update_tag_current_word_i[51]),
        .I1(Q[6]),
        .I2(Q[7]),
        .I3(update_tag_current_word_i[52]),
        .I4(Q[8]),
        .I5(update_tag_current_word_i[53]),
        .O(\The_Compare[2].sel_reg_11 ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__35 
       (.I0(update_tag_current_word_i[54]),
        .I1(Q[9]),
        .I2(update_tag_current_word_i[55]),
        .I3(Q[10]),
        .O(\The_Compare[3].sel_reg_12 ));
  LUT6 #(
    .INIT(64'h5533000F5533FF0F)) 
    update_lock_release_i_10
       (.I0(update_tag_current_word_i[51]),
        .I1(update_tag_current_word_i[36]),
        .I2(update_tag_current_word_i[6]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[21]),
        .O(update_lock_release_i_10_n_0));
  LUT6 #(
    .INIT(64'hF0AAFFCCF0AA00CC)) 
    update_lock_release_i_11
       (.I0(update_tag_current_word_i[38]),
        .I1(update_tag_current_word_i[8]),
        .I2(update_tag_current_word_i[53]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[23]),
        .O(update_lock_release_i_11_n_0));
  LUT6 #(
    .INIT(64'h3355000F3355FF0F)) 
    update_lock_release_i_12
       (.I0(update_tag_current_word_i[34]),
        .I1(update_tag_current_word_i[49]),
        .I2(update_tag_current_word_i[4]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[19]),
        .O(update_lock_release_i_12_n_0));
  LUT6 #(
    .INIT(64'h5533000F5533FF0F)) 
    update_lock_release_i_13
       (.I0(update_tag_current_word_i[48]),
        .I1(update_tag_current_word_i[33]),
        .I2(update_tag_current_word_i[3]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[18]),
        .O(update_lock_release_i_13_n_0));
  LUT6 #(
    .INIT(64'hFFF0CCAA00F0CCAA)) 
    update_lock_release_i_14
       (.I0(update_tag_current_word_i[5]),
        .I1(update_tag_current_word_i[20]),
        .I2(update_tag_current_word_i[35]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[50]),
        .O(update_lock_release_i_14_n_0));
  LUT6 #(
    .INIT(64'h3355000F3355FF0F)) 
    update_lock_release_i_15
       (.I0(update_tag_current_word_i[31]),
        .I1(update_tag_current_word_i[46]),
        .I2(update_tag_current_word_i[1]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[16]),
        .O(update_lock_release_i_15_n_0));
  LUT6 #(
    .INIT(64'hAAF0CCFFAAF0CC00)) 
    update_lock_release_i_16
       (.I0(update_tag_current_word_i[47]),
        .I1(update_tag_current_word_i[17]),
        .I2(update_tag_current_word_i[32]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[2]),
        .O(update_lock_release_i_16_n_0));
  LUT6 #(
    .INIT(64'h0F5500330F55FF33)) 
    update_lock_release_i_17
       (.I0(update_tag_current_word_i[30]),
        .I1(update_tag_current_word_i[0]),
        .I2(update_tag_current_word_i[45]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[15]),
        .O(update_lock_release_i_17_n_0));
  LUT4 #(
    .INIT(16'h6006)) 
    update_lock_release_i_3
       (.I0(update_lock_release_i_7_n_0),
        .I1(Q[10]),
        .I2(update_lock_release_i_8_n_0),
        .I3(Q[9]),
        .O(update_lock_release_i_3_n_0));
  LUT6 #(
    .INIT(64'h0660000000000660)) 
    update_lock_release_i_4
       (.I0(update_lock_release_i_9_n_0),
        .I1(Q[7]),
        .I2(Q[6]),
        .I3(update_lock_release_i_10_n_0),
        .I4(Q[8]),
        .I5(update_lock_release_i_11_n_0),
        .O(update_lock_release_i_4_n_0));
  LUT6 #(
    .INIT(64'h0660000000000660)) 
    update_lock_release_i_5
       (.I0(update_lock_release_i_12_n_0),
        .I1(Q[4]),
        .I2(Q[3]),
        .I3(update_lock_release_i_13_n_0),
        .I4(Q[5]),
        .I5(update_lock_release_i_14_n_0),
        .O(update_lock_release_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000600660060000)) 
    update_lock_release_i_6
       (.I0(update_lock_release_i_15_n_0),
        .I1(Q[1]),
        .I2(Q[2]),
        .I3(update_lock_release_i_16_n_0),
        .I4(Q[0]),
        .I5(update_lock_release_i_17_n_0),
        .O(update_lock_release_i_6_n_0));
  LUT6 #(
    .INIT(64'h5533000F5533FF0F)) 
    update_lock_release_i_7
       (.I0(update_tag_current_word_i[55]),
        .I1(update_tag_current_word_i[40]),
        .I2(update_tag_current_word_i[10]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[25]),
        .O(update_lock_release_i_7_n_0));
  LUT6 #(
    .INIT(64'hAAF0CCFFAAF0CC00)) 
    update_lock_release_i_8
       (.I0(update_tag_current_word_i[54]),
        .I1(update_tag_current_word_i[24]),
        .I2(update_tag_current_word_i[39]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[9]),
        .O(update_lock_release_i_8_n_0));
  LUT6 #(
    .INIT(64'h3355000F3355FF0F)) 
    update_lock_release_i_9
       (.I0(update_tag_current_word_i[37]),
        .I1(update_tag_current_word_i[52]),
        .I2(update_tag_current_word_i[7]),
        .I3(update_cur_tag_rd_way[0]),
        .I4(update_cur_tag_rd_way[1]),
        .I5(update_tag_current_word_i[22]),
        .O(update_lock_release_i_9_n_0));
  CARRY4 update_lock_release_reg_i_2
       (.CI(1'b0),
        .CO({CO,update_lock_release_reg_i_2_n_1,update_lock_release_reg_i_2_n_2,update_lock_release_reg_i_2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(NLW_update_lock_release_reg_i_2_O_UNCONNECTED[3:0]),
        .S({update_lock_release_i_3_n_0,update_lock_release_i_4_n_0,update_lock_release_i_5_n_0,update_lock_release_i_6_n_0}));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3
   (DATA_OUTA,
    DATA_OUTB,
    ACLK,
    ENA,
    O,
    ADDRA,
    ADDRB,
    DATA_INA,
    DATA_INB,
    WEA,
    update_data_we);
  output [31:0]DATA_OUTA;
  output [31:0]DATA_OUTB;
  input ACLK;
  input ENA;
  input O;
  input [10:0]ADDRA;
  input [10:0]ADDRB;
  input [31:0]DATA_INA;
  input [31:0]DATA_INB;
  input [3:0]WEA;
  input update_data_we;

  wire ACLK;
  wire [10:0]ADDRA;
  wire [10:0]ADDRB;
  wire [31:0]DATA_INA;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTA;
  wire [31:0]DATA_OUTB;
  wire ENA;
  wire O;
  wire [3:0]WEA;
  wire update_data_we;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[15:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[15:0]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[15:0]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[15:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[1:0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[31:16]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[31:16]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[31:16]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[31:16]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[3:2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3_107
   (DATA_OUTA,
    DATA_OUTB,
    ACLK,
    ENA,
    O,
    ADDRA,
    ADDRB,
    DATA_INA,
    DATA_INB,
    WEA,
    update_data_we);
  output [31:0]DATA_OUTA;
  output [31:0]DATA_OUTB;
  input ACLK;
  input ENA;
  input O;
  input [10:0]ADDRA;
  input [10:0]ADDRB;
  input [31:0]DATA_INA;
  input [31:0]DATA_INB;
  input [3:0]WEA;
  input update_data_we;

  wire ACLK;
  wire [10:0]ADDRA;
  wire [10:0]ADDRB;
  wire [31:0]DATA_INA;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTA;
  wire [31:0]DATA_OUTB;
  wire ENA;
  wire O;
  wire [3:0]WEA;
  wire update_data_we;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[15:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[15:0]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[15:0]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[15:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[1:0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[31:16]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[31:16]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[31:16]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[31:16]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[3:2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3_108
   (DATA_OUTA,
    DATA_OUTB,
    ACLK,
    ENA,
    O,
    ADDRA,
    ADDRB,
    DATA_INA,
    DATA_INB,
    WEA,
    update_data_we);
  output [31:0]DATA_OUTA;
  output [31:0]DATA_OUTB;
  input ACLK;
  input ENA;
  input O;
  input [10:0]ADDRA;
  input [10:0]ADDRB;
  input [31:0]DATA_INA;
  input [31:0]DATA_INB;
  input [3:0]WEA;
  input update_data_we;

  wire ACLK;
  wire [10:0]ADDRA;
  wire [10:0]ADDRB;
  wire [31:0]DATA_INA;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTA;
  wire [31:0]DATA_OUTB;
  wire ENA;
  wire O;
  wire [3:0]WEA;
  wire update_data_we;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[15:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[15:0]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[15:0]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[15:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[1:0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[31:16]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[31:16]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[31:16]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[31:16]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[3:2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module Fast_IP_Clock_system_cache_0_0_sc_ram_module__parameterized3_109
   (DATA_OUTA,
    DATA_OUTB,
    ACLK,
    ENA,
    O,
    ADDRA,
    ADDRB,
    DATA_INA,
    DATA_INB,
    WEA,
    update_data_we);
  output [31:0]DATA_OUTA;
  output [31:0]DATA_OUTB;
  input ACLK;
  input ENA;
  input O;
  input [10:0]ADDRA;
  input [10:0]ADDRB;
  input [31:0]DATA_INA;
  input [31:0]DATA_INB;
  input [3:0]WEA;
  input update_data_we;

  wire ACLK;
  wire [10:0]ADDRA;
  wire [10:0]ADDRB;
  wire [31:0]DATA_INA;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTA;
  wire [31:0]DATA_OUTB;
  wire ENA;
  wire O;
  wire [3:0]WEA;
  wire update_data_we;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:16]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[15:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[15:0]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[15:0]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[15:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[1:0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[31:16]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[31:16]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:16],DATA_OUTA[31:16]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:16],DATA_OUTB[31:16]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,WEA[3:2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we,update_data_we}));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_a_channel" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_a_channel
   (S_AXI_AVALID_q,
    in,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    queue_done,
    \wr_port_access[1][Addr] ,
    \wr_port_access[1][Kind] ,
    \wr_port_access[1][Size] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    write_req_last,
    write_req_failed,
    \wr_port_access[1][ID] ,
    \arb_access_i[Allocate]1__0 ,
    wr_port_early011_out,
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ,
    S0_AXI_GEN_AWREADY,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    Q,
    ACLK,
    O,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    S,
    A,
    S0_AXI_GEN_AWLOCK,
    S0_AXI_GEN_AWID,
    S0_AXI_GEN_AWADDR,
    S0_AXI_GEN_AWVALID,
    access_piperun,
    access_valid,
    port_ready_1,
    wr_port_keep,
    S0_AXI_GEN_AWSIZE,
    S0_AXI_GEN_AWLEN,
    S0_AXI_AWLEN,
    S0_AXI_GEN_AWBURST,
    wip_fifo_full,
    queue_full,
    S0_AXI_GEN_AWCACHE);
  output S_AXI_AVALID_q;
  output [7:0]in;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output queue_done;
  output [23:0]\wr_port_access[1][Addr] ;
  output \wr_port_access[1][Kind] ;
  output [2:0]\wr_port_access[1][Size] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output write_req_last;
  output write_req_failed;
  output [0:0]\wr_port_access[1][ID] ;
  output \arb_access_i[Allocate]1__0 ;
  output wr_port_early011_out;
  output \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ;
  output S0_AXI_GEN_AWREADY;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input Q;
  input ACLK;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  input S;
  input A;
  input S0_AXI_GEN_AWLOCK;
  input [0:0]S0_AXI_GEN_AWID;
  input [23:0]S0_AXI_GEN_AWADDR;
  input S0_AXI_GEN_AWVALID;
  input access_piperun;
  input access_valid;
  input port_ready_1;
  input [0:0]wr_port_keep;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [7:0]S0_AXI_GEN_AWLEN;
  input [1:0]S0_AXI_AWLEN;
  input [1:0]S0_AXI_GEN_AWBURST;
  input wip_fifo_full;
  input queue_full;
  input [2:0]S0_AXI_GEN_AWCACHE;

  wire A;
  wire ACLK;
  wire Carry_IN;
  wire FE_Gen_Excl_Latch_And_Inst1_n_1;
  wire FE_Gen_Excl_Latch_And_Inst1_n_2;
  wire Len_Gen_Inst_n_10;
  wire Len_Gen_Inst_n_13;
  wire O;
  wire Q;
  wire S;
  wire [1:0]S0_AXI_AWLEN;
  wire [23:0]S0_AXI_GEN_AWADDR;
  wire [1:0]S0_AXI_GEN_AWBURST;
  wire [2:0]S0_AXI_GEN_AWCACHE;
  wire [0:0]S0_AXI_GEN_AWID;
  wire [7:0]S0_AXI_GEN_AWLEN;
  wire S0_AXI_GEN_AWLOCK;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWVALID;
  wire S_0;
  wire \S_AXI_AADDR_q_reg_n_0_[11] ;
  wire \S_AXI_AADDR_q_reg_n_0_[1] ;
  wire \S_AXI_AADDR_q_reg_n_0_[2] ;
  wire \S_AXI_AADDR_q_reg_n_0_[3] ;
  wire \S_AXI_AADDR_q_reg_n_0_[4] ;
  wire \S_AXI_AADDR_q_reg_n_0_[5] ;
  wire [2:0]S_AXI_ACACHE_q;
  wire \S_AXI_AID_q_reg_n_0_[0] ;
  wire [7:0]S_AXI_ALEN_q;
  wire S_AXI_ALOCK_q_reg_n_0;
  wire S_AXI_AREADY_I;
  wire \S_AXI_ASIZE_q_reg_n_0_[0] ;
  wire \S_AXI_ASIZE_q_reg_n_0_[1] ;
  wire \S_AXI_ASIZE_q_reg_n_0_[2] ;
  wire S_AXI_AVALID_q;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_2 ;
  wire \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg_1 ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ;
  wire \Use_Write.FE_Gen_New_And_Inst2_n_1 ;
  wire \Use_Write.FE_Gen_New_And_Inst2_n_17 ;
  wire \Use_Write.FE_Gen_New_And_Inst2_n_18 ;
  wire \Use_Write.FE_Gen_New_And_Inst2_n_2 ;
  wire Valid_Inst_n_3;
  wire Valid_Inst_n_4;
  wire [9:0]access_byte_len;
  wire \access_byte_len[0]_i_1_n_0 ;
  wire \access_byte_len[1]_i_1_n_0 ;
  wire \access_byte_len[2]_i_1_n_0 ;
  wire \access_byte_len[3]_i_1_n_0 ;
  wire \access_byte_len[4]_i_1_n_0 ;
  wire \access_byte_len[5]_i_1_n_0 ;
  wire \access_byte_len[6]_i_1_n_0 ;
  wire \access_byte_len[7]_i_1_n_0 ;
  wire \access_byte_len[8]_i_1_n_0 ;
  wire \access_byte_len[9]_i_1__0_n_0 ;
  wire access_is_incr;
  wire access_is_incr_cmb;
  wire access_is_wrap;
  wire access_is_wrap_i_1__0_n_0;
  wire access_piperun;
  wire access_valid;
  wire [10:0]aligned_addr;
  wire [1:0]aligned_addr_cmb;
  wire [5:1]allowed_max_wrap_len;
  wire \arb_access_i[Allocate]1__0 ;
  wire exclusive_too_long;
  wire exclusive_too_long_i;
  wire first_part;
  wire [5:3]full_line_beats;
  wire \full_line_beats[5]_i_1_n_0 ;
  wire [4:4]full_line_beats_cmb;
  wire [7:0]in;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire [12:0]p_0_in;
  wire [23:13]p_0_in__0;
  wire port_ready;
  wire port_ready_1;
  wire port_ready_with_valid;
  wire port_want_new_access;
  wire queue_done;
  wire queue_full;
  wire req_last;
  wire [11:6]sequential_addr_i;
  wire [11:6]sequential_addr_i0;
  wire wip_fifo_full;
  wire [23:0]\wr_port_access[1][Addr] ;
  wire [0:0]\wr_port_access[1][ID] ;
  wire \wr_port_access[1][Kind] ;
  wire \wr_port_access[1][Modifiable] ;
  wire [2:0]\wr_port_access[1][Size] ;
  wire wr_port_early011_out;
  wire [0:0]wr_port_keep;
  wire [5:0]wrap_end_beats;
  wire [5:0]wrap_end_beats_cmb;
  wire write_req_failed;
  wire write_req_last;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized3 Addr_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4 Bufferable_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (S_AXI_ACACHE_q[0]),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\arbiter_bp_push_i_reg[1][Early] (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .wr_port_early011_out(wr_port_early011_out));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2 Done_Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .queue_done(queue_done),
        .queue_full(queue_full),
        .wip_fifo_full(wip_fifo_full));
  Fast_IP_Clock_system_cache_0_0_carry_and_35 FE_Gen_Excl_And_Inst1
       (.Carry_IN(Carry_IN),
        .\Using_FPGA.Using_Inv.No_Pad.MUXCY_Inst1 (S_AXI_ALOCK_q_reg_n_0),
        .exclusive_too_long(exclusive_too_long),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(S),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized1 FE_Gen_Excl_Latch_And_Inst1
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FE_Gen_Excl_Latch_And_Inst1_n_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (FE_Gen_Excl_Latch_And_Inst1_n_2),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .access_piperun(access_piperun),
        .access_valid(access_valid),
        .exclusive_too_long(exclusive_too_long),
        .exclusive_too_long_i(exclusive_too_long_i),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .port_ready(port_ready),
        .write_req_failed(write_req_failed));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_36 First_Inst
       (.ACLK(ACLK),
        .D(sequential_addr_i0),
        .Q(Q),
        .S(S_0),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\Use_Write.FE_Gen_New_And_Inst2_n_2 ),
        .\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst (sequential_addr_i),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[11] ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ({\S_AXI_AADDR_q_reg_n_0_[1] ,p_0_in[0]}),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[2] ),
        .\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[3] ),
        .\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[4] ),
        .\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[5] ),
        .\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .access_is_wrap(access_is_wrap),
        .aligned_addr(aligned_addr[10:6]),
        .first_part(first_part),
        .\sequential_addr_i_reg[11] (access_byte_len),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] [11:0]));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5 ID_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\S_AXI_AID_q_reg_n_0_[0] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\wr_port_access[1][ID] (\wr_port_access[1][ID] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_37 Kind_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Len_Gen_Inst_n_10),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_length_generation Len_Gen_Inst
       (.ACLK(ACLK),
        .Carry_IN(Carry_IN),
        .O(O),
        .Q(S_AXI_ALEN_q),
        .S(S_0),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Len_Gen_Inst_n_10),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Len_Gen_Inst_n_13),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[11] ),
        .\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 (in[0]),
        .\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 (in[1]),
        .\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 (in[2]),
        .\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 (in[3]),
        .\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 (in[4]),
        .\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 (in[5]),
        .\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 (full_line_beats),
        .\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 (in[6]),
        .\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 (in[7]),
        .\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ),
        .\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 (Q),
        .\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ({\S_AXI_ASIZE_q_reg_n_0_[1] ,\S_AXI_ASIZE_q_reg_n_0_[0] }),
        .\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 (\S_AXI_AADDR_q_reg_n_0_[2] ),
        .\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 (\S_AXI_AADDR_q_reg_n_0_[1] ),
        .\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[3] ),
        .\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[4] ),
        .\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[5] ),
        .\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 (access_byte_len),
        .access_is_incr(access_is_incr),
        .access_is_wrap(access_is_wrap),
        .aligned_addr({aligned_addr[10:6],aligned_addr[1:0]}),
        .allowed_max_wrap_len({allowed_max_wrap_len[5],allowed_max_wrap_len[1]}),
        .first_part(first_part),
        .long_split_len_carry__0_0(wrap_end_beats),
        .p_0_in({p_0_in[12],p_0_in[0]}),
        .port_ready_1(port_ready_1),
        .req_last(req_last),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ),
        .write_req_last(write_req_last));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_38 Modifiable_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\Use_Write.FE_Gen_New_And_Inst2_n_18 ),
        .\wr_port_access[1][Modifiable] (\wr_port_access[1][Modifiable] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_39 Other_Allocate_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\Use_Write.FE_Gen_New_And_Inst2_n_17 ),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arb_access_i_reg[Keep] (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .port_ready_1(port_ready_1),
        .\wr_port_access[1][Modifiable] (\wr_port_access[1][Modifiable] ),
        .wr_port_keep(wr_port_keep));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_kill Port_Valid_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (FE_Gen_Excl_Latch_And_Inst1_n_1));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_40 Req_Last_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Len_Gen_Inst_n_13),
        .write_req_last(write_req_last));
  FDRE \S_AXI_AADDR_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[0]),
        .Q(p_0_in[0]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[11] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[11]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[11] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[12] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[12]),
        .Q(p_0_in[12]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[13] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[13]),
        .Q(p_0_in__0[13]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[14] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[14]),
        .Q(p_0_in__0[14]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[15] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[15]),
        .Q(p_0_in__0[15]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[16] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[16]),
        .Q(p_0_in__0[16]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[17] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[17]),
        .Q(p_0_in__0[17]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[18] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[18]),
        .Q(p_0_in__0[18]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[19] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[19]),
        .Q(p_0_in__0[19]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[1]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[1] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[20] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[20]),
        .Q(p_0_in__0[20]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[21] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[21]),
        .Q(p_0_in__0[21]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[22] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[22]),
        .Q(p_0_in__0[22]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[23] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[23]),
        .Q(p_0_in__0[23]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[2]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[2] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[3]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[3] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[4]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[4] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[5]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[5] ),
        .R(Q));
  FDRE \S_AXI_ACACHE_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWCACHE[0]),
        .Q(S_AXI_ACACHE_q[0]),
        .R(Q));
  FDRE \S_AXI_ACACHE_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWCACHE[1]),
        .Q(S_AXI_ACACHE_q[1]),
        .R(Q));
  FDRE \S_AXI_ACACHE_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWCACHE[2]),
        .Q(S_AXI_ACACHE_q[2]),
        .R(Q));
  FDRE \S_AXI_AID_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWID),
        .Q(\S_AXI_AID_q_reg_n_0_[0] ),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[0]),
        .Q(S_AXI_ALEN_q[0]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[1]),
        .Q(S_AXI_ALEN_q[1]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[2]),
        .Q(S_AXI_ALEN_q[2]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[3]),
        .Q(S_AXI_ALEN_q[3]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[4]),
        .Q(S_AXI_ALEN_q[4]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[5]),
        .Q(S_AXI_ALEN_q[5]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[6] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[6]),
        .Q(S_AXI_ALEN_q[6]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[7] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLEN[7]),
        .Q(S_AXI_ALEN_q[7]),
        .R(Q));
  FDRE S_AXI_ALOCK_q_reg
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWLOCK),
        .Q(S_AXI_ALOCK_q_reg_n_0),
        .R(Q));
  FDRE \S_AXI_ASIZE_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWSIZE[0]),
        .Q(\S_AXI_ASIZE_q_reg_n_0_[0] ),
        .R(Q));
  FDRE \S_AXI_ASIZE_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWSIZE[1]),
        .Q(\S_AXI_ASIZE_q_reg_n_0_[1] ),
        .R(Q));
  FDRE \S_AXI_ASIZE_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWSIZE[2]),
        .Q(\S_AXI_ASIZE_q_reg_n_0_[2] ),
        .R(Q));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized7 Size_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\S_AXI_ASIZE_q_reg_n_0_[0] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_2 ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg_1 ),
        .\wr_port_access[1][Size] (\wr_port_access[1][Size] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_41 Too_Long_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FE_Gen_Excl_Latch_And_Inst1_n_2),
        .write_req_failed(write_req_failed));
  Fast_IP_Clock_system_cache_0_0_carry_and_42 \Use_Write.FE_Gen_New_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .port_ready(port_ready),
        .port_ready_with_valid(port_ready_with_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_43 \Use_Write.FE_Gen_New_And_Inst2 
       (.A(A),
        .O(O),
        .Q(p_0_in__0),
        .S0_AXI_GEN_AWVALID(S0_AXI_GEN_AWVALID),
        .\S_AXI_ACACHE_q_reg[1] (\Use_Write.FE_Gen_New_And_Inst2_n_18 ),
        .\S_AXI_ACACHE_q_reg[2] (\Use_Write.FE_Gen_New_And_Inst2_n_17 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\Use_Write.FE_Gen_New_And_Inst2_n_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (S_AXI_ACACHE_q[2:1]),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\Use_Write.FE_Gen_New_And_Inst2_n_2 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (S_AXI_AVALID_q),
        .\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_2 ),
        .\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg_1 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ({\S_AXI_ASIZE_q_reg_n_0_[2] ,\S_AXI_ASIZE_q_reg_n_0_[1] }),
        .first_part(first_part),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .p_0_in(p_0_in[12]),
        .port_want_new_access(port_want_new_access),
        .req_last(req_last),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] [23:12]),
        .\wr_port_access[1][Modifiable] (\wr_port_access[1][Modifiable] ),
        .\wr_port_access[1][Size] (\wr_port_access[1][Size] [2:1]));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_44 \Use_Write.FE_Gen_New_Or_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(A),
        .port_ready_with_valid(port_ready_with_valid),
        .port_want_new_access(port_want_new_access));
  Fast_IP_Clock_system_cache_0_0_carry_or_45 \Use_Write_Ready.FE_Gen_Ready_And_Inst1 
       (.S(S),
        .exclusive_too_long_i(exclusive_too_long_i),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .port_ready(port_ready));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_46 Valid_Inst
       (.ACLK(ACLK),
        .E(S_AXI_AREADY_I),
        .Q(Q),
        .S0_AXI_GEN_AWREADY(S0_AXI_GEN_AWREADY),
        .S0_AXI_GEN_AWSIZE(S0_AXI_GEN_AWSIZE),
        .S0_AXI_GEN_AWSIZE_2_sp_1(Valid_Inst_n_3),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (S_AXI_AVALID_q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Valid_Inst_n_4),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\Use_Write.FE_Gen_New_And_Inst2_n_1 ),
        .allowed_max_wrap_len({allowed_max_wrap_len[5],allowed_max_wrap_len[1]}));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT4 #(
    .INIT(16'hFF06)) 
    \access_byte_len[0]_i_1 
       (.I0(S0_AXI_GEN_AWSIZE[0]),
        .I1(S0_AXI_GEN_AWSIZE[1]),
        .I2(S0_AXI_GEN_AWSIZE[2]),
        .I3(S0_AXI_GEN_AWLEN[0]),
        .O(\access_byte_len[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'hFFFB0062)) 
    \access_byte_len[1]_i_1 
       (.I0(S0_AXI_GEN_AWSIZE[1]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[0]),
        .I3(S0_AXI_GEN_AWSIZE[2]),
        .I4(S0_AXI_GEN_AWLEN[1]),
        .O(\access_byte_len[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[2]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[1]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[0]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWSIZE[2]),
        .I5(S0_AXI_GEN_AWLEN[2]),
        .O(\access_byte_len[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[3]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[2]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[1]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWSIZE[2]),
        .I5(S0_AXI_GEN_AWLEN[3]),
        .O(\access_byte_len[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[4]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[3]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[2]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWSIZE[2]),
        .I5(S0_AXI_GEN_AWLEN[4]),
        .O(\access_byte_len[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[5]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[4]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[3]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWSIZE[2]),
        .I5(S0_AXI_GEN_AWLEN[5]),
        .O(\access_byte_len[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[6]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[5]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[4]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWSIZE[2]),
        .I5(S0_AXI_GEN_AWLEN[6]),
        .O(\access_byte_len[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[7]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[6]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWLEN[5]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWSIZE[2]),
        .I5(S0_AXI_GEN_AWLEN[7]),
        .O(\access_byte_len[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT5 #(
    .INIT(32'h03080008)) 
    \access_byte_len[8]_i_1 
       (.I0(S0_AXI_GEN_AWLEN[7]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWSIZE[2]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWLEN[6]),
        .O(\access_byte_len[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \access_byte_len[9]_i_1__0 
       (.I0(S0_AXI_GEN_AWSIZE[0]),
        .I1(S0_AXI_GEN_AWSIZE[2]),
        .I2(S0_AXI_GEN_AWSIZE[1]),
        .I3(S0_AXI_GEN_AWLEN[7]),
        .O(\access_byte_len[9]_i_1__0_n_0 ));
  FDRE \access_byte_len_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[0]_i_1_n_0 ),
        .Q(access_byte_len[0]),
        .R(Q));
  FDRE \access_byte_len_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[1]_i_1_n_0 ),
        .Q(access_byte_len[1]),
        .R(Q));
  FDRE \access_byte_len_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[2]_i_1_n_0 ),
        .Q(access_byte_len[2]),
        .R(Q));
  FDRE \access_byte_len_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[3]_i_1_n_0 ),
        .Q(access_byte_len[3]),
        .R(Q));
  FDRE \access_byte_len_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[4]_i_1_n_0 ),
        .Q(access_byte_len[4]),
        .R(Q));
  FDRE \access_byte_len_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[5]_i_1_n_0 ),
        .Q(access_byte_len[5]),
        .R(Q));
  FDRE \access_byte_len_reg[6] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[6]_i_1_n_0 ),
        .Q(access_byte_len[6]),
        .R(Q));
  FDRE \access_byte_len_reg[7] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[7]_i_1_n_0 ),
        .Q(access_byte_len[7]),
        .R(Q));
  FDRE \access_byte_len_reg[8] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[8]_i_1_n_0 ),
        .Q(access_byte_len[8]),
        .R(Q));
  FDRE \access_byte_len_reg[9] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[9]_i_1__0_n_0 ),
        .Q(access_byte_len[9]),
        .R(Q));
  LUT2 #(
    .INIT(4'hB)) 
    access_is_incr_i_1
       (.I0(S0_AXI_GEN_AWBURST[0]),
        .I1(S0_AXI_GEN_AWBURST[1]),
        .O(access_is_incr_cmb));
  FDSE access_is_incr_reg
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(access_is_incr_cmb),
        .Q(access_is_incr),
        .S(Q));
  LUT2 #(
    .INIT(4'h2)) 
    access_is_wrap_i_1__0
       (.I0(S0_AXI_GEN_AWBURST[1]),
        .I1(S0_AXI_GEN_AWBURST[0]),
        .O(access_is_wrap_i_1__0_n_0));
  FDRE access_is_wrap_reg
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(access_is_wrap_i_1__0_n_0),
        .Q(access_is_wrap),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'hA88A)) 
    \aligned_addr[0]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[0]),
        .I1(S0_AXI_GEN_AWSIZE[2]),
        .I2(S0_AXI_GEN_AWSIZE[1]),
        .I3(S0_AXI_GEN_AWSIZE[0]),
        .O(aligned_addr_cmb[0]));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT4 #(
    .INIT(16'hA8AA)) 
    \aligned_addr[1]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[1]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWSIZE[2]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .O(aligned_addr_cmb[1]));
  FDRE \aligned_addr_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(aligned_addr_cmb[0]),
        .Q(aligned_addr[0]),
        .R(Q));
  FDRE \aligned_addr_reg[10] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[10]),
        .Q(aligned_addr[10]),
        .R(Q));
  FDRE \aligned_addr_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(aligned_addr_cmb[1]),
        .Q(aligned_addr[1]),
        .R(Q));
  FDRE \aligned_addr_reg[6] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[6]),
        .Q(aligned_addr[6]),
        .R(Q));
  FDRE \aligned_addr_reg[7] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[7]),
        .Q(aligned_addr[7]),
        .R(Q));
  FDRE \aligned_addr_reg[8] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[8]),
        .Q(aligned_addr[8]),
        .R(Q));
  FDRE \aligned_addr_reg[9] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_AWADDR[9]),
        .Q(aligned_addr[9]),
        .R(Q));
  FDRE \allowed_max_wrap_len_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(Valid_Inst_n_4),
        .Q(allowed_max_wrap_len[1]),
        .R(1'b0));
  FDRE \allowed_max_wrap_len_reg[5] 
       (.C(ACLK),
        .CE(1'b1),
        .D(Valid_Inst_n_3),
        .Q(allowed_max_wrap_len[5]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \full_line_beats[4]_i_1__0 
       (.I0(S0_AXI_GEN_AWSIZE[1]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWSIZE[2]),
        .O(full_line_beats_cmb));
  LUT3 #(
    .INIT(8'hEB)) 
    \full_line_beats[5]_i_1 
       (.I0(S0_AXI_GEN_AWSIZE[2]),
        .I1(S0_AXI_GEN_AWSIZE[1]),
        .I2(S0_AXI_GEN_AWSIZE[0]),
        .O(\full_line_beats[5]_i_1_n_0 ));
  FDRE \full_line_beats_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(1'b1),
        .Q(full_line_beats[3]),
        .R(Q));
  FDRE \full_line_beats_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(full_line_beats_cmb),
        .Q(full_line_beats[4]),
        .R(Q));
  FDRE \full_line_beats_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\full_line_beats[5]_i_1_n_0 ),
        .Q(full_line_beats[5]),
        .R(Q));
  FDRE \sequential_addr_i_reg[10] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[10]),
        .Q(sequential_addr_i[10]),
        .R(Q));
  FDRE \sequential_addr_i_reg[11] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[11]),
        .Q(sequential_addr_i[11]),
        .R(Q));
  FDRE \sequential_addr_i_reg[6] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[6]),
        .Q(sequential_addr_i[6]),
        .R(Q));
  FDRE \sequential_addr_i_reg[7] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[7]),
        .Q(sequential_addr_i[7]),
        .R(Q));
  FDRE \sequential_addr_i_reg[8] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[8]),
        .Q(sequential_addr_i[8]),
        .R(Q));
  FDRE \sequential_addr_i_reg[9] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[9]),
        .Q(sequential_addr_i[9]),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[0]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[1]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWADDR[2]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWADDR[0]),
        .O(wrap_end_beats_cmb[0]));
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[1]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[2]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWADDR[3]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWADDR[1]),
        .O(wrap_end_beats_cmb[1]));
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[2]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[3]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWADDR[4]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWADDR[2]),
        .O(wrap_end_beats_cmb[2]));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[3]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[4]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWADDR[5]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .I4(S0_AXI_GEN_AWADDR[3]),
        .O(wrap_end_beats_cmb[3]));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT4 #(
    .INIT(16'hC0B8)) 
    \wrap_end_beats[4]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[5]),
        .I1(S0_AXI_GEN_AWSIZE[0]),
        .I2(S0_AXI_GEN_AWADDR[4]),
        .I3(S0_AXI_GEN_AWSIZE[1]),
        .O(wrap_end_beats_cmb[4]));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'h82)) 
    \wrap_end_beats[5]_i_1 
       (.I0(S0_AXI_GEN_AWADDR[5]),
        .I1(S0_AXI_GEN_AWSIZE[1]),
        .I2(S0_AXI_GEN_AWSIZE[0]),
        .O(wrap_end_beats_cmb[5]));
  FDRE \wrap_end_beats_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[0]),
        .Q(wrap_end_beats[0]),
        .R(Q));
  FDRE \wrap_end_beats_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[1]),
        .Q(wrap_end_beats[1]),
        .R(Q));
  FDRE \wrap_end_beats_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[2]),
        .Q(wrap_end_beats[2]),
        .R(Q));
  FDRE \wrap_end_beats_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[3]),
        .Q(wrap_end_beats[3]),
        .R(Q));
  FDRE \wrap_end_beats_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[4]),
        .Q(wrap_end_beats[4]),
        .R(Q));
  FDRE \wrap_end_beats_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[5]),
        .Q(wrap_end_beats[5]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_a_channel" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_a_channel__parameterized1
   (read_req_len,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q0_in,
    \rd_port_access[1][Addr] ,
    \rd_port_access[1][Kind] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    read_req_last,
    in,
    \rd_port_access[1][ID] ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    read_req_valid,
    read_req_single,
    SRI,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    A_0,
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ,
    \rd_port_access[1][Len] ,
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    S0_AXI_GEN_ARREADY,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    Q,
    ACLK,
    O,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    rd_port_ready,
    S0_AXI_GEN_ARCACHE,
    S0_AXI_GEN_ARID,
    S0_AXI_GEN_ARADDR,
    S0_AXI_GEN_ARVALID,
    read_req_ready,
    rd_port_multi_part_1,
    any_port_forbid_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    port_ready_1,
    S0_AXI_ARSIZE,
    reduce_or,
    \ctrl_access[Size] ,
    S0_AXI_GEN_ARSIZE,
    S0_AXI_GEN_ARLEN,
    S0_AXI_ARLEN,
    S0_AXI_GEN_ARBURST,
    \rip_stp_reg[0] ,
    lopt,
    lopt_1);
  output [7:0]read_req_len;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output Q0_in;
  output [23:0]\rd_port_access[1][Addr] ;
  output \rd_port_access[1][Kind] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output read_req_last;
  output [1:0]in;
  output [0:0]\rd_port_access[1][ID] ;
  output [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  output read_req_valid;
  output read_req_single;
  output SRI;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output A_0;
  output \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ;
  output [1:0]\rd_port_access[1][Len] ;
  output \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  output S0_AXI_GEN_ARREADY;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input Q;
  input ACLK;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input rd_port_ready;
  input [0:0]S0_AXI_GEN_ARCACHE;
  input [0:0]S0_AXI_GEN_ARID;
  input [23:0]S0_AXI_GEN_ARADDR;
  input S0_AXI_GEN_ARVALID;
  input read_req_ready;
  input rd_port_multi_part_1;
  input any_port_forbid_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  input port_ready_1;
  input [0:0]S0_AXI_ARSIZE;
  input reduce_or;
  input [0:0]\ctrl_access[Size] ;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [7:0]S0_AXI_GEN_ARLEN;
  input [5:0]S0_AXI_ARLEN;
  input [1:0]S0_AXI_GEN_ARBURST;
  input \rip_stp_reg[0] ;
  input lopt;
  output lopt_1;

  wire A;
  wire ACLK;
  wire A_0;
  wire First_Inst_n_1;
  wire Len_Gen_Inst_n_11;
  wire Len_Gen_Inst_n_20;
  wire Len_Gen_Inst_n_21;
  wire Len_Gen_Inst_n_22;
  wire O;
  wire Q;
  wire Q0_in;
  wire S;
  wire [5:0]S0_AXI_ARLEN;
  wire [0:0]S0_AXI_ARSIZE;
  wire [23:0]S0_AXI_GEN_ARADDR;
  wire [1:0]S0_AXI_GEN_ARBURST;
  wire [0:0]S0_AXI_GEN_ARCACHE;
  wire [0:0]S0_AXI_GEN_ARID;
  wire [7:0]S0_AXI_GEN_ARLEN;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARVALID;
  wire SRI;
  wire \S_AXI_AADDR_q_reg_n_0_[11] ;
  wire \S_AXI_AADDR_q_reg_n_0_[1] ;
  wire \S_AXI_AADDR_q_reg_n_0_[2] ;
  wire \S_AXI_AADDR_q_reg_n_0_[3] ;
  wire \S_AXI_AADDR_q_reg_n_0_[4] ;
  wire \S_AXI_AADDR_q_reg_n_0_[5] ;
  wire [2:2]S_AXI_ACACHE_q;
  wire \S_AXI_AID_q_reg_n_0_[0] ;
  wire [7:0]S_AXI_ALEN_q;
  wire S_AXI_AREADY_I;
  wire \S_AXI_ASIZE_q_reg_n_0_[0] ;
  wire \S_AXI_ASIZE_q_reg_n_0_[1] ;
  wire \S_AXI_ASIZE_q_reg_n_0_[2] ;
  wire S_AXI_AVALID_q;
  wire Size_Inst_n_4;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_2 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_4 ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg_3 ;
  wire \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ;
  wire \Use_Read.FE_Gen_New_And_Inst2_n_1 ;
  wire \Use_Read.FE_Gen_New_And_Inst2_n_17 ;
  wire \Use_Read.FE_Gen_New_And_Inst2_n_2 ;
  wire Valid_Inst_n_4;
  wire Valid_Inst_n_5;
  wire \access_byte_len[0]_i_1__0_n_0 ;
  wire \access_byte_len[1]_i_1__0_n_0 ;
  wire \access_byte_len[2]_i_1__0_n_0 ;
  wire \access_byte_len[3]_i_1__0_n_0 ;
  wire \access_byte_len[4]_i_1__0_n_0 ;
  wire \access_byte_len[5]_i_1__0_n_0 ;
  wire \access_byte_len[6]_i_1__0_n_0 ;
  wire \access_byte_len[7]_i_1__0_n_0 ;
  wire \access_byte_len[8]_i_1__0_n_0 ;
  wire \access_byte_len[9]_i_1_n_0 ;
  wire \access_byte_len_reg_n_0_[0] ;
  wire \access_byte_len_reg_n_0_[1] ;
  wire \access_byte_len_reg_n_0_[2] ;
  wire \access_byte_len_reg_n_0_[3] ;
  wire \access_byte_len_reg_n_0_[4] ;
  wire \access_byte_len_reg_n_0_[5] ;
  wire \access_byte_len_reg_n_0_[6] ;
  wire \access_byte_len_reg_n_0_[7] ;
  wire \access_byte_len_reg_n_0_[8] ;
  wire \access_byte_len_reg_n_0_[9] ;
  wire access_is_incr;
  wire access_is_incr_cmb;
  wire access_is_wrap;
  wire access_is_wrap_i_2_n_0;
  wire [1:1]access_stp_bits;
  wire \access_stp_bits[1]_i_1_n_0 ;
  wire [10:0]aligned_addr;
  wire [1:0]aligned_addr_cmb;
  wire [5:1]allowed_max_wrap_len;
  wire any_port_forbid_1;
  wire [0:0]\ctrl_access[Size] ;
  wire first_part;
  wire [5:3]full_line_beats;
  wire \full_line_beats[5]_i_1__0_n_0 ;
  wire [4:4]full_line_beats_cmb;
  wire [1:0]in;
  wire incr_need_extra_q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire [12:0]p_0_in;
  wire [23:13]p_0_in__0;
  wire [1:1]\port_access_q[Size] ;
  wire port_ready_1;
  wire port_ready_with_valid;
  wire port_want_new_access;
  wire [23:0]\rd_port_access[1][Addr] ;
  wire [0:0]\rd_port_access[1][ID] ;
  wire \rd_port_access[1][Kind] ;
  wire [1:0]\rd_port_access[1][Len] ;
  wire rd_port_multi_part_1;
  wire rd_port_ready;
  wire read_req_last;
  wire [7:0]read_req_len;
  wire read_req_ready;
  wire read_req_single;
  wire read_req_valid;
  wire reduce_or;
  wire req_last;
  wire \rip_stp_reg[0] ;
  wire [6:6]scaled_port_access_len__15;
  wire [11:6]sequential_addr_i0;
  wire \sequential_addr_i_reg_n_0_[10] ;
  wire \sequential_addr_i_reg_n_0_[11] ;
  wire \sequential_addr_i_reg_n_0_[6] ;
  wire \sequential_addr_i_reg_n_0_[7] ;
  wire \sequential_addr_i_reg_n_0_[8] ;
  wire \sequential_addr_i_reg_n_0_[9] ;
  wire [5:0]wrap_end_beats;
  wire [5:0]wrap_end_beats_cmb;

  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized3_57 Addr_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_58 Allocate_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\Use_Read.FE_Gen_New_And_Inst2_n_17 ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .\port_access_q[Size] (\port_access_q[Size] ),
        .port_ready_1(port_ready_1),
        .read_req_single(read_req_single),
        .reduce_or(reduce_or));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_59 Done_Inst
       (.ACLK(ACLK),
        .Q(Q),
        .Q0_in(Q0_in),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .read_req_valid(read_req_valid),
        .\rip_stp_reg[0] (\rip_stp_reg[0] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_60 Extra_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (First_Inst_n_1),
        .incr_need_extra_q(incr_need_extra_q));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized2_61 First_Inst
       (.ACLK(ACLK),
        .D(sequential_addr_i0),
        .O({Len_Gen_Inst_n_20,Len_Gen_Inst_n_21}),
        .Q(Q),
        .S(S),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\Use_Read.FE_Gen_New_And_Inst2_n_2 ),
        .\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[10].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[11].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst ({\sequential_addr_i_reg_n_0_[11] ,\sequential_addr_i_reg_n_0_[10] ,\sequential_addr_i_reg_n_0_[9] ,\sequential_addr_i_reg_n_0_[8] ,\sequential_addr_i_reg_n_0_[7] ,\sequential_addr_i_reg_n_0_[6] }),
        .\The_Bit[11].Using_FPGA.Using_Reset.FDS_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[11] ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ({\S_AXI_AADDR_q_reg_n_0_[1] ,p_0_in[0]}),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[2] ),
        .\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[3].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[3] ),
        .\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[4].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[4].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[4] ),
        .\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[5].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[5].Using_FPGA.Using_Reset.FDS_Inst (\S_AXI_AADDR_q_reg_n_0_[5] ),
        .\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[6].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[7].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[8].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[9].Using_FPGA.Multiple_CE.D_I_reg ),
        .access_is_wrap(access_is_wrap),
        .access_is_wrap_reg(First_Inst_n_1),
        .aligned_addr(aligned_addr[10:6]),
        .first_part(first_part),
        .incr_need_extra_q(incr_need_extra_q),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] [11:0]),
        .req_last(req_last),
        .\sequential_addr_i_reg[11] ({\access_byte_len_reg_n_0_[9] ,\access_byte_len_reg_n_0_[8] ,\access_byte_len_reg_n_0_[7] ,\access_byte_len_reg_n_0_[6] ,\access_byte_len_reg_n_0_[5] ,\access_byte_len_reg_n_0_[4] ,\access_byte_len_reg_n_0_[3] ,\access_byte_len_reg_n_0_[2] ,\access_byte_len_reg_n_0_[1] ,\access_byte_len_reg_n_0_[0] }));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized5_62 ID_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\S_AXI_AID_q_reg_n_0_[0] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\rd_port_access[1][ID] (\rd_port_access[1][ID] ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_63 Kind_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Len_Gen_Inst_n_11),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_length_generation_64 Len_Gen_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(S_AXI_ALEN_q),
        .S(S),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .\S_AXI_AADDR_q_reg[3] ({Len_Gen_Inst_n_20,Len_Gen_Inst_n_21}),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Len_Gen_Inst_n_11),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (Len_Gen_Inst_n_22),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[1] ),
        .\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[11] ),
        .\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 (read_req_len[0]),
        .\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 (Q),
        .\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 (read_req_len[1]),
        .\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 (read_req_len[2]),
        .\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 (read_req_len[3]),
        .\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 (read_req_len[4]),
        .\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 (read_req_len[5]),
        .\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 (\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 (read_req_len[6]),
        .\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 (read_req_len[7]),
        .\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ({\S_AXI_ASIZE_q_reg_n_0_[1] ,\S_AXI_ASIZE_q_reg_n_0_[0] }),
        .\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 (\S_AXI_AADDR_q_reg_n_0_[2] ),
        .\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[3] ),
        .\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[4] ),
        .\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 (\S_AXI_AADDR_q_reg_n_0_[5] ),
        .\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ({\access_byte_len_reg_n_0_[9] ,\access_byte_len_reg_n_0_[8] ,\access_byte_len_reg_n_0_[7] ,\access_byte_len_reg_n_0_[6] ,\access_byte_len_reg_n_0_[5] ,\access_byte_len_reg_n_0_[4] ,\access_byte_len_reg_n_0_[3] ,\access_byte_len_reg_n_0_[2] ,\access_byte_len_reg_n_0_[1] ,\access_byte_len_reg_n_0_[0] }),
        .access_is_incr(access_is_incr),
        .access_is_wrap(access_is_wrap),
        .aligned_addr({aligned_addr[10:6],aligned_addr[1:0]}),
        .allowed_max_wrap_len({allowed_max_wrap_len[5],allowed_max_wrap_len[1]}),
        .\arb_access_i[Len][0]_i_2_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\arb_access_i[Len][0]_i_2_1 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .\arb_access_i_reg[Len][1] (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\arb_access_i_reg[Len][7] (scaled_port_access_len__15),
        .\arb_access_i_reg[Len][7]_0 (Size_Inst_n_4),
        .first_part(first_part),
        .full_line_beats(full_line_beats),
        .incr_need_extra_q(incr_need_extra_q),
        .long_split_len_carry__0_0(wrap_end_beats),
        .p_0_in({p_0_in[12],p_0_in[0]}),
        .\port_access_q[Size] (\port_access_q[Size] ),
        .port_ready_1(port_ready_1),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ),
        .\rd_port_access[1][Len] (\rd_port_access[1][Len] ),
        .read_req_last(read_req_last),
        .req_last(req_last));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_kill_65 Port_Valid_Inst
       (.ACLK(ACLK),
        .A_0(A_0),
        .O(O),
        .Q(Q),
        .SRI(SRI),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .any_port_forbid_1(any_port_forbid_1),
        .rd_port_multi_part_1(rd_port_multi_part_1));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__parameterized4_66 Req_Last_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Len_Gen_Inst_n_22),
        .read_req_last(read_req_last));
  FDRE \S_AXI_AADDR_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[0]),
        .Q(p_0_in[0]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[11] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[11]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[11] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[12] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[12]),
        .Q(p_0_in[12]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[13] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[13]),
        .Q(p_0_in__0[13]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[14] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[14]),
        .Q(p_0_in__0[14]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[15] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[15]),
        .Q(p_0_in__0[15]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[16] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[16]),
        .Q(p_0_in__0[16]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[17] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[17]),
        .Q(p_0_in__0[17]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[18] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[18]),
        .Q(p_0_in__0[18]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[19] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[19]),
        .Q(p_0_in__0[19]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[1]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[1] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[20] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[20]),
        .Q(p_0_in__0[20]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[21] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[21]),
        .Q(p_0_in__0[21]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[22] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[22]),
        .Q(p_0_in__0[22]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[23] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[23]),
        .Q(p_0_in__0[23]),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[2]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[2] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[3]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[3] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[4]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[4] ),
        .R(Q));
  FDRE \S_AXI_AADDR_q_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[5]),
        .Q(\S_AXI_AADDR_q_reg_n_0_[5] ),
        .R(Q));
  FDRE \S_AXI_ACACHE_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARCACHE),
        .Q(S_AXI_ACACHE_q),
        .R(Q));
  FDRE \S_AXI_AID_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARID),
        .Q(\S_AXI_AID_q_reg_n_0_[0] ),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[0]),
        .Q(S_AXI_ALEN_q[0]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[1]),
        .Q(S_AXI_ALEN_q[1]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[2]),
        .Q(S_AXI_ALEN_q[2]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[3]),
        .Q(S_AXI_ALEN_q[3]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[4]),
        .Q(S_AXI_ALEN_q[4]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[5]),
        .Q(S_AXI_ALEN_q[5]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[6] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[6]),
        .Q(S_AXI_ALEN_q[6]),
        .R(Q));
  FDRE \S_AXI_ALEN_q_reg[7] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARLEN[7]),
        .Q(S_AXI_ALEN_q[7]),
        .R(Q));
  FDRE \S_AXI_ASIZE_q_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARSIZE[0]),
        .Q(\S_AXI_ASIZE_q_reg_n_0_[0] ),
        .R(Q));
  FDRE \S_AXI_ASIZE_q_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARSIZE[1]),
        .Q(\S_AXI_ASIZE_q_reg_n_0_[1] ),
        .R(Q));
  FDRE \S_AXI_ASIZE_q_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARSIZE[2]),
        .Q(\S_AXI_ASIZE_q_reg_n_0_[2] ),
        .R(Q));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized7_67 Size_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\S_AXI_ASIZE_q_reg_n_0_[0] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_4 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (Size_Inst_n_4),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg_3 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst (scaled_port_access_len__15),
        .\port_access_q[Size] (\port_access_q[Size] ),
        .read_req_len(read_req_len[7:6]));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized9 Stp_Inst
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_2 ),
        .full_line_beats(full_line_beats[5]),
        .in(in));
  Fast_IP_Clock_system_cache_0_0_carry_and_68 \Use_Read.FE_Gen_New_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .port_ready_with_valid(port_ready_with_valid),
        .rd_port_ready(rd_port_ready));
  Fast_IP_Clock_system_cache_0_0_carry_and_69 \Use_Read.FE_Gen_New_And_Inst2 
       (.A(A),
        .O(O),
        .Q(p_0_in__0),
        .S0_AXI_GEN_ARVALID(S0_AXI_GEN_ARVALID),
        .S_AXI_ACACHE_q(S_AXI_ACACHE_q),
        .\S_AXI_ACACHE_q_reg[2] (\Use_Read.FE_Gen_New_And_Inst2_n_17 ),
        .S_AXI_AVALID_q(S_AXI_AVALID_q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\Use_Read.FE_Gen_New_And_Inst2_n_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\Use_Read.FE_Gen_New_And_Inst2_n_2 ),
        .\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[12].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[13].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[14].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[15].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[16].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[17].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[18].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[19].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_4 ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_2 ),
        .\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[20].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[21].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[22].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[23].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[2].Using_FPGA.Multiple_CE.D_I_reg_3 ),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ({\S_AXI_ASIZE_q_reg_n_0_[2] ,\S_AXI_ASIZE_q_reg_n_0_[1] }),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ),
        .access_stp_bits(access_stp_bits),
        .first_part(first_part),
        .in(in[1]),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .p_0_in(p_0_in[12]),
        .\port_access_q[Size] (\port_access_q[Size] ),
        .port_want_new_access(port_want_new_access),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] [23:12]),
        .req_last(req_last));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_70 \Use_Read.FE_Gen_New_Or_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(A),
        .port_ready_with_valid(port_ready_with_valid),
        .port_want_new_access(port_want_new_access));
  Fast_IP_Clock_system_cache_0_0_reg_ce__parameterized9_71 \Use_Read.Rest_Inst 
       (.ACLK(ACLK),
        .O(O),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg_1 ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg_0 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce_72 Valid_Inst
       (.A(A),
        .ACLK(ACLK),
        .E(S_AXI_AREADY_I),
        .Q(Q),
        .S0_AXI_GEN_ARREADY(S0_AXI_GEN_ARREADY),
        .S0_AXI_GEN_ARSIZE(S0_AXI_GEN_ARSIZE),
        .S0_AXI_GEN_ARSIZE_2_sp_1(Valid_Inst_n_4),
        .S_AXI_AVALID_q(S_AXI_AVALID_q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Valid_Inst_n_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\Use_Read.FE_Gen_New_And_Inst2_n_1 ),
        .allowed_max_wrap_len({allowed_max_wrap_len[5],allowed_max_wrap_len[1]}),
        .read_req_ready(read_req_ready));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT4 #(
    .INIT(16'hFF06)) 
    \access_byte_len[0]_i_1__0 
       (.I0(S0_AXI_GEN_ARSIZE[0]),
        .I1(S0_AXI_GEN_ARSIZE[1]),
        .I2(S0_AXI_GEN_ARSIZE[2]),
        .I3(S0_AXI_GEN_ARLEN[0]),
        .O(\access_byte_len[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT5 #(
    .INIT(32'hFFFB0062)) 
    \access_byte_len[1]_i_1__0 
       (.I0(S0_AXI_GEN_ARSIZE[1]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[0]),
        .I3(S0_AXI_GEN_ARSIZE[2]),
        .I4(S0_AXI_GEN_ARLEN[1]),
        .O(\access_byte_len[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[2]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[1]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[0]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARSIZE[2]),
        .I5(S0_AXI_GEN_ARLEN[2]),
        .O(\access_byte_len[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[3]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[2]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[1]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARSIZE[2]),
        .I5(S0_AXI_GEN_ARLEN[3]),
        .O(\access_byte_len[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[4]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[3]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[2]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARSIZE[2]),
        .I5(S0_AXI_GEN_ARLEN[4]),
        .O(\access_byte_len[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[5]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[4]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[3]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARSIZE[2]),
        .I5(S0_AXI_GEN_ARLEN[5]),
        .O(\access_byte_len[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[6]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[5]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[4]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARSIZE[2]),
        .I5(S0_AXI_GEN_ARLEN[6]),
        .O(\access_byte_len[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFCBB00003088)) 
    \access_byte_len[7]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[6]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARLEN[5]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARSIZE[2]),
        .I5(S0_AXI_GEN_ARLEN[7]),
        .O(\access_byte_len[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'h03080008)) 
    \access_byte_len[8]_i_1__0 
       (.I0(S0_AXI_GEN_ARLEN[7]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARSIZE[2]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARLEN[6]),
        .O(\access_byte_len[8]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \access_byte_len[9]_i_1 
       (.I0(S0_AXI_GEN_ARSIZE[0]),
        .I1(S0_AXI_GEN_ARSIZE[2]),
        .I2(S0_AXI_GEN_ARSIZE[1]),
        .I3(S0_AXI_GEN_ARLEN[7]),
        .O(\access_byte_len[9]_i_1_n_0 ));
  FDRE \access_byte_len_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[0]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[0] ),
        .R(Q));
  FDRE \access_byte_len_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[1]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[1] ),
        .R(Q));
  FDRE \access_byte_len_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[2]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[2] ),
        .R(Q));
  FDRE \access_byte_len_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[3]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[3] ),
        .R(Q));
  FDRE \access_byte_len_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[4]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[4] ),
        .R(Q));
  FDRE \access_byte_len_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[5]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[5] ),
        .R(Q));
  FDRE \access_byte_len_reg[6] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[6]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[6] ),
        .R(Q));
  FDRE \access_byte_len_reg[7] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[7]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[7] ),
        .R(Q));
  FDRE \access_byte_len_reg[8] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[8]_i_1__0_n_0 ),
        .Q(\access_byte_len_reg_n_0_[8] ),
        .R(Q));
  FDRE \access_byte_len_reg[9] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_byte_len[9]_i_1_n_0 ),
        .Q(\access_byte_len_reg_n_0_[9] ),
        .R(Q));
  LUT2 #(
    .INIT(4'hB)) 
    access_is_incr_i_1__0
       (.I0(S0_AXI_GEN_ARBURST[0]),
        .I1(S0_AXI_GEN_ARBURST[1]),
        .O(access_is_incr_cmb));
  FDSE access_is_incr_reg
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(access_is_incr_cmb),
        .Q(access_is_incr),
        .S(Q));
  LUT2 #(
    .INIT(4'h2)) 
    access_is_wrap_i_2
       (.I0(S0_AXI_GEN_ARBURST[1]),
        .I1(S0_AXI_GEN_ARBURST[0]),
        .O(access_is_wrap_i_2_n_0));
  FDRE access_is_wrap_reg
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(access_is_wrap_i_2_n_0),
        .Q(access_is_wrap),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \access_stp_bits[1]_i_1 
       (.I0(S0_AXI_GEN_ARSIZE[0]),
        .I1(S0_AXI_GEN_ARSIZE[2]),
        .I2(S0_AXI_GEN_ARSIZE[1]),
        .O(\access_stp_bits[1]_i_1_n_0 ));
  FDRE \access_stp_bits_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\access_stp_bits[1]_i_1_n_0 ),
        .Q(access_stp_bits),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'hA88A)) 
    \aligned_addr[0]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[0]),
        .I1(S0_AXI_GEN_ARSIZE[2]),
        .I2(S0_AXI_GEN_ARSIZE[1]),
        .I3(S0_AXI_GEN_ARSIZE[0]),
        .O(aligned_addr_cmb[0]));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'hA8AA)) 
    \aligned_addr[1]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[1]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARSIZE[2]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .O(aligned_addr_cmb[1]));
  FDRE \aligned_addr_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(aligned_addr_cmb[0]),
        .Q(aligned_addr[0]),
        .R(Q));
  FDRE \aligned_addr_reg[10] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[10]),
        .Q(aligned_addr[10]),
        .R(Q));
  FDRE \aligned_addr_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(aligned_addr_cmb[1]),
        .Q(aligned_addr[1]),
        .R(Q));
  FDRE \aligned_addr_reg[6] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[6]),
        .Q(aligned_addr[6]),
        .R(Q));
  FDRE \aligned_addr_reg[7] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[7]),
        .Q(aligned_addr[7]),
        .R(Q));
  FDRE \aligned_addr_reg[8] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[8]),
        .Q(aligned_addr[8]),
        .R(Q));
  FDRE \aligned_addr_reg[9] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(S0_AXI_GEN_ARADDR[9]),
        .Q(aligned_addr[9]),
        .R(Q));
  FDRE \allowed_max_wrap_len_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(Valid_Inst_n_5),
        .Q(allowed_max_wrap_len[1]),
        .R(1'b0));
  FDRE \allowed_max_wrap_len_reg[5] 
       (.C(ACLK),
        .CE(1'b1),
        .D(Valid_Inst_n_4),
        .Q(allowed_max_wrap_len[5]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'hFD)) 
    \full_line_beats[4]_i_1 
       (.I0(S0_AXI_GEN_ARSIZE[1]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARSIZE[2]),
        .O(full_line_beats_cmb));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT3 #(
    .INIT(8'hEB)) 
    \full_line_beats[5]_i_1__0 
       (.I0(S0_AXI_GEN_ARSIZE[2]),
        .I1(S0_AXI_GEN_ARSIZE[1]),
        .I2(S0_AXI_GEN_ARSIZE[0]),
        .O(\full_line_beats[5]_i_1__0_n_0 ));
  FDRE \full_line_beats_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(1'b1),
        .Q(full_line_beats[3]),
        .R(Q));
  FDRE \full_line_beats_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(full_line_beats_cmb),
        .Q(full_line_beats[4]),
        .R(Q));
  FDRE \full_line_beats_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(\full_line_beats[5]_i_1__0_n_0 ),
        .Q(full_line_beats[5]),
        .R(Q));
  FDRE \sequential_addr_i_reg[10] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[10]),
        .Q(\sequential_addr_i_reg_n_0_[10] ),
        .R(Q));
  FDRE \sequential_addr_i_reg[11] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[11]),
        .Q(\sequential_addr_i_reg_n_0_[11] ),
        .R(Q));
  FDRE \sequential_addr_i_reg[6] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[6]),
        .Q(\sequential_addr_i_reg_n_0_[6] ),
        .R(Q));
  FDRE \sequential_addr_i_reg[7] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[7]),
        .Q(\sequential_addr_i_reg_n_0_[7] ),
        .R(Q));
  FDRE \sequential_addr_i_reg[8] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[8]),
        .Q(\sequential_addr_i_reg_n_0_[8] ),
        .R(Q));
  FDRE \sequential_addr_i_reg[9] 
       (.C(ACLK),
        .CE(O),
        .D(sequential_addr_i0[9]),
        .Q(\sequential_addr_i_reg_n_0_[9] ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[0]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[1]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARADDR[2]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARADDR[0]),
        .O(wrap_end_beats_cmb[0]));
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[1]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[2]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARADDR[3]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARADDR[1]),
        .O(wrap_end_beats_cmb[1]));
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[2]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[3]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARADDR[4]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARADDR[2]),
        .O(wrap_end_beats_cmb[2]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT5 #(
    .INIT(32'hFCBB3088)) 
    \wrap_end_beats[3]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[4]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARADDR[5]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .I4(S0_AXI_GEN_ARADDR[3]),
        .O(wrap_end_beats_cmb[3]));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT4 #(
    .INIT(16'hC0B8)) 
    \wrap_end_beats[4]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[5]),
        .I1(S0_AXI_GEN_ARSIZE[0]),
        .I2(S0_AXI_GEN_ARADDR[4]),
        .I3(S0_AXI_GEN_ARSIZE[1]),
        .O(wrap_end_beats_cmb[4]));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'h82)) 
    \wrap_end_beats[5]_i_1__0 
       (.I0(S0_AXI_GEN_ARADDR[5]),
        .I1(S0_AXI_GEN_ARSIZE[1]),
        .I2(S0_AXI_GEN_ARSIZE[0]),
        .O(wrap_end_beats_cmb[5]));
  FDRE \wrap_end_beats_reg[0] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[0]),
        .Q(wrap_end_beats[0]),
        .R(Q));
  FDRE \wrap_end_beats_reg[1] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[1]),
        .Q(wrap_end_beats[1]),
        .R(Q));
  FDRE \wrap_end_beats_reg[2] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[2]),
        .Q(wrap_end_beats[2]),
        .R(Q));
  FDRE \wrap_end_beats_reg[3] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[3]),
        .Q(wrap_end_beats[3]),
        .R(Q));
  FDRE \wrap_end_beats_reg[4] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[4]),
        .Q(wrap_end_beats[4]),
        .R(Q));
  FDRE \wrap_end_beats_reg[5] 
       (.C(ACLK),
        .CE(S_AXI_AREADY_I),
        .D(wrap_end_beats_cmb[5]),
        .Q(wrap_end_beats[5]),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_b_channel" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_b_channel
   (queue_full,
    wc_ready,
    S_AXI_BVALID_I_reg_0,
    S0_AXI_GEN_BID,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \bs_port_num_reg[0] ,
    A,
    S0_AXI_GEN_BRESP,
    Q,
    ACLK,
    first_bresp_reg_0,
    \arbiter_bp_push_prt[1][Valid] ,
    write_req_failed,
    \arbiter_bp_push_prt[1][Early] ,
    write_req_last,
    \wr_port_access[1][ID] ,
    bs_exist,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    S_AXI_BVALID_I_reg_1,
    S0_AXI_GEN_BREADY,
    queue_done,
    \S_AXI_BRESP_I_reg[0]_0 ,
    write_fail_completed,
    S_AXI_BVALID_I_reg_2,
    wc_fifo_empty,
    S_AXI_AVALID_q,
    wip_fifo_full,
    queue_almost_full,
    \S_AXI_BRESP_I_reg[0]_1 ,
    out);
  output queue_full;
  output wc_ready;
  output S_AXI_BVALID_I_reg_0;
  output [0:0]S0_AXI_GEN_BID;
  output [0:0]\Use_Reg_Ctrl.queue_exist_i_reg ;
  output \bs_port_num_reg[0] ;
  output A;
  output [1:0]S0_AXI_GEN_BRESP;
  input Q;
  input ACLK;
  input first_bresp_reg_0;
  input \arbiter_bp_push_prt[1][Valid] ;
  input write_req_failed;
  input \arbiter_bp_push_prt[1][Early] ;
  input write_req_last;
  input [0:0]\wr_port_access[1][ID] ;
  input bs_exist;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input S_AXI_BVALID_I_reg_1;
  input S0_AXI_GEN_BREADY;
  input queue_done;
  input \S_AXI_BRESP_I_reg[0]_0 ;
  input write_fail_completed;
  input S_AXI_BVALID_I_reg_2;
  input wc_fifo_empty;
  input S_AXI_AVALID_q;
  input wip_fifo_full;
  input queue_almost_full;
  input [1:0]\S_AXI_BRESP_I_reg[0]_1 ;
  input [1:0]out;

  wire A;
  wire ACLK;
  wire FIFO_BIP_Pointer_n_10;
  wire FIFO_BIP_Pointer_n_11;
  wire FIFO_BIP_Pointer_n_8;
  wire Q;
  wire [0:0]S0_AXI_GEN_BID;
  wire S0_AXI_GEN_BREADY;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire S_AXI_AVALID_q;
  wire \S_AXI_BRESP_I_reg[0]_0 ;
  wire [1:0]\S_AXI_BRESP_I_reg[0]_1 ;
  wire S_AXI_BVALID_I_reg_0;
  wire S_AXI_BVALID_I_reg_1;
  wire S_AXI_BVALID_I_reg_2;
  wire [0:0]\Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire \bip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ;
  wire \bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire \bip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire bp_early;
  wire bp_exist;
  wire \bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ;
  wire [3:0]bp_read_fifo_addr;
  wire bp_ready__0;
  wire bp_refresh_reg;
  wire bp_valid_normal;
  wire bs_exist;
  wire \bs_port_num_reg[0] ;
  wire first_bresp;
  wire first_bresp_reg_0;
  wire [1:0]out;
  wire queue_almost_full;
  wire queue_done;
  wire queue_full;
  wire [3:0]queue_index;
  wire queue_pop;
  wire wc_fifo_empty;
  wire wc_ready;
  wire wip_fifo_full;
  wire [0:0]\wr_port_access[1][ID] ;
  wire write_fail_completed;
  wire write_req_failed;
  wire write_req_last;

  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_33 FIFO_BIP_Pointer
       (.A(A),
        .ACLK(ACLK),
        .Q(Q),
        .S0_AXI_GEN_BREADY(S0_AXI_GEN_BREADY),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S_AXI_AVALID_q(S_AXI_AVALID_q),
        .\S_AXI_BRESP_I_reg[0] (FIFO_BIP_Pointer_n_11),
        .\S_AXI_BRESP_I_reg[0]_0 (\S_AXI_BRESP_I_reg[0]_0 ),
        .\S_AXI_BRESP_I_reg[0]_1 (\S_AXI_BRESP_I_reg[0]_1 ),
        .\S_AXI_BRESP_I_reg[1] (FIFO_BIP_Pointer_n_10),
        .S_AXI_BVALID_I_reg(wc_ready),
        .S_AXI_BVALID_I_reg_0(S_AXI_BVALID_I_reg_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FIFO_BIP_Pointer_n_8),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 (first_bresp_reg_0),
        .\Use_FPGA.Full_Inst_0 (queue_full),
        .bp_early(bp_early),
        .bp_early_reg(\bip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ),
        .bp_exist(bp_exist),
        .bp_refresh_reg(bp_refresh_reg),
        .bp_valid_normal(bp_valid_normal),
        .first_bresp(first_bresp),
        .out(out),
        .queue_almost_full(queue_almost_full),
        .queue_done(queue_done),
        .queue_index(queue_index),
        .queue_pop(queue_pop),
        .wip_fifo_full(wip_fifo_full),
        .write_fail_completed(write_fail_completed));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_34 FIFO_BP_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .S_AXI_BVALID_I_reg(S_AXI_BVALID_I_reg_1),
        .S_AXI_BVALID_I_reg_0(S_AXI_BVALID_I_reg_2),
        .\Use_FPGA.Empty_Inst_0 (wc_ready),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_2 (\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_3 (\bip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .bp_early(bp_early),
        .bp_exist(bp_exist),
        .bp_read_fifo_addr(bp_read_fifo_addr),
        .bp_ready__0(bp_ready__0),
        .bp_valid_normal(bp_valid_normal),
        .bs_exist(bs_exist),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .queue_pop(queue_pop),
        .wc_fifo_empty(wc_fifo_empty));
  FDRE \S_AXI_BID_reg[0] 
       (.C(ACLK),
        .CE(wc_ready),
        .D(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S0_AXI_GEN_BID),
        .R(Q));
  FDRE \S_AXI_BRESP_I_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BIP_Pointer_n_11),
        .Q(S0_AXI_GEN_BRESP[0]),
        .R(1'b0));
  FDRE \S_AXI_BRESP_I_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BIP_Pointer_n_10),
        .Q(S0_AXI_GEN_BRESP[1]),
        .R(1'b0));
  FDRE S_AXI_BVALID_I_reg
       (.C(ACLK),
        .CE(wc_ready),
        .D(\bip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(S_AXI_BVALID_I_reg_0),
        .R(FIFO_BIP_Pointer_n_8));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5__0 
       (.I0(S0_AXI_GEN_BREADY),
        .I1(S_AXI_BVALID_I_reg_0),
        .O(bp_ready__0));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bip_fifo_mem_reg[15][Failed] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bip_fifo_mem_reg[15][Failed][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bip_fifo_mem_reg[15][Failed][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(first_bresp_reg_0),
        .CLK(ACLK),
        .D(write_req_failed),
        .Q(\bip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(first_bresp_reg_0),
        .CLK(ACLK),
        .D(\wr_port_access[1][ID] ),
        .Q(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bip_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bip_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bip_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(first_bresp_reg_0),
        .CLK(ACLK),
        .D(write_req_last),
        .Q(\bip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE bp_early_reg
       (.C(ACLK),
        .CE(bp_refresh_reg),
        .D(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ),
        .Q(bp_early),
        .R(Q));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bp_fifo_mem_reg[15][Early] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/B_Channel/bp_fifo_mem_reg[15][Early][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Early][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[1][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[1][Early] ),
        .Q(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ));
  FDSE first_bresp_reg
       (.C(ACLK),
        .CE(wc_ready),
        .D(\bip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(first_bresp),
        .S(Q));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_ctrl_interface" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_ctrl_interface
   (ctrl_init_done_i,
    \ctrl_access[Internal_Cmd] ,
    \ctrl_access[Size] ,
    ctrl_init_done_i_reg_0,
    ctrl_init_done_i_reg_1,
    \ctrl_access[Addr] ,
    ACLK,
    ARESET,
    E,
    ctrl_ready,
    Q);
  output ctrl_init_done_i;
  output \ctrl_access[Internal_Cmd] ;
  output [0:0]\ctrl_access[Size] ;
  output ctrl_init_done_i_reg_0;
  output ctrl_init_done_i_reg_1;
  output [8:0]\ctrl_access[Addr] ;
  input ACLK;
  input ARESET;
  input [0:0]E;
  input ctrl_ready;
  input Q;

  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [0:0]E;
  wire Q;
  wire b2s;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [0:0]\ctrl_access[Size] ;
  wire \ctrl_access_i[Addr][10]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][11]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][12]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][13]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][14]_i_2_n_0 ;
  wire \ctrl_access_i[Addr][6]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][7]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][8]_i_1_n_0 ;
  wire \ctrl_access_i[Addr][9]_i_1_n_0 ;
  wire \ctrl_access_i[Barrier] ;
  wire \ctrl_access_i[Prot][1]_i_1_n_0 ;
  wire \ctrl_access_i[Valid]_i_1_n_0 ;
  wire \ctrl_init_cnt[13]_i_2_n_0 ;
  wire \ctrl_init_cnt[14]_i_2_n_0 ;
  wire \ctrl_init_cnt[8]_i_1_n_0 ;
  wire [14:6]ctrl_init_cnt_reg;
  wire ctrl_init_done_i;
  wire ctrl_init_done_i_reg_0;
  wire ctrl_init_done_i_reg_1;
  wire ctrl_init_last;
  wire ctrl_init_last_i_3_n_0;
  wire ctrl_ready;
  wire [8:0]plusOp;

  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.MUXCY_I_i_1__178 
       (.I0(ctrl_init_done_i),
        .I1(ARESET),
        .I2(Q),
        .O(ctrl_init_done_i_reg_0));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.MUXCY_I_i_1__184 
       (.I0(ctrl_init_done_i),
        .I1(ARESET),
        .I2(Q),
        .O(ctrl_init_done_i_reg_1));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][10]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[10]),
        .O(\ctrl_access_i[Addr][10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][11]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[11]),
        .O(\ctrl_access_i[Addr][11]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][12]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[12]),
        .O(\ctrl_access_i[Addr][12]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][13]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[13]),
        .O(\ctrl_access_i[Addr][13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAAB)) 
    \ctrl_access_i[Addr][14]_i_1 
       (.I0(ctrl_ready),
        .I1(ctrl_init_done_i),
        .I2(ctrl_init_last),
        .I3(\ctrl_access[Internal_Cmd] ),
        .O(\ctrl_access_i[Barrier] ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][14]_i_2 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[14]),
        .O(\ctrl_access_i[Addr][14]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][6]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[6]),
        .O(\ctrl_access_i[Addr][6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][7]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[7]),
        .O(\ctrl_access_i[Addr][7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][8]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[8]),
        .O(\ctrl_access_i[Addr][8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000D0000)) 
    \ctrl_access_i[Addr][9]_i_1 
       (.I0(\ctrl_access[Internal_Cmd] ),
        .I1(ctrl_ready),
        .I2(ctrl_init_last),
        .I3(ctrl_init_done_i),
        .I4(ctrl_init_cnt_reg[9]),
        .O(\ctrl_access_i[Addr][9]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000003AA03AB)) 
    \ctrl_access_i[Prot][1]_i_1 
       (.I0(\ctrl_access[Size] ),
        .I1(ctrl_init_done_i),
        .I2(ctrl_init_last),
        .I3(ctrl_ready),
        .I4(\ctrl_access[Internal_Cmd] ),
        .I5(ARESET_I),
        .O(\ctrl_access_i[Prot][1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00005703)) 
    \ctrl_access_i[Valid]_i_1 
       (.I0(ctrl_ready),
        .I1(ctrl_init_done_i),
        .I2(ctrl_init_last),
        .I3(\ctrl_access[Internal_Cmd] ),
        .I4(ARESET_I),
        .O(\ctrl_access_i[Valid]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][10] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][10]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [4]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][11] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][11]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [5]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][12] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][12]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [6]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][13] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][13]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [7]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][14] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][14]_i_2_n_0 ),
        .Q(\ctrl_access[Addr] [8]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][6] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][6]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [0]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][7] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][7]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [1]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][8] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][8]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [2]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Addr][9] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(\ctrl_access_i[Addr][9]_i_1_n_0 ),
        .Q(\ctrl_access[Addr] [3]),
        .R(ARESET_I));
  FDRE \ctrl_access_i_reg[Prot][1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\ctrl_access_i[Prot][1]_i_1_n_0 ),
        .Q(\ctrl_access[Size] ),
        .R(1'b0));
  FDRE \ctrl_access_i_reg[Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\ctrl_access_i[Valid]_i_1_n_0 ),
        .Q(\ctrl_access[Internal_Cmd] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \ctrl_init_cnt[10]_i_1 
       (.I0(ctrl_init_cnt_reg[8]),
        .I1(ctrl_init_cnt_reg[7]),
        .I2(ctrl_init_cnt_reg[6]),
        .I3(ctrl_init_cnt_reg[9]),
        .I4(ctrl_init_cnt_reg[10]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \ctrl_init_cnt[11]_i_1 
       (.I0(ctrl_init_cnt_reg[9]),
        .I1(ctrl_init_cnt_reg[6]),
        .I2(ctrl_init_cnt_reg[7]),
        .I3(ctrl_init_cnt_reg[8]),
        .I4(ctrl_init_cnt_reg[10]),
        .I5(ctrl_init_cnt_reg[11]),
        .O(plusOp[5]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \ctrl_init_cnt[12]_i_1 
       (.I0(ctrl_init_cnt_reg[10]),
        .I1(\ctrl_init_cnt[13]_i_2_n_0 ),
        .I2(ctrl_init_cnt_reg[9]),
        .I3(ctrl_init_cnt_reg[11]),
        .I4(ctrl_init_cnt_reg[12]),
        .O(plusOp[6]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \ctrl_init_cnt[13]_i_1 
       (.I0(ctrl_init_cnt_reg[11]),
        .I1(ctrl_init_cnt_reg[9]),
        .I2(\ctrl_init_cnt[13]_i_2_n_0 ),
        .I3(ctrl_init_cnt_reg[10]),
        .I4(ctrl_init_cnt_reg[12]),
        .I5(ctrl_init_cnt_reg[13]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \ctrl_init_cnt[13]_i_2 
       (.I0(ctrl_init_cnt_reg[8]),
        .I1(ctrl_init_cnt_reg[7]),
        .I2(ctrl_init_cnt_reg[6]),
        .O(\ctrl_init_cnt[13]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \ctrl_init_cnt[14]_i_1 
       (.I0(ctrl_init_cnt_reg[12]),
        .I1(\ctrl_init_cnt[14]_i_2_n_0 ),
        .I2(ctrl_init_cnt_reg[13]),
        .I3(ctrl_init_cnt_reg[14]),
        .O(plusOp[8]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \ctrl_init_cnt[14]_i_2 
       (.I0(ctrl_init_cnt_reg[11]),
        .I1(ctrl_init_cnt_reg[9]),
        .I2(ctrl_init_cnt_reg[6]),
        .I3(ctrl_init_cnt_reg[7]),
        .I4(ctrl_init_cnt_reg[8]),
        .I5(ctrl_init_cnt_reg[10]),
        .O(\ctrl_init_cnt[14]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ctrl_init_cnt[6]_i_1 
       (.I0(ctrl_init_cnt_reg[6]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ctrl_init_cnt[7]_i_1 
       (.I0(ctrl_init_cnt_reg[6]),
        .I1(ctrl_init_cnt_reg[7]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \ctrl_init_cnt[8]_i_1 
       (.I0(ctrl_init_cnt_reg[7]),
        .I1(ctrl_init_cnt_reg[6]),
        .I2(ctrl_init_cnt_reg[8]),
        .O(\ctrl_init_cnt[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \ctrl_init_cnt[9]_i_1 
       (.I0(ctrl_init_cnt_reg[6]),
        .I1(ctrl_init_cnt_reg[7]),
        .I2(ctrl_init_cnt_reg[8]),
        .I3(ctrl_init_cnt_reg[9]),
        .O(plusOp[3]));
  FDRE \ctrl_init_cnt_reg[10] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[4]),
        .Q(ctrl_init_cnt_reg[10]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[11] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[5]),
        .Q(ctrl_init_cnt_reg[11]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[12] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[6]),
        .Q(ctrl_init_cnt_reg[12]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[13] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[7]),
        .Q(ctrl_init_cnt_reg[13]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[14] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[8]),
        .Q(ctrl_init_cnt_reg[14]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[6] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[0]),
        .Q(ctrl_init_cnt_reg[6]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[7] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[1]),
        .Q(ctrl_init_cnt_reg[7]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[8] 
       (.C(ACLK),
        .CE(E),
        .D(\ctrl_init_cnt[8]_i_1_n_0 ),
        .Q(ctrl_init_cnt_reg[8]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[9] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[3]),
        .Q(ctrl_init_cnt_reg[9]),
        .R(ARESET_I));
  FDRE ctrl_init_done_i_reg
       (.C(ACLK),
        .CE(E),
        .D(ctrl_init_last),
        .Q(ctrl_init_done_i),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h00008000)) 
    ctrl_init_last_i_2
       (.I0(ctrl_init_cnt_reg[14]),
        .I1(ctrl_init_cnt_reg[13]),
        .I2(ctrl_init_cnt_reg[11]),
        .I3(ctrl_init_cnt_reg[12]),
        .I4(ctrl_init_last_i_3_n_0),
        .O(b2s));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    ctrl_init_last_i_3
       (.I0(ctrl_init_cnt_reg[10]),
        .I1(ctrl_init_cnt_reg[9]),
        .I2(ctrl_init_cnt_reg[6]),
        .I3(ctrl_init_cnt_reg[7]),
        .I4(ctrl_init_cnt_reg[8]),
        .O(ctrl_init_last_i_3_n_0));
  FDRE ctrl_init_last_reg
       (.C(ACLK),
        .CE(E),
        .D(b2s),
        .Q(ctrl_init_last),
        .R(ARESET_I));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_gen_interface" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_gen_interface
   (in,
    CE,
    \wr_port_access[1][Valid] ,
    \wr_port_access[1][Addr] ,
    \wr_port_access[1][Kind] ,
    \wr_port_access[1][Size] ,
    \wr_port_access[1][Other_Allocate] ,
    \wr_port_access[1][Bufferable] ,
    CE_0,
    \rd_port_access[1][Valid] ,
    \rd_port_access[1][Addr] ,
    \rd_port_access[1][Kind] ,
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ,
    \rd_port_access[1][Allocate] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    S_AXI_BVALID_I_reg,
    S0_AXI_GEN_BID,
    \read_info_status[0,1][Almost_Full] ,
    \read_info_status[0,1][Full] ,
    E,
    \lud_reg_valid_one_hot_reg[1] ,
    \Use_FPGA_Flag_Hit.Full_Inst ,
    \Use_FPGA_Flag_Miss.Full_Inst ,
    \read_data_status[0,1][Hit_Fit] ,
    S0_AXI_GEN_RID,
    \wr_port_data_info_reg[0][Last] ,
    S0_AXI_GEN_RVALID,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \bs_port_num_reg[0] ,
    D,
    \wr_port_data_info_reg[0][Data][31] ,
    lud_addr_pipeline_full0,
    A_3,
    A_N,
    DATA_INA,
    S0_AXI_GEN_WREADY,
    \arb_access_i[Allocate]1__0 ,
    wr_port_early011_out,
    SRI,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    A_0,
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ,
    \rd_port_access[1][Len] ,
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    S0_AXI_GEN_RLAST,
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ,
    \wr_port_data_info_reg[0][Last]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_ARREADY,
    \wr_port_data_info_reg[0][BE][3] ,
    S0_AXI_GEN_BRESP,
    S0_AXI_GEN_RDATA,
    S0_AXI_GEN_RRESP,
    ACLK,
    ARESET,
    O,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    S,
    S0_AXI_GEN_AWLOCK,
    S0_AXI_GEN_AWID,
    S0_AXI_GEN_AWADDR,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    rd_port_ready,
    S0_AXI_GEN_ARCACHE,
    S0_AXI_GEN_ARID,
    S0_AXI_GEN_ARADDR,
    S0_AXI_GEN_WVALID,
    S_4,
    \arbiter_bp_push_prt[1][Valid] ,
    \arbiter_bp_push_prt[1][Early] ,
    \Use_FPGA.Almost_Full_Inst ,
    S0_AXI_GEN_RREADY,
    \lookup_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    wm_port,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    bs_exist,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_2 ,
    S_AXI_BVALID_I_reg_0,
    \update_wma_data_reg[31] ,
    lud_addr_pipeline_full_reg,
    p_95_in,
    lud_addr_pipeline_full_reg_0,
    lud_addr_pipeline_full_reg_1,
    lud_reg_port_num,
    lud_addr_pipeline_full_reg_2,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \read_data_status[0,0][Hit_Almost_Full] ,
    lud_addr_pipeline_full_reg_3,
    lud_addr_pipeline_full_reg_4,
    wr_port_data_ready,
    S0_AXI_GEN_BREADY,
    \S_AXI_BRESP_I_reg[0] ,
    S_AXI_BVALID_I_reg_1,
    S0_AXI_GEN_AWVALID,
    access_piperun,
    access_valid,
    S0_AXI_GEN_ARVALID,
    port_ready_1,
    wr_port_keep,
    rd_port_multi_part_1,
    any_port_forbid_1,
    S0_AXI_ARSIZE,
    reduce_or,
    \ctrl_access[Size] ,
    S0_AXI_GEN_AWSIZE,
    S0_AXI_GEN_AWLEN,
    S0_AXI_GEN_ARSIZE,
    S0_AXI_GEN_ARLEN,
    S0_AXI_ARLEN,
    S0_AXI_AWLEN,
    \access_data_info[0,0][Last] ,
    update_wm_pop_normal_hold_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg_3 ,
    lud_addr_pipeline_full,
    S0_AXI_GEN_AWBURST,
    S0_AXI_GEN_ARBURST,
    M0_AXI_RRESP,
    S0_AXI_GEN_AWCACHE,
    S0_AXI_GEN_WSTRB,
    S0_AXI_GEN_WDATA,
    \S_AXI_BRESP_I_reg[0]_0 ,
    out,
    new_read_data_word,
    new_read_data_last,
    lopt,
    lopt_1);
  output [5:0]in;
  output [0:0]CE;
  output \wr_port_access[1][Valid] ;
  output [23:0]\wr_port_access[1][Addr] ;
  output \wr_port_access[1][Kind] ;
  output [2:0]\wr_port_access[1][Size] ;
  output \wr_port_access[1][Other_Allocate] ;
  output \wr_port_access[1][Bufferable] ;
  output [0:0]CE_0;
  output \rd_port_access[1][Valid] ;
  output [23:0]\rd_port_access[1][Addr] ;
  output \rd_port_access[1][Kind] ;
  output [1:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  output \rd_port_access[1][Allocate] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output S_AXI_BVALID_I_reg;
  output [0:0]S0_AXI_GEN_BID;
  output \read_info_status[0,1][Almost_Full] ;
  output \read_info_status[0,1][Full] ;
  output [0:0]E;
  output [0:0]\lud_reg_valid_one_hot_reg[1] ;
  output \Use_FPGA_Flag_Hit.Full_Inst ;
  output \Use_FPGA_Flag_Miss.Full_Inst ;
  output \read_data_status[0,1][Hit_Fit] ;
  output [0:0]S0_AXI_GEN_RID;
  output \wr_port_data_info_reg[0][Last] ;
  output S0_AXI_GEN_RVALID;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [0:0]\Use_Reg_Ctrl.queue_exist_i_reg ;
  output \bs_port_num_reg[0] ;
  output [31:0]D;
  output [31:0]\wr_port_data_info_reg[0][Data][31] ;
  output lud_addr_pipeline_full0;
  output A_3;
  output A_N;
  output [31:0]DATA_INA;
  output S0_AXI_GEN_WREADY;
  output \arb_access_i[Allocate]1__0 ;
  output wr_port_early011_out;
  output SRI;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output A_0;
  output \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ;
  output [1:0]\rd_port_access[1][Len] ;
  output \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output S0_AXI_GEN_RLAST;
  output \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ;
  output \wr_port_data_info_reg[0][Last]_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output S0_AXI_GEN_AWREADY;
  output S0_AXI_GEN_ARREADY;
  output [3:0]\wr_port_data_info_reg[0][BE][3] ;
  output [1:0]S0_AXI_GEN_BRESP;
  output [31:0]S0_AXI_GEN_RDATA;
  output [1:0]S0_AXI_GEN_RRESP;
  input ACLK;
  input ARESET;
  input O;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  input S;
  input S0_AXI_GEN_AWLOCK;
  input [0:0]S0_AXI_GEN_AWID;
  input [23:0]S0_AXI_GEN_AWADDR;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  input \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  input rd_port_ready;
  input [0:0]S0_AXI_GEN_ARCACHE;
  input [0:0]S0_AXI_GEN_ARID;
  input [23:0]S0_AXI_GEN_ARADDR;
  input S0_AXI_GEN_WVALID;
  input S_4;
  input \arbiter_bp_push_prt[1][Valid] ;
  input \arbiter_bp_push_prt[1][Early] ;
  input \Use_FPGA.Almost_Full_Inst ;
  input S0_AXI_GEN_RREADY;
  input \lookup_read_data_info[0,1][Valid] ;
  input \update_read_data_info[0,1][Valid] ;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input wm_port;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input bs_exist;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  input S_AXI_BVALID_I_reg_0;
  input [31:0]\update_wma_data_reg[31] ;
  input lud_addr_pipeline_full_reg;
  input p_95_in;
  input [0:0]lud_addr_pipeline_full_reg_0;
  input lud_addr_pipeline_full_reg_1;
  input lud_reg_port_num;
  input lud_addr_pipeline_full_reg_2;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input \read_data_status[0,0][Hit_Almost_Full] ;
  input lud_addr_pipeline_full_reg_3;
  input [0:0]lud_addr_pipeline_full_reg_4;
  input wr_port_data_ready;
  input S0_AXI_GEN_BREADY;
  input \S_AXI_BRESP_I_reg[0] ;
  input S_AXI_BVALID_I_reg_1;
  input S0_AXI_GEN_AWVALID;
  input access_piperun;
  input access_valid;
  input S0_AXI_GEN_ARVALID;
  input port_ready_1;
  input [0:0]wr_port_keep;
  input rd_port_multi_part_1;
  input any_port_forbid_1;
  input [0:0]S0_AXI_ARSIZE;
  input reduce_or;
  input [0:0]\ctrl_access[Size] ;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [7:0]S0_AXI_GEN_AWLEN;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [7:0]S0_AXI_GEN_ARLEN;
  input [5:0]S0_AXI_ARLEN;
  input [1:0]S0_AXI_AWLEN;
  input \access_data_info[0,0][Last] ;
  input update_wm_pop_normal_hold_reg;
  input \Use_Reg_Ctrl.queue_exist_i_reg_3 ;
  input lud_addr_pipeline_full;
  input [1:0]S0_AXI_GEN_AWBURST;
  input [1:0]S0_AXI_GEN_ARBURST;
  input [1:0]M0_AXI_RRESP;
  input [2:0]S0_AXI_GEN_AWCACHE;
  input [3:0]S0_AXI_GEN_WSTRB;
  input [31:0]S0_AXI_GEN_WDATA;
  input [1:0]\S_AXI_BRESP_I_reg[0]_0 ;
  input [1:0]out;
  input [31:0]new_read_data_word;
  input new_read_data_last;
  input lopt;
  output lopt_1;

  wire A;
  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire AR_Channel_n_59;
  wire AW_Channel_n_50;
  wire AW_Channel_n_51;
  wire A_0;
  wire A_3;
  wire A_N;
  wire [0:0]CE;
  wire [0:0]CE_0;
  wire [31:0]D;
  wire [31:0]DATA_INA;
  wire [0:0]E;
  wire [1:0]M0_AXI_RRESP;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire O;
  wire Q0_in;
  wire R_Channel_n_3;
  wire S;
  wire [5:0]S0_AXI_ARLEN;
  wire [0:0]S0_AXI_ARSIZE;
  wire [1:0]S0_AXI_AWLEN;
  wire [23:0]S0_AXI_GEN_ARADDR;
  wire [1:0]S0_AXI_GEN_ARBURST;
  wire [0:0]S0_AXI_GEN_ARCACHE;
  wire [0:0]S0_AXI_GEN_ARID;
  wire [7:0]S0_AXI_GEN_ARLEN;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARVALID;
  wire [23:0]S0_AXI_GEN_AWADDR;
  wire [1:0]S0_AXI_GEN_AWBURST;
  wire [2:0]S0_AXI_GEN_AWCACHE;
  wire [0:0]S0_AXI_GEN_AWID;
  wire [7:0]S0_AXI_GEN_AWLEN;
  wire S0_AXI_GEN_AWLOCK;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWVALID;
  wire [0:0]S0_AXI_GEN_BID;
  wire S0_AXI_GEN_BREADY;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire [31:0]S0_AXI_GEN_RDATA;
  wire [0:0]S0_AXI_GEN_RID;
  wire S0_AXI_GEN_RLAST;
  wire S0_AXI_GEN_RREADY;
  wire [1:0]S0_AXI_GEN_RRESP;
  wire S0_AXI_GEN_RVALID;
  wire [31:0]S0_AXI_GEN_WDATA;
  wire S0_AXI_GEN_WREADY;
  wire [3:0]S0_AXI_GEN_WSTRB;
  wire S0_AXI_GEN_WVALID;
  wire SRI;
  wire S_4;
  wire S_AXI_AVALID_q;
  wire \S_AXI_BRESP_I_reg[0] ;
  wire [1:0]\S_AXI_BRESP_I_reg[0]_0 ;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire S_AXI_BVALID_I_reg_1;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire [1:0]\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ;
  wire \Use_FPGA_Flag_Hit.Full_Inst ;
  wire \Use_FPGA_Flag_Miss.Full_Inst ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire [0:0]\Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_3 ;
  wire \access_data_info[0,0][Last] ;
  wire access_piperun;
  wire access_valid;
  wire any_port_forbid_1;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire bs_exist;
  wire \bs_port_num_reg[0] ;
  wire [0:0]\ctrl_access[Size] ;
  wire [5:0]in;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_reg;
  wire [0:0]lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire lud_addr_pipeline_full_reg_2;
  wire lud_addr_pipeline_full_reg_3;
  wire [0:0]lud_addr_pipeline_full_reg_4;
  wire lud_reg_port_num;
  wire [0:0]\lud_reg_valid_one_hot_reg[1] ;
  wire new_read_data_last;
  wire [31:0]new_read_data_word;
  wire [1:0]out;
  wire p_95_in;
  wire port_ready_1;
  wire queue_almost_full;
  wire queue_done;
  wire queue_full;
  wire [23:0]\rd_port_access[1][Addr] ;
  wire \rd_port_access[1][Allocate] ;
  wire [0:0]\rd_port_access[1][ID] ;
  wire \rd_port_access[1][Kind] ;
  wire [1:0]\rd_port_access[1][Len] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire rd_port_ready;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Fit] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire read_req_last;
  wire [7:0]read_req_len;
  wire read_req_ready;
  wire [1:0]read_req_rest;
  wire read_req_single;
  wire [1:0]read_req_stp;
  wire read_req_valid;
  wire reduce_or;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_wm_pop_normal_hold_reg;
  wire [31:0]\update_wma_data_reg[31] ;
  wire wc_fifo_empty;
  wire wc_ready;
  wire wip_fifo_full;
  wire wm_port;
  wire [23:0]\wr_port_access[1][Addr] ;
  wire \wr_port_access[1][Bufferable] ;
  wire [0:0]\wr_port_access[1][ID] ;
  wire \wr_port_access[1][Kind] ;
  wire [7:6]\wr_port_access[1][Len] ;
  wire \wr_port_access[1][Other_Allocate] ;
  wire [2:0]\wr_port_access[1][Size] ;
  wire \wr_port_access[1][Valid] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [31:0]\wr_port_data_info_reg[0][Data][31] ;
  wire \wr_port_data_info_reg[0][Last] ;
  wire \wr_port_data_info_reg[0][Last]_0 ;
  wire wr_port_data_ready;
  wire wr_port_early011_out;
  wire [0:0]wr_port_keep;
  wire write_fail_completed;
  wire write_req_failed;
  wire write_req_last;

  Fast_IP_Clock_system_cache_0_0_sc_s_axi_a_channel__parameterized1 AR_Channel
       (.ACLK(ACLK),
        .A_0(A_0),
        .O(O),
        .Q(ARESET_I),
        .Q0_in(Q0_in),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .S0_AXI_GEN_ARADDR(S0_AXI_GEN_ARADDR),
        .S0_AXI_GEN_ARBURST(S0_AXI_GEN_ARBURST),
        .S0_AXI_GEN_ARCACHE(S0_AXI_GEN_ARCACHE),
        .S0_AXI_GEN_ARID(S0_AXI_GEN_ARID),
        .S0_AXI_GEN_ARLEN(S0_AXI_GEN_ARLEN),
        .S0_AXI_GEN_ARREADY(S0_AXI_GEN_ARREADY),
        .S0_AXI_GEN_ARSIZE(S0_AXI_GEN_ARSIZE),
        .S0_AXI_GEN_ARVALID(S0_AXI_GEN_ARVALID),
        .SRI(SRI),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (CE_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\rd_port_access[1][Valid] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [0]),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\rd_port_access[1][Allocate] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (\wr_port_access[1][Valid] ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (AR_Channel_n_59),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (read_req_rest),
        .\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst [1]),
        .\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst ),
        .any_port_forbid_1(any_port_forbid_1),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .in(read_req_stp),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .port_ready_1(port_ready_1),
        .\rd_port_access[1][Addr] (\rd_port_access[1][Addr] ),
        .\rd_port_access[1][ID] (\rd_port_access[1][ID] ),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ),
        .\rd_port_access[1][Len] (\rd_port_access[1][Len] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .rd_port_ready(rd_port_ready),
        .read_req_last(read_req_last),
        .read_req_len(read_req_len),
        .read_req_ready(read_req_ready),
        .read_req_single(read_req_single),
        .read_req_valid(read_req_valid),
        .reduce_or(reduce_or),
        .\rip_stp_reg[0] (R_Channel_n_3));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_a_channel AW_Channel
       (.A(A),
        .ACLK(ACLK),
        .O(O),
        .Q(ARESET_I),
        .S(S),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_GEN_AWADDR(S0_AXI_GEN_AWADDR),
        .S0_AXI_GEN_AWBURST(S0_AXI_GEN_AWBURST),
        .S0_AXI_GEN_AWCACHE(S0_AXI_GEN_AWCACHE),
        .S0_AXI_GEN_AWID(S0_AXI_GEN_AWID),
        .S0_AXI_GEN_AWLEN(S0_AXI_GEN_AWLEN),
        .S0_AXI_GEN_AWLOCK(S0_AXI_GEN_AWLOCK),
        .S0_AXI_GEN_AWREADY(S0_AXI_GEN_AWREADY),
        .S0_AXI_GEN_AWSIZE(S0_AXI_GEN_AWSIZE),
        .S0_AXI_GEN_AWVALID(S0_AXI_GEN_AWVALID),
        .S_AXI_AVALID_q(S_AXI_AVALID_q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (CE),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\wr_port_access[1][Valid] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\wr_port_access[1][Other_Allocate] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\wr_port_access[1][Bufferable] ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (AW_Channel_n_50),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (AW_Channel_n_51),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst ),
        .\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst (\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst ),
        .access_piperun(access_piperun),
        .access_valid(access_valid),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .in({\wr_port_access[1][Len] ,in}),
        .port_ready_1(port_ready_1),
        .queue_done(queue_done),
        .queue_full(queue_full),
        .wip_fifo_full(wip_fifo_full),
        .\wr_port_access[1][Addr] (\wr_port_access[1][Addr] ),
        .\wr_port_access[1][ID] (\wr_port_access[1][ID] ),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ),
        .\wr_port_access[1][Size] (\wr_port_access[1][Size] ),
        .wr_port_early011_out(wr_port_early011_out),
        .wr_port_keep(wr_port_keep),
        .write_req_failed(write_req_failed),
        .write_req_last(write_req_last));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_b_channel B_Channel
       (.A(A),
        .ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_GEN_BID(S0_AXI_GEN_BID),
        .S0_AXI_GEN_BREADY(S0_AXI_GEN_BREADY),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S_AXI_AVALID_q(S_AXI_AVALID_q),
        .\S_AXI_BRESP_I_reg[0]_0 (\S_AXI_BRESP_I_reg[0] ),
        .\S_AXI_BRESP_I_reg[0]_1 (\S_AXI_BRESP_I_reg[0]_0 ),
        .S_AXI_BVALID_I_reg_0(S_AXI_BVALID_I_reg),
        .S_AXI_BVALID_I_reg_1(S_AXI_BVALID_I_reg_0),
        .S_AXI_BVALID_I_reg_2(S_AXI_BVALID_I_reg_1),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (\Use_Reg_Ctrl.queue_exist_i_reg_2 ),
        .\arbiter_bp_push_prt[1][Early] (\arbiter_bp_push_prt[1][Early] ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .bs_exist(bs_exist),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .first_bresp_reg_0(AW_Channel_n_51),
        .out(out),
        .queue_almost_full(queue_almost_full),
        .queue_done(queue_done),
        .queue_full(queue_full),
        .wc_fifo_empty(wc_fifo_empty),
        .wc_ready(wc_ready),
        .wip_fifo_full(wip_fifo_full),
        .\wr_port_access[1][ID] (\wr_port_access[1][ID] ),
        .write_fail_completed(write_fail_completed),
        .write_req_failed(write_req_failed),
        .write_req_last(write_req_last));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_r_channel__parameterized1 R_Channel
       (.ACLK(ACLK),
        .A_N(A_N),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(ARESET_I),
        .Q0_in(Q0_in),
        .\Read_External_Narrow.rd_length_reg[7]_0 (read_req_len),
        .\Read_External_Narrow.rd_rest_reg[1]_0 (read_req_rest),
        .S0_AXI_GEN_RDATA(S0_AXI_GEN_RDATA),
        .S0_AXI_GEN_RID(S0_AXI_GEN_RID),
        .S0_AXI_GEN_RLAST(S0_AXI_GEN_RLAST),
        .S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .S0_AXI_GEN_RRESP(S0_AXI_GEN_RRESP),
        .S0_AXI_GEN_RVALID(S0_AXI_GEN_RVALID),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Full_Inst (R_Channel_n_3),
        .\Use_FPGA_Flag_Hit.Full_Inst_0 (\Use_FPGA_Flag_Hit.Full_Inst ),
        .\Use_FPGA_Flag_Miss.Full_Inst_0 (\Use_FPGA_Flag_Miss.Full_Inst ),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 (E),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_1 (\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .in(read_req_stp),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lud_addr_pipeline_full(lud_addr_pipeline_full),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg),
        .lud_addr_pipeline_full_reg_0(lud_addr_pipeline_full_reg_0),
        .lud_addr_pipeline_full_reg_1(lud_addr_pipeline_full_reg_1),
        .lud_addr_pipeline_full_reg_2(lud_addr_pipeline_full_reg_2),
        .lud_addr_pipeline_full_reg_3(lud_addr_pipeline_full_reg_3),
        .lud_addr_pipeline_full_reg_4(lud_addr_pipeline_full_reg_4),
        .lud_reg_port_num(lud_reg_port_num),
        .\lud_reg_valid_one_hot_reg[1] (\lud_reg_valid_one_hot_reg[1] ),
        .new_read_data_last(new_read_data_last),
        .new_read_data_word(new_read_data_word),
        .p_95_in(p_95_in),
        .\rd_port_access[1][ID] (\rd_port_access[1][ID] ),
        .\read_data_status[0,0][Hit_Almost_Full] (\read_data_status[0,0][Hit_Almost_Full] ),
        .\read_data_status[0,1][Hit_Fit] (\read_data_status[0,1][Hit_Fit] ),
        .\read_info_status[0,1][Almost_Full] (\read_info_status[0,1][Almost_Full] ),
        .\read_info_status[0,1][Full] (\read_info_status[0,1][Full] ),
        .read_req_last(read_req_last),
        .read_req_ready(read_req_ready),
        .read_req_single(read_req_single),
        .read_req_valid(read_req_valid),
        .\rip_stp_reg[0]_0 (AR_Channel_n_59),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__14 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_w_channel W_Channel
       (.ACLK(ACLK),
        .A_3(A_3),
        .D(D),
        .DATA_INA(DATA_INA),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .Q(ARESET_I),
        .S0_AXI_GEN_WDATA(S0_AXI_GEN_WDATA),
        .S0_AXI_GEN_WREADY(S0_AXI_GEN_WREADY),
        .S0_AXI_GEN_WSTRB(S0_AXI_GEN_WSTRB),
        .S0_AXI_GEN_WVALID(S0_AXI_GEN_WVALID),
        .S_4(S_4),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_3 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .in({\wr_port_access[1][Len] ,in}),
        .queue_almost_full(queue_almost_full),
        .queue_done(queue_done),
        .update_wm_pop_normal_hold_reg(update_wm_pop_normal_hold_reg),
        .\update_wma_data_reg[31] (\update_wma_data_reg[31] ),
        .wc_fifo_empty(wc_fifo_empty),
        .wc_ready(wc_ready),
        .wip_fifo_full(wip_fifo_full),
        .\wip_len_reg[7]_0 (AW_Channel_n_50),
        .wm_port(wm_port),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3] ),
        .\wr_port_data_info_reg[0][Data][31]_0 (\wr_port_data_info_reg[0][Data][31] ),
        .\wr_port_data_info_reg[0][Last]_0 (\wr_port_data_info_reg[0][Last] ),
        .\wr_port_data_info_reg[0][Last]_1 (\wr_port_data_info_reg[0][Last]_0 ),
        .wr_port_data_ready(wr_port_data_ready),
        .write_fail_completed(write_fail_completed),
        .write_req_failed(write_req_failed));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_length_generation" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_length_generation
   (\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ,
    Carry_IN,
    req_last,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_1 ,
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    S,
    access_is_wrap,
    Q,
    first_part,
    \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ,
    O,
    ACLK,
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ,
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ,
    aligned_addr,
    access_is_incr,
    \Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ,
    p_0_in,
    allowed_max_wrap_len,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ,
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 ,
    \wr_port_access[1][Kind] ,
    port_ready_1,
    S0_AXI_AWLEN,
    write_req_last,
    long_split_len_carry__0_0);
  output \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ;
  output Carry_IN;
  output req_last;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_1 ;
  output \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input S;
  input access_is_wrap;
  input [7:0]Q;
  input first_part;
  input \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ;
  input O;
  input ACLK;
  input [2:0]\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ;
  input [9:0]\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ;
  input [6:0]aligned_addr;
  input access_is_incr;
  input \Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ;
  input [1:0]p_0_in;
  input [1:0]allowed_max_wrap_len;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input [1:0]\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ;
  input [0:0]\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 ;
  input \wr_port_access[1][Kind] ;
  input port_ready_1;
  input [1:0]S0_AXI_AWLEN;
  input write_req_last;
  input [5:0]long_split_len_carry__0_0;

  wire ACLK;
  wire CI;
  wire Carry_IN;
  wire Carry_IN_0;
  wire D;
  wire I1;
  wire I2;
  wire I3;
  wire O;
  wire [7:0]Q;
  wire S;
  wire [1:0]S0_AXI_AWLEN;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \Use_FPGA.Aligned_Inst_n_0 ;
  wire \Use_FPGA.Cross_Det[11].LUT_Inst_i_1_n_7 ;
  wire \Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_10_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_1 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_2 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_3 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_5 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_1 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_2 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_3 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_3_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_4_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_5_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_6_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_7_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_8_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_9_n_0 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_0 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_1 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_2 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_3 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_4 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_5 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_6 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_7 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_2_n_0 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_3_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ;
  wire [2:0]\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ;
  wire [1:0]\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ;
  wire [0:0]\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ;
  wire [9:0]\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_n_1 ;
  wire access_is_incr;
  wire access_is_wrap;
  wire [7:0]adjusted_addr;
  wire [6:0]aligned_addr;
  wire [1:0]allowed_max_wrap_len;
  wire cross_carry_1;
  wire cross_carry_2;
  wire cross_carry_3;
  wire cross_carry_4;
  wire cross_carry_5;
  wire cross_s_0;
  wire cross_s_1;
  wire cross_s_2;
  wire cross_s_3;
  wire cross_s_4;
  wire cross_s_5;
  wire feedback_or_other_len_0;
  wire feedback_or_other_len_1;
  wire feedback_or_other_len_2;
  wire feedback_or_other_len_3;
  wire feedback_or_other_len_4;
  wire feedback_or_other_len_5;
  wire feedback_or_other_len_6;
  wire feedback_or_other_len_7;
  wire first_part;
  wire fit_lx_carry_1;
  wire fit_lx_carry_2;
  wire fit_lx_carry_3;
  wire fit_lx_carry_4;
  wire fit_lx_carry_5;
  wire fit_lx_carry_6;
  wire fit_lx_carry_7;
  wire fit_lx_carry_8;
  wire fit_lx_carry_9;
  wire fit_lx_di_0;
  wire fit_lx_di_1;
  wire fit_lx_di_2;
  wire fit_lx_di_3;
  wire fit_lx_di_4;
  wire fit_lx_di_5;
  wire fit_lx_di_6;
  wire fit_lx_di_7;
  wire fit_lx_di_8;
  wire fit_lx_di_9;
  wire fit_lx_line_n_i;
  wire fit_lx_s_0;
  wire fit_lx_s_1;
  wire fit_lx_s_2;
  wire fit_lx_s_3;
  wire fit_lx_s_4;
  wire fit_lx_s_5;
  wire fit_lx_s_6;
  wire fit_lx_s_7;
  wire fit_lx_s_8;
  wire fit_lx_s_9;
  wire fit_sys_carry_1;
  wire fit_sys_carry_10;
  wire fit_sys_carry_2;
  wire fit_sys_carry_3;
  wire fit_sys_carry_4;
  wire fit_sys_carry_5;
  wire fit_sys_carry_6;
  wire fit_sys_carry_7;
  wire fit_sys_carry_8;
  wire fit_sys_carry_9;
  wire fit_sys_di_0;
  wire fit_sys_di_1;
  wire fit_sys_di_2;
  wire fit_sys_di_3;
  wire fit_sys_di_4;
  wire fit_sys_di_5;
  wire fit_sys_di_6;
  wire fit_sys_di_7;
  wire fit_sys_di_8;
  wire fit_sys_di_9;
  wire fit_sys_s_0;
  wire fit_sys_s_1;
  wire fit_sys_s_2;
  wire fit_sys_s_3;
  wire fit_sys_s_4;
  wire fit_sys_s_5;
  wire fit_sys_s_6;
  wire fit_sys_s_7;
  wire fit_sys_s_8;
  wire fit_sys_s_9;
  wire [5:0]long_split_len_carry__0_0;
  wire long_split_len_carry__0_i_1_n_0;
  wire long_split_len_carry__0_i_2_n_0;
  wire long_split_len_carry__0_n_2;
  wire long_split_len_carry__0_n_3;
  wire long_split_len_carry__0_n_5;
  wire long_split_len_carry__0_n_6;
  wire long_split_len_carry__0_n_7;
  wire long_split_len_carry_i_1_n_0;
  wire long_split_len_carry_i_2_n_0;
  wire long_split_len_carry_i_3_n_0;
  wire long_split_len_carry_i_4_n_0;
  wire long_split_len_carry_n_0;
  wire long_split_len_carry_n_1;
  wire long_split_len_carry_n_2;
  wire long_split_len_carry_n_3;
  wire long_split_len_carry_n_4;
  wire long_split_len_carry_n_5;
  wire long_split_len_carry_n_6;
  wire lopt_10;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire more_beats_carry_1;
  wire more_beats_carry_2;
  wire more_beats_carry_3;
  wire more_beats_carry_4;
  wire more_beats_carry_5;
  wire more_beats_carry_6;
  wire more_beats_carry_7;
  wire more_beats_di_0;
  wire more_beats_di_1;
  wire more_beats_di_2;
  wire more_beats_di_3;
  wire more_beats_di_4;
  wire more_beats_di_5;
  wire more_beats_di_6;
  wire more_beats_di_7;
  wire more_beats_s_0;
  wire more_beats_s_1;
  wire more_beats_s_2;
  wire more_beats_s_3;
  wire more_beats_s_4;
  wire more_beats_s_5;
  wire more_beats_s_6;
  wire more_beats_s_7;
  wire [1:0]p_0_in;
  wire port_access_kind;
  wire port_access_len_cmb_0;
  wire port_access_len_cmb_1;
  wire port_access_len_cmb_2;
  wire port_access_len_cmb_3;
  wire port_access_len_cmb_4;
  wire port_access_len_cmb_5;
  wire port_access_len_cmb_6;
  wire port_access_len_cmb_7;
  wire port_ready_1;
  wire pre_length_1;
  wire pre_length_2;
  wire pre_length_3;
  wire pre_length_4;
  wire pre_length_5;
  wire pre_length_6;
  wire pre_length_7;
  wire remaining_carry_1;
  wire remaining_carry_2;
  wire remaining_carry_3;
  wire remaining_carry_4;
  wire remaining_carry_5;
  wire remaining_carry_6;
  wire remaining_carry_7;
  wire remaining_di_0;
  wire remaining_di_1;
  wire remaining_di_2;
  wire remaining_di_3;
  wire remaining_di_4;
  wire remaining_di_5;
  wire remaining_di_6;
  wire remaining_di_7;
  wire remaining_s_0;
  wire remaining_s_1;
  wire remaining_s_2;
  wire remaining_s_3;
  wire remaining_s_4;
  wire remaining_s_5;
  wire remaining_s_6;
  wire remaining_s_7;
  wire req_last;
  wire short_split_carry_1;
  wire short_split_carry_2;
  wire short_split_carry_3;
  wire short_split_carry_4;
  wire short_split_carry_5;
  wire short_split_carry_6;
  wire short_split_carry_7;
  wire short_split_di_0;
  wire short_split_di_1;
  wire short_split_di_2;
  wire short_split_di_3;
  wire short_split_di_4;
  wire short_split_di_5;
  wire short_split_di_6;
  wire short_split_di_7;
  wire short_split_len_0;
  wire short_split_len_1;
  wire short_split_len_2;
  wire short_split_len_3;
  wire short_split_len_4;
  wire short_split_len_5;
  wire short_split_len_6;
  wire short_split_len_7;
  wire short_split_s_0;
  wire short_split_s_1;
  wire short_split_s_2;
  wire short_split_s_3;
  wire short_split_s_4;
  wire short_split_s_5;
  wire short_split_s_6;
  wire short_split_s_7;
  wire use_full_length;
  wire \wr_port_access[1][Kind] ;
  wire wrap_fit_lx_line_n;
  wire [7:0]wrap_split_mask;
  wire write_req_last;
  wire \NLW_Use_FPGA.Cross_Det[10].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[11].LUT_Inst_O5_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[6].LUT_Inst_O5_UNCONNECTED ;
  wire [1:0]\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_2_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[7].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[8].LUT_Inst_O5_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cross_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[9].LUT_Inst_O5_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Lx_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Lx_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Sys_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Sys_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Sys_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.More_Beat_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.More_Beat_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[0].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[1].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[2].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[3].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[4].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[5].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[6].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[7].LUT_Inst1_O5_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_O5_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_S_UNCONNECTED ;
  wire [3:2]NLW_long_split_len_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_long_split_len_carry__0_O_UNCONNECTED;

  Fast_IP_Clock_system_cache_0_0_carry_compare_mask_const \Use_FPGA.Aligned_Inst 
       (.DI({\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 }),
        .\S_AXI_AADDR_q_reg[3] (\Use_FPGA.Aligned_Inst_n_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Carry_IN),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\Using_FPGA.MUXCY_I (\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5:0]),
        .\Using_FPGA.MUXCY_I_0 (\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 ),
        .\Using_FPGA.MUXCY_I_1 ({\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 }),
        .access_is_wrap(access_is_wrap),
        .first_part(first_part),
        .p_0_in(p_0_in[0]),
        .port_access_kind(port_access_kind),
        .req_last(req_last),
        .use_full_length(use_full_length),
        .write_req_last(write_req_last));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[10].LUT_Inst 
       (.I0(aligned_addr[6]),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_5 ),
        .I2(\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_4 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[10].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_4));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[11].LUT_Inst 
       (.I0(\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_4 ),
        .I2(p_0_in[1]),
        .I3(\Use_FPGA.Cross_Det[11].LUT_Inst_i_1_n_7 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_5));
  CARRY4 \Use_FPGA.Cross_Det[11].LUT_Inst_i_1 
       (.CI(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_0 ),
        .CO(\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1_O_UNCONNECTED [3:1],\Use_FPGA.Cross_Det[11].LUT_Inst_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,p_0_in[1]}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst 
       (.I0(aligned_addr[2]),
        .I1(\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_5 ),
        .I2(aligned_addr[3]),
        .I3(I3),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_0));
  CARRY4 \Use_FPGA.Cross_Det[6].LUT_Inst_i_1 
       (.CI(\Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_0 ),
        .CO({\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_1 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_2 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({aligned_addr[3:2],\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 }),
        .O({I3,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_5 ,\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_1_O_UNCONNECTED [1:0]}),
        .S({\Use_FPGA.Cross_Det[6].LUT_Inst_i_3_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_4_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_5_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_6_n_0 }));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_10 
       (.I0(aligned_addr[0]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_10_n_0 ));
  CARRY4 \Use_FPGA.Cross_Det[6].LUT_Inst_i_2 
       (.CI(1'b0),
        .CO({\Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_1 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_2 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ,aligned_addr[1:0]}),
        .O(\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_2_O_UNCONNECTED [3:0]),
        .S({\Use_FPGA.Cross_Det[6].LUT_Inst_i_7_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_8_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_9_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_10_n_0 }));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_3 
       (.I0(aligned_addr[3]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_4 
       (.I0(aligned_addr[2]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_5 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_6 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_7 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_8 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_9 
       (.I0(aligned_addr[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_9_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[7].LUT_Inst 
       (.I0(aligned_addr[3]),
        .I1(I3),
        .I2(aligned_addr[4]),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_7 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[7].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_1));
  CARRY4 \Use_FPGA.Cross_Det[7].LUT_Inst_i_1 
       (.CI(\Use_FPGA.Cross_Det[6].LUT_Inst_i_1_n_0 ),
        .CO({\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_0 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_1 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_2 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ,aligned_addr[6:4]}),
        .O({\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_4 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_5 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_6 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_7 }),
        .S({\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ,aligned_addr[6],\Use_FPGA.Cross_Det[7].LUT_Inst_i_2_n_0 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_3_n_0 }));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[7].LUT_Inst_i_2 
       (.I0(aligned_addr[5]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .O(\Use_FPGA.Cross_Det[7].LUT_Inst_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[7].LUT_Inst_i_3 
       (.I0(aligned_addr[4]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .O(\Use_FPGA.Cross_Det[7].LUT_Inst_i_3_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[8].LUT_Inst 
       (.I0(aligned_addr[4]),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_7 ),
        .I2(aligned_addr[5]),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_6 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[8].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_2));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cross_Det[8].MUXCY_Inst_CARRY4 
       (.CI(cross_carry_2),
        .CO({Carry_IN,cross_carry_5,cross_carry_4,cross_carry_3}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(\NLW_Use_FPGA.Cross_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({cross_s_5,cross_s_4,cross_s_3,cross_s_2}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[9].LUT_Inst 
       (.I0(aligned_addr[5]),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_6 ),
        .I2(aligned_addr[6]),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1_n_5 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[9].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[0].LUT_Inst 
       (.I0(allowed_max_wrap_len[0]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_0),
        .O6(fit_lx_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Lx_Det[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({fit_lx_carry_4,fit_lx_carry_3,fit_lx_carry_2,fit_lx_carry_1}),
        .CYINIT(1'b0),
        .DI({fit_lx_di_3,fit_lx_di_2,fit_lx_di_1,fit_lx_di_0}),
        .O(\NLW_Use_FPGA.Fit_Lx_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_lx_s_3,fit_lx_s_2,fit_lx_s_1,fit_lx_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[1].LUT_Inst 
       (.I0(allowed_max_wrap_len[0]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_1),
        .O6(fit_lx_s_1));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[2].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_2),
        .O6(fit_lx_s_2));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[3].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_3),
        .O6(fit_lx_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[4].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_4),
        .O6(fit_lx_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Lx_Det[4].MUXCY_Inst_CARRY4 
       (.CI(fit_lx_carry_4),
        .CO({fit_lx_carry_8,fit_lx_carry_7,fit_lx_carry_6,fit_lx_carry_5}),
        .CYINIT(1'b0),
        .DI({fit_lx_di_7,fit_lx_di_6,fit_lx_di_5,fit_lx_di_4}),
        .O(\NLW_Use_FPGA.Fit_Lx_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_lx_s_7,fit_lx_s_6,fit_lx_s_5,fit_lx_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[5].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_5),
        .O6(fit_lx_s_5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[6].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_6),
        .O6(fit_lx_s_6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[7].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_7),
        .O6(fit_lx_s_7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[8].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_8),
        .O6(fit_lx_s_8));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4 
       (.CI(fit_lx_carry_8),
        .CO({wrap_fit_lx_line_n,lopt_7,Carry_IN_0,fit_lx_carry_9}),
        .CYINIT(1'b0),
        .DI({1'b0,lopt_8,fit_lx_di_9,fit_lx_di_8}),
        .O({\NLW_Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [3],lopt_10,\NLW_Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [1:0]}),
        .S({access_is_wrap,lopt_9,fit_lx_s_9,fit_lx_s_8}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[9].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_9),
        .O6(fit_lx_s_9));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized3 \Use_FPGA.Fit_Lx_Latch_And_Inst1 
       (.Carry_IN_0(Carry_IN_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .access_is_wrap(access_is_wrap),
        .fit_lx_line_n_i(fit_lx_line_n_i),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .lopt_3(lopt_10),
        .port_access_kind(port_access_kind),
        .\wr_port_access[1][Kind] (\wr_port_access[1][Kind] ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[0].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_0),
        .O6(fit_sys_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Sys_Det[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({fit_sys_carry_4,fit_sys_carry_3,fit_sys_carry_2,fit_sys_carry_1}),
        .CYINIT(1'b0),
        .DI({fit_sys_di_3,fit_sys_di_2,fit_sys_di_1,fit_sys_di_0}),
        .O(\NLW_Use_FPGA.Fit_Sys_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_sys_s_3,fit_sys_s_2,fit_sys_s_1,fit_sys_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[1].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_1),
        .O6(fit_sys_s_1));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[2].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_2),
        .O6(fit_sys_s_2));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[3].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_3),
        .O6(fit_sys_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[4].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_4),
        .O6(fit_sys_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Sys_Det[4].MUXCY_Inst_CARRY4 
       (.CI(fit_sys_carry_4),
        .CO({fit_sys_carry_8,fit_sys_carry_7,fit_sys_carry_6,fit_sys_carry_5}),
        .CYINIT(1'b0),
        .DI({fit_sys_di_7,fit_sys_di_6,fit_sys_di_5,fit_sys_di_4}),
        .O(\NLW_Use_FPGA.Fit_Sys_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_sys_s_7,fit_sys_s_6,fit_sys_s_5,fit_sys_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[5].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_5),
        .O6(fit_sys_s_5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[6].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_6),
        .O6(fit_sys_s_6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[7].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_7),
        .O6(fit_sys_s_7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[8].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_8),
        .O6(fit_sys_s_8));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Sys_Det[8].MUXCY_Inst_CARRY4 
       (.CI(fit_sys_carry_8),
        .CO({cross_carry_2,cross_carry_1,fit_sys_carry_10,fit_sys_carry_9}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,fit_sys_di_9,fit_sys_di_8}),
        .O(\NLW_Use_FPGA.Fit_Sys_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({cross_s_1,cross_s_0,fit_sys_s_9,fit_sys_s_8}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[9].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_9),
        .O6(fit_sys_s_9));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[0].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_0),
        .O6(more_beats_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.More_Beat_Det[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({more_beats_carry_4,more_beats_carry_3,more_beats_carry_2,more_beats_carry_1}),
        .CYINIT(1'b0),
        .DI({more_beats_di_3,more_beats_di_2,more_beats_di_1,more_beats_di_0}),
        .O(\NLW_Use_FPGA.More_Beat_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({more_beats_s_3,more_beats_s_2,more_beats_s_1,more_beats_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[1].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_1),
        .O6(more_beats_s_1));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[2].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_2),
        .O6(more_beats_s_2));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[3].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_3),
        .O6(more_beats_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[4].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [1]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_4),
        .O6(more_beats_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.More_Beat_Det[4].MUXCY_Inst_CARRY4 
       (.CI(more_beats_carry_4),
        .CO({CI,more_beats_carry_7,more_beats_carry_6,more_beats_carry_5}),
        .CYINIT(1'b0),
        .DI({more_beats_di_7,more_beats_di_6,more_beats_di_5,more_beats_di_4}),
        .O(\NLW_Use_FPGA.More_Beat_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({more_beats_s_7,more_beats_s_6,more_beats_s_5,more_beats_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[5].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [2]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_5),
        .O6(more_beats_s_5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[6].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_6),
        .O6(more_beats_s_6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[7].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_7),
        .O6(more_beats_s_7));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_0),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[0].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[0].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_0));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1 
       (.I0(feedback_or_other_len_0),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_0),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_1),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[1].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[1].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_1));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1 
       (.I0(feedback_or_other_len_1),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_1),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_2),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[2].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[2].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_2));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1 
       (.I0(feedback_or_other_len_2),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_2),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_3),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[3].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[3].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_3));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1 
       (.I0(feedback_or_other_len_3),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_3),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_4),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[4].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[4].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_4));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1 
       (.I0(feedback_or_other_len_4),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_4),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [1]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_5),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[5].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[5].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_5));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1 
       (.I0(feedback_or_other_len_5),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_5),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1__0 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [2]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_6),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[6].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[6].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_6));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1 
       (.I0(feedback_or_other_len_6),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_6),
        .S(use_full_length));
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_7),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[7].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[7].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_7));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1 
       (.I0(feedback_or_other_len_7),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_7),
        .S(use_full_length));
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(D),
        .Q(I1),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[0].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ),
        .I1(I1),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(D));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[0].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I1(I1),
        .I2(Q[0]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_0),
        .O6(remaining_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Remaining_Bit_Gen[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({remaining_carry_4,remaining_carry_3,remaining_carry_2,remaining_carry_1}),
        .CYINIT(1'b0),
        .DI({remaining_di_3,remaining_di_2,remaining_di_1,remaining_di_0}),
        .O({\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 }),
        .S({remaining_s_3,remaining_s_2,remaining_s_1,remaining_s_0}));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_1),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ),
        .I1(pre_length_1),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[1].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I1(pre_length_1),
        .I2(Q[1]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_1),
        .O6(remaining_s_1));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_2),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ),
        .I1(pre_length_2),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[2].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I1(pre_length_2),
        .I2(Q[2]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_2),
        .O6(remaining_s_2));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_3),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ),
        .I1(pre_length_3),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[3].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I1(pre_length_3),
        .I2(Q[3]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_3),
        .O6(remaining_s_3));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_4),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ),
        .I1(pre_length_4),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[4].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I1(pre_length_4),
        .I2(Q[4]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_4),
        .O6(remaining_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4 
       (.CI(remaining_carry_4),
        .CO({\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],remaining_carry_7,remaining_carry_6,remaining_carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],remaining_di_6,remaining_di_5,remaining_di_4}),
        .O({\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 }),
        .S({remaining_s_7,remaining_s_6,remaining_s_5,remaining_s_4}));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_5),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ),
        .I1(pre_length_5),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[5].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I1(pre_length_5),
        .I2(Q[5]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_5),
        .O6(remaining_s_5));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_6),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ),
        .I1(pre_length_6),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[6].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(pre_length_6),
        .I2(Q[6]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_6),
        .O6(remaining_s_6));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1_n_0 ),
        .Q(pre_length_7),
        .S(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ),
        .I1(pre_length_7),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[7].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(pre_length_7),
        .I2(Q[7]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_7),
        .O6(remaining_s_7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst 
       (.I0(adjusted_addr[0]),
        .I1(wrap_split_mask[0]),
        .I2(Q[0]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_0),
        .O6(short_split_s_0));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_i_1__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .I1(p_0_in[0]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 ),
        .O(adjusted_addr[0]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .O(wrap_split_mask[0]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Short_Split_Bit_Gen[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({short_split_carry_4,short_split_carry_3,short_split_carry_2,short_split_carry_1}),
        .CYINIT(1'b1),
        .DI({short_split_di_3,short_split_di_2,short_split_di_1,short_split_di_0}),
        .O({short_split_len_3,short_split_len_2,short_split_len_1,short_split_len_0}),
        .S({short_split_s_3,short_split_s_2,short_split_s_1,short_split_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst 
       (.I0(adjusted_addr[1]),
        .I1(wrap_split_mask[1]),
        .I2(Q[1]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_1),
        .O6(short_split_s_1));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_i_1__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_2 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .O(adjusted_addr[1]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .O(wrap_split_mask[1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst 
       (.I0(adjusted_addr[2]),
        .I1(wrap_split_mask[2]),
        .I2(Q[2]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_2),
        .O6(short_split_s_2));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_i_1__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .O(adjusted_addr[2]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .O(wrap_split_mask[2]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst 
       (.I0(adjusted_addr[3]),
        .I1(wrap_split_mask[3]),
        .I2(Q[3]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_3),
        .O6(short_split_s_3));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_i_1__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .O(adjusted_addr[3]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .O(wrap_split_mask[3]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[4].LUT_Inst 
       (.I0(adjusted_addr[4]),
        .I1(wrap_split_mask[4]),
        .I2(Q[4]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_4),
        .O6(short_split_s_4));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[4].LUT_Inst_i_1__0 
       (.I0(aligned_addr[2]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .O(adjusted_addr[4]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[4].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .O(wrap_split_mask[4]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4 
       (.CI(short_split_carry_4),
        .CO({\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],short_split_carry_7,short_split_carry_6,short_split_carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],short_split_di_6,short_split_di_5,short_split_di_4}),
        .O({short_split_len_7,short_split_len_6,short_split_len_5,short_split_len_4}),
        .S({short_split_s_7,short_split_s_6,short_split_s_5,short_split_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[5].LUT_Inst 
       (.I0(adjusted_addr[5]),
        .I1(wrap_split_mask[5]),
        .I2(Q[5]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_5),
        .O6(short_split_s_5));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[5].LUT_Inst_i_1__0 
       (.I0(aligned_addr[3]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(aligned_addr[2]),
        .O(adjusted_addr[5]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[5].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .O(wrap_split_mask[5]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[6].LUT_Inst 
       (.I0(adjusted_addr[6]),
        .I1(wrap_split_mask[6]),
        .I2(Q[6]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_6),
        .O6(short_split_s_6));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[6].LUT_Inst_i_1__0 
       (.I0(aligned_addr[4]),
        .I1(aligned_addr[2]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(aligned_addr[3]),
        .O(adjusted_addr[6]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[6].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .O(wrap_split_mask[6]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst 
       (.I0(adjusted_addr[7]),
        .I1(wrap_split_mask[7]),
        .I2(Q[7]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_7),
        .O6(short_split_s_7));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_i_1__0 
       (.I0(aligned_addr[5]),
        .I1(aligned_addr[3]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(aligned_addr[4]),
        .O(adjusted_addr[7]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_i_2__0 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .O(wrap_split_mask[7]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst 
       (.I0(Q[0]),
        .I1(short_split_len_0),
        .I2(I2),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst 
       (.I0(Q[1]),
        .I1(short_split_len_1),
        .I2(long_split_len_carry_n_6),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst 
       (.I0(Q[2]),
        .I1(short_split_len_2),
        .I2(long_split_len_carry_n_5),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst 
       (.I0(Q[3]),
        .I1(short_split_len_3),
        .I2(long_split_len_carry_n_4),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst 
       (.I0(Q[4]),
        .I1(short_split_len_4),
        .I2(long_split_len_carry__0_n_7),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst 
       (.I0(Q[5]),
        .I1(short_split_len_5),
        .I2(long_split_len_carry__0_n_6),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst 
       (.I0(Q[6]),
        .I1(short_split_len_6),
        .I2(long_split_len_carry__0_n_5),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst 
       (.I0(Q[7]),
        .I1(short_split_len_7),
        .I2(long_split_len_carry__0_n_5),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_n_1 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Use_Full_Inst_CARRY4 
       (.CI(CI),
        .CO({\NLW_Use_FPGA.Use_Full_Inst_CARRY4_CO_UNCONNECTED [3:1],use_full_length}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Use_Full_Inst_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Use_FPGA.Use_Full_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Use_FPGA.Use_Full_Inst_CARRY4_S_UNCONNECTED [3:1],S}));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_access_i[Len][6]_i_2 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[0]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \arb_access_i[Len][7]_i_2 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[1]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_1 ));
  CARRY4 long_split_len_carry
       (.CI(1'b0),
        .CO({long_split_len_carry_n_0,long_split_len_carry_n_1,long_split_len_carry_n_2,long_split_len_carry_n_3}),
        .CYINIT(1'b1),
        .DI({\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0],\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0],\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0],\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]}),
        .O({long_split_len_carry_n_4,long_split_len_carry_n_5,long_split_len_carry_n_6,I2}),
        .S({long_split_len_carry_i_1_n_0,long_split_len_carry_i_2_n_0,long_split_len_carry_i_3_n_0,long_split_len_carry_i_4_n_0}));
  CARRY4 long_split_len_carry__0
       (.CI(long_split_len_carry_n_0),
        .CO({NLW_long_split_len_carry__0_CO_UNCONNECTED[3:2],long_split_len_carry__0_n_2,long_split_len_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [2:1]}),
        .O({NLW_long_split_len_carry__0_O_UNCONNECTED[3],long_split_len_carry__0_n_5,long_split_len_carry__0_n_6,long_split_len_carry__0_n_7}),
        .S({1'b0,1'b1,long_split_len_carry__0_i_1_n_0,long_split_len_carry__0_i_2_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry__0_i_1
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [2]),
        .I1(long_split_len_carry__0_0[5]),
        .O(long_split_len_carry__0_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry__0_i_2
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [1]),
        .I1(long_split_len_carry__0_0[4]),
        .O(long_split_len_carry__0_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_1
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(long_split_len_carry__0_0[3]),
        .O(long_split_len_carry_i_1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_2
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(long_split_len_carry__0_0[2]),
        .O(long_split_len_carry_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_3
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(long_split_len_carry__0_0[1]),
        .O(long_split_len_carry_i_3_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_4
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 [0]),
        .I1(long_split_len_carry__0_0[0]),
        .O(long_split_len_carry_i_4_n_0));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_length_generation" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_length_generation_64
   (\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ,
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ,
    req_last,
    \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_1 ,
    \rd_port_access[1][Len] ,
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ,
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_1 ,
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_1 ,
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \S_AXI_AADDR_q_reg[3] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    S,
    access_is_wrap,
    Q,
    first_part,
    \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ,
    O,
    ACLK,
    full_line_beats,
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ,
    aligned_addr,
    access_is_incr,
    \Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ,
    p_0_in,
    allowed_max_wrap_len,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ,
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \rd_port_access[1][Kind] ,
    \arb_access_i_reg[Len][7] ,
    \arb_access_i_reg[Len][1] ,
    port_ready_1,
    S0_AXI_ARLEN,
    \arb_access_i_reg[Len][7]_0 ,
    \arb_access_i[Len][0]_i_2_0 ,
    \port_access_q[Size] ,
    \arb_access_i[Len][0]_i_2_1 ,
    incr_need_extra_q,
    read_req_last,
    long_split_len_carry__0_0);
  output \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ;
  output \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ;
  output req_last;
  output \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_1 ;
  output [1:0]\rd_port_access[1][Len] ;
  output \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ;
  output \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_1 ;
  output \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_1 ;
  output \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [1:0]\S_AXI_AADDR_q_reg[3] ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input S;
  input access_is_wrap;
  input [7:0]Q;
  input first_part;
  input \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ;
  input O;
  input ACLK;
  input [2:0]full_line_beats;
  input [9:0]\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ;
  input [6:0]aligned_addr;
  input access_is_incr;
  input \Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ;
  input [1:0]p_0_in;
  input [1:0]allowed_max_wrap_len;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ;
  input \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ;
  input [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input \rd_port_access[1][Kind] ;
  input [0:0]\arb_access_i_reg[Len][7] ;
  input \arb_access_i_reg[Len][1] ;
  input port_ready_1;
  input [5:0]S0_AXI_ARLEN;
  input \arb_access_i_reg[Len][7]_0 ;
  input \arb_access_i[Len][0]_i_2_0 ;
  input [0:0]\port_access_q[Size] ;
  input \arb_access_i[Len][0]_i_2_1 ;
  input incr_need_extra_q;
  input read_req_last;
  input [5:0]long_split_len_carry__0_0;

  wire ACLK;
  wire CI;
  wire Carry_IN;
  wire Carry_IN_0;
  wire D;
  wire I1;
  wire I2;
  wire I3;
  wire O;
  wire [7:0]Q;
  wire S;
  wire [5:0]S0_AXI_ARLEN;
  wire [1:0]\S_AXI_AADDR_q_reg[3] ;
  wire \The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [0:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_FPGA.Aligned_Inst_n_0 ;
  wire \Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_n_7 ;
  wire \Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_10_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_1 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_2 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_3 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_5 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_1 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_2 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_3 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_3_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_4_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_5_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_6_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_7_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_8_n_0 ;
  wire \Use_FPGA.Cross_Det[6].LUT_Inst_i_9_n_0 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_1 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_2 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_3 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_4 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_5 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_6 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_7 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_2_n_0 ;
  wire \Use_FPGA.Cross_Det[7].LUT_Inst_i_3_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ;
  wire \Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ;
  wire [1:0]\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ;
  wire \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ;
  wire [9:0]\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_n_1 ;
  wire \Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_n_1 ;
  wire access_is_incr;
  wire access_is_wrap;
  wire [7:0]adjusted_addr;
  wire [6:0]aligned_addr;
  wire [1:0]allowed_max_wrap_len;
  wire \arb_access_i[Len][0]_i_2_0 ;
  wire \arb_access_i[Len][0]_i_2_1 ;
  wire \arb_access_i[Len][1]_i_3_n_0 ;
  wire \arb_access_i[Len][2]_i_3_n_0 ;
  wire \arb_access_i[Len][3]_i_3_n_0 ;
  wire \arb_access_i[Len][4]_i_3_n_0 ;
  wire \arb_access_i[Len][7]_i_5_n_0 ;
  wire \arb_access_i_reg[Len][1] ;
  wire [0:0]\arb_access_i_reg[Len][7] ;
  wire \arb_access_i_reg[Len][7]_0 ;
  wire cross_carry_1;
  wire cross_carry_2;
  wire cross_carry_3;
  wire cross_carry_4;
  wire cross_carry_5;
  wire cross_s_0;
  wire cross_s_1;
  wire cross_s_2;
  wire cross_s_3;
  wire cross_s_4;
  wire cross_s_5;
  wire feedback_or_other_len_0;
  wire feedback_or_other_len_1;
  wire feedback_or_other_len_2;
  wire feedback_or_other_len_3;
  wire feedback_or_other_len_4;
  wire feedback_or_other_len_5;
  wire feedback_or_other_len_6;
  wire feedback_or_other_len_7;
  wire first_part;
  wire fit_lx_carry_1;
  wire fit_lx_carry_2;
  wire fit_lx_carry_3;
  wire fit_lx_carry_4;
  wire fit_lx_carry_5;
  wire fit_lx_carry_6;
  wire fit_lx_carry_7;
  wire fit_lx_carry_8;
  wire fit_lx_carry_9;
  wire fit_lx_di_0;
  wire fit_lx_di_1;
  wire fit_lx_di_2;
  wire fit_lx_di_3;
  wire fit_lx_di_4;
  wire fit_lx_di_5;
  wire fit_lx_di_6;
  wire fit_lx_di_7;
  wire fit_lx_di_8;
  wire fit_lx_di_9;
  wire fit_lx_line_n_i;
  wire fit_lx_s_0;
  wire fit_lx_s_1;
  wire fit_lx_s_2;
  wire fit_lx_s_3;
  wire fit_lx_s_4;
  wire fit_lx_s_5;
  wire fit_lx_s_6;
  wire fit_lx_s_7;
  wire fit_lx_s_8;
  wire fit_lx_s_9;
  wire fit_sys_carry_1;
  wire fit_sys_carry_10;
  wire fit_sys_carry_2;
  wire fit_sys_carry_3;
  wire fit_sys_carry_4;
  wire fit_sys_carry_5;
  wire fit_sys_carry_6;
  wire fit_sys_carry_7;
  wire fit_sys_carry_8;
  wire fit_sys_carry_9;
  wire fit_sys_di_0;
  wire fit_sys_di_1;
  wire fit_sys_di_2;
  wire fit_sys_di_3;
  wire fit_sys_di_4;
  wire fit_sys_di_5;
  wire fit_sys_di_6;
  wire fit_sys_di_7;
  wire fit_sys_di_8;
  wire fit_sys_di_9;
  wire fit_sys_s_0;
  wire fit_sys_s_1;
  wire fit_sys_s_2;
  wire fit_sys_s_3;
  wire fit_sys_s_4;
  wire fit_sys_s_5;
  wire fit_sys_s_6;
  wire fit_sys_s_7;
  wire fit_sys_s_8;
  wire fit_sys_s_9;
  wire [2:0]full_line_beats;
  wire incr_need_extra_q;
  wire [5:0]long_split_len_carry__0_0;
  wire long_split_len_carry__0_i_1__0_n_0;
  wire long_split_len_carry__0_i_2__0_n_0;
  wire long_split_len_carry__0_n_2;
  wire long_split_len_carry__0_n_3;
  wire long_split_len_carry__0_n_5;
  wire long_split_len_carry__0_n_6;
  wire long_split_len_carry__0_n_7;
  wire long_split_len_carry_i_1__0_n_0;
  wire long_split_len_carry_i_2__0_n_0;
  wire long_split_len_carry_i_3__0_n_0;
  wire long_split_len_carry_i_4__0_n_0;
  wire long_split_len_carry_n_0;
  wire long_split_len_carry_n_1;
  wire long_split_len_carry_n_2;
  wire long_split_len_carry_n_3;
  wire long_split_len_carry_n_4;
  wire long_split_len_carry_n_5;
  wire long_split_len_carry_n_6;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire more_beats_carry_1;
  wire more_beats_carry_2;
  wire more_beats_carry_3;
  wire more_beats_carry_4;
  wire more_beats_carry_5;
  wire more_beats_carry_6;
  wire more_beats_carry_7;
  wire more_beats_di_0;
  wire more_beats_di_1;
  wire more_beats_di_2;
  wire more_beats_di_3;
  wire more_beats_di_4;
  wire more_beats_di_5;
  wire more_beats_di_6;
  wire more_beats_di_7;
  wire more_beats_s_0;
  wire more_beats_s_1;
  wire more_beats_s_2;
  wire more_beats_s_3;
  wire more_beats_s_4;
  wire more_beats_s_5;
  wire more_beats_s_6;
  wire more_beats_s_7;
  wire [1:0]p_0_in;
  wire port_access_kind;
  wire port_access_len_cmb_0;
  wire port_access_len_cmb_1;
  wire port_access_len_cmb_2;
  wire port_access_len_cmb_3;
  wire port_access_len_cmb_4;
  wire port_access_len_cmb_5;
  wire port_access_len_cmb_6;
  wire port_access_len_cmb_7;
  wire [0:0]\port_access_q[Size] ;
  wire port_ready_1;
  wire pre_length_1;
  wire pre_length_2;
  wire pre_length_3;
  wire pre_length_4;
  wire pre_length_5;
  wire pre_length_6;
  wire pre_length_7;
  wire \rd_port_access[1][Kind] ;
  wire [1:0]\rd_port_access[1][Len] ;
  wire read_req_last;
  wire remaining_carry_1;
  wire remaining_carry_2;
  wire remaining_carry_3;
  wire remaining_carry_4;
  wire remaining_carry_5;
  wire remaining_carry_6;
  wire remaining_carry_7;
  wire remaining_di_0;
  wire remaining_di_1;
  wire remaining_di_2;
  wire remaining_di_3;
  wire remaining_di_4;
  wire remaining_di_5;
  wire remaining_di_6;
  wire remaining_di_7;
  wire remaining_s_0;
  wire remaining_s_1;
  wire remaining_s_2;
  wire remaining_s_3;
  wire remaining_s_4;
  wire remaining_s_5;
  wire remaining_s_6;
  wire remaining_s_7;
  wire req_last;
  wire [5:0]scaled_port_access_len__15;
  wire short_split_carry_1;
  wire short_split_carry_2;
  wire short_split_carry_3;
  wire short_split_carry_4;
  wire short_split_carry_5;
  wire short_split_carry_6;
  wire short_split_carry_7;
  wire short_split_di_0;
  wire short_split_di_1;
  wire short_split_di_2;
  wire short_split_di_3;
  wire short_split_di_4;
  wire short_split_di_5;
  wire short_split_di_6;
  wire short_split_di_7;
  wire short_split_len_0;
  wire short_split_len_1;
  wire short_split_len_2;
  wire short_split_len_3;
  wire short_split_len_4;
  wire short_split_len_5;
  wire short_split_len_6;
  wire short_split_len_7;
  wire short_split_s_0;
  wire short_split_s_1;
  wire short_split_s_2;
  wire short_split_s_3;
  wire short_split_s_4;
  wire short_split_s_5;
  wire short_split_s_6;
  wire short_split_s_7;
  wire use_full_length;
  wire wrap_fit_lx_line_n;
  wire [7:0]wrap_split_mask;
  wire \NLW_Use_FPGA.Cross_Det[10].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[11].LUT_Inst_O5_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[6].LUT_Inst_O5_UNCONNECTED ;
  wire [1:0]\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_O_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[7].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[8].LUT_Inst_O5_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cross_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Cross_Det[9].LUT_Inst_O5_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Lx_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Lx_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Sys_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Sys_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Fit_Sys_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.More_Beat_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.More_Beat_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[0].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[1].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[2].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[3].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[4].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[5].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[6].LUT_Inst1_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Port_Len_Bit_Gen[7].LUT_Inst1_O5_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_O5_UNCONNECTED ;
  wire \NLW_Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_O5_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Use_Full_Inst_CARRY4_S_UNCONNECTED ;
  wire [3:2]NLW_long_split_len_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_long_split_len_carry__0_O_UNCONNECTED;

  Fast_IP_Clock_system_cache_0_0_carry_compare_mask_const_76 \Use_FPGA.Aligned_Inst 
       (.Carry_IN(Carry_IN),
        .DI({\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 }),
        .\S_AXI_AADDR_q_reg[3] (\Use_FPGA.Aligned_Inst_n_0 ),
        .\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[0].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg (\The_Bit[1].Using_FPGA.Multiple_CE.D_I_reg ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\Using_FPGA.MUXCY_I (\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5:0]),
        .\Using_FPGA.MUXCY_I_0 ({\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 }),
        .access_is_wrap(access_is_wrap),
        .first_part(first_part),
        .full_line_beats(full_line_beats[2:1]),
        .p_0_in(p_0_in[0]),
        .port_access_kind(port_access_kind),
        .read_req_last(read_req_last),
        .req_last(req_last),
        .use_full_length(use_full_length));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[10].LUT_Inst 
       (.I0(aligned_addr[6]),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_5 ),
        .I2(\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_4 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[10].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_4));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[11].LUT_Inst 
       (.I0(\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_4 ),
        .I2(p_0_in[1]),
        .I3(\Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_n_7 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_5));
  CARRY4 \Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0 
       (.CI(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_0 ),
        .CO(\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_O_UNCONNECTED [3:1],\Use_FPGA.Cross_Det[11].LUT_Inst_i_1__0_n_7 }),
        .S({1'b0,1'b0,1'b0,p_0_in[1]}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst 
       (.I0(aligned_addr[2]),
        .I1(\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_5 ),
        .I2(aligned_addr[3]),
        .I3(I3),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_0));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_10 
       (.I0(aligned_addr[0]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_10_n_0 ));
  CARRY4 \Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0 
       (.CI(\Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_0 ),
        .CO({\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_1 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_2 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({aligned_addr[3:2],\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 }),
        .O({I3,\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_5 ,\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_O_UNCONNECTED [1:0]}),
        .S({\Use_FPGA.Cross_Det[6].LUT_Inst_i_3_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_4_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_5_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_6_n_0 }));
  CARRY4 \Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0 
       (.CI(1'b0),
        .CO({\Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_1 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_2 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_n_3 }),
        .CYINIT(1'b0),
        .DI({\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ,\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ,aligned_addr[1:0]}),
        .O({\NLW_Use_FPGA.Cross_Det[6].LUT_Inst_i_2__0_O_UNCONNECTED [3:2],\S_AXI_AADDR_q_reg[3] }),
        .S({\Use_FPGA.Cross_Det[6].LUT_Inst_i_7_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_8_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_9_n_0 ,\Use_FPGA.Cross_Det[6].LUT_Inst_i_10_n_0 }));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_3 
       (.I0(aligned_addr[3]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_4 
       (.I0(aligned_addr[2]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_5 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_6 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_7 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_7_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_8 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_8_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[6].LUT_Inst_i_9 
       (.I0(aligned_addr[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .O(\Use_FPGA.Cross_Det[6].LUT_Inst_i_9_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[7].LUT_Inst 
       (.I0(aligned_addr[3]),
        .I1(I3),
        .I2(aligned_addr[4]),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_7 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[7].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_1));
  CARRY4 \Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0 
       (.CI(\Use_FPGA.Cross_Det[6].LUT_Inst_i_1__0_n_0 ),
        .CO({\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_0 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_1 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_2 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ,aligned_addr[6:4]}),
        .O({\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_4 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_5 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_6 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_7 }),
        .S({\Use_FPGA.Cross_Det[11].MUXCY_Inst_0 ,aligned_addr[6],\Use_FPGA.Cross_Det[7].LUT_Inst_i_2_n_0 ,\Use_FPGA.Cross_Det[7].LUT_Inst_i_3_n_0 }));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[7].LUT_Inst_i_2 
       (.I0(aligned_addr[5]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .O(\Use_FPGA.Cross_Det[7].LUT_Inst_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_FPGA.Cross_Det[7].LUT_Inst_i_3 
       (.I0(aligned_addr[4]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .O(\Use_FPGA.Cross_Det[7].LUT_Inst_i_3_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[8].LUT_Inst 
       (.I0(aligned_addr[4]),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_7 ),
        .I2(aligned_addr[5]),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_6 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[8].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_2));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cross_Det[8].MUXCY_Inst_CARRY4 
       (.CI(cross_carry_2),
        .CO({Carry_IN,cross_carry_5,cross_carry_4,cross_carry_3}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(\NLW_Use_FPGA.Cross_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({cross_s_5,cross_s_4,cross_s_3,cross_s_2}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9009FFFF00000000)) 
    \Use_FPGA.Cross_Det[9].LUT_Inst 
       (.I0(aligned_addr[5]),
        .I1(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_6 ),
        .I2(aligned_addr[6]),
        .I3(\Use_FPGA.Cross_Det[7].LUT_Inst_i_1__0_n_5 ),
        .I4(access_is_incr),
        .I5(1'b1),
        .O5(\NLW_Use_FPGA.Cross_Det[9].LUT_Inst_O5_UNCONNECTED ),
        .O6(cross_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[0].LUT_Inst 
       (.I0(allowed_max_wrap_len[0]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_0),
        .O6(fit_lx_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Lx_Det[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({fit_lx_carry_4,fit_lx_carry_3,fit_lx_carry_2,fit_lx_carry_1}),
        .CYINIT(1'b0),
        .DI({fit_lx_di_3,fit_lx_di_2,fit_lx_di_1,fit_lx_di_0}),
        .O(\NLW_Use_FPGA.Fit_Lx_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_lx_s_3,fit_lx_s_2,fit_lx_s_1,fit_lx_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[1].LUT_Inst 
       (.I0(allowed_max_wrap_len[0]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_1),
        .O6(fit_lx_s_1));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[2].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_2),
        .O6(fit_lx_s_2));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[3].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_3),
        .O6(fit_lx_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[4].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_4),
        .O6(fit_lx_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Lx_Det[4].MUXCY_Inst_CARRY4 
       (.CI(fit_lx_carry_4),
        .CO({fit_lx_carry_8,fit_lx_carry_7,fit_lx_carry_6,fit_lx_carry_5}),
        .CYINIT(1'b0),
        .DI({fit_lx_di_7,fit_lx_di_6,fit_lx_di_5,fit_lx_di_4}),
        .O(\NLW_Use_FPGA.Fit_Lx_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_lx_s_7,fit_lx_s_6,fit_lx_s_5,fit_lx_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[5].LUT_Inst 
       (.I0(allowed_max_wrap_len[1]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_5),
        .O6(fit_lx_s_5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[6].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_6),
        .O6(fit_lx_s_6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[7].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_7),
        .O6(fit_lx_s_7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[8].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_8),
        .O6(fit_lx_s_8));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4 
       (.CI(fit_lx_carry_8),
        .CO({wrap_fit_lx_line_n,lopt_3,Carry_IN_0,fit_lx_carry_9}),
        .CYINIT(1'b0),
        .DI({1'b0,lopt_4,fit_lx_di_9,fit_lx_di_8}),
        .O({\NLW_Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [3],lopt_6,\NLW_Use_FPGA.Fit_Lx_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [1:0]}),
        .S({access_is_wrap,lopt_5,fit_lx_s_9,fit_lx_s_8}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Lx_Det[9].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_lx_di_9),
        .O6(fit_lx_s_9));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and__parameterized3_77 \Use_FPGA.Fit_Lx_Latch_And_Inst1 
       (.Carry_IN_0(Carry_IN_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .access_is_wrap(access_is_wrap),
        .fit_lx_line_n_i(fit_lx_line_n_i),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .port_access_kind(port_access_kind),
        .\rd_port_access[1][Kind] (\rd_port_access[1][Kind] ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[0].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_0),
        .O6(fit_sys_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Sys_Det[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({fit_sys_carry_4,fit_sys_carry_3,fit_sys_carry_2,fit_sys_carry_1}),
        .CYINIT(1'b0),
        .DI({fit_sys_di_3,fit_sys_di_2,fit_sys_di_1,fit_sys_di_0}),
        .O(\NLW_Use_FPGA.Fit_Sys_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_sys_s_3,fit_sys_s_2,fit_sys_s_1,fit_sys_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[1].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_1),
        .O6(fit_sys_s_1));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[2].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_2),
        .O6(fit_sys_s_2));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[3].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_3),
        .O6(fit_sys_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[4].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_4),
        .O6(fit_sys_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Sys_Det[4].MUXCY_Inst_CARRY4 
       (.CI(fit_sys_carry_4),
        .CO({fit_sys_carry_8,fit_sys_carry_7,fit_sys_carry_6,fit_sys_carry_5}),
        .CYINIT(1'b0),
        .DI({fit_sys_di_7,fit_sys_di_6,fit_sys_di_5,fit_sys_di_4}),
        .O(\NLW_Use_FPGA.Fit_Sys_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({fit_sys_s_7,fit_sys_s_6,fit_sys_s_5,fit_sys_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[5].LUT_Inst 
       (.I0(1'b1),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_5),
        .O6(fit_sys_s_5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[6].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_6),
        .O6(fit_sys_s_6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[7].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_7),
        .O6(fit_sys_s_7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[8].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_8),
        .O6(fit_sys_s_8));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Fit_Sys_Det[8].MUXCY_Inst_CARRY4 
       (.CI(fit_sys_carry_8),
        .CO({cross_carry_2,cross_carry_1,fit_sys_carry_10,fit_sys_carry_9}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,fit_sys_di_9,fit_sys_di_8}),
        .O(\NLW_Use_FPGA.Fit_Sys_Det[8].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({cross_s_1,cross_s_0,fit_sys_s_9,fit_sys_s_8}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Fit_Sys_Det[9].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(fit_sys_di_9),
        .O6(fit_sys_s_9));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[0].LUT_Inst 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_0),
        .O6(more_beats_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.More_Beat_Det[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({more_beats_carry_4,more_beats_carry_3,more_beats_carry_2,more_beats_carry_1}),
        .CYINIT(1'b0),
        .DI({more_beats_di_3,more_beats_di_2,more_beats_di_1,more_beats_di_0}),
        .O(\NLW_Use_FPGA.More_Beat_Det[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({more_beats_s_3,more_beats_s_2,more_beats_s_1,more_beats_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[1].LUT_Inst 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_1),
        .O6(more_beats_s_1));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[2].LUT_Inst 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_2),
        .O6(more_beats_s_2));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[3].LUT_Inst 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_3),
        .O6(more_beats_s_3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[4].LUT_Inst 
       (.I0(full_line_beats[1]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_4),
        .O6(more_beats_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.More_Beat_Det[4].MUXCY_Inst_CARRY4 
       (.CI(more_beats_carry_4),
        .CO({CI,more_beats_carry_7,more_beats_carry_6,more_beats_carry_5}),
        .CYINIT(1'b0),
        .DI({more_beats_di_7,more_beats_di_6,more_beats_di_5,more_beats_di_4}),
        .O(\NLW_Use_FPGA.More_Beat_Det[4].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({more_beats_s_7,more_beats_s_6,more_beats_s_5,more_beats_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[5].LUT_Inst 
       (.I0(full_line_beats[2]),
        .I1(\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_5),
        .O6(more_beats_s_5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[6].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_6),
        .O6(more_beats_s_6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.More_Beat_Det[7].LUT_Inst 
       (.I0(1'b0),
        .I1(\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ),
        .I2(1'b0),
        .I3(1'b0),
        .I4(1'b1),
        .I5(1'b1),
        .O5(more_beats_di_7),
        .O6(more_beats_s_7));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_0),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[0].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[0].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_0));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1 
       (.I0(feedback_or_other_len_0),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_0),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1__0 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[0].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_1),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[1].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[1].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_1));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1 
       (.I0(feedback_or_other_len_1),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_1),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1__0 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[1].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_2),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[2].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[2].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_2));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1 
       (.I0(feedback_or_other_len_2),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_2),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1__0 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[2].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_3),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[3].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[3].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_3));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1 
       (.I0(feedback_or_other_len_3),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_3),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1__0 
       (.I0(full_line_beats[0]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[3].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_4),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[4].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[4].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_4));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1 
       (.I0(feedback_or_other_len_4),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_4),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1__0 
       (.I0(full_line_beats[1]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[4].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_5),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[5].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[5].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_5));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1 
       (.I0(feedback_or_other_len_5),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1_n_0 ),
        .O(port_access_len_cmb_5),
        .S(use_full_length));
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1 
       (.I0(full_line_beats[2]),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[5].MUXF7_I1_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_6),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[6].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[6].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_6));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1 
       (.I0(feedback_or_other_len_6),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_6),
        .S(use_full_length));
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1__0 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[6].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(port_access_len_cmb_7),
        .Q(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0CCF0CCAAAAAAAA)) 
    \Use_FPGA.Port_Len_Bit_Gen[7].LUT_Inst1 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ),
        .I2(\Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_n_1 ),
        .I3(first_part),
        .I4(1'b0),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O5(\NLW_Use_FPGA.Port_Len_Bit_Gen[7].LUT_Inst1_O5_UNCONNECTED ),
        .O6(feedback_or_other_len_7));
  (* box_type = "PRIMITIVE" *) 
  MUXF7 \Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1 
       (.I0(feedback_or_other_len_7),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1__0_n_0 ),
        .O(port_access_len_cmb_7),
        .S(use_full_length));
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1__0 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Port_Len_Bit_Gen[7].MUXF7_I1_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(D),
        .Q(I1),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[0].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 ),
        .I1(I1),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(D));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[0].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I1(I1),
        .I2(Q[0]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_0),
        .O6(remaining_s_0));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Remaining_Bit_Gen[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({remaining_carry_4,remaining_carry_3,remaining_carry_2,remaining_carry_1}),
        .CYINIT(1'b0),
        .DI({remaining_di_3,remaining_di_2,remaining_di_1,remaining_di_0}),
        .O({\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[0].XOR_Inst_n_0 }),
        .S({remaining_s_3,remaining_s_2,remaining_s_1,remaining_s_0}));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_1),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[1].XOR_Inst_n_0 ),
        .I1(pre_length_1),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[1].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[1].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I1(pre_length_1),
        .I2(Q[1]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_1),
        .O6(remaining_s_1));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_2),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[2].XOR_Inst_n_0 ),
        .I1(pre_length_2),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[2].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[2].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I1(pre_length_2),
        .I2(Q[2]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_2),
        .O6(remaining_s_2));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_3),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[3].XOR_Inst_n_0 ),
        .I1(pre_length_3),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[3].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[3].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I1(pre_length_3),
        .I2(Q[3]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_3),
        .O6(remaining_s_3));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_4),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 ),
        .I1(pre_length_4),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[4].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[4].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I1(pre_length_4),
        .I2(Q[4]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_4),
        .O6(remaining_s_4));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4 
       (.CI(remaining_carry_4),
        .CO({\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],remaining_carry_7,remaining_carry_6,remaining_carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Remaining_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],remaining_di_6,remaining_di_5,remaining_di_4}),
        .O({\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ,\Use_FPGA.Remaining_Bit_Gen[4].XOR_Inst_n_0 }),
        .S({remaining_s_7,remaining_s_6,remaining_s_5,remaining_s_4}));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_5),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[5].XOR_Inst_n_0 ),
        .I1(pre_length_5),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[5].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[5].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I1(pre_length_5),
        .I2(Q[5]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_5),
        .O6(remaining_s_5));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_6),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[6].XOR_Inst_n_0 ),
        .I1(pre_length_6),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[6].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[6].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I1(pre_length_6),
        .I2(Q[6]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_6),
        .O6(remaining_s_6));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst 
       (.C(ACLK),
        .CE(O),
        .D(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1__0_n_0 ),
        .Q(pre_length_7),
        .S(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1__0 
       (.I0(\Use_FPGA.Remaining_Bit_Gen[7].XOR_Inst_n_0 ),
        .I1(pre_length_7),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .O(\Use_FPGA.Remaining_Bit_Gen[7].FDS_Inst_i_1__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF099CCCC00550000)) 
    \Use_FPGA.Remaining_Bit_Gen[7].LUT_Inst 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I1(pre_length_7),
        .I2(Q[7]),
        .I3(first_part),
        .I4(1'b1),
        .I5(1'b1),
        .O5(remaining_di_7),
        .O6(remaining_s_7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst 
       (.I0(adjusted_addr[0]),
        .I1(wrap_split_mask[0]),
        .I2(Q[0]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_0),
        .O6(short_split_s_0));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_i_1 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .I1(p_0_in[0]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(adjusted_addr[0]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [0]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .O(wrap_split_mask[0]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Short_Split_Bit_Gen[0].MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({short_split_carry_4,short_split_carry_3,short_split_carry_2,short_split_carry_1}),
        .CYINIT(1'b1),
        .DI({short_split_di_3,short_split_di_2,short_split_di_1,short_split_di_0}),
        .O({short_split_len_3,short_split_len_2,short_split_len_1,short_split_len_0}),
        .S({short_split_s_3,short_split_s_2,short_split_s_1,short_split_s_0}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst 
       (.I0(adjusted_addr[1]),
        .I1(wrap_split_mask[1]),
        .I2(Q[1]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_1),
        .O6(short_split_s_1));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_i_1 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .I1(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .O(adjusted_addr[1]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [1]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .O(wrap_split_mask[1]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst 
       (.I0(adjusted_addr[2]),
        .I1(wrap_split_mask[2]),
        .I2(Q[2]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_2),
        .O6(short_split_s_2));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_i_1 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_1 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .O(adjusted_addr[2]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [2]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .O(wrap_split_mask[2]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst 
       (.I0(adjusted_addr[3]),
        .I1(wrap_split_mask[3]),
        .I2(Q[3]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_3),
        .O6(short_split_s_3));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_i_1 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[1].LUT_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .O(adjusted_addr[3]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [3]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .O(wrap_split_mask[3]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[4].LUT_Inst 
       (.I0(adjusted_addr[4]),
        .I1(wrap_split_mask[4]),
        .I2(Q[4]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_4),
        .O6(short_split_s_4));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[4].LUT_Inst_i_1 
       (.I0(aligned_addr[2]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[2].LUT_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .O(adjusted_addr[4]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[4].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [4]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .O(wrap_split_mask[4]));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4 
       (.CI(short_split_carry_4),
        .CO({\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],short_split_carry_7,short_split_carry_6,short_split_carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Short_Split_Bit_Gen[4].MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],short_split_di_6,short_split_di_5,short_split_di_4}),
        .O({short_split_len_7,short_split_len_6,short_split_len_5,short_split_len_4}),
        .S({short_split_s_7,short_split_s_6,short_split_s_5,short_split_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[5].LUT_Inst 
       (.I0(adjusted_addr[5]),
        .I1(wrap_split_mask[5]),
        .I2(Q[5]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_5),
        .O6(short_split_s_5));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[5].LUT_Inst_i_1 
       (.I0(aligned_addr[3]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[3].LUT_Inst_0 ),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(aligned_addr[2]),
        .O(adjusted_addr[5]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[5].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [5]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .O(wrap_split_mask[5]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[6].LUT_Inst 
       (.I0(adjusted_addr[6]),
        .I1(wrap_split_mask[6]),
        .I2(Q[6]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_6),
        .O6(short_split_s_6));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[6].LUT_Inst_i_1 
       (.I0(aligned_addr[4]),
        .I1(aligned_addr[2]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(aligned_addr[3]),
        .O(adjusted_addr[6]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[6].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [6]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .O(wrap_split_mask[6]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h8787878777777777)) 
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst 
       (.I0(adjusted_addr[7]),
        .I1(wrap_split_mask[7]),
        .I2(Q[7]),
        .I3(1'b0),
        .I4(1'b0),
        .I5(1'b1),
        .O5(short_split_di_7),
        .O6(short_split_s_7));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_i_1 
       (.I0(aligned_addr[5]),
        .I1(aligned_addr[3]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(aligned_addr[4]),
        .O(adjusted_addr[7]));
  LUT5 #(
    .INIT(32'hCFACC0AC)) 
    \Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_i_2 
       (.I0(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [9]),
        .I1(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [7]),
        .I2(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [1]),
        .I3(\Use_FPGA.Short_Split_Bit_Gen[0].LUT_Inst_0 [0]),
        .I4(\Use_FPGA.Short_Split_Bit_Gen[7].LUT_Inst_0 [8]),
        .O(wrap_split_mask[7]));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst 
       (.I0(Q[0]),
        .I1(short_split_len_0),
        .I2(I2),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[0].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst 
       (.I0(Q[1]),
        .I1(short_split_len_1),
        .I2(long_split_len_carry_n_6),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[1].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst 
       (.I0(Q[2]),
        .I1(short_split_len_2),
        .I2(long_split_len_carry_n_5),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[2].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst 
       (.I0(Q[3]),
        .I1(short_split_len_3),
        .I2(long_split_len_carry_n_4),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[3].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst 
       (.I0(Q[4]),
        .I1(short_split_len_4),
        .I2(long_split_len_carry__0_n_7),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[4].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst 
       (.I0(Q[5]),
        .I1(short_split_len_5),
        .I2(long_split_len_carry__0_n_6),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[5].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst 
       (.I0(Q[6]),
        .I1(short_split_len_6),
        .I2(long_split_len_carry__0_n_5),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[6].LUT_Inst_n_1 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hF0F0F0F0AACCAAAA)) 
    \Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst 
       (.I0(Q[7]),
        .I1(short_split_len_7),
        .I2(long_split_len_carry__0_n_5),
        .I3(\Use_FPGA.Aligned_Inst_n_0 ),
        .I4(wrap_fit_lx_line_n),
        .I5(Carry_IN),
        .O5(\NLW_Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_O5_UNCONNECTED ),
        .O6(\Use_FPGA.Start_Len_Bit_Gen[7].LUT_Inst_n_1 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Use_Full_Inst_CARRY4 
       (.CI(CI),
        .CO({\NLW_Use_FPGA.Use_Full_Inst_CARRY4_CO_UNCONNECTED [3:1],use_full_length}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Use_Full_Inst_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Use_FPGA.Use_Full_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Use_FPGA.Use_Full_Inst_CARRY4_S_UNCONNECTED [3:1],S}));
  LUT6 #(
    .INIT(64'h66F0FFFF66F00000)) 
    \arb_access_i[Len][0]_i_2 
       (.I0(scaled_port_access_len__15[0]),
        .I1(incr_need_extra_q),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][1] ),
        .I4(port_ready_1),
        .I5(S0_AXI_ARLEN[0]),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \arb_access_i[Len][0]_i_3 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(\arb_access_i[Len][0]_i_2_1 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I4(\arb_access_i[Len][0]_i_2_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .O(scaled_port_access_len__15[0]));
  LUT6 #(
    .INIT(64'h66F0FFFF66F00000)) 
    \arb_access_i[Len][1]_i_2 
       (.I0(\arb_access_i[Len][1]_i_3_n_0 ),
        .I1(scaled_port_access_len__15[1]),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][1] ),
        .I4(port_ready_1),
        .I5(S0_AXI_ARLEN[1]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'hAAAAA8080000A808)) 
    \arb_access_i[Len][1]_i_3 
       (.I0(incr_need_extra_q),
        .I1(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I2(\arb_access_i[Len][0]_i_2_0 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I4(\arb_access_i_reg[Len][7]_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[0].FDS_Inst_0 ),
        .O(\arb_access_i[Len][1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \arb_access_i[Len][1]_i_4 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(\arb_access_i[Len][0]_i_2_1 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I4(\arb_access_i[Len][0]_i_2_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .O(scaled_port_access_len__15[1]));
  LUT6 #(
    .INIT(64'h66F0FFFF66F00000)) 
    \arb_access_i[Len][2]_i_2 
       (.I0(\arb_access_i[Len][2]_i_3_n_0 ),
        .I1(scaled_port_access_len__15[2]),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][1] ),
        .I4(port_ready_1),
        .I5(S0_AXI_ARLEN[2]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'hFFE200E200000000)) 
    \arb_access_i[Len][2]_i_3 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I1(\arb_access_i[Len][0]_i_2_0 ),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][7]_0 ),
        .I4(\Use_FPGA.Port_Len_Bit_Gen[1].FDS_Inst_0 ),
        .I5(\arb_access_i[Len][1]_i_3_n_0 ),
        .O(\arb_access_i[Len][2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \arb_access_i[Len][2]_i_4 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(\arb_access_i[Len][0]_i_2_1 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I4(\arb_access_i[Len][0]_i_2_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .O(scaled_port_access_len__15[2]));
  LUT6 #(
    .INIT(64'h66F0FFFF66F00000)) 
    \arb_access_i[Len][3]_i_2 
       (.I0(\arb_access_i[Len][3]_i_3_n_0 ),
        .I1(scaled_port_access_len__15[3]),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][1] ),
        .I4(port_ready_1),
        .I5(S0_AXI_ARLEN[3]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'hFFE200E200000000)) 
    \arb_access_i[Len][3]_i_3 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I1(\arb_access_i[Len][0]_i_2_0 ),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][7]_0 ),
        .I4(\Use_FPGA.Port_Len_Bit_Gen[2].FDS_Inst_0 ),
        .I5(\arb_access_i[Len][2]_i_3_n_0 ),
        .O(\arb_access_i[Len][3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \arb_access_i[Len][3]_i_4 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[3].FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(\arb_access_i[Len][0]_i_2_1 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I4(\arb_access_i[Len][0]_i_2_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .O(scaled_port_access_len__15[3]));
  LUT6 #(
    .INIT(64'h66F0FFFF66F00000)) 
    \arb_access_i[Len][4]_i_2 
       (.I0(\arb_access_i[Len][4]_i_3_n_0 ),
        .I1(scaled_port_access_len__15[4]),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][1] ),
        .I4(port_ready_1),
        .I5(S0_AXI_ARLEN[4]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_access_i[Len][4]_i_3 
       (.I0(scaled_port_access_len__15[3]),
        .I1(\arb_access_i[Len][2]_i_3_n_0 ),
        .I2(scaled_port_access_len__15[2]),
        .O(\arb_access_i[Len][4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \arb_access_i[Len][4]_i_4 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[4].FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(\arb_access_i[Len][0]_i_2_1 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I4(\arb_access_i[Len][0]_i_2_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .O(scaled_port_access_len__15[4]));
  LUT6 #(
    .INIT(64'h66F0FFFF66F00000)) 
    \arb_access_i[Len][5]_i_2 
       (.I0(\arb_access_i[Len][7]_i_5_n_0 ),
        .I1(scaled_port_access_len__15[5]),
        .I2(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I3(\arb_access_i_reg[Len][1] ),
        .I4(port_ready_1),
        .I5(S0_AXI_ARLEN[5]),
        .O(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_1 ));
  LUT5 #(
    .INIT(32'h7878FF00)) 
    \arb_access_i[Len][6]_i_3 
       (.I0(\arb_access_i[Len][7]_i_5_n_0 ),
        .I1(scaled_port_access_len__15[5]),
        .I2(\arb_access_i_reg[Len][7] ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I4(\arb_access_i_reg[Len][1] ),
        .O(\rd_port_access[1][Len] [0]));
  LUT6 #(
    .INIT(64'h7F808080FFFF0000)) 
    \arb_access_i[Len][7]_i_3 
       (.I0(scaled_port_access_len__15[5]),
        .I1(\arb_access_i[Len][7]_i_5_n_0 ),
        .I2(\arb_access_i_reg[Len][7] ),
        .I3(\arb_access_i_reg[Len][7]_0 ),
        .I4(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .I5(\arb_access_i_reg[Len][1] ),
        .O(\rd_port_access[1][Len] [1]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \arb_access_i[Len][7]_i_4 
       (.I0(\Use_FPGA.Port_Len_Bit_Gen[5].FDS_Inst_0 ),
        .I1(\port_access_q[Size] ),
        .I2(\arb_access_i[Len][0]_i_2_1 ),
        .I3(\Use_FPGA.Port_Len_Bit_Gen[6].FDS_Inst_0 ),
        .I4(\arb_access_i[Len][0]_i_2_0 ),
        .I5(\Use_FPGA.Port_Len_Bit_Gen[7].FDS_Inst_0 ),
        .O(scaled_port_access_len__15[5]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \arb_access_i[Len][7]_i_5 
       (.I0(scaled_port_access_len__15[4]),
        .I1(scaled_port_access_len__15[2]),
        .I2(\arb_access_i[Len][2]_i_3_n_0 ),
        .I3(scaled_port_access_len__15[3]),
        .O(\arb_access_i[Len][7]_i_5_n_0 ));
  CARRY4 long_split_len_carry
       (.CI(1'b0),
        .CO({long_split_len_carry_n_0,long_split_len_carry_n_1,long_split_len_carry_n_2,long_split_len_carry_n_3}),
        .CYINIT(1'b1),
        .DI({full_line_beats[0],full_line_beats[0],full_line_beats[0],full_line_beats[0]}),
        .O({long_split_len_carry_n_4,long_split_len_carry_n_5,long_split_len_carry_n_6,I2}),
        .S({long_split_len_carry_i_1__0_n_0,long_split_len_carry_i_2__0_n_0,long_split_len_carry_i_3__0_n_0,long_split_len_carry_i_4__0_n_0}));
  CARRY4 long_split_len_carry__0
       (.CI(long_split_len_carry_n_0),
        .CO({NLW_long_split_len_carry__0_CO_UNCONNECTED[3:2],long_split_len_carry__0_n_2,long_split_len_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,full_line_beats[2:1]}),
        .O({NLW_long_split_len_carry__0_O_UNCONNECTED[3],long_split_len_carry__0_n_5,long_split_len_carry__0_n_6,long_split_len_carry__0_n_7}),
        .S({1'b0,1'b1,long_split_len_carry__0_i_1__0_n_0,long_split_len_carry__0_i_2__0_n_0}));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry__0_i_1__0
       (.I0(full_line_beats[2]),
        .I1(long_split_len_carry__0_0[5]),
        .O(long_split_len_carry__0_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry__0_i_2__0
       (.I0(full_line_beats[1]),
        .I1(long_split_len_carry__0_0[4]),
        .O(long_split_len_carry__0_i_2__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_1__0
       (.I0(full_line_beats[0]),
        .I1(long_split_len_carry__0_0[3]),
        .O(long_split_len_carry_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_2__0
       (.I0(full_line_beats[0]),
        .I1(long_split_len_carry__0_0[2]),
        .O(long_split_len_carry_i_2__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_3__0
       (.I0(full_line_beats[0]),
        .I1(long_split_len_carry__0_0[1]),
        .O(long_split_len_carry_i_3__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    long_split_len_carry_i_4__0
       (.I0(full_line_beats[0]),
        .I1(long_split_len_carry__0_0[0]),
        .O(long_split_len_carry_i_4__0_n_0));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_opt_interface" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_opt_interface
   (wr_port_data_valid_i_reg_0,
    E,
    read_req_ready,
    \lud_reg_valid_one_hot_reg[0] ,
    \Use_FPGA_Flag_Hit.Full_Inst ,
    \Use_FPGA_Flag_Miss.Full_Inst ,
    \read_data_status[0,0][Hit_Almost_Full] ,
    queue_full,
    S0_AXI_RID,
    S0_AXI_BID,
    \access_data_info[0,0][Last] ,
    S0_AXI_RVALID,
    S_AXI_BVALID_I_reg_0,
    wr_port_data_valid_i_reg_1,
    \The_Compare[0].sel_reg_2 ,
    \Use_FPGA.Almost_Full_Inst ,
    S0_AXI_RLAST,
    S0_AXI_ARREADY,
    \rd_port_access[0][Valid] ,
    S0_AXI_WREADY,
    \bs_port_num_reg[0] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    \wr_port_data_info_reg[0][BE][3]_1 ,
    \wr_port_data_info_reg[0][BE][2]_0 ,
    \wr_port_data_info_reg[0][BE][1]_0 ,
    \wr_port_data_info_reg[0][BE][0]_0 ,
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    S0_AXI_BRESP,
    \wr_port_data_info_reg[0][Data][31]_0 ,
    ACLK,
    ARESET,
    S0_AXI_WVALID,
    S,
    \lookup_read_data_new[0,0][Valid] ,
    S0_AXI_RREADY,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    S0_AXI_ARID,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    queue_push9_out,
    \arbiter_bp_push_prt[0][Valid] ,
    \arbiter_bp_push_prt[0][Early] ,
    \arbiter_bp_push_prt[0][Barrier] ,
    S0_AXI_AWID,
    S0_AXI_WLAST,
    \access_data_info[0,1][Valid] ,
    \Using_FPGA.MUXCY_I_i_1__39 ,
    \read_info_status[0,1][Almost_Full] ,
    \Using_FPGA.MUXCY_I_i_1__54 ,
    \read_info_status[0,1][Full] ,
    wr_port_data_valid_i_reg_2,
    S0_AXI_AWVALID,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \S_AXI_BID_reg[0]_0 ,
    \S_AXI_BID_reg[0]_1 ,
    S0_AXI_ARREADY_0,
    S0_AXI_ARVALID,
    S0_AXI_BREADY,
    bs_slv,
    wm_port,
    \update_wma_data_reg[31] ,
    wm_allow,
    M0_AXI_RRESP,
    rd_port_ready_cmb_0,
    access_piperun,
    S0_AXI_WSTRB,
    S0_AXI_WDATA,
    \S0_AXI_RDATA[31] ,
    new_read_data_last_5,
    \update_ext_bresp_info[0,0][BRESP] );
  output wr_port_data_valid_i_reg_0;
  output [0:0]E;
  output read_req_ready;
  output [0:0]\lud_reg_valid_one_hot_reg[0] ;
  output \Use_FPGA_Flag_Hit.Full_Inst ;
  output \Use_FPGA_Flag_Miss.Full_Inst ;
  output \read_data_status[0,0][Hit_Almost_Full] ;
  output queue_full;
  output [0:0]S0_AXI_RID;
  output [0:0]S0_AXI_BID;
  output \access_data_info[0,0][Last] ;
  output S0_AXI_RVALID;
  output S_AXI_BVALID_I_reg_0;
  output wr_port_data_valid_i_reg_1;
  output \The_Compare[0].sel_reg_2 ;
  output \Use_FPGA.Almost_Full_Inst ;
  output S0_AXI_RLAST;
  output S0_AXI_ARREADY;
  output \rd_port_access[0][Valid] ;
  output S0_AXI_WREADY;
  output \bs_port_num_reg[0] ;
  output \wr_port_data_info_reg[0][BE][3]_0 ;
  output [3:0]\wr_port_data_info_reg[0][BE][3]_1 ;
  output \wr_port_data_info_reg[0][BE][2]_0 ;
  output \wr_port_data_info_reg[0][BE][1]_0 ;
  output \wr_port_data_info_reg[0][BE][0]_0 ;
  output \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ;
  output [31:0]S0_AXI_RDATA;
  output [1:0]S0_AXI_RRESP;
  output [1:0]S0_AXI_BRESP;
  output [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  input ACLK;
  input ARESET;
  input S0_AXI_WVALID;
  input S;
  input \lookup_read_data_new[0,0][Valid] ;
  input S0_AXI_RREADY;
  input \lookup_read_data_info[0,0][Valid] ;
  input \update_read_data_info[0,0][Valid] ;
  input [0:0]S0_AXI_ARID;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input queue_push9_out;
  input \arbiter_bp_push_prt[0][Valid] ;
  input \arbiter_bp_push_prt[0][Early] ;
  input \arbiter_bp_push_prt[0][Barrier] ;
  input [0:0]S0_AXI_AWID;
  input S0_AXI_WLAST;
  input \access_data_info[0,1][Valid] ;
  input \Using_FPGA.MUXCY_I_i_1__39 ;
  input \read_info_status[0,1][Almost_Full] ;
  input \Using_FPGA.MUXCY_I_i_1__54 ;
  input \read_info_status[0,1][Full] ;
  input wr_port_data_valid_i_reg_2;
  input S0_AXI_AWVALID;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input \S_AXI_BID_reg[0]_0 ;
  input \S_AXI_BID_reg[0]_1 ;
  input S0_AXI_ARREADY_0;
  input S0_AXI_ARVALID;
  input S0_AXI_BREADY;
  input bs_slv;
  input wm_port;
  input [3:0]\update_wma_data_reg[31] ;
  input wm_allow;
  input [1:0]M0_AXI_RRESP;
  input rd_port_ready_cmb_0;
  input access_piperun;
  input [3:0]S0_AXI_WSTRB;
  input [31:0]S0_AXI_WDATA;
  input [31:0]\S0_AXI_RDATA[31] ;
  input new_read_data_last_5;
  input [1:0]\update_ext_bresp_info[0,0][BRESP] ;

  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [0:0]E;
  wire FIFO_BP_Pointer_n_6;
  wire FIFO_W_Pointer_n_4;
  wire [1:0]M0_AXI_RRESP;
  wire S;
  wire [0:0]S0_AXI_ARID;
  wire S0_AXI_ARREADY;
  wire S0_AXI_ARREADY_0;
  wire S0_AXI_ARVALID;
  wire [0:0]S0_AXI_AWID;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire [31:0]S0_AXI_RDATA;
  wire [31:0]\S0_AXI_RDATA[31] ;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire \S_AXI_BID_reg[0]_0 ;
  wire \S_AXI_BID_reg[0]_1 ;
  wire \S_AXI_BRESP[0]_i_1_n_0 ;
  wire \S_AXI_BRESP[1]_i_1_n_0 ;
  wire S_AXI_BVALID_I_reg_0;
  wire \The_Compare[0].sel_reg_2 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA_Flag_Miss.Full_Inst ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Using_FPGA.MUXCY_I_i_1__39 ;
  wire \Using_FPGA.MUXCY_I_i_1__54 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire access_piperun;
  wire \arbiter_bp_push_prt[0][Barrier] ;
  wire \arbiter_bp_push_prt[0][Early] ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire \bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire [3:0]bip_read_fifo_addr;
  wire \bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ;
  wire \bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ;
  wire [3:0]bp_read_fifo_addr;
  wire \bs_port_num_reg[0] ;
  wire bs_slv;
  wire [3:0]fit_vec;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire [0:0]\lud_reg_valid_one_hot_reg[0] ;
  wire new_read_data_last_5;
  wire queue_full;
  wire queue_pop;
  wire queue_pop7_out;
  wire queue_push;
  wire queue_push9_out;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_ready_cmb_0;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire read_req_ready;
  wire refresh_counter02_out;
  wire [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire [3:0]\update_wma_data_reg[31] ;
  wire \w_fifo_mem_reg[15][Data][0]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][10]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][11]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][12]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][13]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][14]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][15]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][16]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][17]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][18]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][19]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][1]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][20]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][21]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][22]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][23]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][24]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][25]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][26]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][27]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][28]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][29]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][2]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][30]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][31]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][3]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][4]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][5]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][6]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][7]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][8]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][9]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire w_pop;
  wire w_pop_part;
  wire [3:0]w_read_fifo_addr;
  wire w_ready;
  wire wc_fifo_empty;
  wire wm_allow;
  wire wm_port;
  wire \wr_port_data_info_reg[0][BE][0]_0 ;
  wire \wr_port_data_info_reg[0][BE][1]_0 ;
  wire \wr_port_data_info_reg[0][BE][2]_0 ;
  wire \wr_port_data_info_reg[0][BE][3]_0 ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_1 ;
  wire [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  wire wr_port_data_valid_i_reg_0;
  wire wr_port_data_valid_i_reg_1;
  wire wr_port_data_valid_i_reg_2;

  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7 FIFO_BIP_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst_0 ),
        .bip_read_fifo_addr(bip_read_fifo_addr),
        .queue_full(queue_full),
        .queue_pop7_out(queue_pop7_out),
        .queue_push9_out(queue_push9_out));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_0 FIFO_BP_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .\S_AXI_BID_reg[0] (\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ),
        .\S_AXI_BID_reg[0]_0 (\S_AXI_BID_reg[0]_0 ),
        .\S_AXI_BID_reg[0]_1 (\S_AXI_BID_reg[0]_1 ),
        .\S_AXI_BID_reg[0]_2 (\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ),
        .S_AXI_BVALID_I_reg(FIFO_BP_Pointer_n_6),
        .S_AXI_BVALID_I_reg_0(S_AXI_BVALID_I_reg_0),
        .\arbiter_bp_push_prt[0][Valid] (\arbiter_bp_push_prt[0][Valid] ),
        .bp_read_fifo_addr(bp_read_fifo_addr),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .bs_slv(bs_slv),
        .queue_pop(queue_pop),
        .queue_pop7_out(queue_pop7_out),
        .wc_fifo_empty(wc_fifo_empty));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized1 FIFO_WC_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .\Use_FPGA.Empty_Inst_0 (\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ),
        .queue_pop(queue_pop),
        .queue_pop7_out(queue_pop7_out),
        .queue_push(queue_push),
        .refresh_counter02_out(refresh_counter02_out),
        .wc_fifo_empty(wc_fifo_empty));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter FIFO_W_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .queue_push(queue_push),
        .refresh_counter02_out(refresh_counter02_out),
        .w_pop(w_pop),
        .w_read_fifo_addr(w_read_fifo_addr),
        .wr_port_data_valid_i_reg(FIFO_W_Pointer_n_4),
        .wr_port_data_valid_i_reg_0(wr_port_data_valid_i_reg_0),
        .wr_port_data_valid_i_reg_1(wr_port_data_valid_i_reg_2));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_r_channel R_Channel
       (.ACLK(ACLK),
        .E(E),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(ARESET_I),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARREADY_0(S0_AXI_ARREADY_0),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_RDATA(S0_AXI_RDATA),
        .\S0_AXI_RDATA[31] (\S0_AXI_RDATA[31] ),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RLAST(S0_AXI_RLAST),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RRESP(S0_AXI_RRESP),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (read_req_ready),
        .\Use_FPGA_Flag_Hit.Full_Inst_0 (\Use_FPGA_Flag_Hit.Full_Inst ),
        .\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ),
        .\Use_FPGA_Flag_Miss.Full_Inst_0 (\Use_FPGA_Flag_Miss.Full_Inst ),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 (\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .\Using_FPGA.MUXCY_I_i_1__54 (\Using_FPGA.MUXCY_I_i_1__54 ),
        .access_piperun(access_piperun),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lud_reg_valid_one_hot_reg[0] (\lud_reg_valid_one_hot_reg[0] ),
        .new_read_data_last_5(new_read_data_last_5),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_ready_cmb_0(rd_port_ready_cmb_0),
        .\read_data_status[0,0][Hit_Almost_Full] (\read_data_status[0,0][Hit_Almost_Full] ),
        .\read_info_status[0,1][Almost_Full] (\read_info_status[0,1][Almost_Full] ),
        .\read_info_status[0,1][Full] (\read_info_status[0,1][Full] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__13 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  FDRE \S_AXI_BID_reg[0] 
       (.C(ACLK),
        .CE(queue_pop7_out),
        .D(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S0_AXI_BID),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h00000ACA)) 
    \S_AXI_BRESP[0]_i_1 
       (.I0(S0_AXI_BRESP[0]),
        .I1(\update_ext_bresp_info[0,0][BRESP] [0]),
        .I2(queue_pop7_out),
        .I3(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ),
        .I4(ARESET_I),
        .O(\S_AXI_BRESP[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000ACA)) 
    \S_AXI_BRESP[1]_i_1 
       (.I0(S0_AXI_BRESP[1]),
        .I1(\update_ext_bresp_info[0,0][BRESP] [1]),
        .I2(queue_pop7_out),
        .I3(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ),
        .I4(ARESET_I),
        .O(\S_AXI_BRESP[1]_i_1_n_0 ));
  FDRE \S_AXI_BRESP_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\S_AXI_BRESP[0]_i_1_n_0 ),
        .Q(S0_AXI_BRESP[0]),
        .R(1'b0));
  FDRE \S_AXI_BRESP_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\S_AXI_BRESP[1]_i_1_n_0 ),
        .Q(S0_AXI_BRESP[1]),
        .R(1'b0));
  FDRE S_AXI_BVALID_I_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_6),
        .Q(S_AXI_BVALID_I_reg_0),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__41 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(\Using_FPGA.MUXCY_I_i_1__39 ),
        .O(\The_Compare[0].sel_reg_2 ));
  LUT3 #(
    .INIT(8'hCA)) 
    \Using_FPGA.MUXCY_I_i_5 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(\access_data_info[0,1][Valid] ),
        .I2(\Using_FPGA.MUXCY_I_i_1__39 ),
        .O(wr_port_data_valid_i_reg_1));
  Fast_IP_Clock_system_cache_0_0_carry_and WC_And_Inst2
       (.E(w_pop),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .w_pop_part(w_pop_part));
  Fast_IP_Clock_system_cache_0_0_carry_or WC_Or_Inst1
       (.S(S),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(wr_port_data_valid_i_reg_0),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .w_ready(w_ready));
  Fast_IP_Clock_system_cache_0_0_carry_or_n WC_Or_Inst2
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .w_pop_part(w_pop_part),
        .w_ready(w_ready),
        .\wr_port_data_info_reg[0][Data][0] (wr_port_data_valid_i_reg_0));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/bip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/bip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(bip_read_fifo_addr[0]),
        .A1(bip_read_fifo_addr[1]),
        .A2(bip_read_fifo_addr[2]),
        .A3(bip_read_fifo_addr[3]),
        .CE(queue_push9_out),
        .CLK(ACLK),
        .D(S0_AXI_AWID),
        .Q(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Barrier] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[0][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[0][Barrier] ),
        .Q(\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Early] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Early][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Early][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[0][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[0][Early] ),
        .Q(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_data[15]_i_3 
       (.I0(\wr_port_data_info_reg[0][BE][3]_1 [1]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [1]),
        .I3(wm_allow),
        .O(\wr_port_data_info_reg[0][BE][1]_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_data[23]_i_3 
       (.I0(\wr_port_data_info_reg[0][BE][3]_1 [2]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [2]),
        .I3(wm_allow),
        .O(\wr_port_data_info_reg[0][BE][2]_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_data[31]_i_4 
       (.I0(\wr_port_data_info_reg[0][BE][3]_1 [3]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [3]),
        .I3(wm_allow),
        .O(\wr_port_data_info_reg[0][BE][3]_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_data[7]_i_3 
       (.I0(\wr_port_data_info_reg[0][BE][3]_1 [0]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [0]),
        .I3(wm_allow),
        .O(\wr_port_data_info_reg[0][BE][0]_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[0]),
        .Q(fit_vec[0]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[1]),
        .Q(fit_vec[1]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[2]),
        .Q(fit_vec[2]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[3]),
        .Q(fit_vec[3]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[0]),
        .Q(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][10]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[10]),
        .Q(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][11]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[11]),
        .Q(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][12]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[12]),
        .Q(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][13]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[13]),
        .Q(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][14]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[14]),
        .Q(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][15]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[15]),
        .Q(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][16]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[16]),
        .Q(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][17]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[17]),
        .Q(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][18]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[18]),
        .Q(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][19]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[19]),
        .Q(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[1]),
        .Q(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][20]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[20]),
        .Q(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][21]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[21]),
        .Q(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][22]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[22]),
        .Q(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][23]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[23]),
        .Q(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][24]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[24]),
        .Q(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][25]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[25]),
        .Q(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][26]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[26]),
        .Q(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][27]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[27]),
        .Q(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][28]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[28]),
        .Q(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][29]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[29]),
        .Q(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[2]),
        .Q(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][30]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[30]),
        .Q(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][31]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[31]),
        .Q(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[3]),
        .Q(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][4]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[4]),
        .Q(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][5]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[5]),
        .Q(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][6]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[6]),
        .Q(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][7]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[7]),
        .Q(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][8]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[8]),
        .Q(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][9]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[9]),
        .Q(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_WLAST),
        .Q(\w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE \wr_port_data_info_reg[0][BE][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[0]),
        .Q(\wr_port_data_info_reg[0][BE][3]_1 [0]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[1]),
        .Q(\wr_port_data_info_reg[0][BE][3]_1 [1]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[2]),
        .Q(\wr_port_data_info_reg[0][BE][3]_1 [2]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[3]),
        .Q(\wr_port_data_info_reg[0][BE][3]_1 [3]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [0]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][10] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [10]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][11] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [11]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][12] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [12]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][13] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [13]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][14] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [14]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][15] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [15]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][16] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [16]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][17] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [17]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][18] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [18]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][19] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [19]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [1]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][20] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [20]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][21] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [21]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][22] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [22]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][23] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [23]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][24] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [24]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][25] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [25]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][26] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [26]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][27] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [27]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][28] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [28]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][29] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [29]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [2]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][30] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [30]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][31] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [31]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [3]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][4] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [4]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][5] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [5]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][6] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [6]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][7] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [7]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][8] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [8]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][9] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [9]),
        .R(ARESET_I));
  FDSE wr_port_data_last_i_reg
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(\access_data_info[0,0][Last] ),
        .S(ARESET_I));
  FDRE wr_port_data_valid_i_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_W_Pointer_n_4),
        .Q(wr_port_data_valid_i_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_r_channel" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_r_channel
   (E,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \lud_reg_valid_one_hot_reg[0] ,
    \Use_FPGA_Flag_Hit.Full_Inst_0 ,
    \Use_FPGA_Flag_Miss.Full_Inst_0 ,
    \read_data_status[0,0][Hit_Almost_Full] ,
    S0_AXI_RID,
    S0_AXI_RVALID,
    \Use_FPGA.Almost_Full_Inst ,
    S0_AXI_RLAST,
    S0_AXI_ARREADY,
    \rd_port_access[0][Valid] ,
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    Q,
    ACLK,
    \lookup_read_data_new[0,0][Valid] ,
    S0_AXI_RREADY,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    S0_AXI_ARID,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ,
    \read_info_status[0,1][Almost_Full] ,
    \Using_FPGA.MUXCY_I_i_1__54 ,
    \read_info_status[0,1][Full] ,
    S0_AXI_ARREADY_0,
    S0_AXI_ARVALID,
    M0_AXI_RRESP,
    rd_port_ready_cmb_0,
    access_piperun,
    \S0_AXI_RDATA[31] ,
    new_read_data_last_5);
  output [0:0]E;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  output \lud_reg_valid_one_hot_reg[0] ;
  output \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  output \Use_FPGA_Flag_Miss.Full_Inst_0 ;
  output \read_data_status[0,0][Hit_Almost_Full] ;
  output [0:0]S0_AXI_RID;
  output S0_AXI_RVALID;
  output \Use_FPGA.Almost_Full_Inst ;
  output S0_AXI_RLAST;
  output S0_AXI_ARREADY;
  output \rd_port_access[0][Valid] ;
  output \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ;
  output [31:0]S0_AXI_RDATA;
  output [1:0]S0_AXI_RRESP;
  input Q;
  input ACLK;
  input \lookup_read_data_new[0,0][Valid] ;
  input S0_AXI_RREADY;
  input \lookup_read_data_info[0,0][Valid] ;
  input \update_read_data_info[0,0][Valid] ;
  input [0:0]S0_AXI_ARID;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  input \read_info_status[0,1][Almost_Full] ;
  input \Using_FPGA.MUXCY_I_i_1__54 ;
  input \read_info_status[0,1][Full] ;
  input S0_AXI_ARREADY_0;
  input S0_AXI_ARVALID;
  input [1:0]M0_AXI_RRESP;
  input rd_port_ready_cmb_0;
  input access_piperun;
  input [31:0]\S0_AXI_RDATA[31] ;
  input new_read_data_last_5;

  wire A22_out;
  wire ACLK;
  wire D;
  wire [0:0]E;
  wire FIFO_RIP_Pointer_n_1;
  wire FIFO_RI_Pointer_n_0;
  wire I4;
  wire I5;
  wire [1:0]M0_AXI_RRESP;
  wire Q;
  wire RC_And_Inst5_n_1;
  wire RC_And_Inst5_n_2;
  wire RC_And_Inst5_n_3;
  wire RC_And_Inst5_n_5;
  wire RC_And_Inst5_n_6;
  wire RC_And_Inst6_n_1;
  wire [0:0]S0_AXI_ARID;
  wire S0_AXI_ARREADY;
  wire S0_AXI_ARREADY_0;
  wire S0_AXI_ARVALID;
  wire [31:0]S0_AXI_RDATA;
  wire [31:0]\S0_AXI_RDATA[31] ;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Miss.Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Miss.Full_Inst_0 ;
  wire \Use_FPGA_Flag_Miss.Full_Inst_i_1_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  wire \Using_FPGA.MUXCY_I_i_1__54 ;
  wire access_piperun;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire \lud_reg_valid_one_hot_reg[0] ;
  wire new_read_data_last_5;
  wire p_3_out__2;
  wire p_4_out__2;
  wire queue_almost_empty_next__2;
  wire queue_almost_empty_next__3;
  wire queue_almost_full_next__2;
  wire queue_almost_full_next__3;
  wire [3:0]queue_index;
  wire r_hit_fifo_almost_empty;
  wire \r_hit_fifo_len[0]_i_1__0_n_0 ;
  wire \r_hit_fifo_len[1]_i_1__0_n_0 ;
  wire \r_hit_fifo_len[2]_i_1__0_n_0 ;
  wire \r_hit_fifo_len[3]_i_1__0_n_0 ;
  wire [3:0]r_hit_fifo_len_reg;
  wire r_hit_last;
  wire [3:0]r_hit_read_fifo_addr;
  wire \r_hit_read_fifo_addr[0]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr[1]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr[2]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr[3]_i_1__0_n_0 ;
  wire r_hit_refresh;
  wire [3:0]r_hit_write_fifo_addr;
  wire \r_hit_write_fifo_addr[0]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr[1]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr[2]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr[3]_i_1_n_0 ;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_almost_full;
  wire r_miss_fifo_empty;
  wire \r_miss_fifo_len[0]_i_1__0_n_0 ;
  wire \r_miss_fifo_len[1]_i_1__0_n_0 ;
  wire \r_miss_fifo_len[2]_i_1__0_n_0 ;
  wire \r_miss_fifo_len[3]_i_1__0_n_0 ;
  wire [3:0]r_miss_fifo_len_reg;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_last;
  wire r_miss_push;
  wire \r_miss_read_fifo_addr[0]_i_1_n_0 ;
  wire \r_miss_read_fifo_addr[1]_i_1_n_0 ;
  wire r_miss_refresh;
  wire [1:0]r_miss_write_fifo_addr;
  wire \r_miss_write_fifo_addr[0]_i_1_n_0 ;
  wire \r_miss_write_fifo_addr[1]_i_1_n_0 ;
  wire [3:1]r_next_fifo_addr__18;
  wire r_pop;
  wire r_pop_safe_i;
  wire r_pop_valid;
  wire r_push_safe;
  wire [3:0]r_read_fifo_addr;
  wire [3:0]r_write_fifo_addr;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_ready_cmb_0;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,0][Hit_Fit] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire ri_exist;
  wire \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ;
  wire ri_refresh_reg;
  wire \rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire rip_last;
  wire rip_pop;
  wire rip_push_safe;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire rr_fifo_mem_reg_0_15_0_0_i_1_n_0;
  wire rr_fifo_mem_reg_0_15_1_1_i_1_n_0;
  wire \update_read_data_info[0,0][Valid] ;
  wire \NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ;
  wire NLW_rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED;
  wire NLW_rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED;
  wire NLW_rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED;
  wire NLW_rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED;

  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized5 FIFO_RIP_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARREADY_0(S0_AXI_ARREADY_0),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FIFO_RIP_Pointer_n_1),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rip_pop(rip_pop),
        .rip_push_safe(rip_push_safe),
        .rip_read_fifo_addr(rip_read_fifo_addr),
        .rip_refresh_reg(rip_refresh_reg));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3 FIFO_RI_Pointer
       (.A22_out(A22_out),
        .ACLK(ACLK),
        .Q(Q),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Empty_Inst_0 (FIFO_RI_Pointer_n_0),
        .\Using_FPGA.MUXCY_I (FIFO_RIP_Pointer_n_1),
        .\Using_FPGA.MUXCY_I_i_1__54 (\Using_FPGA.MUXCY_I_i_1__54 ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .queue_index(queue_index),
        .\read_info_status[0,1][Almost_Full] (\read_info_status[0,1][Almost_Full] ),
        .\read_info_status[0,1][Full] (\read_info_status[0,1][Full] ),
        .ri_exist(ri_exist),
        .ri_refresh_reg(ri_refresh_reg),
        .rip_pop(rip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_and_1 RC_And_Inst3
       (.A22_out(A22_out),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S0_AXI_RREADY),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .r_pop_valid(r_pop_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_2 RC_And_Inst4
       (.S0_AXI_RREADY(S0_AXI_RREADY),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .r_pop(r_pop),
        .r_pop_valid(r_pop_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_n RC_And_Inst5
       (.I4(I4),
        .I5(I5),
        .Q(r_hit_read_fifo_addr),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] (RC_And_Inst5_n_6),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (RC_And_Inst5_n_1),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (RC_And_Inst5_n_5),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .p_3_out__2(p_3_out__2),
        .\r_hit_read_fifo_addr_reg[2] (RC_And_Inst5_n_2),
        .\r_hit_read_fifo_addr_reg[3] (RC_And_Inst5_n_3),
        .r_miss_fifo_almost_empty(r_miss_fifo_almost_empty),
        .r_miss_fifo_empty(r_miss_fifo_empty),
        .r_miss_full_fifo_addr(r_miss_full_fifo_addr),
        .r_miss_push(r_miss_push),
        .r_next_fifo_addr__18(r_next_fifo_addr__18),
        .r_pop(r_pop),
        .r_pop_safe_i(r_pop_safe_i),
        .r_read_fifo_addr(r_read_fifo_addr[0]),
        .ri_exist(ri_exist),
        .ri_refresh_reg(ri_refresh_reg),
        .rip_pop(rip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_and_3 RC_And_Inst6
       (.I5(I5),
        .Q(Q),
        .\Use_FPGA_2.S_AXI_RVALID_reg (FIFO_RI_Pointer_n_0),
        .\Use_FPGA_2.S_AXI_RVALID_reg_0 (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (RC_And_Inst6_n_1),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7),
        .p_3_out__2(p_3_out__2),
        .p_4_out__2(p_4_out__2),
        .r_hit_last(r_hit_last),
        .r_miss_last(r_miss_last),
        .r_pop_safe_i(r_pop_safe_i),
        .ri_exist(ri_exist),
        .ri_refresh_reg(ri_refresh_reg),
        .rip_pop(rip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and RC_Latch_Inst1
       (.E(E),
        .I4(I4),
        .I5(I5),
        .\Use_FPGA_2.S_AXI_RVALID_i_2 (\lud_reg_valid_one_hot_reg[0] ),
        .p_4_out__2(p_4_out__2),
        .r_hit_fifo_almost_empty(r_hit_fifo_almost_empty),
        .r_pop_safe_i(r_pop_safe_i));
  LUT4 #(
    .INIT(16'hE200)) 
    S0_AXI_RLAST_INST_0
       (.I0(r_miss_last),
        .I1(I5),
        .I2(r_hit_last),
        .I3(rip_last),
        .O(S0_AXI_RLAST));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2222D22222222222)) 
    \Use_FPGA_1.LUT_Hit_Inst 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I2(r_pop),
        .I3(I5),
        .I4(I4),
        .I5(1'b1),
        .O5(\lud_reg_valid_one_hot_reg[0] ),
        .O6(r_hit_refresh));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2F222F220D000D00)) 
    \Use_FPGA_1.LUT_Push_Inst 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I2(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .I3(\update_read_data_info[0,0][Valid] ),
        .I4(1'b0),
        .I5(1'b1),
        .O5(r_miss_push),
        .O6(r_push_safe));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0D000D00F2FF0D00)) 
    \Use_FPGA_1.LUT_Refresh_Inst 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I2(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .I3(\update_read_data_info[0,0][Valid] ),
        .I4(r_pop_safe_i),
        .I5(I5),
        .O5(\NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ),
        .O6(r_miss_refresh));
  FDRE \Use_FPGA_2.S_AXI_RVALID_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(RC_And_Inst6_n_1),
        .Q(S0_AXI_RVALID),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1_n_0 ),
        .Q(r_hit_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1 
       (.I0(queue_almost_empty_next__3),
        .I1(r_hit_refresh),
        .I2(r_hit_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_2 
       (.I0(I4),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .I2(r_hit_fifo_len_reg[3]),
        .I3(r_hit_fifo_len_reg[2]),
        .I4(r_hit_fifo_len_reg[1]),
        .I5(r_hit_fifo_len_reg[0]),
        .O(queue_almost_empty_next__3));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_data_status[0,0][Hit_Almost_Full] ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_1 
       (.I0(queue_almost_full_next__2),
        .I1(r_hit_refresh),
        .I2(\read_data_status[0,0][Hit_Almost_Full] ),
        .O(D));
  LUT6 #(
    .INIT(64'h1000FFFF10000000)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_2 
       (.I0(r_hit_fifo_len_reg[1]),
        .I1(r_hit_fifo_len_reg[2]),
        .I2(r_hit_fifo_len_reg[0]),
        .I3(r_hit_fifo_len_reg[3]),
        .I4(\lud_reg_valid_one_hot_reg[0] ),
        .I5(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .O(queue_almost_full_next__2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Empty_Inst_i_1_n_0 ),
        .Q(I4),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Hit.Empty_Inst_i_1 
       (.I0(r_hit_fifo_almost_empty),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .I2(r_hit_refresh),
        .I3(I4),
        .O(\Use_FPGA_Flag_Hit.Empty_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Full_Inst_i_1_n_0 ),
        .Q(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Hit.Full_Inst_i_1 
       (.I0(\lud_reg_valid_one_hot_reg[0] ),
        .I1(\read_data_status[0,0][Hit_Almost_Full] ),
        .I2(r_hit_refresh),
        .I3(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .O(\Use_FPGA_Flag_Hit.Full_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1_n_0 ),
        .Q(\read_data_status[0,0][Hit_Fit] ),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1 
       (.I0(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ),
        .I1(r_hit_refresh),
        .I2(\read_data_status[0,0][Hit_Fit] ),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT5 #(
    .INIT(32'h0111FFFF)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2 
       (.I0(\lud_reg_valid_one_hot_reg[0] ),
        .I1(r_hit_fifo_len_reg[2]),
        .I2(r_hit_fifo_len_reg[1]),
        .I3(r_hit_fifo_len_reg[0]),
        .I4(r_hit_fifo_len_reg[3]),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1_n_0 ),
        .Q(r_miss_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1 
       (.I0(queue_almost_empty_next__2),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_2 
       (.I0(r_miss_fifo_empty),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[3]),
        .I3(r_miss_fifo_len_reg[2]),
        .I4(r_miss_fifo_len_reg[1]),
        .I5(r_miss_fifo_len_reg[0]),
        .O(queue_almost_empty_next__2));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1_n_0 ),
        .Q(r_miss_fifo_almost_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1 
       (.I0(queue_almost_full_next__3),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_full),
        .O(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0010FFFF00100000)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_2 
       (.I0(r_miss_fifo_len_reg[3]),
        .I1(r_miss_fifo_len_reg[2]),
        .I2(r_miss_fifo_len_reg[0]),
        .I3(r_miss_fifo_len_reg[1]),
        .I4(r_miss_push),
        .I5(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .O(queue_almost_full_next__3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Miss.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Empty_Inst_i_1_n_0 ),
        .Q(r_miss_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Miss.Empty_Inst_i_1 
       (.I0(r_miss_fifo_almost_empty),
        .I1(r_miss_push),
        .I2(r_miss_refresh),
        .I3(r_miss_fifo_empty),
        .O(\Use_FPGA_Flag_Miss.Empty_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Full_Inst_i_1_n_0 ),
        .Q(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Miss.Full_Inst_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_almost_full),
        .I2(r_miss_refresh),
        .I3(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .O(\Use_FPGA_Flag_Miss.Full_Inst_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_3 
       (.I0(r_read_fifo_addr[1]),
        .I1(r_read_fifo_addr[0]),
        .O(r_next_fifo_addr__18[1]));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT5 #(
    .INIT(32'h7F403FC0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_2 
       (.I0(I5),
        .I1(r_read_fifo_addr[1]),
        .I2(r_read_fifo_addr[0]),
        .I3(r_read_fifo_addr[2]),
        .I4(r_read_fifo_addr[3]),
        .O(r_next_fifo_addr__18[2]));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT5 #(
    .INIT(32'h7F7FC000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_3 
       (.I0(I5),
        .I1(r_read_fifo_addr[1]),
        .I2(r_read_fifo_addr[0]),
        .I3(r_read_fifo_addr[2]),
        .I4(r_read_fifo_addr[3]),
        .O(r_next_fifo_addr__18[3]));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_6),
        .Q(r_read_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_1),
        .Q(r_read_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_2),
        .Q(r_read_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_3),
        .Q(r_read_fifo_addr[3]),
        .R(Q));
  FDRE \Use_Rd_Ctrl_Pipeline.ri_hit_reg 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .Q(I5),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_prohibit_quick[0]_i_1 
       (.I0(\read_data_status[0,0][Hit_Fit] ),
        .I1(rd_port_ready_cmb_0),
        .I2(access_piperun),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_fifo_len[0]_i_1__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .O(\r_hit_fifo_len[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_hit_fifo_len[1]_i_1__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .I2(r_hit_fifo_len_reg[1]),
        .O(\r_hit_fifo_len[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_hit_fifo_len[2]_i_1__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .I2(r_hit_fifo_len_reg[2]),
        .I3(r_hit_fifo_len_reg[1]),
        .O(\r_hit_fifo_len[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_hit_fifo_len[3]_i_1__0 
       (.I0(\lud_reg_valid_one_hot_reg[0] ),
        .I1(r_hit_fifo_len_reg[0]),
        .I2(r_hit_fifo_len_reg[1]),
        .I3(r_hit_fifo_len_reg[3]),
        .I4(r_hit_fifo_len_reg[2]),
        .O(\r_hit_fifo_len[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[0]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[1]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[2]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[3]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_read_fifo_addr[0]_i_1__0 
       (.I0(r_hit_read_fifo_addr[0]),
        .O(\r_hit_read_fifo_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_read_fifo_addr[1]_i_1__0 
       (.I0(r_hit_read_fifo_addr[0]),
        .I1(r_hit_read_fifo_addr[1]),
        .O(\r_hit_read_fifo_addr[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h7708)) 
    \r_hit_read_fifo_addr[2]_i_1__0 
       (.I0(r_hit_read_fifo_addr[0]),
        .I1(r_hit_read_fifo_addr[1]),
        .I2(r_hit_read_fifo_addr[3]),
        .I3(r_hit_read_fifo_addr[2]),
        .O(\r_hit_read_fifo_addr[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h7870)) 
    \r_hit_read_fifo_addr[3]_i_1__0 
       (.I0(r_hit_read_fifo_addr[0]),
        .I1(r_hit_read_fifo_addr[1]),
        .I2(r_hit_read_fifo_addr[3]),
        .I3(r_hit_read_fifo_addr[2]),
        .O(\r_hit_read_fifo_addr[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[0]_i_1__0_n_0 ),
        .Q(r_hit_read_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[1]_i_1__0_n_0 ),
        .Q(r_hit_read_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[2]_i_1__0_n_0 ),
        .Q(r_hit_read_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[3]_i_1__0_n_0 ),
        .Q(r_hit_read_fifo_addr[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_write_fifo_addr[0]_i_1 
       (.I0(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_write_fifo_addr[1]_i_1 
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'h2A6A)) 
    \r_hit_write_fifo_addr[2]_i_1 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    \r_hit_write_fifo_addr[3]_i_1 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[0] ),
        .D(\r_hit_write_fifo_addr[0]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[0] ),
        .D(\r_hit_write_fifo_addr[1]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[0] ),
        .D(\r_hit_write_fifo_addr[2]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[0] ),
        .D(\r_hit_write_fifo_addr[3]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_miss_fifo_len[0]_i_1__0 
       (.I0(r_miss_fifo_len_reg[0]),
        .O(\r_miss_fifo_len[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_miss_fifo_len[1]_i_1__0 
       (.I0(r_miss_fifo_len_reg[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[1]),
        .O(\r_miss_fifo_len[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_miss_fifo_len[2]_i_1__0 
       (.I0(r_miss_fifo_len_reg[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[2]),
        .I3(r_miss_fifo_len_reg[1]),
        .O(\r_miss_fifo_len[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_miss_fifo_len[3]_i_1__0 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_len_reg[0]),
        .I2(r_miss_fifo_len_reg[1]),
        .I3(r_miss_fifo_len_reg[3]),
        .I4(r_miss_fifo_len_reg[2]),
        .O(\r_miss_fifo_len[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[0]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[1]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[2]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[3]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \r_miss_read_fifo_addr[0]_i_1 
       (.I0(I5),
        .I1(r_pop_safe_i),
        .I2(r_miss_full_fifo_addr[0]),
        .O(\r_miss_read_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'hF708)) 
    \r_miss_read_fifo_addr[1]_i_1 
       (.I0(r_miss_full_fifo_addr[0]),
        .I1(r_pop_safe_i),
        .I2(I5),
        .I3(r_miss_full_fifo_addr[1]),
        .O(\r_miss_read_fifo_addr[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_read_fifo_addr[0]_i_1_n_0 ),
        .Q(r_miss_full_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_read_fifo_addr[1]_i_1_n_0 ),
        .Q(r_miss_full_fifo_addr[1]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_miss_write_fifo_addr[0]_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_write_fifo_addr[0]),
        .O(\r_miss_write_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_miss_write_fifo_addr[1]_i_1 
       (.I0(r_miss_write_fifo_addr[0]),
        .I1(r_miss_push),
        .I2(r_miss_write_fifo_addr[1]),
        .O(\r_miss_write_fifo_addr[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[0]_i_1_n_0 ),
        .Q(r_miss_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[1]_i_1_n_0 ),
        .Q(r_miss_write_fifo_addr[1]),
        .R(Q));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/ri_fifo_mem_reg[15][Hit] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\lookup_read_data_new[0,0][Valid] ),
        .CLK(ACLK),
        .D(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .Q(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(rip_push_safe),
        .CLK(ACLK),
        .D(S0_AXI_ARID),
        .Q(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(rip_push_safe),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE \rip_id_reg[0] 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S0_AXI_RID),
        .R(Q));
  FDRE rip_last_reg
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(rip_last),
        .R(Q));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rl_fifo_mem_reg_r1_0_15_0_0
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(new_read_data_last_5),
        .DPO(r_hit_last),
        .DPRA0(r_hit_read_fifo_addr[0]),
        .DPRA1(r_hit_read_fifo_addr[1]),
        .DPRA2(r_hit_read_fifo_addr[2]),
        .DPRA3(r_hit_read_fifo_addr[3]),
        .DPRA4(1'b0),
        .SPO(NLW_rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rl_fifo_mem_reg_r2_0_15_0_0
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(new_read_data_last_5),
        .DPO(r_miss_last),
        .DPRA0(r_miss_full_fifo_addr[0]),
        .DPRA1(r_miss_full_fifo_addr[1]),
        .DPRA2(1'b1),
        .DPRA3(1'b1),
        .DPRA4(1'b0),
        .SPO(NLW_rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rr_fifo_mem_reg_0_15_0_0
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(rr_fifo_mem_reg_0_15_0_0_i_1_n_0),
        .DPO(S0_AXI_RRESP[0]),
        .DPRA0(r_read_fifo_addr[0]),
        .DPRA1(r_read_fifo_addr[1]),
        .DPRA2(r_read_fifo_addr[2]),
        .DPRA3(r_read_fifo_addr[3]),
        .DPRA4(1'b0),
        .SPO(NLW_rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_0_0_i_1
       (.I0(M0_AXI_RRESP[0]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .O(rr_fifo_mem_reg_0_15_0_0_i_1_n_0));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rr_fifo_mem_reg_0_15_1_1
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(rr_fifo_mem_reg_0_15_1_1_i_1_n_0),
        .DPO(S0_AXI_RRESP[1]),
        .DPRA0(r_read_fifo_addr[0]),
        .DPRA1(r_read_fifo_addr[1]),
        .DPRA2(r_read_fifo_addr[2]),
        .DPRA3(r_read_fifo_addr[3]),
        .DPRA4(1'b0),
        .SPO(NLW_rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_1_1_i_1
       (.I0(M0_AXI_RRESP[1]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .O(rr_fifo_mem_reg_0_15_1_1_i_1_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M rw_fifo_mem_reg_0_15_0_5
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(\S0_AXI_RDATA[31] [1:0]),
        .DIB(\S0_AXI_RDATA[31] [3:2]),
        .DIC(\S0_AXI_RDATA[31] [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[1:0]),
        .DOB(S0_AXI_RDATA[3:2]),
        .DOC(S0_AXI_RDATA[5:4]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M rw_fifo_mem_reg_0_15_12_17
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(\S0_AXI_RDATA[31] [13:12]),
        .DIB(\S0_AXI_RDATA[31] [15:14]),
        .DIC(\S0_AXI_RDATA[31] [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[13:12]),
        .DOB(S0_AXI_RDATA[15:14]),
        .DOC(S0_AXI_RDATA[17:16]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M rw_fifo_mem_reg_0_15_18_23
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(\S0_AXI_RDATA[31] [19:18]),
        .DIB(\S0_AXI_RDATA[31] [21:20]),
        .DIC(\S0_AXI_RDATA[31] [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[19:18]),
        .DOB(S0_AXI_RDATA[21:20]),
        .DOC(S0_AXI_RDATA[23:22]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M rw_fifo_mem_reg_0_15_24_29
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(\S0_AXI_RDATA[31] [25:24]),
        .DIB(\S0_AXI_RDATA[31] [27:26]),
        .DIC(\S0_AXI_RDATA[31] [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[25:24]),
        .DOB(S0_AXI_RDATA[27:26]),
        .DOC(S0_AXI_RDATA[29:28]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "31" *) 
  RAM32M rw_fifo_mem_reg_0_15_30_31
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(\S0_AXI_RDATA[31] [31:30]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[31:30]),
        .DOB(NLW_rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED[1:0]),
        .DOC(NLW_rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_3__0
       (.I0(r_hit_write_fifo_addr[3]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .O(r_write_fifo_addr[3]));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_4__0
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .O(r_write_fifo_addr[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_5__0
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .I2(r_miss_write_fifo_addr[1]),
        .O(r_write_fifo_addr[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_6__0
       (.I0(r_hit_write_fifo_addr[0]),
        .I1(\lud_reg_valid_one_hot_reg[0] ),
        .I2(r_miss_write_fifo_addr[0]),
        .O(r_write_fifo_addr[0]));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M rw_fifo_mem_reg_0_15_6_11
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(\S0_AXI_RDATA[31] [7:6]),
        .DIB(\S0_AXI_RDATA[31] [9:8]),
        .DIC(\S0_AXI_RDATA[31] [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[7:6]),
        .DOB(S0_AXI_RDATA[9:8]),
        .DOC(S0_AXI_RDATA[11:10]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_r_channel" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_r_channel__parameterized1
   (\read_info_status[0,1][Almost_Full] ,
    \read_info_status[0,1][Full] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ,
    \Use_FPGA.Full_Inst ,
    read_req_ready,
    \lud_reg_valid_one_hot_reg[1] ,
    \Use_FPGA_Flag_Hit.Full_Inst_0 ,
    \Use_FPGA_Flag_Miss.Full_Inst_0 ,
    \read_data_status[0,1][Hit_Fit] ,
    S0_AXI_GEN_RID,
    S0_AXI_GEN_RVALID,
    lud_addr_pipeline_full0,
    A_N,
    S0_AXI_GEN_RLAST,
    S0_AXI_GEN_RDATA,
    S0_AXI_GEN_RRESP,
    Q,
    ACLK,
    \Use_FPGA.Almost_Full_Inst ,
    S0_AXI_GEN_RREADY,
    read_req_valid,
    \lookup_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    \rip_stp_reg[0]_0 ,
    \rd_port_access[1][ID] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_1 ,
    read_req_last,
    read_req_single,
    lud_addr_pipeline_full_reg,
    p_95_in,
    lud_addr_pipeline_full_reg_0,
    lud_addr_pipeline_full_reg_1,
    lud_reg_port_num,
    lud_addr_pipeline_full_reg_2,
    \read_data_status[0,0][Hit_Almost_Full] ,
    lud_addr_pipeline_full_reg_3,
    lud_addr_pipeline_full_reg_4,
    Q0_in,
    lud_addr_pipeline_full,
    M0_AXI_RRESP,
    in,
    \Read_External_Narrow.rd_rest_reg[1]_0 ,
    \Read_External_Narrow.rd_length_reg[7]_0 ,
    new_read_data_word,
    new_read_data_last);
  output \read_info_status[0,1][Almost_Full] ;
  output \read_info_status[0,1][Full] ;
  output \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  output \Use_FPGA.Full_Inst ;
  output read_req_ready;
  output \lud_reg_valid_one_hot_reg[1] ;
  output \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  output \Use_FPGA_Flag_Miss.Full_Inst_0 ;
  output \read_data_status[0,1][Hit_Fit] ;
  output [0:0]S0_AXI_GEN_RID;
  output S0_AXI_GEN_RVALID;
  output lud_addr_pipeline_full0;
  output A_N;
  output S0_AXI_GEN_RLAST;
  output [31:0]S0_AXI_GEN_RDATA;
  output [1:0]S0_AXI_GEN_RRESP;
  input Q;
  input ACLK;
  input \Use_FPGA.Almost_Full_Inst ;
  input S0_AXI_GEN_RREADY;
  input read_req_valid;
  input \lookup_read_data_info[0,1][Valid] ;
  input \update_read_data_info[0,1][Valid] ;
  input \rip_stp_reg[0]_0 ;
  input [0:0]\rd_port_access[1][ID] ;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg_1 ;
  input read_req_last;
  input read_req_single;
  input lud_addr_pipeline_full_reg;
  input p_95_in;
  input [0:0]lud_addr_pipeline_full_reg_0;
  input lud_addr_pipeline_full_reg_1;
  input lud_reg_port_num;
  input lud_addr_pipeline_full_reg_2;
  input \read_data_status[0,0][Hit_Almost_Full] ;
  input lud_addr_pipeline_full_reg_3;
  input [0:0]lud_addr_pipeline_full_reg_4;
  input Q0_in;
  input lud_addr_pipeline_full;
  input [1:0]M0_AXI_RRESP;
  input [1:0]in;
  input [1:0]\Read_External_Narrow.rd_rest_reg[1]_0 ;
  input [7:0]\Read_External_Narrow.rd_length_reg[7]_0 ;
  input [31:0]new_read_data_word;
  input new_read_data_last;

  wire A29_out;
  wire ACLK;
  wire A_N;
  wire D;
  wire FIFO_RIP_Pointer_n_10;
  wire FIFO_RIP_Pointer_n_11;
  wire FIFO_RIP_Pointer_n_12;
  wire FIFO_RIP_Pointer_n_13;
  wire FIFO_RIP_Pointer_n_14;
  wire FIFO_RIP_Pointer_n_15;
  wire FIFO_RIP_Pointer_n_16;
  wire FIFO_RIP_Pointer_n_17;
  wire FIFO_RIP_Pointer_n_18;
  wire FIFO_RIP_Pointer_n_9;
  wire FIFO_RI_Pointer_n_2;
  wire I4;
  wire I5;
  wire [1:0]M0_AXI_RRESP;
  wire Q;
  wire Q0_in;
  wire RC_And_Inst5_n_1;
  wire RC_And_Inst5_n_2;
  wire RC_And_Inst5_n_3;
  wire RC_And_Inst5_n_5;
  wire RC_And_Inst5_n_6;
  wire RC_And_Inst5_n_7;
  wire RC_And_Inst5_n_8;
  wire RC_And_Inst6_n_1;
  wire \Read_External_Narrow.rd_length[4]_i_2_n_0 ;
  wire \Read_External_Narrow.rd_length[5]_i_2_n_0 ;
  wire \Read_External_Narrow.rd_length[7]_i_2_n_0 ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[7]_0 ;
  wire [1:0]\Read_External_Narrow.rd_rest_reg[1]_0 ;
  wire \Read_External_Narrow.rd_rest_reg_n_0_[0] ;
  wire \Read_External_Narrow.rd_rest_reg_n_0_[1] ;
  wire [31:0]S0_AXI_GEN_RDATA;
  wire [0:0]S0_AXI_GEN_RID;
  wire S0_AXI_GEN_RLAST;
  wire S0_AXI_GEN_RREADY;
  wire [1:0]S0_AXI_GEN_RRESP;
  wire S0_AXI_GEN_RVALID;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Full_Inst_0 ;
  wire \Use_FPGA_Flag_Miss.Full_Inst_i_1__0_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg_1 ;
  wire [1:0]in;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_i_7_n_0;
  wire lud_addr_pipeline_full_reg;
  wire [0:0]lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire lud_addr_pipeline_full_reg_2;
  wire lud_addr_pipeline_full_reg_3;
  wire [0:0]lud_addr_pipeline_full_reg_4;
  wire lud_reg_port_num;
  wire \lud_reg_valid_one_hot_reg[1] ;
  wire new_read_data_last;
  wire [31:0]new_read_data_word;
  wire p_3_out__2;
  wire p_4_out__2;
  wire p_95_in;
  wire queue_almost_empty_next__12;
  wire queue_almost_empty_next__13;
  wire queue_almost_full_next__10;
  wire queue_almost_full_next__11;
  wire [3:0]queue_index;
  wire r_hit_fifo_almost_empty;
  wire \r_hit_fifo_len[0]_i_1_n_0 ;
  wire \r_hit_fifo_len[1]_i_1_n_0 ;
  wire \r_hit_fifo_len[2]_i_1_n_0 ;
  wire \r_hit_fifo_len[3]_i_1_n_0 ;
  wire [3:0]r_hit_fifo_len_reg;
  wire r_hit_last;
  wire [3:0]r_hit_read_fifo_addr;
  wire \r_hit_read_fifo_addr[0]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr[1]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr[2]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr[3]_i_1_n_0 ;
  wire r_hit_refresh;
  wire [3:0]r_hit_write_fifo_addr;
  wire \r_hit_write_fifo_addr[0]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr[1]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr[2]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr[3]_i_1__0_n_0 ;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_almost_full;
  wire r_miss_fifo_empty;
  wire \r_miss_fifo_len[0]_i_1_n_0 ;
  wire \r_miss_fifo_len[1]_i_1_n_0 ;
  wire \r_miss_fifo_len[2]_i_1_n_0 ;
  wire \r_miss_fifo_len[3]_i_1_n_0 ;
  wire [3:0]r_miss_fifo_len_reg;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_last;
  wire r_miss_push;
  wire r_miss_refresh;
  wire [1:0]r_miss_write_fifo_addr;
  wire \r_miss_write_fifo_addr[0]_i_1_n_0 ;
  wire \r_miss_write_fifo_addr[1]_i_1_n_0 ;
  wire [3:1]r_next_fifo_addr__18;
  wire r_pop;
  wire r_pop_safe_i;
  wire r_pop_valid;
  wire r_push_safe;
  wire [3:0]r_read_fifo_addr;
  wire [3:0]r_write_fifo_addr;
  wire rd_done;
  wire [7:0]rd_length;
  wire rd_length_zero;
  wire rd_pop;
  wire [0:0]\rd_port_access[1][ID] ;
  wire rd_rest;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Fit] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire read_req_last;
  wire read_req_ready;
  wire read_req_single;
  wire read_req_valid;
  wire ri_exist;
  wire \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ;
  wire ri_refresh_reg;
  wire \rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][1]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][2]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][3]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][4]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][5]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][6]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Len][7]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Rest][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Rest][1]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Single][-1111111111]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ;
  wire rip_last;
  wire rip_pop;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire rip_single;
  wire [1:0]rip_stp;
  wire \rip_stp_reg[0]_0 ;
  wire rr_fifo_mem_reg_0_15_0_0_i_1__0_n_0;
  wire rr_fifo_mem_reg_0_15_1_1_i_1__0_n_0;
  wire \update_read_data_info[0,1][Valid] ;
  wire \NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ;
  wire NLW_rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED;
  wire NLW_rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED;
  wire NLW_rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED;
  wire NLW_rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED;
  wire [1:0]NLW_rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED;

  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized5_20 FIFO_RIP_Pointer
       (.A29_out(A29_out),
        .ACLK(ACLK),
        .D({FIFO_RIP_Pointer_n_9,FIFO_RIP_Pointer_n_10}),
        .E(rd_rest),
        .I4(I4),
        .I5(I5),
        .Q(Q),
        .Q0_in(Q0_in),
        .\Read_External_Narrow.rd_length_reg[4] (\Read_External_Narrow.rd_length[4]_i_2_n_0 ),
        .\Read_External_Narrow.rd_length_reg[5] (\Read_External_Narrow.rd_length[5]_i_2_n_0 ),
        .\Read_External_Narrow.rd_length_reg[6] ({FIFO_RIP_Pointer_n_11,FIFO_RIP_Pointer_n_12,FIFO_RIP_Pointer_n_13,FIFO_RIP_Pointer_n_14,FIFO_RIP_Pointer_n_15,FIFO_RIP_Pointer_n_16,FIFO_RIP_Pointer_n_17,FIFO_RIP_Pointer_n_18}),
        .\Read_External_Narrow.rd_length_reg[6]_0 (\Read_External_Narrow.rd_length[7]_i_2_n_0 ),
        .\Read_External_Narrow.rd_length_reg[7] ({\rip_fifo_mem_reg[15][Len][7]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][6]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][5]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][4]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][3]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][2]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][1]_srl16_n_0 ,\rip_fifo_mem_reg[15][Len][0]_srl16_n_0 }),
        .\Read_External_Narrow.rd_length_reg[7]_0 (rd_length),
        .\Read_External_Narrow.rd_rest_reg[1] ({\Read_External_Narrow.rd_rest_reg_n_0_[1] ,\Read_External_Narrow.rd_rest_reg_n_0_[0] }),
        .\Read_External_Narrow.rd_rest_reg[1]_0 (rip_stp),
        .S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .out({\rip_fifo_mem_reg[15][Rest][1]_srl16_n_0 ,\rip_fifo_mem_reg[15][Rest][0]_srl16_n_0 }),
        .r_miss_fifo_empty(r_miss_fifo_empty),
        .read_req_ready(read_req_ready),
        .read_req_valid(read_req_valid),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop),
        .rip_read_fifo_addr(rip_read_fifo_addr),
        .rip_refresh_reg(rip_refresh_reg));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_21 FIFO_RI_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Empty_Inst_0 (FIFO_RI_Pointer_n_2),
        .queue_index(queue_index),
        .\read_info_status[0,1][Almost_Full] (\read_info_status[0,1][Almost_Full] ),
        .\read_info_status[0,1][Full] (\read_info_status[0,1][Full] ),
        .ri_exist(ri_exist),
        .ri_refresh_reg(ri_refresh_reg),
        .rip_pop(rip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_and_22 RC_And_Inst3
       (.A29_out(A29_out),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(S0_AXI_GEN_RREADY),
        .lopt_3(lopt_8),
        .lopt_4(lopt_9),
        .lopt_5(lopt_10),
        .lopt_6(lopt_11),
        .lopt_7(lopt_12),
        .lopt_8(lopt_13),
        .r_pop_valid(r_pop_valid),
        .rd_done(rd_done));
  Fast_IP_Clock_system_cache_0_0_carry_and_23 RC_And_Inst4
       (.S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .r_pop(r_pop),
        .r_pop_valid(r_pop_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_24 RC_And_Inst5
       (.I4(I4),
        .I5(I5),
        .Q(r_hit_read_fifo_addr),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] (RC_And_Inst5_n_6),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (RC_And_Inst5_n_8),
        .\Use_Reg_Ctrl.queue_exist_i_reg (RC_And_Inst5_n_1),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (RC_And_Inst5_n_5),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .lopt_2(lopt_10),
        .p_3_out__2(p_3_out__2),
        .\r_hit_read_fifo_addr_reg[2] (RC_And_Inst5_n_2),
        .\r_hit_read_fifo_addr_reg[3] (RC_And_Inst5_n_3),
        .r_miss_fifo_almost_empty(r_miss_fifo_almost_empty),
        .r_miss_fifo_empty(r_miss_fifo_empty),
        .r_miss_full_fifo_addr(r_miss_full_fifo_addr),
        .r_miss_push(r_miss_push),
        .\r_miss_read_fifo_addr_reg[0] (RC_And_Inst5_n_7),
        .r_next_fifo_addr__18(r_next_fifo_addr__18),
        .r_pop(r_pop),
        .r_pop_safe_i(r_pop_safe_i),
        .r_read_fifo_addr(r_read_fifo_addr[0]),
        .ri_exist(ri_exist),
        .ri_refresh_reg(ri_refresh_reg),
        .rip_pop(rip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_and_25 RC_And_Inst6
       (.I5(I5),
        .Q(Q),
        .\Use_FPGA.Empty_Inst (RC_And_Inst6_n_1),
        .\Use_FPGA_2.S_AXI_RVALID_reg (FIFO_RI_Pointer_n_2),
        .\Use_FPGA_2.S_AXI_RVALID_reg_0 (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_2(lopt_13),
        .p_3_out__2(p_3_out__2),
        .p_4_out__2(p_4_out__2),
        .r_hit_last(r_hit_last),
        .r_miss_last(r_miss_last),
        .r_pop_safe_i(r_pop_safe_i),
        .ri_exist(ri_exist),
        .ri_refresh_reg(ri_refresh_reg),
        .rip_pop(rip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_26 RC_Latch_Inst1
       (.E(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .I4(I4),
        .I5(I5),
        .\Use_FPGA_2.S_AXI_RVALID_i_2__0 (\lud_reg_valid_one_hot_reg[1] ),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg),
        .lud_addr_pipeline_full_reg_0(lud_addr_pipeline_full_i_7_n_0),
        .lud_addr_pipeline_full_reg_1(lud_addr_pipeline_full_reg_0),
        .lud_addr_pipeline_full_reg_2(lud_addr_pipeline_full_reg_1),
        .lud_addr_pipeline_full_reg_3(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .lud_addr_pipeline_full_reg_4(lud_addr_pipeline_full_reg_2),
        .lud_addr_pipeline_full_reg_5(lud_addr_pipeline_full_reg_3),
        .lud_addr_pipeline_full_reg_6(lud_addr_pipeline_full_reg_4),
        .lud_reg_port_num(lud_reg_port_num),
        .p_4_out__2(p_4_out__2),
        .p_95_in(p_95_in),
        .r_hit_fifo_almost_empty(r_hit_fifo_almost_empty),
        .r_pop_safe_i(r_pop_safe_i),
        .\read_data_status[0,0][Hit_Almost_Full] (\read_data_status[0,0][Hit_Almost_Full] ),
        .\read_data_status[0,1][Hit_Almost_Full] (\read_data_status[0,1][Hit_Almost_Full] ));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const__parameterized1 \Read_External_Narrow.RC_And_Inst1 
       (.Q(rd_length),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .rd_length_zero(rd_length_zero));
  Fast_IP_Clock_system_cache_0_0_carry_or_27 \Read_External_Narrow.RC_Or_Inst1 
       (.Q({\Read_External_Narrow.rd_rest_reg_n_0_[1] ,\Read_External_Narrow.rd_rest_reg_n_0_[0] }),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .rd_length_zero(rd_length_zero),
        .rd_pop(rd_pop));
  Fast_IP_Clock_system_cache_0_0_carry_or_28 \Read_External_Narrow.RC_Or_Inst2 
       (.I5(I5),
        .S0_AXI_GEN_RLAST(S0_AXI_GEN_RLAST),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .r_hit_last(r_hit_last),
        .r_miss_last(r_miss_last),
        .rd_done(rd_done),
        .rd_pop(rd_pop),
        .rip_last(rip_last),
        .rip_single(rip_single));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Read_External_Narrow.rd_length[4]_i_2 
       (.I0(rd_length[2]),
        .I1(rd_length[0]),
        .I2(rd_length[1]),
        .I3(rd_length[3]),
        .O(\Read_External_Narrow.rd_length[4]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Read_External_Narrow.rd_length[5]_i_2 
       (.I0(rd_length[3]),
        .I1(rd_length[1]),
        .I2(rd_length[0]),
        .I3(rd_length[2]),
        .I4(rd_length[4]),
        .O(\Read_External_Narrow.rd_length[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \Read_External_Narrow.rd_length[7]_i_2 
       (.I0(rd_length[4]),
        .I1(rd_length[2]),
        .I2(rd_length[0]),
        .I3(rd_length[1]),
        .I4(rd_length[3]),
        .I5(rd_length[5]),
        .O(\Read_External_Narrow.rd_length[7]_i_2_n_0 ));
  FDRE \Read_External_Narrow.rd_length_reg[0] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_18),
        .Q(rd_length[0]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[1] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_17),
        .Q(rd_length[1]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[2] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_16),
        .Q(rd_length[2]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[3] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_15),
        .Q(rd_length[3]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[4] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_14),
        .Q(rd_length[4]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[5] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_13),
        .Q(rd_length[5]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[6] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_12),
        .Q(rd_length[6]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_length_reg[7] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_11),
        .Q(rd_length[7]),
        .R(Q));
  FDRE \Read_External_Narrow.rd_rest_reg[0] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_10),
        .Q(\Read_External_Narrow.rd_rest_reg_n_0_[0] ),
        .R(Q));
  FDRE \Read_External_Narrow.rd_rest_reg[1] 
       (.C(ACLK),
        .CE(rd_rest),
        .D(FIFO_RIP_Pointer_n_9),
        .Q(\Read_External_Narrow.rd_rest_reg_n_0_[1] ),
        .R(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2222D22222222222)) 
    \Use_FPGA_1.LUT_Hit_Inst 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I2(r_pop),
        .I3(I5),
        .I4(I4),
        .I5(1'b1),
        .O5(\lud_reg_valid_one_hot_reg[1] ),
        .O6(r_hit_refresh));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2F222F220D000D00)) 
    \Use_FPGA_1.LUT_Push_Inst 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I2(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .I3(\update_read_data_info[0,1][Valid] ),
        .I4(1'b0),
        .I5(1'b1),
        .O5(r_miss_push),
        .O6(r_push_safe));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0D000D00F2FF0D00)) 
    \Use_FPGA_1.LUT_Refresh_Inst 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I2(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .I3(\update_read_data_info[0,1][Valid] ),
        .I4(r_pop_safe_i),
        .I5(I5),
        .O5(\NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ),
        .O6(r_miss_refresh));
  FDRE \Use_FPGA_2.S_AXI_RVALID_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(RC_And_Inst6_n_1),
        .Q(S0_AXI_GEN_RVALID),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0_n_0 ),
        .Q(r_hit_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0 
       (.I0(queue_almost_empty_next__13),
        .I1(r_hit_refresh),
        .I2(r_hit_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_2__0 
       (.I0(I4),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_hit_fifo_len_reg[3]),
        .I3(r_hit_fifo_len_reg[2]),
        .I4(r_hit_fifo_len_reg[1]),
        .I5(r_hit_fifo_len_reg[0]),
        .O(queue_almost_empty_next__13));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_data_status[0,1][Hit_Almost_Full] ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_1__0 
       (.I0(queue_almost_full_next__10),
        .I1(r_hit_refresh),
        .I2(\read_data_status[0,1][Hit_Almost_Full] ),
        .O(D));
  LUT6 #(
    .INIT(64'h1000FFFF10000000)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_2__0 
       (.I0(r_hit_fifo_len_reg[1]),
        .I1(r_hit_fifo_len_reg[2]),
        .I2(r_hit_fifo_len_reg[0]),
        .I3(r_hit_fifo_len_reg[3]),
        .I4(\lud_reg_valid_one_hot_reg[1] ),
        .I5(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .O(queue_almost_full_next__10));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Empty_Inst_i_1__0_n_0 ),
        .Q(I4),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Hit.Empty_Inst_i_1__0 
       (.I0(r_hit_fifo_almost_empty),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_hit_refresh),
        .I3(I4),
        .O(\Use_FPGA_Flag_Hit.Empty_Inst_i_1__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Full_Inst_i_1__0_n_0 ),
        .Q(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Hit.Full_Inst_i_1__0 
       (.I0(\read_data_status[0,1][Hit_Almost_Full] ),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_hit_refresh),
        .I3(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .O(\Use_FPGA_Flag_Hit.Full_Inst_i_1__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0_n_0 ),
        .Q(\read_data_status[0,1][Hit_Fit] ),
        .S(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0 
       (.I0(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ),
        .I1(r_hit_refresh),
        .I2(\read_data_status[0,1][Hit_Fit] ),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT5 #(
    .INIT(32'h0111FFFF)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0 
       (.I0(\lud_reg_valid_one_hot_reg[1] ),
        .I1(r_hit_fifo_len_reg[2]),
        .I2(r_hit_fifo_len_reg[1]),
        .I3(r_hit_fifo_len_reg[0]),
        .I4(r_hit_fifo_len_reg[3]),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0_n_0 ),
        .Q(r_miss_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0 
       (.I0(queue_almost_empty_next__12),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_2__0 
       (.I0(r_miss_fifo_empty),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[3]),
        .I3(r_miss_fifo_len_reg[2]),
        .I4(r_miss_fifo_len_reg[1]),
        .I5(r_miss_fifo_len_reg[0]),
        .O(queue_almost_empty_next__12));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0_n_0 ),
        .Q(r_miss_fifo_almost_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0 
       (.I0(queue_almost_full_next__11),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_full),
        .O(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0010FFFF00100000)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_2__0 
       (.I0(r_miss_fifo_len_reg[3]),
        .I1(r_miss_fifo_len_reg[2]),
        .I2(r_miss_fifo_len_reg[0]),
        .I3(r_miss_fifo_len_reg[1]),
        .I4(r_miss_push),
        .I5(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .O(queue_almost_full_next__11));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Miss.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Empty_Inst_i_1__0_n_0 ),
        .Q(r_miss_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Miss.Empty_Inst_i_1__0 
       (.I0(r_miss_fifo_almost_empty),
        .I1(r_miss_push),
        .I2(r_miss_refresh),
        .I3(r_miss_fifo_empty),
        .O(\Use_FPGA_Flag_Miss.Empty_Inst_i_1__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Full_Inst_i_1__0_n_0 ),
        .Q(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Miss.Full_Inst_i_1__0 
       (.I0(r_miss_fifo_almost_full),
        .I1(r_miss_push),
        .I2(r_miss_refresh),
        .I3(\Use_FPGA_Flag_Miss.Full_Inst_0 ),
        .O(\Use_FPGA_Flag_Miss.Full_Inst_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_3__0 
       (.I0(r_read_fifo_addr[1]),
        .I1(r_read_fifo_addr[0]),
        .O(r_next_fifo_addr__18[1]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT5 #(
    .INIT(32'h7F403FC0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_2__0 
       (.I0(I5),
        .I1(r_read_fifo_addr[1]),
        .I2(r_read_fifo_addr[0]),
        .I3(r_read_fifo_addr[2]),
        .I4(r_read_fifo_addr[3]),
        .O(r_next_fifo_addr__18[2]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT5 #(
    .INIT(32'h7F7FC000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_3__0 
       (.I0(I5),
        .I1(r_read_fifo_addr[1]),
        .I2(r_read_fifo_addr[0]),
        .I3(r_read_fifo_addr[2]),
        .I4(r_read_fifo_addr[3]),
        .O(r_next_fifo_addr__18[3]));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_6),
        .Q(r_read_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_1),
        .Q(r_read_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_2),
        .Q(r_read_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_3),
        .Q(r_read_fifo_addr[3]),
        .R(Q));
  FDRE \Use_Rd_Ctrl_Pipeline.ri_hit_reg 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .Q(I5),
        .R(Q));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__105 
       (.I0(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I1(lud_reg_port_num),
        .O(A_N));
  LUT4 #(
    .INIT(16'hB800)) 
    lud_addr_pipeline_full_i_7
       (.I0(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I1(lud_reg_port_num),
        .I2(lud_addr_pipeline_full_reg_2),
        .I3(lud_addr_pipeline_full),
        .O(lud_addr_pipeline_full_i_7_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_fifo_len[0]_i_1 
       (.I0(r_hit_fifo_len_reg[0]),
        .O(\r_hit_fifo_len[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_hit_fifo_len[1]_i_1 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_hit_fifo_len_reg[1]),
        .O(\r_hit_fifo_len[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_hit_fifo_len[2]_i_1 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_hit_fifo_len_reg[2]),
        .I3(r_hit_fifo_len_reg[1]),
        .O(\r_hit_fifo_len[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_hit_fifo_len[3]_i_1 
       (.I0(\lud_reg_valid_one_hot_reg[1] ),
        .I1(r_hit_fifo_len_reg[0]),
        .I2(r_hit_fifo_len_reg[1]),
        .I3(r_hit_fifo_len_reg[3]),
        .I4(r_hit_fifo_len_reg[2]),
        .O(\r_hit_fifo_len[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[0]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[1]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[2]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[3]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_read_fifo_addr[0]_i_1 
       (.I0(r_hit_read_fifo_addr[0]),
        .O(\r_hit_read_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_read_fifo_addr[1]_i_1 
       (.I0(r_hit_read_fifo_addr[0]),
        .I1(r_hit_read_fifo_addr[1]),
        .O(\r_hit_read_fifo_addr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT4 #(
    .INIT(16'h7708)) 
    \r_hit_read_fifo_addr[2]_i_1 
       (.I0(r_hit_read_fifo_addr[0]),
        .I1(r_hit_read_fifo_addr[1]),
        .I2(r_hit_read_fifo_addr[3]),
        .I3(r_hit_read_fifo_addr[2]),
        .O(\r_hit_read_fifo_addr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT4 #(
    .INIT(16'h7870)) 
    \r_hit_read_fifo_addr[3]_i_1 
       (.I0(r_hit_read_fifo_addr[0]),
        .I1(r_hit_read_fifo_addr[1]),
        .I2(r_hit_read_fifo_addr[3]),
        .I3(r_hit_read_fifo_addr[2]),
        .O(\r_hit_read_fifo_addr[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .D(\r_hit_read_fifo_addr[0]_i_1_n_0 ),
        .Q(r_hit_read_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .D(\r_hit_read_fifo_addr[1]_i_1_n_0 ),
        .Q(r_hit_read_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .D(\r_hit_read_fifo_addr[2]_i_1_n_0 ),
        .Q(r_hit_read_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .D(\r_hit_read_fifo_addr[3]_i_1_n_0 ),
        .Q(r_hit_read_fifo_addr[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_write_fifo_addr[0]_i_1__0 
       (.I0(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_write_fifo_addr[1]_i_1__0 
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'h2A6A)) 
    \r_hit_write_fifo_addr[2]_i_1__0 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    \r_hit_write_fifo_addr[3]_i_1__0 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[1] ),
        .D(\r_hit_write_fifo_addr[0]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[1] ),
        .D(\r_hit_write_fifo_addr[1]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[1] ),
        .D(\r_hit_write_fifo_addr[2]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(\lud_reg_valid_one_hot_reg[1] ),
        .D(\r_hit_write_fifo_addr[3]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_miss_fifo_len[0]_i_1 
       (.I0(r_miss_fifo_len_reg[0]),
        .O(\r_miss_fifo_len[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_miss_fifo_len[1]_i_1 
       (.I0(r_miss_fifo_len_reg[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[1]),
        .O(\r_miss_fifo_len[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_miss_fifo_len[2]_i_1 
       (.I0(r_miss_fifo_len_reg[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[2]),
        .I3(r_miss_fifo_len_reg[1]),
        .O(\r_miss_fifo_len[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_miss_fifo_len[3]_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_len_reg[0]),
        .I2(r_miss_fifo_len_reg[1]),
        .I3(r_miss_fifo_len_reg[3]),
        .I4(r_miss_fifo_len_reg[2]),
        .O(\r_miss_fifo_len[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[0]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[1]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[2]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[3]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg[3]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(RC_And_Inst5_n_8),
        .Q(r_miss_full_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(RC_And_Inst5_n_7),
        .Q(r_miss_full_fifo_addr[1]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_miss_write_fifo_addr[0]_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_write_fifo_addr[0]),
        .O(\r_miss_write_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_miss_write_fifo_addr[1]_i_1 
       (.I0(r_miss_write_fifo_addr[0]),
        .I1(r_miss_push),
        .I2(r_miss_write_fifo_addr[1]),
        .O(\r_miss_write_fifo_addr[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[0]_i_1_n_0 ),
        .Q(r_miss_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[1]_i_1_n_0 ),
        .Q(r_miss_write_fifo_addr[1]),
        .R(Q));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/ri_fifo_mem_reg[15][Hit] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\Use_FPGA.Almost_Full_Inst ),
        .CLK(ACLK),
        .D(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_1 ),
        .Q(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\rd_port_access[1][ID] ),
        .Q(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(read_req_last),
        .Q(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [0]),
        .Q(\rip_fifo_mem_reg[15][Len][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [1]),
        .Q(\rip_fifo_mem_reg[15][Len][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [2]),
        .Q(\rip_fifo_mem_reg[15][Len][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [3]),
        .Q(\rip_fifo_mem_reg[15][Len][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [4]),
        .Q(\rip_fifo_mem_reg[15][Len][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [5]),
        .Q(\rip_fifo_mem_reg[15][Len][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [6]),
        .Q(\rip_fifo_mem_reg[15][Len][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_length_reg[7]_0 [7]),
        .Q(\rip_fifo_mem_reg[15][Len][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Rest] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Rest][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Rest][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_rest_reg[1]_0 [0]),
        .Q(\rip_fifo_mem_reg[15][Rest][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Rest] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Rest][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Rest][1]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(\Read_External_Narrow.rd_rest_reg[1]_0 [1]),
        .Q(\rip_fifo_mem_reg[15][Rest][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Single] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Single][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Single][-1111111111]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(read_req_single),
        .Q(\rip_fifo_mem_reg[15][Single][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Stp_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Stp_Bits][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(in[0]),
        .Q(\rip_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Stp_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Stp_Bits][1]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(\rip_stp_reg[0]_0 ),
        .CLK(ACLK),
        .D(in[1]),
        .Q(\rip_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ));
  FDRE \rip_id_reg[0] 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S0_AXI_GEN_RID),
        .R(Q));
  FDRE rip_last_reg
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(rip_last),
        .R(Q));
  FDRE rip_single_reg
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Single][-1111111111]_srl16_n_0 ),
        .Q(rip_single),
        .R(Q));
  FDRE \rip_stp_reg[0] 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(rip_stp[0]),
        .R(Q));
  FDRE \rip_stp_reg[1] 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .Q(rip_stp[1]),
        .R(Q));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rl_fifo_mem_reg_r1_0_15_0_0
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(new_read_data_last),
        .DPO(r_hit_last),
        .DPRA0(r_hit_read_fifo_addr[0]),
        .DPRA1(r_hit_read_fifo_addr[1]),
        .DPRA2(r_hit_read_fifo_addr[2]),
        .DPRA3(r_hit_read_fifo_addr[3]),
        .DPRA4(1'b0),
        .SPO(NLW_rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rl_fifo_mem_reg_r2_0_15_0_0
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(new_read_data_last),
        .DPO(r_miss_last),
        .DPRA0(r_miss_full_fifo_addr[0]),
        .DPRA1(r_miss_full_fifo_addr[1]),
        .DPRA2(1'b1),
        .DPRA3(1'b1),
        .DPRA4(1'b0),
        .SPO(NLW_rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rr_fifo_mem_reg_0_15_0_0
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(rr_fifo_mem_reg_0_15_0_0_i_1__0_n_0),
        .DPO(S0_AXI_GEN_RRESP[0]),
        .DPRA0(r_read_fifo_addr[0]),
        .DPRA1(r_read_fifo_addr[1]),
        .DPRA2(r_read_fifo_addr[2]),
        .DPRA3(r_read_fifo_addr[3]),
        .DPRA4(1'b0),
        .SPO(NLW_rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_0_0_i_1__0
       (.I0(M0_AXI_RRESP[0]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .O(rr_fifo_mem_reg_0_15_0_0_i_1__0_n_0));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    rr_fifo_mem_reg_0_15_1_1
       (.A0(r_write_fifo_addr[0]),
        .A1(r_write_fifo_addr[1]),
        .A2(r_write_fifo_addr[2]),
        .A3(r_write_fifo_addr[3]),
        .A4(1'b0),
        .D(rr_fifo_mem_reg_0_15_1_1_i_1__0_n_0),
        .DPO(S0_AXI_GEN_RRESP[1]),
        .DPRA0(r_read_fifo_addr[0]),
        .DPRA1(r_read_fifo_addr[1]),
        .DPRA2(r_read_fifo_addr[2]),
        .DPRA3(r_read_fifo_addr[3]),
        .DPRA4(1'b0),
        .SPO(NLW_rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED),
        .WCLK(ACLK),
        .WE(r_push_safe));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_1_1_i_1__0
       (.I0(M0_AXI_RRESP[1]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .O(rr_fifo_mem_reg_0_15_1_1_i_1__0_n_0));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Generic_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M rw_fifo_mem_reg_0_15_0_5
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(new_read_data_word[1:0]),
        .DIB(new_read_data_word[3:2]),
        .DIC(new_read_data_word[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_GEN_RDATA[1:0]),
        .DOB(S0_AXI_GEN_RDATA[3:2]),
        .DOC(S0_AXI_GEN_RDATA[5:4]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Generic_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M rw_fifo_mem_reg_0_15_12_17
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(new_read_data_word[13:12]),
        .DIB(new_read_data_word[15:14]),
        .DIC(new_read_data_word[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_GEN_RDATA[13:12]),
        .DOB(S0_AXI_GEN_RDATA[15:14]),
        .DOC(S0_AXI_GEN_RDATA[17:16]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Generic_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M rw_fifo_mem_reg_0_15_18_23
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(new_read_data_word[19:18]),
        .DIB(new_read_data_word[21:20]),
        .DIC(new_read_data_word[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_GEN_RDATA[19:18]),
        .DOB(S0_AXI_GEN_RDATA[21:20]),
        .DOC(S0_AXI_GEN_RDATA[23:22]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Generic_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M rw_fifo_mem_reg_0_15_24_29
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(new_read_data_word[25:24]),
        .DIB(new_read_data_word[27:26]),
        .DIC(new_read_data_word[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_GEN_RDATA[25:24]),
        .DOB(S0_AXI_GEN_RDATA[27:26]),
        .DOC(S0_AXI_GEN_RDATA[29:28]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Generic_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "31" *) 
  RAM32M rw_fifo_mem_reg_0_15_30_31
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(new_read_data_word[31:30]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_GEN_RDATA[31:30]),
        .DOB(NLW_rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED[1:0]),
        .DOC(NLW_rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_3
       (.I0(r_hit_write_fifo_addr[3]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .O(r_write_fifo_addr[3]));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_4
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .O(r_write_fifo_addr[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_5
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_miss_write_fifo_addr[1]),
        .O(r_write_fifo_addr[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_6
       (.I0(r_hit_write_fifo_addr[0]),
        .I1(\lud_reg_valid_one_hot_reg[1] ),
        .I2(r_miss_write_fifo_addr[0]),
        .O(r_write_fifo_addr[0]));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "FE/Use_Generic_Port_0.AXI_0/R_Channel/rw_fifo_mem" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M rw_fifo_mem_reg_0_15_6_11
       (.ADDRA({1'b0,r_read_fifo_addr}),
        .ADDRB({1'b0,r_read_fifo_addr}),
        .ADDRC({1'b0,r_read_fifo_addr}),
        .ADDRD({1'b0,r_write_fifo_addr}),
        .DIA(new_read_data_word[7:6]),
        .DIB(new_read_data_word[9:8]),
        .DIC(new_read_data_word[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_GEN_RDATA[7:6]),
        .DOB(S0_AXI_GEN_RDATA[9:8]),
        .DOC(S0_AXI_GEN_RDATA[11:10]),
        .DOD(NLW_rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(ACLK),
        .WE(r_push_safe));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_w_channel" *) 
module Fast_IP_Clock_system_cache_0_0_sc_s_axi_w_channel
   (queue_almost_full,
    wip_fifo_full,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    wc_fifo_empty,
    write_fail_completed,
    \wr_port_data_info_reg[0][Last]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    D,
    \wr_port_data_info_reg[0][Data][31]_0 ,
    A_3,
    DATA_INA,
    S0_AXI_GEN_WREADY,
    \wr_port_data_info_reg[0][Last]_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    Q,
    ACLK,
    \wip_len_reg[7]_0 ,
    S0_AXI_GEN_WVALID,
    wc_ready,
    S_4,
    write_req_failed,
    wm_port,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \update_wma_data_reg[31] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    wr_port_data_ready,
    queue_done,
    \access_data_info[0,0][Last] ,
    update_wm_pop_normal_hold_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    in,
    S0_AXI_GEN_WSTRB,
    S0_AXI_GEN_WDATA);
  output queue_almost_full;
  output wip_fifo_full;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output wc_fifo_empty;
  output write_fail_completed;
  output \wr_port_data_info_reg[0][Last]_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [31:0]D;
  output [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  output A_3;
  output [31:0]DATA_INA;
  output S0_AXI_GEN_WREADY;
  output \wr_port_data_info_reg[0][Last]_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input Q;
  input ACLK;
  input \wip_len_reg[7]_0 ;
  input S0_AXI_GEN_WVALID;
  input wc_ready;
  input S_4;
  input write_req_failed;
  input wm_port;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input [31:0]\update_wma_data_reg[31] ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input wr_port_data_ready;
  input queue_done;
  input \access_data_info[0,0][Last] ;
  input update_wm_pop_normal_hold_reg;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input [7:0]in;
  input [3:0]S0_AXI_GEN_WSTRB;
  input [31:0]S0_AXI_GEN_WDATA;

  wire ACLK;
  wire A_3;
  wire [0:0]A_Vec;
  wire [31:0]D;
  wire [31:0]DATA_INA;
  wire D_0;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire Q;
  wire S;
  wire [31:0]S0_AXI_GEN_WDATA;
  wire S0_AXI_GEN_WREADY;
  wire [3:0]S0_AXI_GEN_WSTRB;
  wire S0_AXI_GEN_WVALID;
  wire S_4;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[3].sel_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire WC_And_Inst2_n_1;
  wire WC_And_Inst3_n_1;
  wire \access_data_info[0,0][Last] ;
  wire first_wr_word;
  wire [3:0]fit_vec;
  wire [7:0]in;
  wire \len_cnt[1]_i_1_n_0 ;
  wire \len_cnt[2]_i_1_n_0 ;
  wire \len_cnt[3]_i_1_n_0 ;
  wire \len_cnt[3]_i_2_n_0 ;
  wire \len_cnt[4]_i_1_n_0 ;
  wire \len_cnt[4]_i_2_n_0 ;
  wire \len_cnt[5]_i_1_n_0 ;
  wire \len_cnt[5]_i_2_n_0 ;
  wire \len_cnt[6]_i_1_n_0 ;
  wire \len_cnt[6]_i_2_n_0 ;
  wire \len_cnt[7]_i_1_n_0 ;
  wire \len_cnt[7]_i_2_n_0 ;
  wire [7:0]len_cnt_reg;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [0:0]minusOp;
  wire queue_almost_full;
  wire queue_done;
  wire [3:0]queue_index;
  wire refresh_counter02_out;
  wire update_wm_pop_normal_hold_reg;
  wire [31:0]\update_wma_data_reg[31] ;
  wire w_fail_ready;
  wire w_fifo_empty;
  wire \w_fifo_mem_reg[15][Data][0]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][10]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][11]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][12]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][13]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][14]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][15]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][16]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][17]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][18]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][19]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][1]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][20]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][21]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][22]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][23]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][24]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][25]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][26]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][27]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][28]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][29]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][2]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][30]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][31]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][3]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][4]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][5]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][6]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][7]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][8]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][9]_srl16_n_0 ;
  wire w_pop;
  wire w_pop_part;
  wire w_pop_safe;
  wire [3:0]w_read_fifo_addr;
  wire w_ready;
  wire wc_fifo_empty;
  wire wc_ready;
  wire wip_exist;
  wire wip_failed;
  wire wip_fifo_full;
  wire \wip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][0]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][1]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][2]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][3]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][4]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][5]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][6]_srl16_n_0 ;
  wire \wip_fifo_mem_reg[15][Len][7]_srl16_n_0 ;
  wire [7:0]wip_len;
  wire \wip_len_reg[7]_0 ;
  wire wip_pop;
  wire wip_refresh_reg;
  wire wm_port;
  wire \wr_port_data_info[0][Last]_i_2_n_0 ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  wire \wr_port_data_info_reg[0][Last]_0 ;
  wire \wr_port_data_info_reg[0][Last]_1 ;
  wire wr_port_data_ready;
  wire write_fail_completed;
  wire write_fail_completed0;
  wire write_req_failed;

  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_6 FIFO_WC_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .wc_fifo_empty(wc_fifo_empty),
        .wc_ready(wc_ready),
        .wip_pop(wip_pop));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized9 FIFO_WIP_Pointer
       (.ACLK(ACLK),
        .D_0(D_0),
        .E(wip_refresh_reg),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 (\wip_len_reg[7]_0 ),
        .\Use_FPGA.Full_Inst_0 (wip_fifo_full),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_18),
        .lopt_4(lopt_19),
        .queue_almost_full(queue_almost_full),
        .queue_done(queue_done),
        .queue_index(queue_index),
        .w_fifo_empty(w_fifo_empty),
        .w_pop(w_pop),
        .wip_exist(wip_exist),
        .wip_failed(wip_failed),
        .wip_pop(wip_pop),
        .wr_port_data_ready(wr_port_data_ready));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter_7 FIFO_W_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .S(S),
        .S0_AXI_GEN_WREADY(S0_AXI_GEN_WREADY),
        .S0_AXI_GEN_WVALID(S0_AXI_GEN_WVALID),
        .refresh_counter02_out(refresh_counter02_out),
        .w_fifo_empty(w_fifo_empty),
        .w_pop(w_pop),
        .w_read_fifo_addr(w_read_fifo_addr));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_23 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [15]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [15]),
        .O(DATA_INA[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_24 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [14]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [14]),
        .O(DATA_INA[14]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_25 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [13]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [13]),
        .O(DATA_INA[13]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_26 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [12]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [12]),
        .O(DATA_INA[12]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_27 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [11]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [11]),
        .O(DATA_INA[11]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_28 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [10]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [10]),
        .O(DATA_INA[10]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_29 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [9]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [9]),
        .O(DATA_INA[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_30 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [8]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [8]),
        .O(DATA_INA[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_31 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [7]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [7]),
        .O(DATA_INA[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_32 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [6]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [6]),
        .O(DATA_INA[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_33 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [5]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [5]),
        .O(DATA_INA[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_34 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [4]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [4]),
        .O(DATA_INA[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_35 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [3]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [3]),
        .O(DATA_INA[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_36 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [2]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [2]),
        .O(DATA_INA[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_37 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [1]),
        .O(DATA_INA[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_38 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [0]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [0]),
        .O(DATA_INA[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [31]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [31]),
        .O(DATA_INA[31]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_10 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [22]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [22]),
        .O(DATA_INA[22]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_11 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [21]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [21]),
        .O(DATA_INA[21]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_12 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [20]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [20]),
        .O(DATA_INA[20]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_13 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [19]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [19]),
        .O(DATA_INA[19]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_14 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [18]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [18]),
        .O(DATA_INA[18]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_15 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [17]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [17]),
        .O(DATA_INA[17]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_16 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [16]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [16]),
        .O(DATA_INA[16]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_2 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [30]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [30]),
        .O(DATA_INA[30]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_3 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [29]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [29]),
        .O(DATA_INA[29]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_4 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [28]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [28]),
        .O(DATA_INA[28]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_5 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [27]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [27]),
        .O(DATA_INA[27]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_6 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [26]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [26]),
        .O(DATA_INA[26]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_7 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [25]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [25]),
        .O(DATA_INA[25]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_8 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [24]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [24]),
        .O(DATA_INA[24]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_9 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [23]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_wma_data_reg[31] [23]),
        .O(DATA_INA[23]));
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__20 Valid_Inst
       (.ACLK(ACLK),
        .A_3(A_3),
        .D_0(D_0),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (\wr_port_data_info_reg[0][Last]_0 ),
        .\Using_FPGA.MUXCY_I (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .wm_port(wm_port));
  Fast_IP_Clock_system_cache_0_0_carry_and_8 WC_And_Inst1
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S_4),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt_6(lopt_4),
        .lopt_7(lopt_5),
        .w_fail_ready(w_fail_ready),
        .wip_exist(wip_exist),
        .wip_failed(wip_failed));
  Fast_IP_Clock_system_cache_0_0_carry_and_9 WC_And_Inst2
       (.Q(Q),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .\The_Compare[3].sel_reg (\The_Compare[3].sel_reg ),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .w_pop(w_pop),
        .w_pop_part(w_pop_part),
        .wip_exist(wip_exist),
        .\wr_port_data_info_reg[0][Last] (WC_And_Inst2_n_1),
        .\wr_port_data_info_reg[0][Last]_0 (\wr_port_data_info_reg[0][Last]_0 ),
        .\wr_port_data_info_reg[0][Last]_1 (\wr_port_data_info[0][Last]_i_2_n_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_10 WC_And_Inst3
       (.E(w_pop),
        .Q(Q),
        .S(S),
        .first_wr_word(first_wr_word),
        .first_wr_word_reg(WC_And_Inst3_n_1),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .w_pop_safe(w_pop_safe),
        .wip_pop(wip_pop));
  Fast_IP_Clock_system_cache_0_0_carry_compare_const WC_And_Inst4
       (.Q(wip_len),
        .first_wr_word(first_wr_word),
        .len_cnt_reg(len_cnt_reg),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_10(lopt_16),
        .lopt_11(wip_exist),
        .lopt_12(lopt_17),
        .lopt_13(lopt_18),
        .lopt_14(lopt_19),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(lopt_11),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .lopt_9(lopt_15),
        .w_pop_safe(w_pop_safe),
        .wip_failed(wip_failed),
        .wip_pop(wip_pop),
        .write_fail_completed0(write_fail_completed0));
  Fast_IP_Clock_system_cache_0_0_carry_or_11 WC_Or_Inst1
       (.S_4(S_4),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .w_fail_ready(w_fail_ready),
        .w_ready(w_ready));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_12 WC_Or_Inst2
       (.lopt(lopt_2),
        .lopt_1(lopt_3),
        .w_pop_part(w_pop_part),
        .w_ready(w_ready),
        .\wr_port_data_info_reg[0][Data][0] (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  FDRE first_wr_word_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(WC_And_Inst3_n_1),
        .Q(first_wr_word),
        .R(1'b0));
  LUT3 #(
    .INIT(8'h1D)) 
    \len_cnt[0]_i_1 
       (.I0(len_cnt_reg[0]),
        .I1(first_wr_word),
        .I2(wip_len[0]),
        .O(minusOp));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \len_cnt[1]_i_1 
       (.I0(len_cnt_reg[0]),
        .I1(wip_len[0]),
        .I2(len_cnt_reg[1]),
        .I3(first_wr_word),
        .I4(wip_len[1]),
        .O(\len_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \len_cnt[2]_i_1 
       (.I0(wip_len[1]),
        .I1(len_cnt_reg[1]),
        .I2(A_Vec),
        .I3(len_cnt_reg[2]),
        .I4(first_wr_word),
        .I5(wip_len[2]),
        .O(\len_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \len_cnt[2]_i_2 
       (.I0(wip_len[0]),
        .I1(first_wr_word),
        .I2(len_cnt_reg[0]),
        .O(A_Vec));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \len_cnt[3]_i_1 
       (.I0(wip_len[2]),
        .I1(len_cnt_reg[2]),
        .I2(\len_cnt[3]_i_2_n_0 ),
        .I3(len_cnt_reg[3]),
        .I4(first_wr_word),
        .I5(wip_len[3]),
        .O(\len_cnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \len_cnt[3]_i_2 
       (.I0(len_cnt_reg[0]),
        .I1(wip_len[0]),
        .I2(len_cnt_reg[1]),
        .I3(first_wr_word),
        .I4(wip_len[1]),
        .O(\len_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \len_cnt[4]_i_1 
       (.I0(wip_len[3]),
        .I1(len_cnt_reg[3]),
        .I2(\len_cnt[4]_i_2_n_0 ),
        .I3(len_cnt_reg[4]),
        .I4(first_wr_word),
        .I5(wip_len[4]),
        .O(\len_cnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \len_cnt[4]_i_2 
       (.I0(wip_len[1]),
        .I1(len_cnt_reg[1]),
        .I2(A_Vec),
        .I3(len_cnt_reg[2]),
        .I4(first_wr_word),
        .I5(wip_len[2]),
        .O(\len_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \len_cnt[5]_i_1 
       (.I0(wip_len[4]),
        .I1(len_cnt_reg[4]),
        .I2(\len_cnt[5]_i_2_n_0 ),
        .I3(len_cnt_reg[5]),
        .I4(first_wr_word),
        .I5(wip_len[5]),
        .O(\len_cnt[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \len_cnt[5]_i_2 
       (.I0(wip_len[2]),
        .I1(len_cnt_reg[2]),
        .I2(\len_cnt[3]_i_2_n_0 ),
        .I3(len_cnt_reg[3]),
        .I4(first_wr_word),
        .I5(wip_len[3]),
        .O(\len_cnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \len_cnt[6]_i_1 
       (.I0(wip_len[5]),
        .I1(len_cnt_reg[5]),
        .I2(\len_cnt[6]_i_2_n_0 ),
        .I3(len_cnt_reg[6]),
        .I4(first_wr_word),
        .I5(wip_len[6]),
        .O(\len_cnt[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \len_cnt[6]_i_2 
       (.I0(wip_len[3]),
        .I1(len_cnt_reg[3]),
        .I2(\len_cnt[4]_i_2_n_0 ),
        .I3(len_cnt_reg[4]),
        .I4(first_wr_word),
        .I5(wip_len[4]),
        .O(\len_cnt[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \len_cnt[7]_i_1 
       (.I0(wip_len[6]),
        .I1(len_cnt_reg[6]),
        .I2(\len_cnt[7]_i_2_n_0 ),
        .I3(len_cnt_reg[7]),
        .I4(first_wr_word),
        .I5(wip_len[7]),
        .O(\len_cnt[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \len_cnt[7]_i_2 
       (.I0(wip_len[4]),
        .I1(len_cnt_reg[4]),
        .I2(\len_cnt[5]_i_2_n_0 ),
        .I3(len_cnt_reg[5]),
        .I4(first_wr_word),
        .I5(wip_len[5]),
        .O(\len_cnt[7]_i_2_n_0 ));
  FDRE \len_cnt_reg[0] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(minusOp),
        .Q(len_cnt_reg[0]),
        .R(Q));
  FDRE \len_cnt_reg[1] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[1]_i_1_n_0 ),
        .Q(len_cnt_reg[1]),
        .R(Q));
  FDRE \len_cnt_reg[2] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[2]_i_1_n_0 ),
        .Q(len_cnt_reg[2]),
        .R(Q));
  FDRE \len_cnt_reg[3] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[3]_i_1_n_0 ),
        .Q(len_cnt_reg[3]),
        .R(Q));
  FDRE \len_cnt_reg[4] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[4]_i_1_n_0 ),
        .Q(len_cnt_reg[4]),
        .R(Q));
  FDRE \len_cnt_reg[5] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[5]_i_1_n_0 ),
        .Q(len_cnt_reg[5]),
        .R(Q));
  FDRE \len_cnt_reg[6] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[6]_i_1_n_0 ),
        .Q(len_cnt_reg[6]),
        .R(Q));
  FDRE \len_cnt_reg[7] 
       (.C(ACLK),
        .CE(w_pop_safe),
        .D(\len_cnt[7]_i_1_n_0 ),
        .Q(len_cnt_reg[7]),
        .R(Q));
  LUT4 #(
    .INIT(16'h00B8)) 
    update_wm_pop_normal_hold_i_2
       (.I0(\wr_port_data_info_reg[0][Last]_0 ),
        .I1(wm_port),
        .I2(\access_data_info[0,0][Last] ),
        .I3(update_wm_pop_normal_hold_reg),
        .O(\wr_port_data_info_reg[0][Last]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[0]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [0]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[10]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [10]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [10]),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[11]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [11]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [11]),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[12]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [12]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [12]),
        .O(D[12]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[13]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [13]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [13]),
        .O(D[13]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[14]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [14]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [14]),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[15]_i_2 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [15]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [15]),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[16]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [16]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [16]),
        .O(D[16]));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[17]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [17]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [17]),
        .O(D[17]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[18]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [18]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [18]),
        .O(D[18]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[19]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [19]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [19]),
        .O(D[19]));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[1]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [1]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[20]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [20]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [20]),
        .O(D[20]));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[21]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [21]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [21]),
        .O(D[21]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[22]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [22]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [22]),
        .O(D[22]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[23]_i_2 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [23]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [23]),
        .O(D[23]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[24]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [24]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [24]),
        .O(D[24]));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[25]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [25]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [25]),
        .O(D[25]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[26]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [26]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [26]),
        .O(D[26]));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[27]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [27]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [27]),
        .O(D[27]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[28]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [28]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [28]),
        .O(D[28]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[29]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [29]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [29]),
        .O(D[29]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[2]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [2]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[30]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [30]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [30]),
        .O(D[30]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[31]_i_2 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [31]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [31]),
        .O(D[31]));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[3]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [3]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[4]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [4]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[5]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [5]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[6]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [6]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[7]_i_2 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [7]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[8]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [8]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [8]),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wma_data[9]_i_1 
       (.I0(\wr_port_data_info_reg[0][Data][31]_0 [9]),
        .I1(wm_port),
        .I2(\update_wma_data_reg[31] [9]),
        .O(D[9]));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WSTRB[0]),
        .Q(fit_vec[0]));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WSTRB[1]),
        .Q(fit_vec[1]));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WSTRB[2]),
        .Q(fit_vec[2]));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][BE][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WSTRB[3]),
        .Q(fit_vec[3]));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[0]),
        .Q(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][10]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[10]),
        .Q(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][11]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[11]),
        .Q(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][12]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[12]),
        .Q(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][13]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[13]),
        .Q(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][14]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[14]),
        .Q(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][15]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[15]),
        .Q(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][16]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[16]),
        .Q(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][17]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[17]),
        .Q(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][18]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[18]),
        .Q(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][19]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[19]),
        .Q(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[1]),
        .Q(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][20]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[20]),
        .Q(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][21]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[21]),
        .Q(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][22]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[22]),
        .Q(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][23]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[23]),
        .Q(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][24]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[24]),
        .Q(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][25]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[25]),
        .Q(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][26]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[26]),
        .Q(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][27]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[27]),
        .Q(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][28]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[28]),
        .Q(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][29]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[29]),
        .Q(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[2]),
        .Q(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][30]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[30]),
        .Q(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][31]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[31]),
        .Q(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[3]),
        .Q(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][4]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[4]),
        .Q(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][5]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[5]),
        .Q(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][6]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[6]),
        .Q(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][7]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[7]),
        .Q(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][8]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[8]),
        .Q(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/w_fifo_mem_reg[15][Data][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][9]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(refresh_counter02_out),
        .CLK(ACLK),
        .D(S0_AXI_GEN_WDATA[9]),
        .Q(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ));
  FDRE wip_failed_reg
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ),
        .Q(wip_failed),
        .R(Q));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Failed] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Failed][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Failed][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(write_req_failed),
        .Q(\wip_fifo_mem_reg[15][Failed][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[0]),
        .Q(\wip_fifo_mem_reg[15][Len][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[1]),
        .Q(\wip_fifo_mem_reg[15][Len][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[2]),
        .Q(\wip_fifo_mem_reg[15][Len][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[3]),
        .Q(\wip_fifo_mem_reg[15][Len][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[4]),
        .Q(\wip_fifo_mem_reg[15][Len][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[5]),
        .Q(\wip_fifo_mem_reg[15][Len][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[6]),
        .Q(\wip_fifo_mem_reg[15][Len][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\FE/Use_Generic_Port_0.AXI_0/W_Channel/wip_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wip_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\wip_len_reg[7]_0 ),
        .CLK(ACLK),
        .D(in[7]),
        .Q(\wip_fifo_mem_reg[15][Len][7]_srl16_n_0 ));
  FDRE \wip_len_reg[0] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][0]_srl16_n_0 ),
        .Q(wip_len[0]),
        .R(Q));
  FDRE \wip_len_reg[1] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][1]_srl16_n_0 ),
        .Q(wip_len[1]),
        .R(Q));
  FDRE \wip_len_reg[2] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][2]_srl16_n_0 ),
        .Q(wip_len[2]),
        .R(Q));
  FDRE \wip_len_reg[3] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][3]_srl16_n_0 ),
        .Q(wip_len[3]),
        .R(Q));
  FDRE \wip_len_reg[4] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][4]_srl16_n_0 ),
        .Q(wip_len[4]),
        .R(Q));
  FDRE \wip_len_reg[5] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][5]_srl16_n_0 ),
        .Q(wip_len[5]),
        .R(Q));
  FDRE \wip_len_reg[6] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][6]_srl16_n_0 ),
        .Q(wip_len[6]),
        .R(Q));
  FDRE \wip_len_reg[7] 
       (.C(ACLK),
        .CE(wip_refresh_reg),
        .D(\wip_fifo_mem_reg[15][Len][7]_srl16_n_0 ),
        .Q(wip_len[7]),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFAFFCACFFFFFFFF)) 
    \wr_port_data_info[0][Last]_i_2 
       (.I0(wip_len[3]),
        .I1(len_cnt_reg[3]),
        .I2(first_wr_word),
        .I3(wip_len[2]),
        .I4(len_cnt_reg[2]),
        .I5(\The_Compare[0].sel_reg ),
        .O(\wr_port_data_info[0][Last]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00053035)) 
    \wr_port_data_info[0][Last]_i_3 
       (.I0(len_cnt_reg[6]),
        .I1(wip_len[6]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[7]),
        .I4(wip_len[7]),
        .O(\The_Compare[3].sel_reg ));
  LUT5 #(
    .INIT(32'h00053035)) 
    \wr_port_data_info[0][Last]_i_4 
       (.I0(len_cnt_reg[4]),
        .I1(wip_len[4]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[5]),
        .I4(wip_len[5]),
        .O(\The_Compare[2].sel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT5 #(
    .INIT(32'h00053035)) 
    \wr_port_data_info[0][Last]_i_5 
       (.I0(len_cnt_reg[0]),
        .I1(wip_len[0]),
        .I2(first_wr_word),
        .I3(len_cnt_reg[1]),
        .I4(wip_len[1]),
        .O(\The_Compare[0].sel_reg ));
  FDRE \wr_port_data_info_reg[0][BE][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[0]),
        .Q(\wr_port_data_info_reg[0][BE][3]_0 [0]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][BE][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[1]),
        .Q(\wr_port_data_info_reg[0][BE][3]_0 [1]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][BE][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[2]),
        .Q(\wr_port_data_info_reg[0][BE][3]_0 [2]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][BE][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[3]),
        .Q(\wr_port_data_info_reg[0][BE][3]_0 [3]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [0]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][10] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [10]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][11] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [11]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][12] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [12]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][13] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [13]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][14] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [14]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][15] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [15]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][16] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [16]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][17] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [17]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][18] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [18]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][19] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [19]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [1]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][20] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [20]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][21] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [21]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][22] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [22]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][23] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [23]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][24] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [24]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][25] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [25]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][26] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [26]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][27] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [27]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][28] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [28]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][29] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [29]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [2]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][30] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [30]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][31] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [31]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [3]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][4] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [4]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][5] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [5]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][6] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [6]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][7] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [7]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][8] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [8]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Data][9] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ),
        .Q(\wr_port_data_info_reg[0][Data][31]_0 [9]),
        .R(Q));
  FDRE \wr_port_data_info_reg[0][Last] 
       (.C(ACLK),
        .CE(1'b1),
        .D(WC_And_Inst2_n_1),
        .Q(\wr_port_data_info_reg[0][Last]_0 ),
        .R(1'b0));
  FDRE write_fail_completed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(write_fail_completed0),
        .Q(write_fail_completed),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter
   (w_read_fifo_addr,
    wr_port_data_valid_i_reg,
    queue_push,
    S0_AXI_WREADY,
    refresh_counter02_out,
    Q,
    ACLK,
    w_pop,
    S0_AXI_WVALID,
    wr_port_data_valid_i_reg_0,
    wr_port_data_valid_i_reg_1,
    S0_AXI_WLAST);
  output [3:0]w_read_fifo_addr;
  output wr_port_data_valid_i_reg;
  output queue_push;
  output S0_AXI_WREADY;
  output refresh_counter02_out;
  input Q;
  input ACLK;
  input w_pop;
  input S0_AXI_WVALID;
  input wr_port_data_valid_i_reg_0;
  input wr_port_data_valid_i_reg_1;
  input S0_AXI_WLAST;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire S0_AXI_WVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__16_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__7_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__12_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__11_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_full_next;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire refresh_counter02_out;
  wire w_fifo_empty;
  wire w_fifo_full;
  wire w_pop;
  wire [3:0]w_read_fifo_addr;
  wire wr_port_data_valid_i_reg;
  wire wr_port_data_valid_i_reg_0;
  wire wr_port_data_valid_i_reg_1;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT1 #(
    .INIT(2'h1)) 
    S0_AXI_WREADY_INST_0
       (.I0(w_fifo_full),
        .O(S0_AXI_WREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__16_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFFCEFEF20CC2020)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__16 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__7_n_0 ),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(w_fifo_full),
        .I4(S0_AXI_WVALID),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__16_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__7 
       (.I0(w_read_fifo_addr[3]),
        .I1(w_read_fifo_addr[2]),
        .I2(w_read_fifo_addr[0]),
        .I3(w_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__7_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFBAEFEF208A2020)) 
    \Use_FPGA.Almost_Full_Inst_i_1__11 
       (.I0(queue_almost_full_next),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(w_fifo_full),
        .I4(S0_AXI_WVALID),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFF10000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__6 
       (.I0(w_read_fifo_addr[0]),
        .I1(w_read_fifo_addr[1]),
        .I2(w_read_fifo_addr[3]),
        .I3(w_read_fifo_addr[2]),
        .I4(S0_AXI_WVALID),
        .I5(w_fifo_full),
        .O(queue_almost_full_next));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT3 #(
    .INIT(8'h20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__2 
       (.I0(S0_AXI_WLAST),
        .I1(w_fifo_full),
        .I2(S0_AXI_WVALID),
        .O(queue_push));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(w_read_fifo_addr[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(w_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(w_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(w_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__12_n_0 ),
        .Q(w_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT5 #(
    .INIT(32'hEC00ECEC)) 
    \Use_FPGA.Empty_Inst_i_1__12 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(w_fifo_full),
        .I4(S0_AXI_WVALID),
        .O(\Use_FPGA.Empty_Inst_i_1__12_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__11_n_0 ),
        .Q(w_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT5 #(
    .INIT(32'hCF8ACF00)) 
    \Use_FPGA.Full_Inst_i_1__11 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(w_fifo_full),
        .I4(S0_AXI_WVALID),
        .O(\Use_FPGA.Full_Inst_i_1__11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \w_fifo_mem_reg[15][Last][-1111111111]_srl16_i_1 
       (.I0(S0_AXI_WVALID),
        .I1(w_fifo_full),
        .O(refresh_counter02_out));
  LUT5 #(
    .INIT(32'h0000330A)) 
    wr_port_data_valid_i_i_1
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(w_fifo_empty),
        .I2(wr_port_data_valid_i_reg_1),
        .I3(w_pop),
        .I4(Q),
        .O(wr_port_data_valid_i_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter_7
   (w_fifo_empty,
    w_read_fifo_addr,
    S,
    S0_AXI_GEN_WREADY,
    refresh_counter02_out,
    Q,
    ACLK,
    w_pop,
    S0_AXI_GEN_WVALID);
  output w_fifo_empty;
  output [3:0]w_read_fifo_addr;
  output S;
  output S0_AXI_GEN_WREADY;
  output refresh_counter02_out;
  input Q;
  input ACLK;
  input w_pop;
  input S0_AXI_GEN_WVALID;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S;
  wire S0_AXI_GEN_WREADY;
  wire S0_AXI_GEN_WVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__19_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__12_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__15_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__14_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_full_next__6;
  wire queue_full;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire refresh_counter02_out;
  wire w_fifo_empty;
  wire w_pop;
  wire [3:0]w_read_fifo_addr;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT1 #(
    .INIT(2'h1)) 
    S0_AXI_GEN_WREADY_INST_0
       (.I0(queue_full),
        .O(S0_AXI_GEN_WREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__19_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFFCEFEF20CC2020)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__19 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__12_n_0 ),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(queue_full),
        .I4(S0_AXI_GEN_WVALID),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__19_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__12 
       (.I0(w_read_fifo_addr[3]),
        .I1(w_read_fifo_addr[2]),
        .I2(w_read_fifo_addr[0]),
        .I3(w_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__12_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFBAEFEF208A2020)) 
    \Use_FPGA.Almost_Full_Inst_i_1__14 
       (.I0(queue_almost_full_next__6),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(queue_full),
        .I4(S0_AXI_GEN_WVALID),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFF10000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__10 
       (.I0(w_read_fifo_addr[0]),
        .I1(w_read_fifo_addr[1]),
        .I2(w_read_fifo_addr[3]),
        .I3(w_read_fifo_addr[2]),
        .I4(S0_AXI_GEN_WVALID),
        .I5(queue_full),
        .O(queue_almost_full_next__6));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(queue_full),
        .I2(w_pop),
        .I3(S0_AXI_GEN_WVALID),
        .I4(w_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(w_read_fifo_addr[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(queue_full),
        .I2(w_pop),
        .I3(S0_AXI_GEN_WVALID),
        .I4(w_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(w_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(queue_full),
        .I2(w_pop),
        .I3(S0_AXI_GEN_WVALID),
        .I4(w_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(w_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(queue_full),
        .I2(w_pop),
        .I3(S0_AXI_GEN_WVALID),
        .I4(w_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(w_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__15_n_0 ),
        .Q(w_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT5 #(
    .INIT(32'hEC00ECEC)) 
    \Use_FPGA.Empty_Inst_i_1__15 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(queue_full),
        .I4(S0_AXI_GEN_WVALID),
        .O(\Use_FPGA.Empty_Inst_i_1__15_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__14_n_0 ),
        .Q(queue_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT5 #(
    .INIT(32'hCF8ACF00)) 
    \Use_FPGA.Full_Inst_i_1__14 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(w_fifo_empty),
        .I2(w_pop),
        .I3(queue_full),
        .I4(S0_AXI_GEN_WVALID),
        .O(\Use_FPGA.Full_Inst_i_1__14_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__155 
       (.I0(w_fifo_empty),
        .O(S));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \w_fifo_mem_reg[15][BE][0]_srl16_i_1 
       (.I0(S0_AXI_GEN_WVALID),
        .I1(queue_full),
        .O(refresh_counter02_out));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized1
   (wc_fifo_empty,
    Q,
    ACLK,
    queue_pop,
    queue_push,
    \Use_FPGA.Empty_Inst_0 ,
    queue_pop7_out,
    refresh_counter02_out,
    S0_AXI_WLAST);
  output wc_fifo_empty;
  input Q;
  input ACLK;
  input queue_pop;
  input queue_push;
  input \Use_FPGA.Empty_Inst_0 ;
  input queue_pop7_out;
  input refresh_counter02_out;
  input S0_AXI_WLAST;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_WLAST;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__10_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__18_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__6_n_0 ;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_di_4;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire cnt_s_5;
  wire queue_pop;
  wire queue_pop7_out;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire read_fifo_addr_next_5;
  wire refresh_counter02_out;
  wire wc_fifo_empty;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__10_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFACFCFCF0AC0C0C0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__10 
       (.I0(wc_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__18_n_0 ),
        .I2(queue_pop),
        .I3(refresh_counter02_out),
        .I4(S0_AXI_WLAST),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__10_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__18 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__18_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_4),
        .O6(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(carry_4),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3:1],carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3:1],cnt_di_4}),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_O_UNCONNECTED [3:2],read_fifo_addr_next_5,read_fifo_addr_next_4}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_S_UNCONNECTED [3:2],cnt_s_5,cnt_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[5].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_5));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_5),
        .Q(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__6_n_0 ),
        .Q(wc_fifo_empty),
        .S(Q));
  LUT6 #(
    .INIT(64'h30EFEFEF00202020)) 
    \Use_FPGA.Empty_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(queue_pop7_out),
        .I3(refresh_counter02_out),
        .I4(S0_AXI_WLAST),
        .I5(wc_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__6_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized12
   (wma_fifo_empty,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 ,
    update_evict_busy_reg,
    update_evict_ongoing90_out,
    wr_port_data_last_i_reg,
    \Use_FPGA.Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    A_N,
    A18_out,
    wr_port_data_last_i_reg_0,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    E,
    DATA_INB,
    Q,
    ACLK,
    O,
    wma_word_done_d1,
    update_evict_busy,
    update_evict_last,
    update_evict_busy_reg_0,
    update_evict_busy_reg_1,
    M0_AXI_RVALID,
    ri_evicted,
    ed_fifo_empty,
    wma_word_done_d1_reg,
    \access_data_info[0,0][Last] ,
    update_wma_last_reg,
    \access_data_info[0,1][Last] ,
    wm_exist,
    \update_wr_offset_cnt_reg[5] ,
    \update_wr_offset_cnt_reg[5]_0 ,
    \update_wr_offset_cnt_reg[5]_1 ,
    write_data_full,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_0 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    wma_merge_done,
    update_wma_last,
    backend_rd_data_pop,
    ri_exist,
    ri_allocate,
    M0_AXI_RDATA,
    wma_merge_done_reg,
    wma_merge_done_reg_0,
    wma_merge_done_reg_1,
    wma_merge_done_reg_2,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_3 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_4 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_5 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_6 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_7 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_7 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_8 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_9 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_10 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_11 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_12 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_13 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_14 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_15 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_16 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_17 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_18 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_19 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_20 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_21 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_22 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_23 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_24 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_25 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_26 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_27 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_28 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_29 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_30 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_31 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_32 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_33 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_34 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_35 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_36 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_37 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_38 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_39 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_40 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_41 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_42 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_43 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_44 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_45 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_46 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_47 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_48 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_49 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_50 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_51 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_52 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_53 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_54 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_55 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_56 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_57 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_58 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_59 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_60 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_61 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_62 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_63 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_64 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_65 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_66 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_67 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_68 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_69 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_70 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_8 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_9 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_10 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_11 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_12 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_13 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_14 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_15 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_16 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_17 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_18 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_19 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_20 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_21 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_22 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_23 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_24 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_25 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_26 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_27 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_28 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_29 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_30 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_31 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_32 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_33 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_34 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_35 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_36 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_37 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_38 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_39 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_40 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_41 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_42 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_43 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_44 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_45 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_46 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_47 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_48 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_49 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_50 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_51 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_52 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_53 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_54 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_55 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_56 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_57 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_58 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_59 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_60 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_61 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_62 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_63 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_64 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_65 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_66 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_67 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_68 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_69 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_70 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_71 );
  output wma_fifo_empty;
  output [6:0]\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 ;
  output update_evict_busy_reg;
  output update_evict_ongoing90_out;
  output wr_port_data_last_i_reg;
  output \Use_FPGA.Full_Inst_0 ;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output A_N;
  output A18_out;
  output wr_port_data_last_i_reg_0;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output [0:0]E;
  output [31:0]DATA_INB;
  input Q;
  input ACLK;
  input O;
  input wma_word_done_d1;
  input update_evict_busy;
  input update_evict_last;
  input update_evict_busy_reg_0;
  input update_evict_busy_reg_1;
  input M0_AXI_RVALID;
  input ri_evicted;
  input ed_fifo_empty;
  input wma_word_done_d1_reg;
  input \access_data_info[0,0][Last] ;
  input update_wma_last_reg;
  input \access_data_info[0,1][Last] ;
  input wm_exist;
  input \update_wr_offset_cnt_reg[5] ;
  input \update_wr_offset_cnt_reg[5]_0 ;
  input \update_wr_offset_cnt_reg[5]_1 ;
  input write_data_full;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_0 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input wma_merge_done;
  input update_wma_last;
  input backend_rd_data_pop;
  input ri_exist;
  input ri_allocate;
  input [31:0]M0_AXI_RDATA;
  input wma_merge_done_reg;
  input wma_merge_done_reg_0;
  input wma_merge_done_reg_1;
  input wma_merge_done_reg_2;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_2 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_3 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_4 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_5 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_6 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_7 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_7 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_8 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_9 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_10 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_11 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_12 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_13 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_14 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_15 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_16 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_17 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_18 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_19 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_20 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_21 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_22 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_23 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_24 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_25 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_26 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_27 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_28 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_29 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_30 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_31 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_32 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_33 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_34 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_35 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_36 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_37 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_38 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_39 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_40 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_41 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_42 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_43 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_44 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_45 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_46 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_47 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_48 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_49 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_50 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_51 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_52 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_53 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_54 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_55 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_56 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_57 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_58 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_59 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_60 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_61 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_62 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_63 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_64 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_65 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_66 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_67 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_68 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_69 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_70 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_8 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_9 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_10 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_11 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_12 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_13 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_14 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_15 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_16 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_17 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_18 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_19 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_20 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_21 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_22 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_23 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_24 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_25 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_26 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_27 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_28 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_29 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_30 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_31 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_32 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_33 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_34 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_35 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_36 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_37 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_38 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_39 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_40 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_41 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_42 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_43 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_44 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_45 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_46 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_47 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_48 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_49 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_50 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_51 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_52 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_53 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_54 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_55 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_56 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_57 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_58 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_59 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_60 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_61 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_62 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_63 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_64 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_65 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_66 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_67 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_68 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_69 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_70 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_71 ;

  wire A18_out;
  wire ACLK;
  wire A_N;
  wire CI;
  wire D;
  wire [31:0]DATA_INB;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RVALID;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_10 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_11 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_12 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_13 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_14 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_15 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_16 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_17 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_18 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_19 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_2 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_20 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_21 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_22 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_23 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_24 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_25 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_26 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_27 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_28 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_29 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_3 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_30 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_31 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_32 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_33 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_34 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_35 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_36 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_37 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_38 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_39 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_4 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_40 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_41 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_42 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_43 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_44 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_45 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_46 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_47 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_48 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_49 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_5 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_50 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_51 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_52 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_53 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_54 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_55 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_56 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_57 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_58 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_59 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_6 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_60 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_61 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_62 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_63 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_64 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_65 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_66 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_67 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_68 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_69 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_7 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_70 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_8 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_9 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_69_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_70_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_71_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_72_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_73_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_74_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_75_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_76_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_10 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_11 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_12 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_13 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_14 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_15 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_16 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_17 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_18 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_19 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_20 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_21 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_22 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_23 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_24 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_25 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_26 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_27 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_28 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_29 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_30 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_31 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_32 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_33 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_34 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_35 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_36 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_37 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_38 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_39 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_40 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_41 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_42 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_43 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_44 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_45 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_46 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_47 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_48 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_49 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_50 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_51 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_52 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_53 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_54 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_55 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_56 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_57 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_58 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_59 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_60 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_61 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_62 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_63 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_64 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_65 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_66 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_67 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_68 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_69 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_7 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_70 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_71 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_8 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_9 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_36_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_37_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_38_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_39_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_40_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_41_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_42_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_43_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__4_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_3_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_3_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_1 ;
  wire [6:0]\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__1_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__2_n_0 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Last] ;
  wire backend_rd_data_pop;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire carry_8;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_di_4;
  wire cnt_di_5;
  wire cnt_di_6;
  wire cnt_di_7;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire cnt_s_5;
  wire cnt_s_6;
  wire cnt_s_7;
  wire cnt_s_8;
  wire ed_fifo_empty;
  wire [7:0]p_4_in;
  wire [7:0]p_7_in;
  wire queue_almost_full;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire read_fifo_addr_next_5;
  wire read_fifo_addr_next_6;
  wire read_fifo_addr_next_7;
  wire read_fifo_addr_next_8;
  wire ri_allocate;
  wire ri_evicted;
  wire ri_exist;
  wire update_evict_busy;
  wire update_evict_busy_reg;
  wire update_evict_busy_reg_0;
  wire update_evict_busy_reg_1;
  wire update_evict_last;
  wire update_evict_ongoing90_out;
  wire update_evict_ongoing_i_3_n_0;
  wire update_wma_data_valid;
  wire update_wma_last;
  wire update_wma_last_reg;
  wire \update_wr_offset_cnt_reg[5] ;
  wire \update_wr_offset_cnt_reg[5]_0 ;
  wire \update_wr_offset_cnt_reg[5]_1 ;
  wire wm_exist;
  wire wma_fifo_empty;
  wire wma_fifo_full;
  wire wma_merge_done;
  wire wma_merge_done_i_2_n_0;
  wire wma_merge_done_reg;
  wire wma_merge_done_reg_0;
  wire wma_merge_done_reg_1;
  wire wma_merge_done_reg_2;
  wire [8:7]wma_read_fifo_addr;
  wire wma_word_done_d1;
  wire wma_word_done_d1_reg;
  wire wr_port_data_last_i_reg;
  wire wr_port_data_last_i_reg_0;
  wire write_data_full;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_S_UNCONNECTED ;

  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_39 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[7]),
        .I4(M0_AXI_RDATA[15]),
        .O(DATA_INB[15]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_40 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[6]),
        .I4(M0_AXI_RDATA[14]),
        .O(DATA_INB[14]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_41 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[5]),
        .I4(M0_AXI_RDATA[13]),
        .O(DATA_INB[13]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[4]),
        .I4(M0_AXI_RDATA[12]),
        .O(DATA_INB[12]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[3]),
        .I4(M0_AXI_RDATA[11]),
        .O(DATA_INB[11]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_44 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[2]),
        .I4(M0_AXI_RDATA[10]),
        .O(DATA_INB[10]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_45 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[1]),
        .I4(M0_AXI_RDATA[9]),
        .O(DATA_INB[9]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_46 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_4_in[0]),
        .I4(M0_AXI_RDATA[8]),
        .O(DATA_INB[8]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_47 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_69_n_0 ),
        .I4(M0_AXI_RDATA[7]),
        .O(DATA_INB[7]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_48 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_70_n_0 ),
        .I4(M0_AXI_RDATA[6]),
        .O(DATA_INB[6]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_49 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_71_n_0 ),
        .I4(M0_AXI_RDATA[5]),
        .O(DATA_INB[5]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_50 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_72_n_0 ),
        .I4(M0_AXI_RDATA[4]),
        .O(DATA_INB[4]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_51 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_73_n_0 ),
        .I4(M0_AXI_RDATA[3]),
        .O(DATA_INB[3]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_52 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_74_n_0 ),
        .I4(M0_AXI_RDATA[2]),
        .O(DATA_INB[2]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_53 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_75_n_0 ),
        .I4(M0_AXI_RDATA[1]),
        .O(DATA_INB[1]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_54 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_76_n_0 ),
        .I4(M0_AXI_RDATA[0]),
        .O(DATA_INB[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_3 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_4 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_5 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_6 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_59_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_60 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_67 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_68 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_69 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_70 ),
        .O(p_4_in[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_61 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_63 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_64 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_65 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_66 ),
        .O(p_4_in[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_62 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_59 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_60 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_61 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_62 ),
        .O(p_4_in[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_63 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_55 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_56 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_57 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_58 ),
        .O(p_4_in[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_64 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_51 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_52 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_53 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_54 ),
        .O(p_4_in[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_65 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_47 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_48 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_49 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_50 ),
        .O(p_4_in[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_66 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_43 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_44 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_45 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_46 ),
        .O(p_4_in[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_67 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_39 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_40 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_41 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_42 ),
        .O(p_4_in[0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_2 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_68_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_69 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_35 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_36 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_37 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_38 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_69_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_70 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_31 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_32 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_33 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_34 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_70_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_71 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_27 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_28 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_29 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_30 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_71_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_72 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_23 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_24 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_25 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_26 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_72_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_73 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_19 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_20 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_21 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_22 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_73_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_74 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_15 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_16 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_17 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_18 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_74_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_75 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_11 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_12 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_13 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_14 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_75_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_76 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_7 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_8 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_9 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_10 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_76_n_0 ));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_17 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_36_n_0 ),
        .I4(M0_AXI_RDATA[31]),
        .O(DATA_INB[31]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_37_n_0 ),
        .I4(M0_AXI_RDATA[30]),
        .O(DATA_INB[30]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_19 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_38_n_0 ),
        .I4(M0_AXI_RDATA[29]),
        .O(DATA_INB[29]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_20 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_39_n_0 ),
        .I4(M0_AXI_RDATA[28]),
        .O(DATA_INB[28]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_21 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_40_n_0 ),
        .I4(M0_AXI_RDATA[27]),
        .O(DATA_INB[27]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_22 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_41_n_0 ),
        .I4(M0_AXI_RDATA[26]),
        .O(DATA_INB[26]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_23 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_42_n_0 ),
        .I4(M0_AXI_RDATA[25]),
        .O(DATA_INB[25]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_24 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_43_n_0 ),
        .I4(M0_AXI_RDATA[24]),
        .O(DATA_INB[24]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_25 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[7]),
        .I4(M0_AXI_RDATA[23]),
        .O(DATA_INB[23]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_26 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[6]),
        .I4(M0_AXI_RDATA[22]),
        .O(DATA_INB[22]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_27 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[5]),
        .I4(M0_AXI_RDATA[21]),
        .O(DATA_INB[21]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_28 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[4]),
        .I4(M0_AXI_RDATA[20]),
        .O(DATA_INB[20]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_29 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[3]),
        .I4(M0_AXI_RDATA[19]),
        .O(DATA_INB[19]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_30 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[2]),
        .I4(M0_AXI_RDATA[18]),
        .O(DATA_INB[18]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_31 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[1]),
        .I4(M0_AXI_RDATA[17]),
        .O(DATA_INB[17]));
  LUT5 #(
    .INIT(32'hFFF70800)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_32 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .I3(p_7_in[0]),
        .I4(M0_AXI_RDATA[16]),
        .O(DATA_INB[16]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_7 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_35_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_36 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_68 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_69 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_70 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_71 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_36_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_37 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_64 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_65 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_66 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_67 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_37_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_38 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_60 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_61 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_62 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_63 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_38_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_39 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_56 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_57 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_58 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_59 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_39_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_40 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_52 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_53 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_54 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_55 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_40_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_41 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_48 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_49 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_50 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_51 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_41_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_42 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_44 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_45 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_46 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_47 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_42_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_43 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_40 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_41 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_42 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_43 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_43_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_44_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_45 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_36 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_37 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_38 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_39 ),
        .O(p_7_in[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_46 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_32 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_33 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_34 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_35 ),
        .O(p_7_in[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_47 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_28 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_29 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_30 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_31 ),
        .O(p_7_in[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_48 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_24 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_25 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_26 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_27 ),
        .O(p_7_in[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_49 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_20 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_21 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_22 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_23 ),
        .O(p_7_in[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_50 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_16 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_17 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_18 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_19 ),
        .O(p_7_in[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_51 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_12 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_13 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_14 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_15 ),
        .O(p_7_in[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_52 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_8 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_9 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_10 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_11 ),
        .O(p_7_in[0]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__4_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCAF0CA0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__4 
       (.I0(wma_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2_n_0 ),
        .I2(wma_word_done_d1),
        .I3(O),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \Use_FPGA.Almost_Empty_Inst_i_2 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_3_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Use_FPGA.Almost_Empty_Inst_i_3 
       (.I0(wma_read_fifo_addr[7]),
        .I1(wma_read_fifo_addr[8]),
        .I2(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_3_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(queue_almost_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT5 #(
    .INIT(32'hFCAF0CA0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__2 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2_n_0 ),
        .I1(wma_fifo_full),
        .I2(wma_word_done_d1),
        .I3(O),
        .I4(queue_almost_full),
        .O(D));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_3_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \Use_FPGA.Almost_Full_Inst_i_3 
       (.I0(wma_read_fifo_addr[7]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .I2(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .O(\Use_FPGA.Almost_Full_Inst_i_3_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .S(Q));
  LUT6 #(
    .INIT(64'hFFFFFFFFEEEE22E2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 
       (.I0(write_data_full),
        .I1(\update_wr_offset_cnt_reg[5]_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_0 ),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .I5(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_1 ),
        .O(\Use_FPGA.Full_Inst_0 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .I5(1'b1),
        .O5(cnt_di_4),
        .O6(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(carry_4),
        .CO({carry_8,carry_7,carry_6,carry_5}),
        .CYINIT(1'b0),
        .DI({cnt_di_7,cnt_di_6,cnt_di_5,cnt_di_4}),
        .O({read_fifo_addr_next_7,read_fifo_addr_next_6,read_fifo_addr_next_5,read_fifo_addr_next_4}),
        .S({cnt_s_7,cnt_s_6,cnt_s_5,cnt_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[5].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .I5(1'b1),
        .O5(cnt_di_5),
        .O6(cnt_s_5));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_5),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[6].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .I5(1'b1),
        .O5(cnt_di_6),
        .O6(cnt_s_6));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_6),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[7].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(wma_read_fifo_addr[7]),
        .I5(1'b1),
        .O5(cnt_di_7),
        .O6(cnt_s_7));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[7].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_7),
        .Q(wma_read_fifo_addr[7]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[8].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(wma_read_fifo_addr[8]),
        .I5(1'b1),
        .O(cnt_s_8));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[8].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_8),
        .Q(wma_read_fifo_addr[8]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4 
       (.CI(carry_8),
        .CO(\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_O_UNCONNECTED [3:1],read_fifo_addr_next_8}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_S_UNCONNECTED [3:1],cnt_s_8}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__1_n_0 ),
        .Q(wma_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'hE320)) 
    \Use_FPGA.Empty_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(wma_word_done_d1),
        .I2(O),
        .I3(wma_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__2_n_0 ),
        .Q(wma_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'hCB08)) 
    \Use_FPGA.Full_Inst_i_1__2 
       (.I0(queue_almost_full),
        .I1(wma_word_done_d1),
        .I2(O),
        .I3(wma_fifo_full),
        .O(\Use_FPGA.Full_Inst_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__3 
       (.I0(wma_fifo_empty),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_merge_done),
        .O(A_N));
  LUT3 #(
    .INIT(8'hBF)) 
    \Using_FPGA.MUXCY_I_i_1__3 
       (.I0(wma_merge_done),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(wma_fifo_empty),
        .O(A18_out));
  LUT4 #(
    .INIT(16'hF0F2)) 
    update_evict_busy_i_1
       (.I0(update_evict_busy),
        .I1(Q),
        .I2(update_evict_ongoing90_out),
        .I3(update_evict_last),
        .O(update_evict_busy_reg));
  LUT6 #(
    .INIT(64'h0B0B0A0B000B0A0B)) 
    update_evict_ongoing_i_2
       (.I0(update_evict_ongoing_i_3_n_0),
        .I1(update_evict_busy_reg_0),
        .I2(update_evict_busy_reg_1),
        .I3(M0_AXI_RVALID),
        .I4(ri_evicted),
        .I5(ed_fifo_empty),
        .O(update_evict_ongoing90_out));
  LUT5 #(
    .INIT(32'h0080FFFF)) 
    update_evict_ongoing_i_3
       (.I0(wma_fifo_empty),
        .I1(ri_exist),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I3(update_evict_busy_reg_0),
        .I4(ri_allocate),
        .O(update_evict_ongoing_i_3_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    \update_wma_data[31]_i_3 
       (.I0(queue_almost_full),
        .I1(wma_fifo_full),
        .O(\Use_FPGA.Almost_Full_Inst_0 ));
  LUT6 #(
    .INIT(64'h00E2FFFF00E20000)) 
    update_wma_last_i_1
       (.I0(\access_data_info[0,0][Last] ),
        .I1(update_wma_last_reg),
        .I2(\access_data_info[0,1][Last] ),
        .I3(\update_wr_offset_cnt_reg[5]_1 ),
        .I4(update_wma_data_valid),
        .I5(update_wma_last),
        .O(wr_port_data_last_i_reg_0));
  LUT6 #(
    .INIT(64'h10000000FFFFFFFF)) 
    \update_wr_offset_cnt[5]_i_1 
       (.I0(wma_fifo_full),
        .I1(queue_almost_full),
        .I2(\update_wr_offset_cnt_reg[5]_0 ),
        .I3(wm_exist),
        .I4(\update_wr_offset_cnt_reg[5]_1 ),
        .I5(\update_wr_offset_cnt_reg[5] ),
        .O(E));
  LUT5 #(
    .INIT(32'h00005540)) 
    wma_merge_done_i_1
       (.I0(Q),
        .I1(wma_merge_done_i_2_n_0),
        .I2(O),
        .I3(wma_merge_done),
        .I4(backend_rd_data_pop),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    wma_merge_done_i_2
       (.I0(wma_merge_done_reg),
        .I1(wma_merge_done_reg_0),
        .I2(wma_read_fifo_addr[8]),
        .I3(wma_merge_done_reg_1),
        .I4(wma_read_fifo_addr[7]),
        .I5(wma_merge_done_reg_2),
        .O(wma_merge_done_i_2_n_0));
  LUT6 #(
    .INIT(64'h00000000AAA222A2)) 
    wma_word_done_d1_i_1
       (.I0(update_wma_data_valid),
        .I1(wma_word_done_d1_reg),
        .I2(\access_data_info[0,0][Last] ),
        .I3(update_wma_last_reg),
        .I4(\access_data_info[0,1][Last] ),
        .I5(Q),
        .O(wr_port_data_last_i_reg));
  LUT6 #(
    .INIT(64'h1010000000FF0000)) 
    wma_word_done_d1_i_2
       (.I0(wma_fifo_full),
        .I1(queue_almost_full),
        .I2(wm_exist),
        .I3(\update_wr_offset_cnt_reg[5] ),
        .I4(\update_wr_offset_cnt_reg[5]_0 ),
        .I5(\update_wr_offset_cnt_reg[5]_1 ),
        .O(update_wma_data_valid));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized14
   (write_data_almost_full,
    write_data_full,
    A,
    \Use_FPGA.Empty_Inst_0 ,
    Q,
    ACLK,
    queue_push,
    M_AXI_WVALID_I_reg,
    M0_AXI_WREADY,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_1 ,
    \Use_FPGA.Almost_Full_Inst_2 ,
    \write_data_info[0][Valid] );
  output write_data_almost_full;
  output write_data_full;
  output [4:0]A;
  output \Use_FPGA.Empty_Inst_0 ;
  input Q;
  input ACLK;
  input queue_push;
  input M_AXI_WVALID_I_reg;
  input M0_AXI_WREADY;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input \Use_FPGA.Almost_Full_Inst_1 ;
  input \Use_FPGA.Almost_Full_Inst_2 ;
  input \write_data_info[0][Valid] ;

  wire [4:0]A;
  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire M0_AXI_WREADY;
  wire M_AXI_WVALID_I_reg;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__21_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__21_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_1 ;
  wire \Use_FPGA.Almost_Full_Inst_2 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__15_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_3__0_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__20_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__16_n_0 ;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire w_fifo_empty;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Valid] ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_S_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h45)) 
    M_AXI_WVALID_I_i_1
       (.I0(w_fifo_empty),
        .I1(M0_AXI_WREADY),
        .I2(M_AXI_WVALID_I_reg),
        .O(\Use_FPGA.Empty_Inst_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__21_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEEEEBB2BEEEE8828)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__21 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_push),
        .I2(M_AXI_WVALID_I_reg),
        .I3(M0_AXI_WREADY),
        .I4(w_fifo_empty),
        .I5(\Use_FPGA.Almost_Empty_Inst_i_2__21_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__21_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h00000004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__21 
       (.I0(A[3]),
        .I1(A[0]),
        .I2(A[2]),
        .I3(A[1]),
        .I4(A[4]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__21_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(write_data_almost_full),
        .R(Q));
  LUT6 #(
    .INIT(64'hBE82BEBEBE82BE82)) 
    \Use_FPGA.Almost_Full_Inst_i_1__16 
       (.I0(write_data_almost_full),
        .I1(queue_push),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(write_data_full),
        .I4(\Use_FPGA.Almost_Full_Inst_i_2__15_n_0 ),
        .I5(\Use_FPGA.Almost_Full_Inst_i_3__0_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'h7FFF7FFF7FFF7F7F)) 
    \Use_FPGA.Almost_Full_Inst_i_2__15 
       (.I0(A[2]),
        .I1(A[4]),
        .I2(A[3]),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(\Use_FPGA.Almost_Full_Inst_1 ),
        .I5(\Use_FPGA.Almost_Full_Inst_2 ),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Use_FPGA.Almost_Full_Inst_i_3__0 
       (.I0(A[1]),
        .I1(A[0]),
        .O(\Use_FPGA.Almost_Full_Inst_i_3__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push),
        .I4(A[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(A[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push),
        .I4(A[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(A[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push),
        .I4(A[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(A[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push),
        .I4(A[3]),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(A[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push),
        .I4(A[4]),
        .I5(1'b1),
        .O(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(A[4]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4 
       (.CI(carry_4),
        .CO(\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_O_UNCONNECTED [3:1],read_fifo_addr_next_4}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_S_UNCONNECTED [3:1],cnt_s_4}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__20_n_0 ),
        .Q(w_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT5 #(
    .INIT(32'h55554044)) 
    \Use_FPGA.Empty_Inst_i_1__20 
       (.I0(queue_push),
        .I1(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I2(M0_AXI_WREADY),
        .I3(M_AXI_WVALID_I_reg),
        .I4(w_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__20_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__16_n_0 ),
        .Q(write_data_full),
        .R(Q));
  LUT6 #(
    .INIT(64'hF2F2F200F200F200)) 
    \Use_FPGA.Full_Inst_i_1__16 
       (.I0(M_AXI_WVALID_I_reg),
        .I1(M0_AXI_WREADY),
        .I2(w_fifo_empty),
        .I3(write_data_full),
        .I4(write_data_almost_full),
        .I5(\write_data_info[0][Valid] ),
        .O(\Use_FPGA.Full_Inst_i_1__16_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized16
   (\Use_FPGA.Full_Inst_0 ,
    ar_read_fifo_addr,
    E,
    need_to_stall_write_reg,
    A,
    SR,
    ACLK,
    ar_pop_i,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_need_ar,
    update_done_ar,
    queue_push26_out,
    \Order_Optimization_4.buffer_addr_reg[0] ,
    Carry_OUT,
    \Order_Optimization_4.buffer_addr_reg[0]_0 ,
    need_to_stall_write_reg_0,
    M0_AXI_BVALID,
    bp_fifo_full,
    Q,
    p_4_in__21,
    out,
    \Order_Optimization_4.buffer_addr_reg[0]_1 ,
    need_to_stall_write_i_2_0);
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]ar_read_fifo_addr;
  output [0:0]E;
  output need_to_stall_write_reg;
  output A;
  input [0:0]SR;
  input ACLK;
  input ar_pop_i;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_need_ar;
  input update_done_ar;
  input queue_push26_out;
  input \Order_Optimization_4.buffer_addr_reg[0] ;
  input Carry_OUT;
  input \Order_Optimization_4.buffer_addr_reg[0]_0 ;
  input need_to_stall_write_reg_0;
  input M0_AXI_BVALID;
  input bp_fifo_full;
  input [3:0]Q;
  input p_4_in__21;
  input [1:0]out;
  input [1:0]\Order_Optimization_4.buffer_addr_reg[0]_1 ;
  input [1:0]need_to_stall_write_i_2_0;

  wire A;
  wire ACLK;
  wire CI;
  wire Carry_OUT;
  wire D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire M0_AXI_BVALID;
  wire \Order_Optimization_4.buffer_addr_reg[0] ;
  wire \Order_Optimization_4.buffer_addr_reg[0]_0 ;
  wire [1:0]\Order_Optimization_4.buffer_addr_reg[0]_1 ;
  wire \Order_Optimization_4.search_count[4]_i_3_n_0 ;
  wire [3:0]Q;
  wire [0:0]SR;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__12_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__20_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__14_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__8_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__7_n_0 ;
  wire ar_pop_i;
  wire [3:0]ar_read_fifo_addr;
  wire bp_fifo_full;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire [1:0]need_to_stall_write_i_2_0;
  wire need_to_stall_write_i_2_n_0;
  wire need_to_stall_write_i_3_n_0;
  wire need_to_stall_write_reg;
  wire need_to_stall_write_reg_0;
  wire [1:0]out;
  wire p_4_in__21;
  wire queue_empty;
  wire queue_push26_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \read_req_info[0][Valid] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_need_ar;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hBABBBABA00000000)) 
    \Order_Optimization_4.search_count[4]_i_1 
       (.I0(\Order_Optimization_4.search_count[4]_i_3_n_0 ),
        .I1(queue_empty),
        .I2(queue_push26_out),
        .I3(\Order_Optimization_4.buffer_addr_reg[0] ),
        .I4(Carry_OUT),
        .I5(\Order_Optimization_4.buffer_addr_reg[0]_0 ),
        .O(E));
  LUT6 #(
    .INIT(64'h1550510505155051)) 
    \Order_Optimization_4.search_count[4]_i_3 
       (.I0(queue_empty),
        .I1(p_4_in__21),
        .I2(out[1]),
        .I3(out[0]),
        .I4(\Order_Optimization_4.buffer_addr_reg[0]_1 [1]),
        .I5(\Order_Optimization_4.buffer_addr_reg[0]_1 [0]),
        .O(\Order_Optimization_4.search_count[4]_i_3_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__12_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hCFFACFCFC00AC0C0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__12 
       (.I0(queue_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__20_n_0 ),
        .I2(ar_pop_i),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(\read_req_info[0][Valid] ),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__12_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__20 
       (.I0(ar_read_fifo_addr[3]),
        .I1(ar_read_fifo_addr[2]),
        .I2(ar_read_fifo_addr[0]),
        .I3(ar_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__20_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(SR));
  LUT5 #(
    .INIT(32'hFEF3C2C0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__7 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__14_n_0 ),
        .I1(ar_pop_i),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(\read_req_info[0][Valid] ),
        .I4(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__14 
       (.I0(ar_read_fifo_addr[0]),
        .I1(ar_read_fifo_addr[1]),
        .I2(ar_read_fifo_addr[3]),
        .I3(ar_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__14_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I4(ar_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(ar_read_fifo_addr[0]),
        .S(SR));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I4(ar_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(ar_read_fifo_addr[1]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I4(ar_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(ar_read_fifo_addr[2]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I4(ar_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(ar_read_fifo_addr[3]),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__8_n_0 ),
        .Q(queue_empty),
        .S(SR));
  LUT5 #(
    .INIT(32'hBCBB8088)) 
    \Use_FPGA.Empty_Inst_i_1__8 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(ar_pop_i),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(\read_req_info[0][Valid] ),
        .I4(queue_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__8_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__7_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'h3030303030323030)) 
    \Use_FPGA.Full_Inst_i_1__7 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(ar_pop_i),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(ri_fifo_full),
        .I4(update_need_ar),
        .I5(update_done_ar),
        .O(\Use_FPGA.Full_Inst_i_1__7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__168 
       (.I0(queue_empty),
        .O(A));
  LUT6 #(
    .INIT(64'h000000002282EE8E)) 
    need_to_stall_write_i_1
       (.I0(need_to_stall_write_reg_0),
        .I1(queue_push26_out),
        .I2(M0_AXI_BVALID),
        .I3(bp_fifo_full),
        .I4(need_to_stall_write_i_2_n_0),
        .I5(SR),
        .O(need_to_stall_write_reg));
  LUT5 #(
    .INIT(32'h00007FFF)) 
    need_to_stall_write_i_2
       (.I0(Q[2]),
        .I1(Q[3]),
        .I2(Q[0]),
        .I3(Q[1]),
        .I4(need_to_stall_write_i_3_n_0),
        .O(need_to_stall_write_i_2_n_0));
  LUT5 #(
    .INIT(32'h00006966)) 
    need_to_stall_write_i_3
       (.I0(need_to_stall_write_i_2_0[1]),
        .I1(out[1]),
        .I2(need_to_stall_write_i_2_0[0]),
        .I3(out[0]),
        .I4(queue_empty),
        .O(need_to_stall_write_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3
   (\Use_FPGA.Empty_Inst_0 ,
    queue_index,
    ri_exist,
    \Use_FPGA.Almost_Full_Inst_0 ,
    A22_out,
    Q,
    ACLK,
    rip_pop,
    \lookup_read_data_new[0,0][Valid] ,
    \read_info_status[0,1][Almost_Full] ,
    \Using_FPGA.MUXCY_I_i_1__54 ,
    \read_info_status[0,1][Full] ,
    ri_refresh_reg,
    \Using_FPGA.MUXCY_I );
  output \Use_FPGA.Empty_Inst_0 ;
  output [3:0]queue_index;
  output ri_exist;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output A22_out;
  input Q;
  input ACLK;
  input rip_pop;
  input \lookup_read_data_new[0,0][Valid] ;
  input \read_info_status[0,1][Almost_Full] ;
  input \Using_FPGA.MUXCY_I_i_1__54 ;
  input \read_info_status[0,1][Full] ;
  input ri_refresh_reg;
  input \Using_FPGA.MUXCY_I ;

  wire A22_out;
  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__15_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__8_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__7_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__11_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__10_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_1__5_n_0 ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_i_1__54 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire [3:0]queue_index;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire ri_exist;
  wire ri_refresh_reg;
  wire rip_pop;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__15_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCFFEFEECCCC2022)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__15 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__8_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .I4(\lookup_read_data_new[0,0][Valid] ),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__8 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__8_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_info_status[0,0][Almost_Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFAAFCFFA0AA0C00)) 
    \Use_FPGA.Almost_Full_Inst_i_1__10 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__7_n_0 ),
        .I1(\read_info_status[0,0][Full] ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(ri_refresh_reg),
        .I4(\lookup_read_data_new[0,0][Valid] ),
        .I5(\read_info_status[0,0][Almost_Full] ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__7 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__7_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__11_n_0 ),
        .Q(\Use_FPGA.Empty_Inst_0 ),
        .S(Q));
  LUT5 #(
    .INIT(32'h0000ECEE)) 
    \Use_FPGA.Empty_Inst_i_1__11 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .I4(\lookup_read_data_new[0,0][Valid] ),
        .O(\Use_FPGA.Empty_Inst_i_1__11_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__10_n_0 ),
        .Q(\read_info_status[0,0][Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hBABBCFCC8A880000)) 
    \Use_FPGA.Full_Inst_i_1__10 
       (.I0(\read_info_status[0,0][Almost_Full] ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .I4(\lookup_read_data_new[0,0][Valid] ),
        .I5(\read_info_status[0,0][Full] ),
        .O(\Use_FPGA.Full_Inst_i_1__10_n_0 ));
  LUT3 #(
    .INIT(8'h75)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__5 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_1__5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.queue_exist_i_i_1__5_n_0 ),
        .Q(ri_exist),
        .R(Q));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__149 
       (.I0(ri_exist),
        .I1(\Using_FPGA.MUXCY_I ),
        .O(A22_out));
  LUT5 #(
    .INIT(32'h00053305)) 
    \Using_FPGA.MUXCY_I_i_2__9 
       (.I0(\read_info_status[0,0][Almost_Full] ),
        .I1(\read_info_status[0,1][Almost_Full] ),
        .I2(\read_info_status[0,0][Full] ),
        .I3(\Using_FPGA.MUXCY_I_i_1__54 ),
        .I4(\read_info_status[0,1][Full] ),
        .O(\Use_FPGA.Almost_Full_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_111
   (bs_read_fifo_addr,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    E,
    queue_pop118_out,
    D,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    ACLK,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    \Use_FPGA.Empty_Inst_0 ,
    wmad_fifo_empty,
    update_need_bs,
    update_done_bs,
    \bs_src_reg[1]_i_2_0 ,
    \bs_src_reg[1]_i_2_1 ,
    \bs_src_reg[1]_i_2_2 ,
    \bs_src_reg[1]_i_2_3 ,
    \bs_src_reg[1]_i_2_4 ,
    \bs_src_reg[1]_i_2_5 ,
    \bs_src_reg[1]_i_2_6 ,
    \bs_src_reg[1]_i_2_7 ,
    \bs_src_reg[1]_i_3_0 ,
    \bs_src_reg[1]_i_3_1 ,
    \bs_src_reg[1]_i_3_2 ,
    \bs_src_reg[1]_i_3_3 ,
    \bs_src_reg[1]_i_3_4 ,
    \bs_src_reg[1]_i_3_5 ,
    \bs_src_reg[1]_i_3_6 ,
    \bs_src_reg[1]_i_3_7 );
  output [3:0]bs_read_fifo_addr;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output [0:0]E;
  output queue_pop118_out;
  output [1:0]D;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input ACLK;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input [0:0]\Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input [0:0]\Use_FPGA.Empty_Inst_0 ;
  input wmad_fifo_empty;
  input update_need_bs;
  input update_done_bs;
  input [1:0]\bs_src_reg[1]_i_2_0 ;
  input [1:0]\bs_src_reg[1]_i_2_1 ;
  input [1:0]\bs_src_reg[1]_i_2_2 ;
  input [1:0]\bs_src_reg[1]_i_2_3 ;
  input [1:0]\bs_src_reg[1]_i_2_4 ;
  input [1:0]\bs_src_reg[1]_i_2_5 ;
  input [1:0]\bs_src_reg[1]_i_2_6 ;
  input [1:0]\bs_src_reg[1]_i_2_7 ;
  input [1:0]\bs_src_reg[1]_i_3_0 ;
  input [1:0]\bs_src_reg[1]_i_3_1 ;
  input [1:0]\bs_src_reg[1]_i_3_2 ;
  input [1:0]\bs_src_reg[1]_i_3_3 ;
  input [1:0]\bs_src_reg[1]_i_3_4 ;
  input [1:0]\bs_src_reg[1]_i_3_5 ;
  input [1:0]\bs_src_reg[1]_i_3_6 ;
  input [1:0]\bs_src_reg[1]_i_3_7 ;

  wire ACLK;
  wire CI;
  wire [1:0]D;
  wire DI;
  wire D_0;
  wire [0:0]E;
  wire LI;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__5_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__5_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__1_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire [0:0]\Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__21_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__3_n_0 ;
  wire \Use_FPGA.Full_Inst_i_2__0_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire [0:0]\Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire bs_fifo_empty;
  wire bs_fifo_full;
  wire [3:0]bs_read_fifo_addr;
  wire \bs_src[0]_i_4_n_0 ;
  wire \bs_src[0]_i_5_n_0 ;
  wire \bs_src[0]_i_6_n_0 ;
  wire \bs_src[0]_i_7_n_0 ;
  wire \bs_src[1]_i_4_n_0 ;
  wire \bs_src[1]_i_5_n_0 ;
  wire \bs_src[1]_i_6_n_0 ;
  wire \bs_src[1]_i_7_n_0 ;
  wire \bs_src_reg[0]_i_2_n_0 ;
  wire \bs_src_reg[0]_i_3_n_0 ;
  wire [1:0]\bs_src_reg[1]_i_2_0 ;
  wire [1:0]\bs_src_reg[1]_i_2_1 ;
  wire [1:0]\bs_src_reg[1]_i_2_2 ;
  wire [1:0]\bs_src_reg[1]_i_2_3 ;
  wire [1:0]\bs_src_reg[1]_i_2_4 ;
  wire [1:0]\bs_src_reg[1]_i_2_5 ;
  wire [1:0]\bs_src_reg[1]_i_2_6 ;
  wire [1:0]\bs_src_reg[1]_i_2_7 ;
  wire \bs_src_reg[1]_i_2_n_0 ;
  wire [1:0]\bs_src_reg[1]_i_3_0 ;
  wire [1:0]\bs_src_reg[1]_i_3_1 ;
  wire [1:0]\bs_src_reg[1]_i_3_2 ;
  wire [1:0]\bs_src_reg[1]_i_3_3 ;
  wire [1:0]\bs_src_reg[1]_i_3_4 ;
  wire [1:0]\bs_src_reg[1]_i_3_5 ;
  wire [1:0]\bs_src_reg[1]_i_3_6 ;
  wire [1:0]\bs_src_reg[1]_i_3_7 ;
  wire \bs_src_reg[1]_i_3_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_pop118_out;
  wire queue_pop_srl0;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_bs;
  wire update_need_bs;
  wire wmad_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__5_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEEEEBB2BEEEE8828)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__5 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(E),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(bs_fifo_empty),
        .I5(\Use_FPGA.Almost_Empty_Inst_i_2__5_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__5_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__5 
       (.I0(bs_read_fifo_addr[0]),
        .I1(bs_read_fifo_addr[1]),
        .I2(bs_read_fifo_addr[2]),
        .I3(bs_read_fifo_addr[3]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__5_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEEEEBBEB22228828)) 
    \Use_FPGA.Almost_Full_Inst_i_1__3 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(E),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(bs_fifo_empty),
        .I5(\Use_FPGA.Almost_Full_Inst_i_2__1_n_0 ),
        .O(D_0));
  LUT6 #(
    .INIT(64'hABAAAAAAAAAAAAAA)) 
    \Use_FPGA.Almost_Full_Inst_i_2__1 
       (.I0(bs_fifo_full),
        .I1(bs_read_fifo_addr[1]),
        .I2(bs_read_fifo_addr[0]),
        .I3(bs_read_fifo_addr[2]),
        .I4(bs_read_fifo_addr[3]),
        .I5(E),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__1 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(wmad_fifo_empty),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(queue_pop118_out));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bs_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(E),
        .I4(bs_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__1 
       (.I0(bs_fifo_full),
        .I1(update_need_bs),
        .I2(update_done_bs),
        .O(E));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bs_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(E),
        .I4(bs_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bs_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(E),
        .I4(bs_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bs_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(E),
        .I4(bs_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__21_n_0 ),
        .Q(bs_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'h55554044)) 
    \Use_FPGA.Empty_Inst_i_1__21 
       (.I0(E),
        .I1(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I4(bs_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__21_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__3_n_0 ),
        .Q(bs_fifo_full),
        .R(Q));
  LUT6 #(
    .INIT(64'hFF08FF08FF080000)) 
    \Use_FPGA.Full_Inst_i_1__3 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(update_need_bs),
        .I2(update_done_bs),
        .I3(bs_fifo_full),
        .I4(\Use_FPGA.Full_Inst_i_2__0_n_0 ),
        .I5(bs_fifo_empty),
        .O(\Use_FPGA.Full_Inst_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Full_Inst_i_2__0 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I1(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_2__1 
       (.I0(bs_fifo_empty),
        .O(queue_pop_srl0));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .D(queue_pop_srl0),
        .Q(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .R(Q));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__190 
       (.I0(update_need_bs),
        .I1(update_done_bs),
        .I2(bs_fifo_full),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_4 
       (.I0(\bs_src_reg[1]_i_2_0 [0]),
        .I1(\bs_src_reg[1]_i_2_1 [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_2_2 [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_2_3 [0]),
        .O(\bs_src[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_5 
       (.I0(\bs_src_reg[1]_i_2_4 [0]),
        .I1(\bs_src_reg[1]_i_2_5 [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_2_6 [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_2_7 [0]),
        .O(\bs_src[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_6 
       (.I0(\bs_src_reg[1]_i_3_0 [0]),
        .I1(\bs_src_reg[1]_i_3_1 [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_3_2 [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_3_3 [0]),
        .O(\bs_src[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_7 
       (.I0(\bs_src_reg[1]_i_3_4 [0]),
        .I1(\bs_src_reg[1]_i_3_5 [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_3_6 [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_3_7 [0]),
        .O(\bs_src[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_4 
       (.I0(\bs_src_reg[1]_i_2_0 [1]),
        .I1(\bs_src_reg[1]_i_2_1 [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_2_2 [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_2_3 [1]),
        .O(\bs_src[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_5 
       (.I0(\bs_src_reg[1]_i_2_4 [1]),
        .I1(\bs_src_reg[1]_i_2_5 [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_2_6 [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_2_7 [1]),
        .O(\bs_src[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_6 
       (.I0(\bs_src_reg[1]_i_3_0 [1]),
        .I1(\bs_src_reg[1]_i_3_1 [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_3_2 [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_3_3 [1]),
        .O(\bs_src[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_7 
       (.I0(\bs_src_reg[1]_i_3_4 [1]),
        .I1(\bs_src_reg[1]_i_3_5 [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_src_reg[1]_i_3_6 [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_src_reg[1]_i_3_7 [1]),
        .O(\bs_src[1]_i_7_n_0 ));
  MUXF8 \bs_src_reg[0]_i_1 
       (.I0(\bs_src_reg[0]_i_2_n_0 ),
        .I1(\bs_src_reg[0]_i_3_n_0 ),
        .O(D[0]),
        .S(bs_read_fifo_addr[3]));
  MUXF7 \bs_src_reg[0]_i_2 
       (.I0(\bs_src[0]_i_4_n_0 ),
        .I1(\bs_src[0]_i_5_n_0 ),
        .O(\bs_src_reg[0]_i_2_n_0 ),
        .S(bs_read_fifo_addr[2]));
  MUXF7 \bs_src_reg[0]_i_3 
       (.I0(\bs_src[0]_i_6_n_0 ),
        .I1(\bs_src[0]_i_7_n_0 ),
        .O(\bs_src_reg[0]_i_3_n_0 ),
        .S(bs_read_fifo_addr[2]));
  MUXF8 \bs_src_reg[1]_i_1 
       (.I0(\bs_src_reg[1]_i_2_n_0 ),
        .I1(\bs_src_reg[1]_i_3_n_0 ),
        .O(D[1]),
        .S(bs_read_fifo_addr[3]));
  MUXF7 \bs_src_reg[1]_i_2 
       (.I0(\bs_src[1]_i_4_n_0 ),
        .I1(\bs_src[1]_i_5_n_0 ),
        .O(\bs_src_reg[1]_i_2_n_0 ),
        .S(bs_read_fifo_addr[2]));
  MUXF7 \bs_src_reg[1]_i_3 
       (.I0(\bs_src[1]_i_6_n_0 ),
        .I1(\bs_src[1]_i_7_n_0 ),
        .O(\bs_src_reg[1]_i_3_n_0 ),
        .S(bs_read_fifo_addr[2]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hF2)) 
    update_done_bs_i_1
       (.I0(update_need_bs),
        .I1(bs_fifo_full),
        .I2(update_done_bs),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_114
   (\Use_FPGA.Full_Inst_0 ,
    ri_read_fifo_addr,
    ri_exist,
    \Use_FPGA.Full_Inst_1 ,
    S,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    update_word_cnt_last_reg,
    update_done_ar_reg,
    update_evict_ongoing_reg,
    update_read_miss_ongoing_reg,
    Q,
    ACLK,
    queue_pop136_out,
    E,
    queue_full,
    update_done_ar_reg_0,
    update_done_ar_reg_1,
    update_word_cnt_last,
    update_read_miss_ongoing_reg_0,
    update_read_miss_ongoing_reg_1,
    update_word_cnt_en,
    update_read_miss_ongoing_reg_2,
    \Using_FPGA.MUXCY_I ,
    ri_allocate);
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]ri_read_fifo_addr;
  output ri_exist;
  output \Use_FPGA.Full_Inst_1 ;
  output S;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output update_word_cnt_last_reg;
  output update_done_ar_reg;
  output update_evict_ongoing_reg;
  output update_read_miss_ongoing_reg;
  input Q;
  input ACLK;
  input queue_pop136_out;
  input [0:0]E;
  input queue_full;
  input update_done_ar_reg_0;
  input update_done_ar_reg_1;
  input update_word_cnt_last;
  input update_read_miss_ongoing_reg_0;
  input update_read_miss_ongoing_reg_1;
  input update_word_cnt_en;
  input update_read_miss_ongoing_reg_2;
  input \Using_FPGA.MUXCY_I ;
  input ri_allocate;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__2_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__4_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__0_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__18_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_i_1__1_n_0 ;
  wire \Using_FPGA.MUXCY_I ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_full;
  wire queue_pop136_out;
  wire queue_pop_srl0;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire ri_allocate;
  wire ri_exist;
  wire ri_fifo_empty;
  wire [3:0]ri_read_fifo_addr;
  wire update_done_ar_reg;
  wire update_done_ar_reg_0;
  wire update_done_ar_reg_1;
  wire update_evict_ongoing_reg;
  wire update_read_miss_ongoing_i_2_n_0;
  wire update_read_miss_ongoing_reg;
  wire update_read_miss_ongoing_reg_0;
  wire update_read_miss_ongoing_reg_1;
  wire update_read_miss_ongoing_reg_2;
  wire update_word_cnt_en;
  wire update_word_cnt_last;
  wire update_word_cnt_last_reg;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__2_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEEEEBB2BEEEE8828)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__2 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_1 ),
        .I2(ri_exist),
        .I3(queue_pop136_out),
        .I4(ri_fifo_empty),
        .I5(\Use_FPGA.Almost_Empty_Inst_i_2__4_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__4 
       (.I0(ri_read_fifo_addr[2]),
        .I1(ri_read_fifo_addr[0]),
        .I2(ri_read_fifo_addr[1]),
        .I3(ri_read_fifo_addr[3]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__4_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEEEEBBEB22228828)) 
    \Use_FPGA.Almost_Full_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_1 ),
        .I2(ri_exist),
        .I3(queue_pop136_out),
        .I4(ri_fifo_empty),
        .I5(\Use_FPGA.Almost_Full_Inst_i_2__0_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hAAAAAEAAAAAAAAAA)) 
    \Use_FPGA.Almost_Full_Inst_i_2__0 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(ri_read_fifo_addr[3]),
        .I2(ri_read_fifo_addr[1]),
        .I3(ri_read_fifo_addr[2]),
        .I4(ri_read_fifo_addr[0]),
        .I5(\Use_FPGA.Full_Inst_1 ),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__8 
       (.I0(update_done_ar_reg_1),
        .I1(update_done_ar_reg_0),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(queue_full),
        .O(update_done_ar_reg));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(ri_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop136_out),
        .I3(\Use_FPGA.Full_Inst_1 ),
        .I4(ri_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(queue_full),
        .I2(update_done_ar_reg_0),
        .I3(update_done_ar_reg_1),
        .O(\Use_FPGA.Full_Inst_1 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(ri_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop136_out),
        .I3(\Use_FPGA.Full_Inst_1 ),
        .I4(ri_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(ri_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop136_out),
        .I3(\Use_FPGA.Full_Inst_1 ),
        .I4(ri_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(ri_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop136_out),
        .I3(\Use_FPGA.Full_Inst_1 ),
        .I4(ri_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__18_n_0 ),
        .Q(ri_fifo_empty),
        .S(Q));
  LUT5 #(
    .INIT(32'h55554044)) 
    \Use_FPGA.Empty_Inst_i_1__18 
       (.I0(\Use_FPGA.Full_Inst_1 ),
        .I1(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I2(queue_pop136_out),
        .I3(ri_exist),
        .I4(ri_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__18_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__1_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hF8F8F8F80000F800)) 
    \Use_FPGA.Full_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_1 ),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(ri_exist),
        .I4(queue_pop136_out),
        .I5(ri_fifo_empty),
        .O(\Use_FPGA.Full_Inst_i_1__1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_2__0 
       (.I0(ri_fifo_empty),
        .O(queue_pop_srl0));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(E),
        .D(queue_pop_srl0),
        .Q(ri_exist),
        .R(Q));
  LUT4 #(
    .INIT(16'hFF1F)) 
    \Using_FPGA.MUXCY_I_i_1 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(queue_full),
        .I2(update_done_ar_reg_0),
        .I3(update_done_ar_reg_1),
        .O(S));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.MUXCY_I_i_1__191 
       (.I0(\Using_FPGA.MUXCY_I ),
        .I1(ri_allocate),
        .I2(ri_exist),
        .O(update_evict_ongoing_reg));
  LUT3 #(
    .INIT(8'h45)) 
    \Using_FPGA.MUXCY_I_i_1__194 
       (.I0(update_read_miss_ongoing_reg_0),
        .I1(ri_allocate),
        .I2(ri_exist),
        .O(update_read_miss_ongoing_reg));
  LUT4 #(
    .INIT(16'hFF02)) 
    update_done_ar_i_1
       (.I0(update_done_ar_reg_0),
        .I1(queue_full),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(update_done_ar_reg_1),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT6 #(
    .INIT(64'h000000003AFAFAFA)) 
    update_read_miss_ongoing_i_1
       (.I0(update_read_miss_ongoing_i_2_n_0),
        .I1(update_word_cnt_last),
        .I2(update_read_miss_ongoing_reg_0),
        .I3(update_read_miss_ongoing_reg_1),
        .I4(update_word_cnt_en),
        .I5(Q),
        .O(update_word_cnt_last_reg));
  LUT3 #(
    .INIT(8'h80)) 
    update_read_miss_ongoing_i_2
       (.I0(ri_exist),
        .I1(update_read_miss_ongoing_reg_2),
        .I2(update_word_cnt_en),
        .O(update_read_miss_ongoing_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_116
   (update_write_miss_full,
    wm_read_fifo_addr,
    wm_exist,
    wm_evict_reg,
    update_wm_pop_evict_hold_reg,
    \wr_port_data_info_reg[0][Last] ,
    wm_allocate_reg,
    queue_push120_out,
    \write_data_info[0][Valid] ,
    E,
    wm_evict_reg_0,
    update_write_data_ready,
    wm_local_wrap_reg,
    \update_wr_offset_cnt_reg[4] ,
    queue_push,
    \lu_check_info_reg[Port_Num][0] ,
    \lu_check_info_reg[Port_Num][0]_0 ,
    wma_word_done_d1_reg,
    wma_word_done_d1_reg_0,
    wma_word_done_d1_reg_1,
    wma_word_done_d1_reg_2,
    Q,
    ACLK,
    queue_pop,
    lookup_push_write_miss,
    wm_refresh_reg,
    wm_evict,
    update_wm_pop_evict_hold,
    e_fifo_empty,
    \access_data_info[0,1][Last] ,
    update_write_miss_ongoing_reg,
    \access_data_info[0,0][Last] ,
    update_write_miss_ongoing,
    \update_wma_data_reg[31] ,
    update_evict_busy,
    update_evict_valid,
    \update_wma_strb_reg[3] ,
    \update_wma_data_reg[31]_0 ,
    \update_wma_data_reg[31]_1 ,
    \update_wma_data_reg[23] ,
    \update_wma_data_reg[15] ,
    \update_wma_data_reg[7] ,
    write_data_full,
    update_write_miss_ongoing_reg_0,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 ,
    wm_local_wrap,
    wm_kind,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 ,
    \update_write_miss_busy_i_reg[1] ,
    update_write_miss_busy,
    wma_word_done_d1,
    update_wma_strb);
  output update_write_miss_full;
  output [3:0]wm_read_fifo_addr;
  output wm_exist;
  output wm_evict_reg;
  output update_wm_pop_evict_hold_reg;
  output \wr_port_data_info_reg[0][Last] ;
  output wm_allocate_reg;
  output queue_push120_out;
  output \write_data_info[0][Valid] ;
  output [3:0]E;
  output wm_evict_reg_0;
  output [1:0]update_write_data_ready;
  output wm_local_wrap_reg;
  output \update_wr_offset_cnt_reg[4] ;
  output queue_push;
  output \lu_check_info_reg[Port_Num][0] ;
  output \lu_check_info_reg[Port_Num][0]_0 ;
  output wma_word_done_d1_reg;
  output wma_word_done_d1_reg_0;
  output wma_word_done_d1_reg_1;
  output wma_word_done_d1_reg_2;
  input Q;
  input ACLK;
  input queue_pop;
  input lookup_push_write_miss;
  input wm_refresh_reg;
  input wm_evict;
  input update_wm_pop_evict_hold;
  input e_fifo_empty;
  input \access_data_info[0,1][Last] ;
  input update_write_miss_ongoing_reg;
  input \access_data_info[0,0][Last] ;
  input update_write_miss_ongoing;
  input \update_wma_data_reg[31] ;
  input update_evict_busy;
  input update_evict_valid;
  input \update_wma_strb_reg[3] ;
  input \update_wma_data_reg[31]_0 ;
  input \update_wma_data_reg[31]_1 ;
  input \update_wma_data_reg[23] ;
  input \update_wma_data_reg[15] ;
  input \update_wma_data_reg[7] ;
  input write_data_full;
  input update_write_miss_ongoing_reg_0;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 ;
  input wm_local_wrap;
  input wm_kind;
  input [5:0]\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 ;
  input [5:0]\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 ;
  input [5:0]\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 ;
  input \update_write_miss_busy_i_reg[1] ;
  input [1:0]update_write_miss_busy;
  input wma_word_done_d1;
  input [3:0]update_wma_strb;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire [3:0]E;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__2_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__3_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_10_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_11_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_12_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 ;
  wire [5:0]\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 ;
  wire [5:0]\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 ;
  wire [5:0]\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_7_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_8_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_9_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__17_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__0_n_0 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Last] ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire e_fifo_empty;
  wire lookup_push_write_miss;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Port_Num][0]_0 ;
  wire queue_pop;
  wire queue_pop_srl0;
  wire queue_push;
  wire queue_push120_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_evict_busy;
  wire update_evict_valid;
  wire update_wm_pop_evict_hold;
  wire update_wm_pop_evict_hold_reg;
  wire \update_wma_data_reg[15] ;
  wire \update_wma_data_reg[23] ;
  wire \update_wma_data_reg[31] ;
  wire \update_wma_data_reg[31]_0 ;
  wire \update_wma_data_reg[31]_1 ;
  wire \update_wma_data_reg[7] ;
  wire [3:0]update_wma_strb;
  wire \update_wma_strb_reg[3] ;
  wire \update_wr_offset_cnt_reg[4] ;
  wire [1:0]update_write_data_ready;
  wire [1:0]update_write_miss_busy;
  wire \update_write_miss_busy_i_reg[1] ;
  wire update_write_miss_full;
  wire update_write_miss_ongoing;
  wire update_write_miss_ongoing_reg;
  wire update_write_miss_ongoing_reg_0;
  wire wm_allocate_reg;
  wire wm_evict;
  wire wm_evict_reg;
  wire wm_evict_reg_0;
  wire wm_exist;
  wire wm_fifo_empty;
  wire wm_kind;
  wire wm_local_wrap;
  wire wm_local_wrap_reg;
  wire [3:0]wm_read_fifo_addr;
  wire wm_refresh_reg;
  wire wma_word_done_d1;
  wire wma_word_done_d1_reg;
  wire wma_word_done_d1_reg_0;
  wire wma_word_done_d1_reg_1;
  wire wma_word_done_d1_reg_2;
  wire \wr_port_data_info_reg[0][Last] ;
  wire write_data_full;
  wire \write_data_info[0][Valid] ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0002000000022222)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3 
       (.I0(update_write_miss_ongoing_reg),
        .I1(wm_evict_reg_0),
        .I2(\update_wma_data_reg[31]_0 ),
        .I3(\update_wma_strb_reg[3] ),
        .I4(\update_wma_data_reg[31] ),
        .I5(write_data_full),
        .O(update_write_data_ready[1]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__0_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hEBE2E8E2)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__0 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(lookup_push_write_miss),
        .I2(wm_fifo_empty),
        .I3(wm_refresh_reg),
        .I4(\Use_FPGA.Almost_Empty_Inst_i_2__2_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__2 
       (.I0(wm_read_fifo_addr[1]),
        .I1(wm_read_fifo_addr[2]),
        .I2(wm_read_fifo_addr[0]),
        .I3(wm_read_fifo_addr[3]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEBEE2B22E8EE2822)) 
    \Use_FPGA.Almost_Full_Inst_i_1__0 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(lookup_push_write_miss),
        .I2(wm_fifo_empty),
        .I3(wm_refresh_reg),
        .I4(\Use_FPGA.Almost_Full_Inst_i_2__3_n_0 ),
        .I5(update_write_miss_full),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \Use_FPGA.Almost_Full_Inst_i_2__3 
       (.I0(wm_read_fifo_addr[0]),
        .I1(wm_read_fifo_addr[2]),
        .I2(wm_read_fifo_addr[3]),
        .I3(wm_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT5 #(
    .INIT(32'h0000F111)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__7 
       (.I0(\update_wma_data_reg[31] ),
        .I1(wm_allocate_reg),
        .I2(update_evict_valid),
        .I3(update_evict_busy),
        .I4(write_data_full),
        .O(queue_push));
  LUT5 #(
    .INIT(32'h00008A80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__0 
       (.I0(\update_wma_data_reg[31] ),
        .I1(\access_data_info[0,1][Last] ),
        .I2(update_write_miss_ongoing_reg),
        .I3(\access_data_info[0,0][Last] ),
        .I4(wm_allocate_reg),
        .O(queue_push120_out));
  LUT6 #(
    .INIT(64'hFEFFFEAAFFFFFFFF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3__0 
       (.I0(wm_evict_reg_0),
        .I1(\update_wma_data_reg[31]_0 ),
        .I2(\update_wma_strb_reg[3] ),
        .I3(\update_wma_data_reg[31] ),
        .I4(write_data_full),
        .I5(update_write_miss_ongoing_reg_0),
        .O(wm_allocate_reg));
  LUT5 #(
    .INIT(32'hFFFF0EFF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_4__0 
       (.I0(wm_evict),
        .I1(update_evict_busy),
        .I2(\update_wma_data_reg[31] ),
        .I3(wm_exist),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 ),
        .O(wm_evict_reg_0));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'hFFDF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_5 
       (.I0(wm_evict),
        .I1(update_wm_pop_evict_hold),
        .I2(wm_exist),
        .I3(e_fifo_empty),
        .O(wm_evict_reg));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(wm_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT4 #(
    .INIT(16'h0408)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_10 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 [1]),
        .I1(update_write_miss_ongoing),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 [1]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 [1]),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h0408)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_11 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 [3]),
        .I1(update_write_miss_ongoing),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 [3]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 [3]),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h0408)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_12 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 [2]),
        .I1(update_write_miss_ongoing),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 [2]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 [2]),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_12_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_7_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_8_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_9_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_10_n_0 ),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_11_n_0 ),
        .I5(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_12_n_0 ),
        .O(\update_wr_offset_cnt_reg[4] ));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_6 
       (.I0(wm_local_wrap),
        .I1(wm_kind),
        .O(wm_local_wrap_reg));
  LUT4 #(
    .INIT(16'h0408)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_7 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 [4]),
        .I1(update_write_miss_ongoing),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 [4]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 [4]),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h0408)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_8 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 [0]),
        .I1(update_write_miss_ongoing),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 [0]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 [0]),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h0408)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_9 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 [5]),
        .I1(update_write_miss_ongoing),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 [5]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 [5]),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_9_n_0 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(wm_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(wm_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(wm_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__17_n_0 ),
        .Q(wm_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h5540)) 
    \Use_FPGA.Empty_Inst_i_1__17 
       (.I0(lookup_push_write_miss),
        .I1(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I2(wm_refresh_reg),
        .I3(wm_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__17_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__0_n_0 ),
        .Q(update_write_miss_full),
        .R(Q));
  LUT5 #(
    .INIT(32'hE8EE2822)) 
    \Use_FPGA.Full_Inst_i_1__0 
       (.I0(update_write_miss_full),
        .I1(lookup_push_write_miss),
        .I2(wm_fifo_empty),
        .I3(wm_refresh_reg),
        .I4(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h888F)) 
    \Use_FPGA.Full_Inst_i_2 
       (.I0(update_evict_busy),
        .I1(update_evict_valid),
        .I2(wm_allocate_reg),
        .I3(\update_wma_data_reg[31] ),
        .O(\write_data_info[0][Valid] ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_2 
       (.I0(wm_fifo_empty),
        .O(queue_pop_srl0));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Reg_Ctrl.queue_exist_i_i_3 
       (.I0(update_wm_pop_evict_hold),
        .I1(wm_evict),
        .O(update_wm_pop_evict_hold_reg));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(queue_pop_srl0),
        .Q(wm_exist),
        .R(Q));
  LUT6 #(
    .INIT(64'h0001000000011111)) 
    \Using_FPGA.MUXCY_I_i_3 
       (.I0(update_write_miss_ongoing_reg),
        .I1(wm_evict_reg_0),
        .I2(\update_wma_data_reg[31]_0 ),
        .I3(\update_wma_strb_reg[3] ),
        .I4(\update_wma_data_reg[31] ),
        .I5(write_data_full),
        .O(update_write_data_ready[0]));
  LUT6 #(
    .INIT(64'h04048C0400000000)) 
    \update_wma_data[15]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(\update_wma_data_reg[31] ),
        .I2(wm_allocate_reg),
        .I3(wm_exist),
        .I4(\update_wma_data_reg[31]_0 ),
        .I5(\update_wma_data_reg[15] ),
        .O(E[1]));
  LUT6 #(
    .INIT(64'h04048C0400000000)) 
    \update_wma_data[23]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(\update_wma_data_reg[31] ),
        .I2(wm_allocate_reg),
        .I3(wm_exist),
        .I4(\update_wma_data_reg[31]_0 ),
        .I5(\update_wma_data_reg[23] ),
        .O(E[2]));
  LUT6 #(
    .INIT(64'h04048C0400000000)) 
    \update_wma_data[31]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(\update_wma_data_reg[31] ),
        .I2(wm_allocate_reg),
        .I3(wm_exist),
        .I4(\update_wma_data_reg[31]_0 ),
        .I5(\update_wma_data_reg[31]_1 ),
        .O(E[3]));
  LUT6 #(
    .INIT(64'h04048C0400000000)) 
    \update_wma_data[7]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(\update_wma_data_reg[31] ),
        .I2(wm_allocate_reg),
        .I3(wm_exist),
        .I4(\update_wma_data_reg[31]_0 ),
        .I5(\update_wma_data_reg[7] ),
        .O(E[0]));
  LUT4 #(
    .INIT(16'h5350)) 
    \update_wma_strb[0]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(wma_word_done_d1),
        .I2(E[0]),
        .I3(update_wma_strb[0]),
        .O(wma_word_done_d1_reg_2));
  LUT4 #(
    .INIT(16'h5350)) 
    \update_wma_strb[1]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(wma_word_done_d1),
        .I2(E[1]),
        .I3(update_wma_strb[1]),
        .O(wma_word_done_d1_reg_1));
  LUT4 #(
    .INIT(16'h5350)) 
    \update_wma_strb[2]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(wma_word_done_d1),
        .I2(E[2]),
        .I3(update_wma_strb[2]),
        .O(wma_word_done_d1_reg_0));
  LUT4 #(
    .INIT(16'h5350)) 
    \update_wma_strb[3]_i_1 
       (.I0(\update_wma_strb_reg[3] ),
        .I1(wma_word_done_d1),
        .I2(E[3]),
        .I3(update_wma_strb[3]),
        .O(wma_word_done_d1_reg));
  LUT6 #(
    .INIT(64'h4FFFFFFF44444444)) 
    \update_write_miss_busy_i[0]_i_1 
       (.I0(\update_write_miss_busy_i_reg[1] ),
        .I1(lookup_push_write_miss),
        .I2(wm_exist),
        .I3(wm_fifo_empty),
        .I4(queue_pop),
        .I5(update_write_miss_busy[0]),
        .O(\lu_check_info_reg[Port_Num][0]_0 ));
  LUT6 #(
    .INIT(64'h8FFFFFFF88888888)) 
    \update_write_miss_busy_i[1]_i_1 
       (.I0(\update_write_miss_busy_i_reg[1] ),
        .I1(lookup_push_write_miss),
        .I2(wm_exist),
        .I3(wm_fifo_empty),
        .I4(queue_pop),
        .I5(update_write_miss_busy[1]),
        .O(\lu_check_info_reg[Port_Num][0] ));
  LUT6 #(
    .INIT(64'h00000000FF004747)) 
    update_write_miss_ongoing_i_1
       (.I0(\access_data_info[0,1][Last] ),
        .I1(update_write_miss_ongoing_reg),
        .I2(\access_data_info[0,0][Last] ),
        .I3(update_write_miss_ongoing),
        .I4(wm_allocate_reg),
        .I5(Q),
        .O(\wr_port_data_info_reg[0][Last] ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_21
   (\read_info_status[0,1][Almost_Full] ,
    \read_info_status[0,1][Full] ,
    \Use_FPGA.Empty_Inst_0 ,
    queue_index,
    ri_exist,
    Q,
    ACLK,
    rip_pop,
    \Use_FPGA.Almost_Full_Inst_0 ,
    ri_refresh_reg);
  output \read_info_status[0,1][Almost_Full] ;
  output \read_info_status[0,1][Full] ;
  output \Use_FPGA.Empty_Inst_0 ;
  output [3:0]queue_index;
  output ri_exist;
  input Q;
  input ACLK;
  input rip_pop;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input ri_refresh_reg;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__14_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__16_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__12_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__10_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__9_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_1__6_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire [3:0]queue_index;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire ri_exist;
  wire ri_refresh_reg;
  wire rip_pop;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__14_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCFFEFEECCCC2022)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__14 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__16_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__16 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__16_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_info_status[0,1][Almost_Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFAAFCFFA0AA0C00)) 
    \Use_FPGA.Almost_Full_Inst_i_1__9 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__12_n_0 ),
        .I1(\read_info_status[0,1][Full] ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(ri_refresh_reg),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .I5(\read_info_status[0,1][Almost_Full] ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__12 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__12_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__10_n_0 ),
        .Q(\Use_FPGA.Empty_Inst_0 ),
        .S(Q));
  LUT5 #(
    .INIT(32'h0000ECEE)) 
    \Use_FPGA.Empty_Inst_i_1__10 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(\Use_FPGA.Empty_Inst_i_1__10_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__9_n_0 ),
        .Q(\read_info_status[0,1][Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hBABBCFCC8A880000)) 
    \Use_FPGA.Full_Inst_i_1__9 
       (.I0(\read_info_status[0,1][Almost_Full] ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .I5(\read_info_status[0,1][Full] ),
        .O(\Use_FPGA.Full_Inst_i_1__9_n_0 ));
  LUT3 #(
    .INIT(8'h75)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__6 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_1__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.queue_exist_i_i_1__6_n_0 ),
        .Q(ri_exist),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_34
   (bp_read_fifo_addr,
    bp_exist,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \bs_port_num_reg[0] ,
    bp_valid_normal,
    Q,
    ACLK,
    queue_pop,
    \arbiter_bp_push_prt[1][Valid] ,
    bs_exist,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_2 ,
    S_AXI_BVALID_I_reg,
    bp_early,
    bp_ready__0,
    \Use_Reg_Ctrl.queue_exist_i_reg_3 ,
    \Use_FPGA.Empty_Inst_0 ,
    S_AXI_BVALID_I_reg_0,
    wc_fifo_empty);
  output [3:0]bp_read_fifo_addr;
  output bp_exist;
  output [0:0]\Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output \bs_port_num_reg[0] ;
  output bp_valid_normal;
  input Q;
  input ACLK;
  input queue_pop;
  input \arbiter_bp_push_prt[1][Valid] ;
  input bs_exist;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  input S_AXI_BVALID_I_reg;
  input bp_early;
  input bp_ready__0;
  input \Use_Reg_Ctrl.queue_exist_i_reg_3 ;
  input \Use_FPGA.Empty_Inst_0 ;
  input S_AXI_BVALID_I_reg_0;
  input wc_fifo_empty;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__7_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__3_n_0 ;
  wire \Use_FPGA.Empty_Inst_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_1__4_n_0 ;
  wire [0:0]\Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_3 ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire bp_early;
  wire bp_exist;
  wire [3:0]bp_read_fifo_addr;
  wire bp_ready__0;
  wire bp_valid_normal;
  wire bs_exist;
  wire \bs_port_num_reg[0] ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_empty_next__9;
  wire queue_pop;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire wc_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h04F40000)) 
    \S_AXI_BID[0]_i_2 
       (.I0(S_AXI_BVALID_I_reg_0),
        .I1(S_AXI_BVALID_I_reg),
        .I2(bp_early),
        .I3(wc_fifo_empty),
        .I4(bp_exist),
        .O(bp_valid_normal));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__7_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hBABBEFEE8A882022)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__7 
       (.I0(queue_almost_empty_next__9),
        .I1(\Use_FPGA.Empty_Inst_n_0 ),
        .I2(queue_pop),
        .I3(bp_exist),
        .I4(\arbiter_bp_push_prt[1][Valid] ),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__7_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__15 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\arbiter_bp_push_prt[1][Valid] ),
        .I2(bp_read_fifo_addr[3]),
        .I3(bp_read_fifo_addr[2]),
        .I4(bp_read_fifo_addr[0]),
        .I5(bp_read_fifo_addr[1]),
        .O(queue_almost_empty_next__9));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bp_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(bp_exist),
        .I2(queue_pop),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT6 #(
    .INIT(64'h4444544444444444)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_2 ),
        .I2(S_AXI_BVALID_I_reg),
        .I3(bp_exist),
        .I4(bp_early),
        .I5(bp_ready__0),
        .O(\bs_port_num_reg[0] ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bp_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(bp_exist),
        .I2(queue_pop),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bp_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(bp_exist),
        .I2(queue_pop),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bp_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(bp_exist),
        .I2(queue_pop),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__3_n_0 ),
        .Q(\Use_FPGA.Empty_Inst_n_0 ),
        .S(Q));
  LUT6 #(
    .INIT(64'h00000000CECCEEEE)) 
    \Use_FPGA.Empty_Inst_i_1__3 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_n_0 ),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_3 ),
        .I3(\Use_FPGA.Empty_Inst_0 ),
        .I4(bp_exist),
        .I5(\arbiter_bp_push_prt[1][Valid] ),
        .O(\Use_FPGA.Empty_Inst_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__1 
       (.I0(\bs_port_num_reg[0] ),
        .I1(bs_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT4 #(
    .INIT(16'hDF55)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__4 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_3 ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(bp_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_1__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.queue_exist_i_i_1__4_n_0 ),
        .Q(bp_exist),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized5
   (rip_refresh_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    rip_read_fifo_addr,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    rip_push_safe,
    S0_AXI_ARREADY,
    \rd_port_access[0][Valid] ,
    rip_pop,
    Q,
    ACLK,
    S0_AXI_ARREADY_0,
    S0_AXI_ARVALID);
  output rip_refresh_reg;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output [3:0]rip_read_fifo_addr;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  output rip_push_safe;
  output S0_AXI_ARREADY;
  output \rd_port_access[0][Valid] ;
  input rip_pop;
  input Q;
  input ACLK;
  input S0_AXI_ARREADY_0;
  input S0_AXI_ARVALID;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_ARREADY;
  wire S0_AXI_ARREADY_0;
  wire S0_AXI_ARVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__9_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__16_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_n_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire queue_pop_srl;
  wire \rd_port_access[0][Valid] ;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_req_valid;
  wire rip_pop;
  wire rip_push_safe;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h8)) 
    S0_AXI_ARREADY_INST_0
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(S0_AXI_ARREADY_0),
        .O(S0_AXI_ARREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__9 
       (.I0(rip_read_fifo_addr[3]),
        .I1(rip_read_fifo_addr[2]),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__16 
       (.I0(rip_read_fifo_addr[0]),
        .I1(rip_read_fifo_addr[1]),
        .I2(rip_read_fifo_addr[3]),
        .I3(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__16_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__5 
       (.I0(S0_AXI_ARVALID),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(S0_AXI_ARREADY_0),
        .O(read_req_valid));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(rip_read_fifo_addr[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(rip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(rip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(rip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .Q(\Use_FPGA.Empty_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .Q(\Use_FPGA.Full_Inst_n_0 ),
        .R(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .Q(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT5 #(
    .INIT(32'h81FF7FFF)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2 
       (.I0(rip_push_safe),
        .I1(rip_read_fifo_addr[0]),
        .I2(rip_read_fifo_addr[1]),
        .I3(rip_read_fifo_addr[3]),
        .I4(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_4 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1 
       (.D(D),
        .\Use_FPGA.Almost_Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .\Use_FPGA.Almost_Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst_i_2__9_n_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .\Use_FPGA.Almost_Full_Inst_0 (rip_push_safe),
        .\Use_FPGA.Almost_Full_Inst_1 (\Use_FPGA.Almost_Full_Inst_i_2__16_n_0 ),
        .\Use_FPGA.Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .\Use_FPGA.Empty_Inst_1 (\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Almost_Full_Inst_n_0 ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Empty_Inst_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .queue_pop_srl(queue_pop_srl),
        .rip_refresh_reg(rip_refresh_reg));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_5 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1 
       (.\Use_FPGA.Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_FPGA.Empty_Inst_n_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .rip_pop(rip_pop),
        .rip_refresh_reg(rip_refresh_reg));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ),
        .Q(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_2__16 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(S0_AXI_ARVALID),
        .O(\rd_port_access[0][Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16_i_1 
       (.I0(S0_AXI_ARREADY_0),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(S0_AXI_ARVALID),
        .I3(\Use_FPGA.Full_Inst_n_0 ),
        .O(rip_push_safe));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized5_20
   (rip_refresh_reg,
    \Use_FPGA.Full_Inst_0 ,
    rip_read_fifo_addr,
    read_req_ready,
    E,
    A29_out,
    D,
    \Read_External_Narrow.rd_length_reg[6] ,
    rip_pop,
    Q,
    ACLK,
    read_req_valid,
    Q0_in,
    I4,
    ri_exist,
    r_miss_fifo_empty,
    I5,
    S0_AXI_GEN_RREADY,
    out,
    \Read_External_Narrow.rd_rest_reg[1] ,
    \Read_External_Narrow.rd_rest_reg[1]_0 ,
    \Read_External_Narrow.rd_length_reg[7] ,
    \Read_External_Narrow.rd_length_reg[7]_0 ,
    \Read_External_Narrow.rd_length_reg[6]_0 ,
    \Read_External_Narrow.rd_length_reg[5] ,
    \Read_External_Narrow.rd_length_reg[4] );
  output rip_refresh_reg;
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]rip_read_fifo_addr;
  output read_req_ready;
  output [0:0]E;
  output A29_out;
  output [1:0]D;
  output [7:0]\Read_External_Narrow.rd_length_reg[6] ;
  input rip_pop;
  input Q;
  input ACLK;
  input read_req_valid;
  input Q0_in;
  input I4;
  input ri_exist;
  input r_miss_fifo_empty;
  input I5;
  input S0_AXI_GEN_RREADY;
  input [1:0]out;
  input [1:0]\Read_External_Narrow.rd_rest_reg[1] ;
  input [1:0]\Read_External_Narrow.rd_rest_reg[1]_0 ;
  input [7:0]\Read_External_Narrow.rd_length_reg[7] ;
  input [7:0]\Read_External_Narrow.rd_length_reg[7]_0 ;
  input \Read_External_Narrow.rd_length_reg[6]_0 ;
  input \Read_External_Narrow.rd_length_reg[5] ;
  input \Read_External_Narrow.rd_length_reg[4] ;

  wire A29_out;
  wire ACLK;
  wire CI;
  wire [1:0]D;
  wire DI;
  wire D_0;
  wire [0:0]E;
  wire I4;
  wire I5;
  wire LI;
  wire Q;
  wire Q0_in;
  wire \Read_External_Narrow.rd_length_reg[4] ;
  wire \Read_External_Narrow.rd_length_reg[5] ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[6] ;
  wire \Read_External_Narrow.rd_length_reg[6]_0 ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[7] ;
  wire [7:0]\Read_External_Narrow.rd_length_reg[7]_0 ;
  wire [1:0]\Read_External_Narrow.rd_rest_reg[1] ;
  wire [1:0]\Read_External_Narrow.rd_rest_reg[1]_0 ;
  wire S0_AXI_GEN_RREADY;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__17_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire [1:0]out;
  wire queue_almost_full_next__9;
  wire queue_pop_srl;
  wire r_miss_fifo_empty;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_req_ready;
  wire read_req_valid;
  wire refresh_counter1;
  wire ri_exist;
  wire rip_pop;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__17 
       (.I0(rip_read_fifo_addr[3]),
        .I1(rip_read_fifo_addr[2]),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__17_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__13 
       (.I0(rip_read_fifo_addr[0]),
        .I1(rip_read_fifo_addr[1]),
        .I2(rip_read_fifo_addr[3]),
        .I3(rip_read_fifo_addr[2]),
        .I4(Q0_in),
        .I5(\Use_FPGA.Full_Inst_0 ),
        .O(queue_almost_full_next__9));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(rip_read_fifo_addr[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(rip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(rip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(rip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .Q(\Use_FPGA.Empty_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .Q(read_req_ready),
        .S(Q));
  LUT6 #(
    .INIT(64'h100EFFFFEFFFFFFF)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0 
       (.I0(Q0_in),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[1]),
        .I4(rip_read_fifo_addr[3]),
        .I5(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_31 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1 
       (.D_0(D_0),
        .Q0_in(Q0_in),
        .\Use_FPGA.Almost_Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .\Use_FPGA.Almost_Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst_i_2__17_n_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .\Use_FPGA.Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .\Use_FPGA.Empty_Inst_1 (\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Almost_Full_Inst_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (rip_refresh_reg),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_1 (\Use_FPGA.Empty_Inst_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_2 (\Use_FPGA.Full_Inst_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .queue_almost_full_next__9(queue_almost_full_next__9),
        .queue_pop_srl(queue_pop_srl),
        .read_req_ready(read_req_ready));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_32 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1 
       (.D(D),
        .E(E),
        .I4(I4),
        .I5(I5),
        .\Read_External_Narrow.rd_length_reg[4] (\Read_External_Narrow.rd_length_reg[4] ),
        .\Read_External_Narrow.rd_length_reg[5] (\Read_External_Narrow.rd_length_reg[5] ),
        .\Read_External_Narrow.rd_length_reg[6] (\Read_External_Narrow.rd_length_reg[6] ),
        .\Read_External_Narrow.rd_length_reg[6]_0 (\Read_External_Narrow.rd_length_reg[6]_0 ),
        .\Read_External_Narrow.rd_length_reg[7] (\Read_External_Narrow.rd_length_reg[7] ),
        .\Read_External_Narrow.rd_length_reg[7]_0 (\Read_External_Narrow.rd_length_reg[7]_0 ),
        .\Read_External_Narrow.rd_rest_reg[1] (\Read_External_Narrow.rd_rest_reg[1] ),
        .\Read_External_Narrow.rd_rest_reg[1]_0 (\Read_External_Narrow.rd_rest_reg[1]_0 ),
        .S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .\Use_Reg_Ctrl.queue_exist_i_reg (rip_refresh_reg),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .out(out),
        .r_miss_fifo_empty(r_miss_fifo_empty),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__3 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .O(refresh_counter1));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(refresh_counter1),
        .Q(\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .R(Q));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__157 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .I1(ri_exist),
        .O(A29_out));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7
   (queue_full,
    bip_read_fifo_addr,
    Q,
    ACLK,
    queue_pop7_out,
    queue_push9_out,
    S0_AXI_AWVALID,
    \Use_FPGA.Almost_Full_Inst_0 );
  output queue_full;
  output [3:0]bip_read_fifo_addr;
  input Q;
  input ACLK;
  input queue_pop7_out;
  input queue_push9_out;
  input S0_AXI_AWVALID;
  input \Use_FPGA.Almost_Full_Inst_0 ;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_AWVALID;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__8_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__6_n_0 ;
  wire [3:0]bip_read_fifo_addr;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_full;
  wire queue_pop7_out;
  wire queue_push9_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFE3FF33CC20CC00)) 
    \Use_FPGA.Almost_Full_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__8_n_0 ),
        .I1(queue_pop7_out),
        .I2(S0_AXI_AWVALID),
        .I3(queue_full),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__8 
       (.I0(bip_read_fifo_addr[0]),
        .I1(bip_read_fifo_addr[1]),
        .I2(bip_read_fifo_addr[3]),
        .I3(bip_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__8_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bip_read_fifo_addr[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__6_n_0 ),
        .Q(queue_full),
        .R(Q));
  LUT5 #(
    .INIT(32'h33203300)) 
    \Use_FPGA.Full_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(queue_pop7_out),
        .I2(S0_AXI_AWVALID),
        .I3(queue_full),
        .I4(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__6_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_0
   (bp_read_fifo_addr,
    queue_pop7_out,
    queue_pop,
    S_AXI_BVALID_I_reg,
    \bs_port_num_reg[0] ,
    Q,
    ACLK,
    \arbiter_bp_push_prt[0][Valid] ,
    \S_AXI_BID_reg[0] ,
    \S_AXI_BID_reg[0]_0 ,
    \S_AXI_BID_reg[0]_1 ,
    \S_AXI_BID_reg[0]_2 ,
    wc_fifo_empty,
    S_AXI_BVALID_I_reg_0,
    S0_AXI_BREADY,
    bs_slv);
  output [3:0]bp_read_fifo_addr;
  output queue_pop7_out;
  output queue_pop;
  output S_AXI_BVALID_I_reg;
  output \bs_port_num_reg[0] ;
  input Q;
  input ACLK;
  input \arbiter_bp_push_prt[0][Valid] ;
  input \S_AXI_BID_reg[0] ;
  input \S_AXI_BID_reg[0]_0 ;
  input \S_AXI_BID_reg[0]_1 ;
  input \S_AXI_BID_reg[0]_2 ;
  input wc_fifo_empty;
  input S_AXI_BVALID_I_reg_0;
  input S0_AXI_BREADY;
  input bs_slv;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_BREADY;
  wire \S_AXI_BID[0]_i_2__0_n_0 ;
  wire \S_AXI_BID_reg[0] ;
  wire \S_AXI_BID_reg[0]_0 ;
  wire \S_AXI_BID_reg[0]_1 ;
  wire \S_AXI_BID_reg[0]_2 ;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__11_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__7_n_0 ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire bp_fifo_empty;
  wire [3:0]bp_read_fifo_addr;
  wire \bs_port_num_reg[0] ;
  wire bs_slv;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_empty_next__4;
  wire queue_pop;
  wire queue_pop7_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire wc_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hAA000202AAAA0202)) 
    \S_AXI_BID[0]_i_1__0 
       (.I0(\S_AXI_BID[0]_i_2__0_n_0 ),
        .I1(\S_AXI_BID_reg[0]_0 ),
        .I2(\S_AXI_BID_reg[0]_1 ),
        .I3(\S_AXI_BID_reg[0] ),
        .I4(\S_AXI_BID_reg[0]_2 ),
        .I5(wc_fifo_empty),
        .O(queue_pop7_out));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'h0D)) 
    \S_AXI_BID[0]_i_2__0 
       (.I0(S_AXI_BVALID_I_reg_0),
        .I1(S0_AXI_BREADY),
        .I2(bp_fifo_empty),
        .O(\S_AXI_BID[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT3 #(
    .INIT(8'hAE)) 
    S_AXI_BVALID_I_i_1__0
       (.I0(queue_pop7_out),
        .I1(S_AXI_BVALID_I_reg_0),
        .I2(S0_AXI_BREADY),
        .O(S_AXI_BVALID_I_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__11_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'hEB28)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__11 
       (.I0(queue_almost_empty_next__4),
        .I1(queue_pop7_out),
        .I2(\arbiter_bp_push_prt[0][Valid] ),
        .I3(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__11_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__10 
       (.I0(bp_fifo_empty),
        .I1(\arbiter_bp_push_prt[0][Valid] ),
        .I2(bp_read_fifo_addr[3]),
        .I3(bp_read_fifo_addr[2]),
        .I4(bp_read_fifo_addr[0]),
        .I5(bp_read_fifo_addr[1]),
        .O(queue_almost_empty_next__4));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__3 
       (.I0(queue_pop7_out),
        .I1(\S_AXI_BID_reg[0] ),
        .O(queue_pop));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bp_read_fifo_addr[0]),
        .S(Q));
  LUT6 #(
    .INIT(64'h00001011FFFFFFFF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4__0 
       (.I0(\S_AXI_BID_reg[0]_0 ),
        .I1(bp_fifo_empty),
        .I2(S0_AXI_BREADY),
        .I3(S_AXI_BVALID_I_reg_0),
        .I4(\S_AXI_BID_reg[0]_2 ),
        .I5(bs_slv),
        .O(\bs_port_num_reg[0] ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bp_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bp_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bp_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__7_n_0 ),
        .Q(bp_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT4 #(
    .INIT(16'hCB08)) 
    \Use_FPGA.Empty_Inst_i_1__7 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_pop7_out),
        .I2(\arbiter_bp_push_prt[0][Valid] ),
        .I3(bp_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__7_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_110
   (\Use_FPGA.Full_Inst_0 ,
    bp_fifo_empty,
    bp_read_fifo_addr,
    sel,
    \Use_FPGA.Empty_Inst_0 ,
    M0_AXI_BREADY,
    \Use_FPGA.Full_Inst_1 ,
    S_2,
    Q,
    ACLK,
    M0_AXI_BVALID,
    \Use_FPGA.Empty_Inst_1 ,
    \Use_FPGA.Empty_Inst_2 ,
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 ,
    wmad_fifo_empty,
    aw_fifo_full,
    \pending_write_reg[0] ,
    update_need_aw,
    \pending_write_reg[0]_0 );
  output \Use_FPGA.Full_Inst_0 ;
  output bp_fifo_empty;
  output [3:0]bp_read_fifo_addr;
  output sel;
  output \Use_FPGA.Empty_Inst_0 ;
  output M0_AXI_BREADY;
  output [0:0]\Use_FPGA.Full_Inst_1 ;
  output S_2;
  input Q;
  input ACLK;
  input M0_AXI_BVALID;
  input [1:0]\Use_FPGA.Empty_Inst_1 ;
  input \Use_FPGA.Empty_Inst_2 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 ;
  input wmad_fifo_empty;
  input aw_fifo_full;
  input \pending_write_reg[0] ;
  input update_need_aw;
  input \pending_write_reg[0]_0 ;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire M0_AXI_BREADY;
  wire M0_AXI_BVALID;
  wire Q;
  wire S_2;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__6_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__6_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__4_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire [1:0]\Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Empty_Inst_2 ;
  wire \Use_FPGA.Empty_Inst_i_1__2_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire [0:0]\Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_i_1__4_n_0 ;
  wire aw_fifo_full;
  wire bp_fifo_empty;
  wire [3:0]bp_read_fifo_addr;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire \pending_write_reg[0] ;
  wire \pending_write_reg[0]_0 ;
  wire queue_pop114_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire sel;
  wire update_need_aw;
  wire wmad_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    M0_AXI_BREADY_INST_0
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .O(M0_AXI_BREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__6_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFBAEF8A20BA208A)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(M0_AXI_BVALID),
        .I3(queue_pop114_out),
        .I4(bp_fifo_empty),
        .I5(\Use_FPGA.Almost_Empty_Inst_i_2__6_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__6_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__6 
       (.I0(bp_read_fifo_addr[2]),
        .I1(bp_read_fifo_addr[0]),
        .I2(bp_read_fifo_addr[1]),
        .I3(bp_read_fifo_addr[3]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__6_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT5 #(
    .INIT(32'hEFBA208A)) 
    \Use_FPGA.Almost_Full_Inst_i_1__4 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(M0_AXI_BVALID),
        .I3(queue_pop114_out),
        .I4(\Use_FPGA.Almost_Full_Inst_i_2__4_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hAAAAAAAABAAAAAAA)) 
    \Use_FPGA.Almost_Full_Inst_i_2__4 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(bp_read_fifo_addr[1]),
        .I2(bp_read_fifo_addr[2]),
        .I3(bp_read_fifo_addr[3]),
        .I4(M0_AXI_BVALID),
        .I5(bp_read_fifo_addr[0]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__4_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop114_out),
        .I3(sel),
        .I4(bp_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__2 
       (.I0(\Use_FPGA.Empty_Inst_1 [1]),
        .I1(\Use_FPGA.Empty_Inst_2 ),
        .O(queue_pop114_out));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__4 
       (.I0(M0_AXI_BVALID),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .O(sel));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bp_read_fifo_addr[0]),
        .S(Q));
  LUT5 #(
    .INIT(32'hFF8F8F8F)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3 
       (.I0(bp_fifo_empty),
        .I1(\Use_FPGA.Empty_Inst_1 [1]),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 ),
        .I3(\Use_FPGA.Empty_Inst_1 [0]),
        .I4(wmad_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_0 ));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop114_out),
        .I3(sel),
        .I4(bp_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bp_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop114_out),
        .I3(sel),
        .I4(bp_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bp_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop114_out),
        .I3(sel),
        .I4(bp_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bp_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__2_n_0 ),
        .Q(bp_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT5 #(
    .INIT(32'hF800F8F8)) 
    \Use_FPGA.Empty_Inst_i_1__2 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_pop114_out),
        .I2(bp_fifo_empty),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(M0_AXI_BVALID),
        .O(\Use_FPGA.Empty_Inst_i_1__2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__4_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT4 #(
    .INIT(16'h00EC)) 
    \Use_FPGA.Full_Inst_i_1__4 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(M0_AXI_BVALID),
        .I3(queue_pop114_out),
        .O(\Use_FPGA.Full_Inst_i_1__4_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__165 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(M0_AXI_BVALID),
        .O(S_2));
  LUT6 #(
    .INIT(64'h44444444444B4444)) 
    \pending_write[4]_i_1 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(M0_AXI_BVALID),
        .I2(aw_fifo_full),
        .I3(\pending_write_reg[0] ),
        .I4(update_need_aw),
        .I5(\pending_write_reg[0]_0 ),
        .O(\Use_FPGA.Full_Inst_1 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_112
   (ed_fifo_empty,
    ri_kind_reg,
    SS,
    wm_refresh_reg,
    update_wm_pop_evict,
    queue_pop,
    update_evict_ongoing_reg,
    p_156_in,
    update_evict_ongoing_reg_0,
    update_read_resize_selected_reg,
    E,
    update_rd_offset_cnt0,
    \update_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    A17_out,
    D,
    \ri_addr_reg[3] ,
    \ri_addr_reg[2] ,
    ADDRB,
    A_N,
    \ri_way_reg[1] ,
    \ri_way_reg[1]_0 ,
    \ri_way_reg[1]_1 ,
    S,
    update_wm_pop_normal_hold_reg,
    update_wm_pop_evict_hold_reg,
    Q,
    ACLK,
    queue_pop131_out,
    ri_kind,
    \wm_remove_unaligned_reg[0] ,
    \wm_remove_unaligned_reg[0]_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    update_wm_pop_normal_hold_reg_0,
    wm_exist,
    wm_evict,
    update_wm_pop_evict_hold,
    queue_pop136_out,
    ri_evicted,
    wm_will_use,
    update_word_cnt_en,
    update_evict_ongoing90_out,
    update_evict_ongoing_reg_1,
    update_word_cnt_last,
    ri_exist,
    M0_AXI_RVALID,
    update_evict_valid_reg,
    update_evict_valid_reg_0,
    update_read_resize_finish_reg,
    update_read_resize_finish_reg_0,
    \update_rd_offset_cnt_reg[0] ,
    M0_AXI_RLAST,
    \update_read_data_info[0,0][Last] ,
    ri_hot_port,
    ri_port,
    \Use_FPGA_1.LUT_Refresh_Inst_i_2_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    ri_allocate,
    \update_rd_offset_cnt_reg[0]_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    update_word_cnt_first,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    out,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ,
    wma_fifo_empty,
    wma_merge_done,
    update_read_resize_selected_reg_0,
    update_wm_pop_normal_hold_reg_1);
  output ed_fifo_empty;
  output ri_kind_reg;
  output [0:0]SS;
  output wm_refresh_reg;
  output update_wm_pop_evict;
  output queue_pop;
  output update_evict_ongoing_reg;
  output p_156_in;
  output update_evict_ongoing_reg_0;
  output update_read_resize_selected_reg;
  output [0:0]E;
  output update_rd_offset_cnt0;
  output \update_read_data_info[0,0][Valid] ;
  output \update_read_data_info[0,1][Valid] ;
  output A17_out;
  output [3:0]D;
  output \ri_addr_reg[3] ;
  output \ri_addr_reg[2] ;
  output [8:0]ADDRB;
  output A_N;
  output \ri_way_reg[1] ;
  output \ri_way_reg[1]_0 ;
  output \ri_way_reg[1]_1 ;
  output S;
  output update_wm_pop_normal_hold_reg;
  output update_wm_pop_evict_hold_reg;
  input Q;
  input ACLK;
  input queue_pop131_out;
  input ri_kind;
  input \wm_remove_unaligned_reg[0] ;
  input \wm_remove_unaligned_reg[0]_0 ;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input update_wm_pop_normal_hold_reg_0;
  input wm_exist;
  input wm_evict;
  input update_wm_pop_evict_hold;
  input queue_pop136_out;
  input ri_evicted;
  input wm_will_use;
  input update_word_cnt_en;
  input update_evict_ongoing90_out;
  input update_evict_ongoing_reg_1;
  input update_word_cnt_last;
  input ri_exist;
  input M0_AXI_RVALID;
  input update_evict_valid_reg;
  input update_evict_valid_reg_0;
  input update_read_resize_finish_reg;
  input update_read_resize_finish_reg_0;
  input \update_rd_offset_cnt_reg[0] ;
  input M0_AXI_RLAST;
  input \update_read_data_info[0,0][Last] ;
  input [0:0]ri_hot_port;
  input ri_port;
  input \Use_FPGA_1.LUT_Refresh_Inst_i_2_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input ri_allocate;
  input \update_rd_offset_cnt_reg[0]_0 ;
  input [10:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  input update_word_cnt_first;
  input [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input [6:0]out;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  input wma_fifo_empty;
  input wma_merge_done;
  input update_read_resize_selected_reg_0;
  input update_wm_pop_normal_hold_reg_1;

  wire A17_out;
  wire ACLK;
  wire [8:0]ADDRB;
  wire A_N;
  wire CI;
  wire [3:0]D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire M0_AXI_RLAST;
  wire M0_AXI_RVALID;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire [10:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire [3:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  wire Q;
  wire S;
  wire [0:0]SS;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__1_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__1_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_1.LUT_Refresh_Inst_i_2_0 ;
  wire \Use_FPGA_1.LUT_Refresh_Inst_i_2_n_0 ;
  wire \Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire ed_fifo_empty;
  wire [6:0]out;
  wire p_156_in;
  wire queue_pop;
  wire queue_pop131_out;
  wire queue_pop136_out;
  wire queue_push133_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \ri_addr_reg[2] ;
  wire \ri_addr_reg[3] ;
  wire ri_allocate;
  wire ri_evicted;
  wire ri_exist;
  wire [0:0]ri_hot_port;
  wire ri_kind;
  wire ri_kind_reg;
  wire ri_port;
  wire \ri_way_reg[1] ;
  wire \ri_way_reg[1]_0 ;
  wire \ri_way_reg[1]_1 ;
  wire update_evict_ongoing90_out;
  wire update_evict_ongoing_reg;
  wire update_evict_ongoing_reg_0;
  wire update_evict_ongoing_reg_1;
  wire update_evict_valid_reg;
  wire update_evict_valid_reg_0;
  wire update_rd_offset_cnt0;
  wire \update_rd_offset_cnt_reg[0] ;
  wire \update_rd_offset_cnt_reg[0]_0 ;
  wire \update_read_data_info[0,0][Last] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_read_resize_finish_i_2_n_0;
  wire update_read_resize_finish_reg;
  wire update_read_resize_finish_reg_0;
  wire update_read_resize_selected_i_2_n_0;
  wire update_read_resize_selected_i_3_n_0;
  wire update_read_resize_selected_reg;
  wire update_read_resize_selected_reg_0;
  wire update_wm_pop_evict;
  wire update_wm_pop_evict_hold;
  wire update_wm_pop_evict_hold_reg;
  wire update_wm_pop_normal_hold_reg;
  wire update_wm_pop_normal_hold_reg_0;
  wire update_wm_pop_normal_hold_reg_1;
  wire update_word_cnt_en;
  wire update_word_cnt_first;
  wire update_word_cnt_last;
  wire wm_evict;
  wire wm_exist;
  wire wm_refresh_reg;
  wire \wm_remove_unaligned_reg[0] ;
  wire \wm_remove_unaligned_reg[0]_0 ;
  wire wm_will_use;
  wire wma_fifo_empty;
  wire wma_merge_done;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_12 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [10]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[6]),
        .O(ADDRB[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_13 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [9]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[5]),
        .O(ADDRB[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_14 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [8]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[4]),
        .O(ADDRB[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_15 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [7]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[3]),
        .O(ADDRB[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_16 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [6]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[2]),
        .O(ADDRB[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_17 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [5]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[1]),
        .O(ADDRB[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_18 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [4]),
        .I1(update_evict_ongoing_reg_0),
        .I2(out[0]),
        .O(ADDRB[2]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_19 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [3]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ),
        .I2(update_word_cnt_first),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [3]),
        .O(ADDRB[1]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_20 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [2]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ),
        .I2(update_word_cnt_first),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [2]),
        .O(ADDRB[0]));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_21 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ),
        .I2(update_word_cnt_first),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [1]),
        .O(\ri_addr_reg[3] ));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_22 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [0]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ),
        .I2(update_word_cnt_first),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 [0]),
        .O(\ri_addr_reg[2] ));
  LUT5 #(
    .INIT(32'hBBBBFBBB)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58 
       (.I0(\Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ),
        .I1(ri_allocate),
        .I2(wma_fifo_empty),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I4(wma_merge_done),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__1_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hBEEEB2228EEE8222)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_push133_out),
        .I2(queue_pop136_out),
        .I3(ri_evicted),
        .I4(ed_fifo_empty),
        .I5(\Use_FPGA.Almost_Empty_Inst_i_2__1_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__1 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop131_out),
        .I3(queue_push133_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3_n_0 ),
        .I1(update_word_cnt_last),
        .I2(update_evict_ongoing_reg_1),
        .O(update_wm_pop_evict));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2 
       (.I0(wm_will_use),
        .I1(update_wm_pop_evict),
        .O(queue_push133_out));
  LUT6 #(
    .INIT(64'h000000000000FFBF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3 
       (.I0(update_evict_ongoing_reg_1),
        .I1(M0_AXI_RVALID),
        .I2(ri_evicted),
        .I3(ed_fifo_empty),
        .I4(update_evict_valid_reg),
        .I5(update_evict_valid_reg_0),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  LUT6 #(
    .INIT(64'hAAA2FFF3FFA2FFFF)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1 
       (.I0(update_wm_pop_normal_hold_reg_0),
        .I1(wm_evict),
        .I2(update_wm_pop_evict_hold),
        .I3(update_wm_pop_evict),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I5(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .O(queue_pop));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop131_out),
        .I3(queue_push133_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop131_out),
        .I3(queue_push133_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop131_out),
        .I3(queue_push133_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__0_n_0 ),
        .Q(ed_fifo_empty),
        .S(Q));
  LUT5 #(
    .INIT(32'hB2228222)) 
    \Use_FPGA.Empty_Inst_i_1__0 
       (.I0(ed_fifo_empty),
        .I1(queue_push133_out),
        .I2(queue_pop136_out),
        .I3(ri_evicted),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Empty_Inst_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_1 
       (.I0(update_read_resize_finish_reg_0),
        .I1(update_read_resize_finish_reg),
        .I2(ri_hot_port),
        .I3(\Use_FPGA_1.LUT_Refresh_Inst_i_2_n_0 ),
        .O(\update_read_data_info[0,0][Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_1__0 
       (.I0(ri_port),
        .I1(update_read_resize_finish_reg_0),
        .I2(update_read_resize_finish_reg),
        .I3(\Use_FPGA_1.LUT_Refresh_Inst_i_2_n_0 ),
        .O(\update_read_data_info[0,1][Valid] ));
  LUT5 #(
    .INIT(32'hFFEAFFFF)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I1(update_evict_ongoing_reg_1),
        .I2(ri_allocate),
        .I3(\Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ),
        .I4(\update_rd_offset_cnt_reg[0]_0 ),
        .O(\Use_FPGA_1.LUT_Refresh_Inst_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h20FF)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_3 
       (.I0(ri_evicted),
        .I1(\Use_FPGA_1.LUT_Refresh_Inst_i_2_0 ),
        .I2(ed_fifo_empty),
        .I3(M0_AXI_RVALID),
        .O(\Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFF17371FFFFFFFF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I2(update_wm_pop_evict),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I4(update_wm_pop_normal_hold_reg_0),
        .I5(wm_exist),
        .O(wm_refresh_reg));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'hCCAFFFAF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [0]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [0]),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [1]),
        .I3(update_evict_ongoing_reg_0),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [1]),
        .O(A_N));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT5 #(
    .INIT(32'hCCAFFFAF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__0 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [1]),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [0]),
        .I3(update_evict_ongoing_reg_0),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [0]),
        .O(\ri_way_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'h335FFF5F)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [1]),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [0]),
        .I3(update_evict_ongoing_reg_0),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [0]),
        .O(\ri_way_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__2 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [1]),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 [0]),
        .I3(update_evict_ongoing_reg_0),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 [0]),
        .O(\ri_way_reg[1]_1 ));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__1 
       (.I0(ri_evicted),
        .I1(\Use_FPGA_1.LUT_Refresh_Inst_i_2_0 ),
        .I2(ed_fifo_empty),
        .O(A17_out));
  LUT3 #(
    .INIT(8'hD5)) 
    \Using_FPGA.MUXCY_I_i_1__209 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3_n_0 ),
        .I1(ri_exist),
        .I2(update_evict_ongoing_reg_0),
        .O(S));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_2 
       (.I0(update_evict_ongoing_reg_1),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_58_n_0 ),
        .O(update_evict_ongoing_reg_0));
  LUT5 #(
    .INIT(32'h00007770)) 
    update_evict_ongoing_i_1
       (.I0(update_wm_pop_evict),
        .I1(update_word_cnt_en),
        .I2(update_evict_ongoing90_out),
        .I3(update_evict_ongoing_reg_1),
        .I4(Q),
        .O(update_evict_ongoing_reg));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h2A)) 
    update_evict_valid_i_1
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3_n_0 ),
        .I1(ri_exist),
        .I2(update_evict_ongoing_reg_0),
        .O(p_156_in));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \update_rd_len_cnt[7]_i_1 
       (.I0(update_read_resize_finish_reg),
        .I1(update_rd_offset_cnt0),
        .O(E));
  LUT6 #(
    .INIT(64'h00000000AAAA080A)) 
    update_read_resize_finish_i_1
       (.I0(update_read_resize_selected_i_2_n_0),
        .I1(update_read_resize_finish_reg),
        .I2(update_read_resize_finish_i_2_n_0),
        .I3(ri_kind),
        .I4(update_read_resize_finish_reg_0),
        .I5(Q),
        .O(update_read_resize_selected_reg));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT2 #(
    .INIT(4'h7)) 
    update_read_resize_finish_i_2
       (.I0(update_rd_offset_cnt0),
        .I1(\update_read_data_info[0,0][Last] ),
        .O(update_read_resize_finish_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT2 #(
    .INIT(4'h1)) 
    update_read_resize_first_i_1
       (.I0(\update_rd_offset_cnt_reg[0] ),
        .I1(\Use_FPGA_1.LUT_Refresh_Inst_i_2_n_0 ),
        .O(update_rd_offset_cnt0));
  LUT4 #(
    .INIT(16'hFFF1)) 
    update_read_resize_selected_i_1
       (.I0(update_read_resize_selected_i_2_n_0),
        .I1(ri_kind),
        .I2(update_read_resize_selected_i_3_n_0),
        .I3(Q),
        .O(ri_kind_reg));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    update_read_resize_selected_i_2
       (.I0(\Use_FPGA_1.LUT_Refresh_Inst_i_2_n_0 ),
        .I1(\update_rd_offset_cnt_reg[0] ),
        .I2(M0_AXI_RLAST),
        .O(update_read_resize_selected_i_2_n_0));
  LUT6 #(
    .INIT(64'hEFEF0FFFE0E00000)) 
    update_read_resize_selected_i_3
       (.I0(update_read_resize_selected_reg_0),
        .I1(M0_AXI_RLAST),
        .I2(update_rd_offset_cnt0),
        .I3(\update_read_data_info[0,0][Last] ),
        .I4(ri_kind),
        .I5(update_read_resize_finish_reg),
        .O(update_read_resize_selected_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'h000E)) 
    update_wm_pop_evict_hold_i_1
       (.I0(update_wm_pop_evict_hold),
        .I1(update_wm_pop_evict),
        .I2(queue_pop),
        .I3(Q),
        .O(update_wm_pop_evict_hold_reg));
  LUT4 #(
    .INIT(16'h000E)) 
    update_wm_pop_normal_hold_i_1
       (.I0(update_wm_pop_normal_hold_reg_0),
        .I1(update_wm_pop_normal_hold_reg_1),
        .I2(queue_pop),
        .I3(Q),
        .O(update_wm_pop_normal_hold_reg));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \update_word_cnt_next[2]_i_1 
       (.I0(\ri_addr_reg[2] ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \update_word_cnt_next[3]_i_1 
       (.I0(\ri_addr_reg[2] ),
        .I1(\ri_addr_reg[3] ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \update_word_cnt_next[4]_i_1 
       (.I0(\ri_addr_reg[3] ),
        .I1(\ri_addr_reg[2] ),
        .I2(ADDRB[0]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \update_word_cnt_next[5]_i_1 
       (.I0(ADDRB[0]),
        .I1(\ri_addr_reg[2] ),
        .I2(\ri_addr_reg[3] ),
        .I3(ADDRB[1]),
        .O(D[3]));
  LUT4 #(
    .INIT(16'hFBAA)) 
    \wm_remove_unaligned[5]_i_1 
       (.I0(Q),
        .I1(\wm_remove_unaligned_reg[0] ),
        .I2(\wm_remove_unaligned_reg[0]_0 ),
        .I3(wm_refresh_reg),
        .O(SS));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_113
   (e_fifo_empty,
    e_read_fifo_addr,
    \Use_FPGA.Full_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \Use_FPGA.Empty_Inst_0 ,
    Q,
    ACLK,
    update_wm_pop_evict,
    update_done_evict,
    \Use_FPGA.Full_Inst_1 ,
    wm_exist,
    update_wm_pop_evict_hold,
    wm_evict,
    update_word_cnt_en);
  output e_fifo_empty;
  output [3:0]e_read_fifo_addr;
  output \Use_FPGA.Full_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \Use_FPGA.Empty_Inst_0 ;
  input Q;
  input ACLK;
  input update_wm_pop_evict;
  input update_done_evict;
  input \Use_FPGA.Full_Inst_1 ;
  input wm_exist;
  input update_wm_pop_evict_hold;
  input wm_evict;
  input update_word_cnt_en;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__0_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__2_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_i_1_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire e_fifo_empty;
  wire e_fifo_full;
  wire [3:0]e_read_fifo_addr;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_evict;
  wire update_wm_pop_evict;
  wire update_wm_pop_evict_hold;
  wire update_word_cnt_en;
  wire wm_evict;
  wire wm_exist;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hBEB28E82)) 
    \Use_FPGA.Almost_Empty_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(update_wm_pop_evict),
        .I3(e_fifo_empty),
        .I4(\Use_FPGA.Almost_Empty_Inst_i_2__0_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__0 
       (.I0(e_read_fifo_addr[3]),
        .I1(e_read_fifo_addr[0]),
        .I2(e_read_fifo_addr[1]),
        .I3(e_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFF20AA8AFF20AABA)) 
    \Use_FPGA.Almost_Full_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(update_done_evict),
        .I2(\Use_FPGA.Full_Inst_1 ),
        .I3(e_fifo_full),
        .I4(update_wm_pop_evict),
        .I5(\Use_FPGA.Almost_Full_Inst_i_2__2_n_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'hFFDF)) 
    \Use_FPGA.Almost_Full_Inst_i_2__2 
       (.I0(e_read_fifo_addr[3]),
        .I1(e_read_fifo_addr[1]),
        .I2(e_read_fifo_addr[2]),
        .I3(e_read_fifo_addr[0]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__2_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(update_wm_pop_evict),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(e_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__3 
       (.I0(e_fifo_full),
        .I1(\Use_FPGA.Full_Inst_1 ),
        .I2(update_done_evict),
        .O(\Use_FPGA.Full_Inst_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(e_read_fifo_addr[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(update_wm_pop_evict),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(e_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(e_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(update_wm_pop_evict),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(e_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(e_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(update_wm_pop_evict),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(e_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(e_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1_n_0 ),
        .Q(e_fifo_empty),
        .S(Q));
  LUT6 #(
    .INIT(64'hF8F8F8F8F800F8F8)) 
    \Use_FPGA.Empty_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(update_wm_pop_evict),
        .I2(e_fifo_empty),
        .I3(update_done_evict),
        .I4(\Use_FPGA.Full_Inst_1 ),
        .I5(e_fifo_full),
        .O(\Use_FPGA.Empty_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1_n_0 ),
        .Q(e_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h0000FF08)) 
    \Use_FPGA.Full_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_1 ),
        .I2(update_done_evict),
        .I3(e_fifo_full),
        .I4(update_wm_pop_evict),
        .O(\Use_FPGA.Full_Inst_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__189 
       (.I0(\Use_FPGA.Full_Inst_1 ),
        .I1(update_done_evict),
        .I2(e_fifo_full),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT3 #(
    .INIT(8'hF2)) 
    update_done_evict_i_1
       (.I0(\Use_FPGA.Full_Inst_1 ),
        .I1(e_fifo_full),
        .I2(update_done_evict),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  LUT5 #(
    .INIT(32'hFBFFFFFF)) 
    update_evict_ongoing_i_4
       (.I0(e_fifo_empty),
        .I1(wm_exist),
        .I2(update_wm_pop_evict_hold),
        .I3(wm_evict),
        .I4(update_word_cnt_en),
        .O(\Use_FPGA.Empty_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_115
   (wmad_fifo_empty,
    wm_kind_reg,
    \Use_FPGA.Empty_Inst_0 ,
    Q,
    ACLK,
    queue_pop118_out,
    queue_push120_out,
    wm_kind,
    wm_local_wrap,
    \update_wr_offset_cnt[5]_i_6_0 ,
    \update_wr_offset_cnt[5]_i_3_0 ,
    \update_wr_offset_cnt[5]_i_6_1 ,
    update_write_miss_ongoing,
    \S_AXI_BID_reg[0] ,
    \S_AXI_BID_reg[0]_0 ,
    bp_fifo_empty,
    bs_slv);
  output wmad_fifo_empty;
  output wm_kind_reg;
  output \Use_FPGA.Empty_Inst_0 ;
  input Q;
  input ACLK;
  input queue_pop118_out;
  input queue_push120_out;
  input wm_kind;
  input wm_local_wrap;
  input [5:0]\update_wr_offset_cnt[5]_i_6_0 ;
  input [5:0]\update_wr_offset_cnt[5]_i_3_0 ;
  input [5:0]\update_wr_offset_cnt[5]_i_6_1 ;
  input update_write_miss_ongoing;
  input [1:0]\S_AXI_BID_reg[0] ;
  input \S_AXI_BID_reg[0]_0 ;
  input bp_fifo_empty;
  input bs_slv;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire [1:0]\S_AXI_BID_reg[0] ;
  wire \S_AXI_BID_reg[0]_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__3_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__3_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__19_n_0 ;
  wire bp_fifo_empty;
  wire bs_slv;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_pop118_out;
  wire queue_push120_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire [4:0]update_wr_offset;
  wire \update_wr_offset_cnt[5]_i_13_n_0 ;
  wire [5:0]\update_wr_offset_cnt[5]_i_3_0 ;
  wire \update_wr_offset_cnt[5]_i_5_n_0 ;
  wire [5:0]\update_wr_offset_cnt[5]_i_6_0 ;
  wire [5:0]\update_wr_offset_cnt[5]_i_6_1 ;
  wire \update_wr_offset_cnt[5]_i_6_n_0 ;
  wire \update_wr_offset_cnt[5]_i_7_n_0 ;
  wire update_write_miss_ongoing;
  wire wm_kind;
  wire wm_kind_reg;
  wire wm_local_wrap;
  wire wmad_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hFF8F8F8FFFFFFFFF)) 
    \S_AXI_BID[0]_i_3 
       (.I0(wmad_fifo_empty),
        .I1(\S_AXI_BID_reg[0] [0]),
        .I2(\S_AXI_BID_reg[0]_0 ),
        .I3(\S_AXI_BID_reg[0] [1]),
        .I4(bp_fifo_empty),
        .I5(bs_slv),
        .O(\Use_FPGA.Empty_Inst_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__3_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCBBB888)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__3 
       (.I0(wmad_fifo_empty),
        .I1(queue_push120_out),
        .I2(\Use_FPGA.Almost_Empty_Inst_i_2__3_n_0 ),
        .I3(queue_pop118_out),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__3_n_0 ));
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__3 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__3_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop118_out),
        .I3(queue_push120_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop118_out),
        .I3(queue_push120_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop118_out),
        .I3(queue_push120_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop118_out),
        .I3(queue_push120_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__19_n_0 ),
        .Q(wmad_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h00F8)) 
    \Use_FPGA.Empty_Inst_i_1__19 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_pop118_out),
        .I2(wmad_fifo_empty),
        .I3(queue_push120_out),
        .O(\Use_FPGA.Empty_Inst_i_1__19_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_11 
       (.I0(\update_wr_offset_cnt[5]_i_6_1 [3]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt[5]_i_6_0 [3]),
        .O(update_wr_offset[3]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_12 
       (.I0(\update_wr_offset_cnt[5]_i_6_1 [2]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt[5]_i_6_0 [2]),
        .O(update_wr_offset[2]));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_13 
       (.I0(\update_wr_offset_cnt[5]_i_6_1 [5]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt[5]_i_6_0 [5]),
        .O(\update_wr_offset_cnt[5]_i_13_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_14 
       (.I0(\update_wr_offset_cnt[5]_i_6_1 [1]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt[5]_i_6_0 [1]),
        .O(update_wr_offset[1]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_15 
       (.I0(\update_wr_offset_cnt[5]_i_6_1 [0]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt[5]_i_6_0 [0]),
        .O(update_wr_offset[0]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_16 
       (.I0(\update_wr_offset_cnt[5]_i_6_1 [4]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt[5]_i_6_0 [4]),
        .O(update_wr_offset[4]));
  LUT5 #(
    .INIT(32'h0000FE00)) 
    \update_wr_offset_cnt[5]_i_3 
       (.I0(\update_wr_offset_cnt[5]_i_5_n_0 ),
        .I1(\update_wr_offset_cnt[5]_i_6_n_0 ),
        .I2(\update_wr_offset_cnt[5]_i_7_n_0 ),
        .I3(wm_kind),
        .I4(wm_local_wrap),
        .O(wm_kind_reg));
  LUT6 #(
    .INIT(64'h121212FF1212FF12)) 
    \update_wr_offset_cnt[5]_i_5 
       (.I0(\update_wr_offset_cnt[5]_i_6_0 [3]),
        .I1(\update_wr_offset_cnt[5]_i_3_0 [3]),
        .I2(update_wr_offset[3]),
        .I3(\update_wr_offset_cnt[5]_i_6_0 [2]),
        .I4(\update_wr_offset_cnt[5]_i_3_0 [2]),
        .I5(update_wr_offset[2]),
        .O(\update_wr_offset_cnt[5]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h121212FF1212FF12)) 
    \update_wr_offset_cnt[5]_i_6 
       (.I0(\update_wr_offset_cnt[5]_i_6_0 [5]),
        .I1(\update_wr_offset_cnt[5]_i_3_0 [5]),
        .I2(\update_wr_offset_cnt[5]_i_13_n_0 ),
        .I3(\update_wr_offset_cnt[5]_i_6_0 [1]),
        .I4(\update_wr_offset_cnt[5]_i_3_0 [1]),
        .I5(update_wr_offset[1]),
        .O(\update_wr_offset_cnt[5]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h121212FF1212FF12)) 
    \update_wr_offset_cnt[5]_i_7 
       (.I0(\update_wr_offset_cnt[5]_i_6_0 [0]),
        .I1(\update_wr_offset_cnt[5]_i_3_0 [0]),
        .I2(update_wr_offset[0]),
        .I3(\update_wr_offset_cnt[5]_i_6_0 [4]),
        .I4(\update_wr_offset_cnt[5]_i_3_0 [4]),
        .I5(update_wr_offset[4]),
        .O(\update_wr_offset_cnt[5]_i_7_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_33
   (\Use_FPGA.Full_Inst_0 ,
    queue_index,
    S_AXI_BVALID_I_reg,
    bp_refresh_reg,
    queue_pop,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    A,
    \S_AXI_BRESP_I_reg[1] ,
    \S_AXI_BRESP_I_reg[0] ,
    Q,
    ACLK,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ,
    bp_early_reg,
    bp_exist,
    first_bresp,
    bp_early,
    S0_AXI_GEN_BREADY,
    S_AXI_BVALID_I_reg_0,
    queue_done,
    \S_AXI_BRESP_I_reg[0]_0 ,
    write_fail_completed,
    bp_valid_normal,
    S_AXI_AVALID_q,
    wip_fifo_full,
    queue_almost_full,
    S0_AXI_GEN_BRESP,
    \S_AXI_BRESP_I_reg[0]_1 ,
    out);
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]queue_index;
  output S_AXI_BVALID_I_reg;
  output bp_refresh_reg;
  output queue_pop;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output A;
  output \S_AXI_BRESP_I_reg[1] ;
  output \S_AXI_BRESP_I_reg[0] ;
  input Q;
  input ACLK;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  input bp_early_reg;
  input bp_exist;
  input first_bresp;
  input bp_early;
  input S0_AXI_GEN_BREADY;
  input S_AXI_BVALID_I_reg_0;
  input queue_done;
  input \S_AXI_BRESP_I_reg[0]_0 ;
  input write_fail_completed;
  input bp_valid_normal;
  input S_AXI_AVALID_q;
  input wip_fifo_full;
  input queue_almost_full;
  input [1:0]S0_AXI_GEN_BRESP;
  input [1:0]\S_AXI_BRESP_I_reg[0]_1 ;
  input [1:0]out;

  wire A;
  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_GEN_BREADY;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire S_AXI_AVALID_q;
  wire S_AXI_BRESP_I;
  wire \S_AXI_BRESP_I[1]_i_3_n_0 ;
  wire \S_AXI_BRESP_I_reg[0] ;
  wire \S_AXI_BRESP_I_reg[0]_0 ;
  wire [1:0]\S_AXI_BRESP_I_reg[0]_1 ;
  wire \S_AXI_BRESP_I_reg[1] ;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__9_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__14_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__5_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__5_n_0 ;
  wire bp_early;
  wire bp_early_reg;
  wire bp_exist;
  wire bp_refresh_reg;
  wire bp_valid_normal;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire first_bresp;
  wire [1:0]out;
  wire queue_almost_full;
  wire queue_almost_full_0;
  wire queue_almost_full_next__7;
  wire queue_done;
  wire queue_empty;
  wire [3:0]queue_index;
  wire queue_pop;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire wip_fifo_full;
  wire write_fail_completed;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hDDDDDDDD00D00000)) 
    \S_AXI_BID[0]_i_1 
       (.I0(S_AXI_BVALID_I_reg_0),
        .I1(S0_AXI_GEN_BREADY),
        .I2(bp_early_reg),
        .I3(queue_empty),
        .I4(write_fail_completed),
        .I5(bp_valid_normal),
        .O(S_AXI_BVALID_I_reg));
  LUT6 #(
    .INIT(64'h000000002E222222)) 
    \S_AXI_BRESP_I[0]_i_1 
       (.I0(S0_AXI_GEN_BRESP[0]),
        .I1(S_AXI_BRESP_I),
        .I2(\S_AXI_BRESP_I_reg[0]_1 [0]),
        .I3(\S_AXI_BRESP_I_reg[0]_1 [1]),
        .I4(out[0]),
        .I5(\S_AXI_BRESP_I[1]_i_3_n_0 ),
        .O(\S_AXI_BRESP_I_reg[0] ));
  LUT6 #(
    .INIT(64'h000000002E222222)) 
    \S_AXI_BRESP_I[1]_i_1 
       (.I0(S0_AXI_GEN_BRESP[1]),
        .I1(S_AXI_BRESP_I),
        .I2(\S_AXI_BRESP_I_reg[0]_1 [0]),
        .I3(\S_AXI_BRESP_I_reg[0]_1 [1]),
        .I4(out[1]),
        .I5(\S_AXI_BRESP_I[1]_i_3_n_0 ),
        .O(\S_AXI_BRESP_I_reg[1] ));
  LUT4 #(
    .INIT(16'hAA08)) 
    \S_AXI_BRESP_I[1]_i_2 
       (.I0(S_AXI_BVALID_I_reg),
        .I1(\S_AXI_BRESP_I_reg[0]_0 ),
        .I2(bp_early),
        .I3(first_bresp),
        .O(S_AXI_BRESP_I));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT5 #(
    .INIT(32'hEEEAAAAA)) 
    \S_AXI_BRESP_I[1]_i_3 
       (.I0(Q),
        .I1(first_bresp),
        .I2(bp_early),
        .I3(bp_early_reg),
        .I4(S_AXI_BVALID_I_reg),
        .O(\S_AXI_BRESP_I[1]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hBABB)) 
    S_AXI_BVALID_I_i_1
       (.I0(Q),
        .I1(S_AXI_BVALID_I_reg),
        .I2(S0_AXI_GEN_BREADY),
        .I3(S_AXI_BVALID_I_reg_0),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__9_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hCFCFCFFAC0C0C00A)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__9 
       (.I0(queue_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__14_n_0 ),
        .I2(S_AXI_BVALID_I_reg),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .I4(queue_done),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__9_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__14 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__14_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(queue_almost_full_0),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT5 #(
    .INIT(32'hBBBE8882)) 
    \Use_FPGA.Almost_Full_Inst_i_1__5 
       (.I0(queue_almost_full_next__7),
        .I1(S_AXI_BVALID_I_reg),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(queue_done),
        .I4(queue_almost_full_0),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__11 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .I4(queue_done),
        .I5(\Use_FPGA.Full_Inst_0 ),
        .O(queue_almost_full_next__7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(S_AXI_BVALID_I_reg),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__3 
       (.I0(S_AXI_BVALID_I_reg),
        .I1(bp_early_reg),
        .O(queue_pop));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(S_AXI_BVALID_I_reg),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(S_AXI_BVALID_I_reg),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(S_AXI_BVALID_I_reg),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__5_n_0 ),
        .Q(queue_empty),
        .S(Q));
  LUT5 #(
    .INIT(32'hBBBC8880)) 
    \Use_FPGA.Empty_Inst_i_1__5 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(S_AXI_BVALID_I_reg),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(queue_done),
        .I4(queue_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__5_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__5_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT4 #(
    .INIT(16'h3032)) 
    \Use_FPGA.Full_Inst_i_1__5 
       (.I0(queue_almost_full_0),
        .I1(S_AXI_BVALID_I_reg),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(queue_done),
        .O(\Use_FPGA.Full_Inst_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \Using_FPGA.MUXCY_I_i_1__172 
       (.I0(S_AXI_AVALID_q),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(queue_almost_full_0),
        .I3(wip_fifo_full),
        .I4(queue_almost_full),
        .O(A));
  LUT3 #(
    .INIT(8'h4F)) 
    bp_early_i_1
       (.I0(bp_early_reg),
        .I1(S_AXI_BVALID_I_reg),
        .I2(bp_exist),
        .O(bp_refresh_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_408
   (\Use_FPGA.Full_Inst_0 ,
    \Use_FPGA.Empty_Inst_0 ,
    queue_index,
    S,
    D,
    SR,
    ACLK,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ,
    queue_push26_out,
    \pending_write_reg[1] ,
    update_need_aw,
    update_done_aw,
    M0_AXI_AWREADY,
    \Use_FPGA.Almost_Full_Inst_0 ,
    Q);
  output \Use_FPGA.Full_Inst_0 ;
  output \Use_FPGA.Empty_Inst_0 ;
  output [3:0]queue_index;
  output S;
  output [0:0]D;
  input [0:0]SR;
  input ACLK;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ;
  input queue_push26_out;
  input \pending_write_reg[1] ;
  input update_need_aw;
  input update_done_aw;
  input M0_AXI_AWREADY;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input [1:0]Q;

  wire ACLK;
  wire CI;
  wire [0:0]D;
  wire DI;
  wire D_0;
  wire LI;
  wire M0_AXI_AWREADY;
  wire [1:0]Q;
  wire S;
  wire [0:0]SR;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__13_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__19_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__9_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__8_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire \pending_write_reg[1] ;
  wire queue_almost_full_next__12;
  wire [3:0]queue_index;
  wire queue_push26_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_aw;
  wire update_need_aw;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__13_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hFCFFEFEECCCC2022)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__13 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__19_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(M0_AXI_AWREADY),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_push26_out),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__13_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__19 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__19_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hBABBEFEE8A882022)) 
    \Use_FPGA.Almost_Full_Inst_i_1__8 
       (.I0(queue_almost_full_next__12),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(M0_AXI_AWREADY),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_push26_out),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D_0));
  LUT6 #(
    .INIT(64'h1000FFFF10000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__5 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .I4(queue_push26_out),
        .I5(\Use_FPGA.Full_Inst_0 ),
        .O(queue_almost_full_next__12));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I3(queue_push26_out),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(SR));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I3(queue_push26_out),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I3(queue_push26_out),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I3(queue_push26_out),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__9_n_0 ),
        .Q(\Use_FPGA.Empty_Inst_0 ),
        .S(SR));
  LUT5 #(
    .INIT(32'h0000ECEE)) 
    \Use_FPGA.Empty_Inst_i_1__9 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(M0_AXI_AWREADY),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_push26_out),
        .O(\Use_FPGA.Empty_Inst_i_1__9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__8_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hBABBCFCC8A880000)) 
    \Use_FPGA.Full_Inst_i_1__8 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Empty_Inst_0 ),
        .I2(M0_AXI_AWREADY),
        .I3(\Use_FPGA.Almost_Full_Inst_0 ),
        .I4(queue_push26_out),
        .I5(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__8_n_0 ));
  LUT4 #(
    .INIT(16'hFF1F)) 
    \Using_FPGA.MUXCY_I_i_1__19 
       (.I0(\pending_write_reg[1] ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(update_need_aw),
        .I3(update_done_aw),
        .O(S));
  LUT6 #(
    .INIT(64'hAAAAAA9A55555565)) 
    \pending_write[1]_i_1 
       (.I0(Q[0]),
        .I1(update_done_aw),
        .I2(update_need_aw),
        .I3(\pending_write_reg[1] ),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .I5(Q[1]),
        .O(D));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_6
   (wc_fifo_empty,
    Q,
    ACLK,
    wc_ready,
    wip_pop);
  output wc_fifo_empty;
  input Q;
  input ACLK;
  input wc_ready;
  input wip_pop;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__8_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__4_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_empty_next__7;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire wc_fifo_empty;
  wire wc_ready;
  wire wip_pop;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__8_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'hEB28)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__8 
       (.I0(queue_almost_empty_next__7),
        .I1(wc_ready),
        .I2(wip_pop),
        .I3(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__8_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__13 
       (.I0(wc_fifo_empty),
        .I1(wip_pop),
        .I2(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .O(queue_almost_empty_next__7));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(wc_ready),
        .I3(wip_pop),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(wc_ready),
        .I3(wip_pop),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(wc_ready),
        .I3(wip_pop),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(wc_ready),
        .I3(wip_pop),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__4_n_0 ),
        .Q(wc_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'hCB08)) 
    \Use_FPGA.Empty_Inst_i_1__4 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(wc_ready),
        .I2(wip_pop),
        .I3(wc_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__4_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized9
   (E,
    wip_exist,
    queue_almost_full,
    \Use_FPGA.Full_Inst_0 ,
    queue_index,
    D_0,
    wip_pop,
    Q,
    ACLK,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ,
    wip_failed,
    w_fifo_empty,
    w_pop,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    wr_port_data_ready,
    queue_done,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output [0:0]E;
  output wip_exist;
  output queue_almost_full;
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]queue_index;
  output D_0;
  input wip_pop;
  input Q;
  input ACLK;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  input wip_failed;
  input w_fifo_empty;
  input w_pop;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input wr_port_data_ready;
  input queue_done;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire D_0;
  wire [0:0]E;
  wire LI;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__11_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire queue_almost_full;
  wire queue_almost_full_next__5;
  wire queue_done;
  wire [3:0]queue_index;
  wire queue_pop_srl;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire w_fifo_empty;
  wire w_pop;
  wire wip_exist;
  wire wip_failed;
  wire wip_pop;
  wire wr_port_data_ready;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0400040004FF0400)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__10 
       (.I0(wip_failed),
        .I1(wip_exist),
        .I2(w_fifo_empty),
        .I3(w_pop),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(wr_port_data_ready),
        .O(D_0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__11 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__11_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(queue_almost_full),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFFFFFFF00001000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__9 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .I4(queue_done),
        .I5(\Use_FPGA.Full_Inst_0 ),
        .O(queue_almost_full_next__5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* OPT_MODIFIED = "MLO" *) 
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop_srl),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .Q(\Use_FPGA.Empty_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(Q));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_18 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1 
       (.D(D),
        .E(E),
        .\Use_FPGA.Almost_Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .\Use_FPGA.Almost_Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst_i_2__11_n_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .\Use_FPGA.Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .\Use_FPGA.Empty_Inst_1 (\Use_FPGA.Full_Inst_0 ),
        .\Use_FPGA.Empty_Inst_2 (\Use_FPGA.Empty_Inst_n_0 ),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .queue_almost_full(queue_almost_full),
        .queue_almost_full_next__5(queue_almost_full_next__5),
        .queue_done(queue_done),
        .queue_pop_srl(queue_pop_srl));
  Fast_IP_Clock_system_cache_0_0_carry_or_n_19 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1 
       (.E(E),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .wip_exist(wip_exist),
        .wip_pop(wip_pop));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__2 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .O(S));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(E),
        .D(S),
        .Q(wip_exist),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_transaction_ordering" *) 
module Fast_IP_Clock_system_cache_0_0_sc_transaction_ordering
   (\Use_FPGA.Full_Inst ,
    \Use_FPGA.Empty_Inst ,
    write_data_almost_full,
    write_data_full,
    \Use_FPGA.Empty_Inst_0 ,
    \read_req_ordered_info[0][Valid] ,
    \Use_FPGA.Full_Inst_0 ,
    \read_req_ordered_info[0][Kind] ,
    \read_req_ordered_info[0][Prot] ,
    \write_req_ordered_info[0][Kind] ,
    \write_req_ordered_info[0][Prot] ,
    \write_data_ordered_info[0][Last] ,
    need_to_stall_write_reg_0,
    S,
    out,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ,
    ACLK,
    ARESET,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    queue_push26_out,
    queue_push,
    \Order_Optimization_4.buffer_addr_reg[0]_0 ,
    \M_AXI_ARPROT_reg[1] ,
    S_0,
    \read_req_info[0][Kind] ,
    \write_req_info[0][Kind] ,
    \write_data_info[0][Last] ,
    \write_req_info[0][Line_Only] ,
    update_need_aw,
    update_done_aw,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_need_ar,
    update_done_ar,
    M0_AXI_BVALID,
    bp_fifo_full,
    M0_AXI_AWREADY,
    \Use_FPGA.Almost_Full_Inst ,
    M_AXI_WVALID_I_reg,
    M0_AXI_WREADY,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_1 ,
    \Use_FPGA.Almost_Full_Inst_2 ,
    \write_data_info[0][Valid] ,
    in,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_AWADDR_reg[23] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WDATA_reg[31] ,
    E);
  output \Use_FPGA.Full_Inst ;
  output \Use_FPGA.Empty_Inst ;
  output write_data_almost_full;
  output write_data_full;
  output \Use_FPGA.Empty_Inst_0 ;
  output \read_req_ordered_info[0][Valid] ;
  output \Use_FPGA.Full_Inst_0 ;
  output \read_req_ordered_info[0][Kind] ;
  output [0:0]\read_req_ordered_info[0][Prot] ;
  output \write_req_ordered_info[0][Kind] ;
  output [0:0]\write_req_ordered_info[0][Prot] ;
  output \write_data_ordered_info[0][Last] ;
  output need_to_stall_write_reg_0;
  output S;
  output [23:0]out;
  output [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  output [2:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  output [23:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ;
  output [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ;
  output [1:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ;
  output [3:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  output [31:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  input ACLK;
  input ARESET;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input queue_push26_out;
  input queue_push;
  input \Order_Optimization_4.buffer_addr_reg[0]_0 ;
  input \M_AXI_ARPROT_reg[1] ;
  input S_0;
  input \read_req_info[0][Kind] ;
  input \write_req_info[0][Kind] ;
  input \write_data_info[0][Last] ;
  input \write_req_info[0][Line_Only] ;
  input update_need_aw;
  input update_done_aw;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_need_ar;
  input update_done_ar;
  input M0_AXI_BVALID;
  input bp_fifo_full;
  input M0_AXI_AWREADY;
  input \Use_FPGA.Almost_Full_Inst ;
  input M_AXI_WVALID_I_reg;
  input M0_AXI_WREADY;
  input \Use_FPGA.Almost_Full_Inst_0 ;
  input \Use_FPGA.Almost_Full_Inst_1 ;
  input \Use_FPGA.Almost_Full_Inst_2 ;
  input \write_data_info[0][Valid] ;
  input [23:0]in;
  input [7:0]\M_AXI_ARLEN_reg[7] ;
  input [2:0]\M_AXI_ARSIZE_reg[2] ;
  input [16:0]\M_AXI_AWADDR_reg[23] ;
  input [7:0]\M_AXI_AWLEN_reg[7] ;
  input [1:0]\M_AXI_AWSIZE_reg[1] ;
  input [3:0]\M_AXI_WSTRB_reg[3] ;
  input [31:0]\M_AXI_WDATA_reg[31] ;
  input [0:0]E;

  wire A;
  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [0:0]E;
  wire FIFO_AR_Pointer_n_6;
  wire FIFO_AW_Pointer_n_7;
  wire M0_AXI_AWREADY;
  wire M0_AXI_BVALID;
  wire M0_AXI_WREADY;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire \M_AXI_ARPROT_reg[1] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire [16:0]\M_AXI_AWADDR_reg[23] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire M_AXI_WVALID_I_reg;
  wire \Order_Optimization_4.BE_Block_Or_Inst2_n_1 ;
  wire [4:0]\Order_Optimization_4.buffer_addr_reg ;
  wire \Order_Optimization_4.buffer_addr_reg[0]_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_n_0 ;
  wire \Order_Optimization_4.search_count[0]_i_1_n_0 ;
  wire \Order_Optimization_4.search_count[4]_i_4_n_0 ;
  wire \Order_Optimization_4.search_count[4]_i_5_n_0 ;
  wire \Order_Optimization_4.search_count[4]_i_7_n_0 ;
  wire [4:0]\Order_Optimization_4.search_count_reg ;
  wire S;
  wire S_0;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_1 ;
  wire \Use_FPGA.Almost_Full_Inst_2 ;
  wire [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire [2:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  wire [23:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ;
  wire [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ;
  wire [1:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire [3:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  wire [31:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \ar_id_fifo_mem_reg[15][0]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][1]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][2]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][3]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][4]_srl16_n_0 ;
  wire ar_pop_i;
  wire ar_pop_or_reset;
  wire [3:0]ar_read_fifo_addr;
  wire [6:5]ar_seq_block;
  wire be_no_block_1to2;
  wire be_no_block_1to2_part;
  wire be_no_block_1to3;
  wire be_no_block_1to4;
  wire bp_fifo_full;
  wire [23:0]in;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_21;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire need_to_stall_write_reg_0;
  wire no_write_blocking_read;
  wire [23:0]out;
  wire [4:1]p_0_in;
  wire p_20_out;
  wire p_4_in__21;
  wire \pending_write[0]_i_1_n_0 ;
  wire \pending_write[2]_i_1_n_0 ;
  wire \pending_write[3]_i_1_n_0 ;
  wire \pending_write[4]_i_2_n_0 ;
  wire pending_write_is_1;
  wire pending_write_is_1_i_1_n_0;
  wire pending_write_is_1_i_2_n_0;
  wire [4:0]pending_write_reg;
  wire [6:0]plusOp;
  wire [4:0]plusOp__0;
  wire [23:6]protected_read_addr;
  wire protected_read_hit_high_n;
  wire protected_read_hit_n;
  wire protected_read_hit_other_n;
  wire [6:5]protected_seq_block;
  wire [3:0]queue_index;
  wire queue_push;
  wire queue_push26_out;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire \read_req_ordered_info[0][Kind] ;
  wire [0:0]\read_req_ordered_info[0][Prot] ;
  wire \read_req_ordered_info[0][Valid] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_done_aw;
  wire update_need_ar;
  wire update_need_aw;
  wire [4:0]w_read_fifo_addr;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_data_ordered_info[0][Last] ;
  wire \write_req_info[0][Kind] ;
  wire \write_req_info[0][Line_Only] ;
  wire \write_req_ordered_info[0][Kind] ;
  wire [0:0]\write_req_ordered_info[0][Prot] ;
  wire \write_seq_id[6]_i_2_n_0 ;
  wire [6:0]write_seq_id_reg;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][0]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][1]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][2]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][3]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][0]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][10]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][11]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][12]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][13]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][14]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][15]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][16]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][17]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][18]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][19]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][1]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][20]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][21]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][22]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][23]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][24]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][25]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][26]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][27]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][28]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][29]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][2]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][30]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][31]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][3]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][4]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][5]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][6]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][7]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][8]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][9]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Last][-1111111111]_srl32_Q31_UNCONNECTED ;

  Fast_IP_Clock_system_cache_0_0_carry_and_406 BE_Valid_And_Inst1
       (.A(A),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .no_write_blocking_read(no_write_blocking_read),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ));
  Fast_IP_Clock_system_cache_0_0_carry_and_407 BE_Valid_And_Inst2
       (.\Order_Optimization_4.buffer_addr_reg[0] (\Order_Optimization_4.buffer_addr_reg[0]_0 ),
        .ar_pop_i(ar_pop_i),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized16 FIFO_AR_Pointer
       (.A(A),
        .ACLK(ACLK),
        .Carry_OUT(protected_read_hit_n),
        .E(p_20_out),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .\Order_Optimization_4.buffer_addr_reg[0] (\Order_Optimization_4.search_count[4]_i_4_n_0 ),
        .\Order_Optimization_4.buffer_addr_reg[0]_0 (\Order_Optimization_4.search_count[4]_i_5_n_0 ),
        .\Order_Optimization_4.buffer_addr_reg[0]_1 (protected_seq_block),
        .Q(pending_write_reg[4:1]),
        .SR(ARESET_I),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 (\M_AXI_ARPROT_reg[1] ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_0 ),
        .ar_pop_i(ar_pop_i),
        .ar_read_fifo_addr(ar_read_fifo_addr),
        .bp_fifo_full(bp_fifo_full),
        .need_to_stall_write_i_2_0(write_seq_id_reg[6:5]),
        .need_to_stall_write_reg(FIFO_AR_Pointer_n_6),
        .need_to_stall_write_reg_0(need_to_stall_write_reg_0),
        .out(ar_seq_block),
        .p_4_in__21(p_4_in__21),
        .queue_push26_out(queue_push26_out),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .ri_fifo_full(ri_fifo_full),
        .update_done_ar(update_done_ar),
        .update_need_ar(update_need_ar));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_408 FIFO_AW_Pointer
       (.ACLK(ACLK),
        .D(FIFO_AW_Pointer_n_7),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .Q(pending_write_reg[1:0]),
        .S(S),
        .SR(ARESET_I),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 (\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .\pending_write_reg[1] (need_to_stall_write_reg_0),
        .queue_index(queue_index),
        .queue_push26_out(queue_push26_out),
        .update_done_aw(update_done_aw),
        .update_need_aw(update_need_aw));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized14 FIFO_W_Pointer
       (.A(w_read_fifo_addr),
        .ACLK(ACLK),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M_AXI_WVALID_I_reg(M_AXI_WVALID_I_reg),
        .Q(ARESET_I),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Almost_Full_Inst_1 (\Use_FPGA.Almost_Full_Inst_1 ),
        .\Use_FPGA.Almost_Full_Inst_2 (\Use_FPGA.Almost_Full_Inst_2 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_0 ),
        .queue_push(queue_push),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ));
  Fast_IP_Clock_system_cache_0_0_carry_latch_or__parameterized1_409 LU_Mem_PR_Latch_Inst1
       (.Q(ARESET_I),
        .SR(ar_pop_or_reset),
        .ar_pop_i(ar_pop_i));
  Fast_IP_Clock_system_cache_0_0_carry_or_410 \Order_Optimization_4.BE_Block_Or_Inst1 
       (.Carry_OUT(protected_read_hit_n),
        .S_0(S_0),
        .be_no_block_1to2_part(be_no_block_1to2_part),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .lopt_3(lopt_10),
        .lopt_4(lopt_11),
        .lopt_5(lopt_12),
        .lopt_6(lopt_13),
        .lopt_7(lopt_14));
  Fast_IP_Clock_system_cache_0_0_carry_or_411 \Order_Optimization_4.BE_Block_Or_Inst2 
       (.\Order_Optimization_4.search_count_reg[0] (\Order_Optimization_4.BE_Block_Or_Inst2_n_1 ),
        .Q(\Order_Optimization_4.search_count_reg ),
        .\Using_FPGA.MUXCY_I_0 (pending_write_reg),
        .be_no_block_1to2(be_no_block_1to2),
        .be_no_block_1to3(be_no_block_1to3),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14));
  Fast_IP_Clock_system_cache_0_0_carry_or_412 \Order_Optimization_4.BE_Block_Or_Inst3 
       (.M0_AXI_BVALID(M0_AXI_BVALID),
        .be_no_block_1to3(be_no_block_1to3),
        .be_no_block_1to4(be_no_block_1to4),
        .bp_fifo_full(bp_fifo_full),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lopt_3(lopt_18),
        .lopt_4(lopt_19),
        .lopt_5(A),
        .lopt_6(lopt_20),
        .lopt_7(lopt_21),
        .lopt_8(\Order_Optimization_4.buffer_addr_reg[0]_0 ),
        .pending_write_is_1(pending_write_is_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_413 \Order_Optimization_4.BE_Block_Or_Inst4 
       (.Q(pending_write_reg),
        .be_no_block_1to4(be_no_block_1to4),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .no_write_blocking_read(no_write_blocking_read));
  Fast_IP_Clock_system_cache_0_0_comparator__parameterized3 \Order_Optimization_4.Pos_Inst 
       (.Q(pending_write_reg),
        .\Using_FPGA.The_Compare[1].MUXCY_I_0 (\Order_Optimization_4.search_count_reg ),
        .be_no_block_1to2(be_no_block_1to2),
        .be_no_block_1to2_part(be_no_block_1to2_part),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .lopt_3(lopt_10),
        .lopt_4(lopt_11));
  Fast_IP_Clock_system_cache_0_0_comparator \Order_Optimization_4.Prot_Inst_High 
       (.Carry_OUT(protected_read_hit_high_n),
        .\Using_FPGA.The_Compare[3].MUXCY_I_0 (out[23:13]),
        .out(protected_read_addr[23:13]));
  Fast_IP_Clock_system_cache_0_0_comparator__parameterized1 \Order_Optimization_4.Prot_Inst_Low 
       (.Carry_IN(protected_read_hit_other_n),
        .Carry_OUT(protected_read_hit_n),
        .\Using_FPGA.The_Compare[2].MUXCY_I_0 (protected_read_addr[12:6]),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .out(out[12:6]));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_414 \Order_Optimization_4.Prot_Inst_Select 
       (.Carry_IN(protected_read_hit_other_n),
        .Carry_OUT(protected_read_hit_high_n),
        .\Using_FPGA.MUXCY_I_0 (\Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_n_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6));
  LUT1 #(
    .INIT(2'h1)) 
    \Order_Optimization_4.buffer_addr[0]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg [0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \Order_Optimization_4.buffer_addr[1]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg [0]),
        .I1(\Order_Optimization_4.buffer_addr_reg [1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \Order_Optimization_4.buffer_addr[2]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg [0]),
        .I1(\Order_Optimization_4.buffer_addr_reg [1]),
        .I2(\Order_Optimization_4.buffer_addr_reg [2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \Order_Optimization_4.buffer_addr[3]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg [1]),
        .I1(\Order_Optimization_4.buffer_addr_reg [0]),
        .I2(\Order_Optimization_4.buffer_addr_reg [2]),
        .I3(\Order_Optimization_4.buffer_addr_reg [3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \Order_Optimization_4.buffer_addr[4]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg [2]),
        .I1(\Order_Optimization_4.buffer_addr_reg [0]),
        .I2(\Order_Optimization_4.buffer_addr_reg [1]),
        .I3(\Order_Optimization_4.buffer_addr_reg [3]),
        .I4(\Order_Optimization_4.buffer_addr_reg [4]),
        .O(plusOp__0[4]));
  FDRE \Order_Optimization_4.buffer_addr_reg[0] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp__0[0]),
        .Q(\Order_Optimization_4.buffer_addr_reg [0]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[1] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp__0[1]),
        .Q(\Order_Optimization_4.buffer_addr_reg [1]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[2] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp__0[2]),
        .Q(\Order_Optimization_4.buffer_addr_reg [2]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[3] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp__0[3]),
        .Q(\Order_Optimization_4.buffer_addr_reg [3]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[4] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp__0[4]),
        .Q(\Order_Optimization_4.buffer_addr_reg [4]),
        .R(ar_pop_or_reset));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[10]),
        .Q(protected_read_addr[10]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[11]),
        .Q(protected_read_addr[11]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[12]),
        .Q(protected_read_addr[12]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [6]),
        .Q(protected_read_addr[13]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [7]),
        .Q(protected_read_addr[14]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [8]),
        .Q(protected_read_addr[15]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [9]),
        .Q(protected_read_addr[16]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [10]),
        .Q(protected_read_addr[17]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [11]),
        .Q(protected_read_addr[18]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [12]),
        .Q(protected_read_addr[19]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [13]),
        .Q(protected_read_addr[20]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [14]),
        .Q(protected_read_addr[21]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [15]),
        .Q(protected_read_addr[22]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [16]),
        .Q(protected_read_addr[23]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[6]),
        .Q(protected_read_addr[6]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[7]),
        .Q(protected_read_addr[7]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[8]),
        .Q(protected_read_addr[8]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[9]),
        .Q(protected_read_addr[9]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\write_req_info[0][Line_Only] ),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[0]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[1]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[2]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[3]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[4]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[5]),
        .Q(protected_seq_block[5]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg[6]),
        .Q(protected_seq_block[6]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32_Q31_UNCONNECTED ));
  LUT1 #(
    .INIT(2'h1)) 
    \Order_Optimization_4.search_count[0]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg [0]),
        .O(\Order_Optimization_4.search_count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Order_Optimization_4.search_count[1]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg [0]),
        .I1(\Order_Optimization_4.search_count_reg [1]),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \Order_Optimization_4.search_count[2]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg [0]),
        .I1(\Order_Optimization_4.search_count_reg [1]),
        .I2(\Order_Optimization_4.search_count_reg [2]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \Order_Optimization_4.search_count[3]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg [1]),
        .I1(\Order_Optimization_4.search_count_reg [0]),
        .I2(\Order_Optimization_4.search_count_reg [2]),
        .I3(\Order_Optimization_4.search_count_reg [3]),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \Order_Optimization_4.search_count[4]_i_2 
       (.I0(\Order_Optimization_4.search_count_reg [2]),
        .I1(\Order_Optimization_4.search_count_reg [0]),
        .I2(\Order_Optimization_4.search_count_reg [1]),
        .I3(\Order_Optimization_4.search_count_reg [3]),
        .I4(\Order_Optimization_4.search_count_reg [4]),
        .O(p_0_in[4]));
  LUT5 #(
    .INIT(32'hB2FF00B2)) 
    \Order_Optimization_4.search_count[4]_i_4 
       (.I0(\Order_Optimization_4.BE_Block_Or_Inst2_n_1 ),
        .I1(pending_write_reg[3]),
        .I2(\Order_Optimization_4.search_count_reg [3]),
        .I3(pending_write_reg[4]),
        .I4(\Order_Optimization_4.search_count_reg [4]),
        .O(\Order_Optimization_4.search_count[4]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    \Order_Optimization_4.search_count[4]_i_5 
       (.I0(\Order_Optimization_4.search_count_reg [0]),
        .I1(\Order_Optimization_4.search_count_reg [1]),
        .I2(\Order_Optimization_4.search_count_reg [2]),
        .I3(\Order_Optimization_4.search_count_reg [3]),
        .I4(\Order_Optimization_4.search_count_reg [4]),
        .O(\Order_Optimization_4.search_count[4]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hB2FF00B2)) 
    \Order_Optimization_4.search_count[4]_i_6 
       (.I0(\Order_Optimization_4.search_count[4]_i_7_n_0 ),
        .I1(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ),
        .I2(\ar_id_fifo_mem_reg[15][3]_srl16_n_0 ),
        .I3(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_n_0 ),
        .I4(\ar_id_fifo_mem_reg[15][4]_srl16_n_0 ),
        .O(p_4_in__21));
  LUT6 #(
    .INIT(64'h2F02FFFF00002F02)) 
    \Order_Optimization_4.search_count[4]_i_7 
       (.I0(\ar_id_fifo_mem_reg[15][0]_srl16_n_0 ),
        .I1(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_n_0 ),
        .I2(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_n_0 ),
        .I3(\ar_id_fifo_mem_reg[15][1]_srl16_n_0 ),
        .I4(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ),
        .I5(\ar_id_fifo_mem_reg[15][2]_srl16_n_0 ),
        .O(\Order_Optimization_4.search_count[4]_i_7_n_0 ));
  FDSE \Order_Optimization_4.search_count_reg[0] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(\Order_Optimization_4.search_count[0]_i_1_n_0 ),
        .Q(\Order_Optimization_4.search_count_reg [0]),
        .S(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[1] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[1]),
        .Q(\Order_Optimization_4.search_count_reg [1]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[2] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[2]),
        .Q(\Order_Optimization_4.search_count_reg [2]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[3] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[3]),
        .Q(\Order_Optimization_4.search_count_reg [3]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[4] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[4]),
        .Q(\Order_Optimization_4.search_count_reg [4]),
        .R(ar_pop_or_reset));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__18 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[0]),
        .Q(out[0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][10]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[10]),
        .Q(out[10]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][11]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[11]),
        .Q(out[11]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][12]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[12]),
        .Q(out[12]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][13]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[13]),
        .Q(out[13]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][14]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[14]),
        .Q(out[14]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][15]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[15]),
        .Q(out[15]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][16]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[16]),
        .Q(out[16]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][17]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[17]),
        .Q(out[17]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][18]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[18]),
        .Q(out[18]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][19]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[19]),
        .Q(out[19]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[1]),
        .Q(out[1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][20]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[20]),
        .Q(out[20]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][21]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[21]),
        .Q(out[21]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][22]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[22]),
        .Q(out[22]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][23]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[23]),
        .Q(out[23]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[2]),
        .Q(out[2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][3]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[3]),
        .Q(out[3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][4]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[4]),
        .Q(out[4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][5]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[5]),
        .Q(out[5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][6]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[6]),
        .Q(out[6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][7]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[7]),
        .Q(out[7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][8]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[8]),
        .Q(out[8]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][9]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(in[9]),
        .Q(out[9]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\read_req_info[0][Kind] ),
        .Q(\read_req_ordered_info[0][Kind] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [2]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [3]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [4]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [5]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [6]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARLEN_reg[7] [7]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Prot] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Prot][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Prot][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\read_req_ordered_info[0][Prot] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Size][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARSIZE_reg[2] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Size][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARSIZE_reg[2] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Size][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(\M_AXI_ARSIZE_reg[2] [2]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[0]),
        .Q(\ar_id_fifo_mem_reg[15][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[1]),
        .Q(\ar_id_fifo_mem_reg[15][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[2]),
        .Q(\ar_id_fifo_mem_reg[15][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][3]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[3]),
        .Q(\ar_id_fifo_mem_reg[15][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][4]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[4]),
        .Q(\ar_id_fifo_mem_reg[15][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][5]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[5]),
        .Q(ar_seq_block[5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][6]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(\M_AXI_ARPROT_reg[1] ),
        .CLK(ACLK),
        .D(write_seq_id_reg[6]),
        .Q(ar_seq_block[6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][10]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[10]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [10]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][11]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[11]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [11]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][12]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[12]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [12]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][13]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [6]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [13]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][14]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [7]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [14]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][15]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [8]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [15]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][16]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [9]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [16]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][17]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [10]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [17]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][18]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [11]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [18]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][19]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [12]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [19]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][20]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [13]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [20]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][21]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [14]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [21]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][22]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [15]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [22]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][23]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [16]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [23]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][2]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [2]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][3]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [3]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][4]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [4]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][5]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWADDR_reg[23] [5]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][6]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[6]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][7]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[7]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][8]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[8]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [8]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][9]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[9]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [9]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\write_req_info[0][Kind] ),
        .Q(\write_req_ordered_info[0][Kind] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [2]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [3]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [4]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [5]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [6]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWLEN_reg[7] [7]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Prot] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Prot][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Prot][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\write_req_ordered_info[0][Prot] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Size][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWSIZE_reg[1] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Size][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\M_AXI_AWSIZE_reg[1] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_3 [1]));
  FDRE need_to_stall_write_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_AR_Pointer_n_6),
        .Q(need_to_stall_write_reg_0),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \pending_write[0]_i_1 
       (.I0(pending_write_reg[0]),
        .O(\pending_write[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \pending_write[2]_i_1 
       (.I0(pending_write_reg[0]),
        .I1(queue_push26_out),
        .I2(pending_write_reg[2]),
        .I3(pending_write_reg[1]),
        .O(\pending_write[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \pending_write[3]_i_1 
       (.I0(queue_push26_out),
        .I1(pending_write_reg[0]),
        .I2(pending_write_reg[1]),
        .I3(pending_write_reg[3]),
        .I4(pending_write_reg[2]),
        .O(\pending_write[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFF8000FFFE0001)) 
    \pending_write[4]_i_2 
       (.I0(pending_write_reg[1]),
        .I1(pending_write_reg[0]),
        .I2(queue_push26_out),
        .I3(pending_write_reg[2]),
        .I4(pending_write_reg[4]),
        .I5(pending_write_reg[3]),
        .O(\pending_write[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h2323322320200220)) 
    pending_write_is_1_i_1
       (.I0(pending_write_is_1_i_2_n_0),
        .I1(ARESET_I),
        .I2(queue_push26_out),
        .I3(M0_AXI_BVALID),
        .I4(bp_fifo_full),
        .I5(pending_write_is_1),
        .O(pending_write_is_1_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000006)) 
    pending_write_is_1_i_2
       (.I0(queue_push26_out),
        .I1(pending_write_reg[1]),
        .I2(pending_write_reg[2]),
        .I3(pending_write_reg[0]),
        .I4(pending_write_reg[3]),
        .I5(pending_write_reg[4]),
        .O(pending_write_is_1_i_2_n_0));
  FDRE pending_write_is_1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(pending_write_is_1_i_1_n_0),
        .Q(pending_write_is_1),
        .R(1'b0));
  FDRE \pending_write_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(\pending_write[0]_i_1_n_0 ),
        .Q(pending_write_reg[0]),
        .R(ARESET_I));
  FDRE \pending_write_reg[1] 
       (.C(ACLK),
        .CE(E),
        .D(FIFO_AW_Pointer_n_7),
        .Q(pending_write_reg[1]),
        .R(ARESET_I));
  FDRE \pending_write_reg[2] 
       (.C(ACLK),
        .CE(E),
        .D(\pending_write[2]_i_1_n_0 ),
        .Q(pending_write_reg[2]),
        .R(ARESET_I));
  FDRE \pending_write_reg[3] 
       (.C(ACLK),
        .CE(E),
        .D(\pending_write[3]_i_1_n_0 ),
        .Q(pending_write_reg[3]),
        .R(ARESET_I));
  FDRE \pending_write_reg[4] 
       (.C(ACLK),
        .CE(E),
        .D(\pending_write[4]_i_2_n_0 ),
        .Q(pending_write_reg[4]),
        .R(ARESET_I));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][0]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WSTRB_reg[3] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [0]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][0]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][1]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WSTRB_reg[3] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [1]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][1]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][2]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WSTRB_reg[3] [2]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [2]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][2]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][3]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WSTRB_reg[3] [3]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [3]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][3]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][0]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [0]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [0]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][0]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][10]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [10]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [10]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][10]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][11]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [11]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [11]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][11]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][12]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [12]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [12]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][12]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][13]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [13]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [13]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][13]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][14]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][14]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [14]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [14]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][14]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][15]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][15]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [15]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [15]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][15]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][16]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [16]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [16]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][16]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][17]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [17]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [17]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][17]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][18]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [18]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [18]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][18]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][19]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [19]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [19]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][19]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][1]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [1]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [1]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][1]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][20]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [20]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [20]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][20]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][21]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [21]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [21]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][21]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][22]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [22]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [22]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][22]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][23]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [23]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [23]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][23]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][24]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [24]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [24]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][24]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][25]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [25]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [25]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][25]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][26]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [26]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [26]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][26]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][27]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [27]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [27]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][27]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][28]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [28]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [28]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][28]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][29]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [29]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [29]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][29]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][2]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [2]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [2]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][2]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][30]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][30]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [30]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [30]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][30]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][31]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [31]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [31]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][31]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][3]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [3]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [3]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][3]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][4]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [4]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [4]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][4]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][5]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [5]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [5]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][5]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][6]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [6]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [6]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][6]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][7]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [7]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [7]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][7]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][8]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [8]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [8]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][8]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][9]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\M_AXI_WDATA_reg[31] [9]),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [9]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][9]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Last] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Last][-1111111111]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Last][-1111111111]_srl32 
       (.A(w_read_fifo_addr),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\write_data_info[0][Last] ),
        .Q(\write_data_ordered_info[0][Last] ),
        .Q31(\NLW_w_fifo_mem_reg[31][Last][-1111111111]_srl32_Q31_UNCONNECTED ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \write_seq_id[0]_i_1 
       (.I0(write_seq_id_reg[0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \write_seq_id[1]_i_1 
       (.I0(write_seq_id_reg[0]),
        .I1(write_seq_id_reg[1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \write_seq_id[2]_i_1 
       (.I0(write_seq_id_reg[0]),
        .I1(write_seq_id_reg[1]),
        .I2(write_seq_id_reg[2]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \write_seq_id[3]_i_1 
       (.I0(write_seq_id_reg[1]),
        .I1(write_seq_id_reg[0]),
        .I2(write_seq_id_reg[2]),
        .I3(write_seq_id_reg[3]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \write_seq_id[4]_i_1 
       (.I0(write_seq_id_reg[2]),
        .I1(write_seq_id_reg[0]),
        .I2(write_seq_id_reg[1]),
        .I3(write_seq_id_reg[3]),
        .I4(write_seq_id_reg[4]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \write_seq_id[5]_i_1 
       (.I0(write_seq_id_reg[3]),
        .I1(write_seq_id_reg[1]),
        .I2(write_seq_id_reg[0]),
        .I3(write_seq_id_reg[2]),
        .I4(write_seq_id_reg[4]),
        .I5(write_seq_id_reg[5]),
        .O(plusOp[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \write_seq_id[6]_i_1 
       (.I0(\write_seq_id[6]_i_2_n_0 ),
        .I1(write_seq_id_reg[5]),
        .I2(write_seq_id_reg[6]),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \write_seq_id[6]_i_2 
       (.I0(write_seq_id_reg[4]),
        .I1(write_seq_id_reg[2]),
        .I2(write_seq_id_reg[0]),
        .I3(write_seq_id_reg[1]),
        .I4(write_seq_id_reg[3]),
        .O(\write_seq_id[6]_i_2_n_0 ));
  FDRE \write_seq_id_reg[0] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[0]),
        .Q(write_seq_id_reg[0]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[1] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[1]),
        .Q(write_seq_id_reg[1]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[2] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[2]),
        .Q(write_seq_id_reg[2]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[3] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[3]),
        .Q(write_seq_id_reg[3]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[4] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[4]),
        .Q(write_seq_id_reg[4]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[5] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[5]),
        .Q(write_seq_id_reg[5]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[6] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp[6]),
        .Q(write_seq_id_reg[6]),
        .R(ARESET_I));
endmodule

(* ORIG_REF_NAME = "sc_update" *) 
module Fast_IP_Clock_system_cache_0_0_sc_update
   (update_tag_conflict,
    update_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    update_data_we,
    update_write_miss_full,
    \Use_FPGA.Full_Inst ,
    \Use_FPGA.Full_Inst_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \Use_FPGA.Full_Inst_1 ,
    \Use_FPGA.Full_Inst_2 ,
    update_readback_available,
    ri_merge_reg_0,
    \wm_port_reg[0]_0 ,
    wm_allocate_reg_0,
    \bs_port_num_reg[0]_0 ,
    bs_slv,
    wm_allow_reg_0,
    update_done_ar_reg_0,
    D,
    update_done_aw_reg_0,
    wm_allocate_reg_1,
    \write_data_info[0][Valid] ,
    update_write_data_ready,
    \Use_FPGA.Full_Inst_3 ,
    \write_data_info[0][Last] ,
    Q,
    \Use_FPGA.Empty_Inst ,
    \update_read_data_info[0,0][Last] ,
    \update_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    ADDRB,
    I168,
    \ri_addr_reg[23]_0 ,
    update_done_tag_write_reg_0,
    A,
    update_word_cnt_almost_last_reg_0,
    M0_AXI_BREADY,
    update_evict_valid_reg_0,
    update_cur_tag_rd_way,
    \update_ext_bresp_info[0,0][BRESP] ,
    out,
    update_evict_busy_reg_0,
    update_evict_busy_reg_1,
    p_0_in5_out,
    p_0_in4_out,
    p_0_in2_out,
    p_0_in0_out,
    \update_release_tag_reg[Addr][7]_0 ,
    \Use_FPGA.Full_Inst_4 ,
    queue_push26_out,
    \bs_src_reg[0]_0 ,
    S_2,
    queue_push,
    \Use_FPGA.Empty_Inst_0 ,
    update_done_ar_reg_1,
    lud_mem_waiting_for_pipe_reg,
    DATA_INB,
    \update_lock_way_reg[0]_0 ,
    \update_lock_way_reg[0]_1 ,
    \update_lock_way_reg[0]_2 ,
    \update_lock_way_reg[0]_3 ,
    \update_lock_way_reg[0]_4 ,
    \update_lock_way_reg[0]_5 ,
    \update_lock_way_reg[0]_6 ,
    \update_lock_way_reg[0]_7 ,
    \update_lock_way_reg[0]_8 ,
    \update_lock_way_reg[0]_9 ,
    \update_lock_way_reg[0]_10 ,
    \update_lock_way_reg[0]_11 ,
    \update_lock_way_reg[0]_12 ,
    \update_lock_way_reg[0]_13 ,
    \update_lock_way_reg[0]_14 ,
    \update_lock_way_reg[0]_15 ,
    \update_lock_way_reg[0]_16 ,
    \update_lock_way_reg[0]_17 ,
    \update_lock_way_reg[0]_18 ,
    \update_lock_way_reg[0]_19 ,
    \update_lock_way_reg[0]_20 ,
    O,
    \ri_way_reg[1]_0 ,
    \ri_way_reg[0]_0 ,
    \ri_way_reg[1]_1 ,
    update_write_miss_busy,
    ACLK,
    ARESET,
    \The_Compare[0].sel_reg_3 ,
    A_4,
    \Using_FPGA.MUXCY_I ,
    access_valid,
    S_5,
    ud_new_tag_valid2,
    update_read_miss,
    S,
    S_0,
    S_1,
    update_valid,
    lookup_push_write_miss,
    M0_AXI_RVALID,
    \Use_FPGA.Almost_Full_Inst ,
    E,
    \The_Compare[0].sel_reg ,
    A_2,
    \The_Compare[2].sel_reg ,
    \The_Compare[3].sel_reg ,
    \The_Compare[0].sel_reg_4 ,
    A_5,
    \The_Compare[2].sel_reg_6 ,
    \The_Compare[3].sel_reg_7 ,
    \The_Compare[0].sel_reg_8 ,
    A_9,
    \The_Compare[2].sel_reg_10 ,
    \The_Compare[3].sel_reg_11 ,
    \The_Compare[0].sel_reg_12 ,
    A_13,
    \The_Compare[2].sel_reg_14 ,
    \The_Compare[3].sel_reg_15 ,
    \update_info[Allocate] ,
    \update_info[Wr] ,
    \update_write_miss_busy_i_reg[1]_0 ,
    lookup_wm_allocate,
    \Use_FPGA.Full_Inst_5 ,
    lookup_wm_evict,
    wm_kind_reg_0,
    \ri_port_reg[0]_0 ,
    \update_info[Kind] ,
    \update_info[Early] ,
    \update_info[Internal_Cmd] ,
    lookup_wm_allow_write,
    lookup_wm_will_use,
    write_data_full,
    M0_AXI_RLAST,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    \bs_fifo_mem_reg[0][Src][0]_0 ,
    update_done_aw_reg_1,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    write_data_almost_full,
    \access_data_info[0,1][Last] ,
    \access_data_info[0,0][Last] ,
    \update_wma_data_reg[31]_0 ,
    \update_wma_data_reg[23]_0 ,
    \update_wma_data_reg[15]_0 ,
    \update_wma_data_reg[7]_0 ,
    update_write_miss_ongoing_reg_0,
    update_need_bs,
    M0_AXI_BVALID,
    queue_full,
    update_done_ar_reg_2,
    r_miss_fifo_full,
    \read_data_status[0,0][Hit_Full] ,
    \lookup_read_data_info[0,0][Valid] ,
    r_miss_fifo_full_6,
    \read_data_status[0,1][Hit_Full] ,
    \lookup_read_data_info[0,1][Valid] ,
    in,
    update_need_tag_write,
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ,
    \ri_way_reg[1]_2 ,
    CO,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WSTRB_reg[3]_0 ,
    \M_AXI_WDATA_reg[31] ,
    \M_AXI_WDATA_reg[31]_0 ,
    DATA_OUTB,
    \w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 ,
    \w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 ,
    \w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 ,
    B_Vec,
    \Using_FPGA.AND2B1L_Inst1_i_2_0 ,
    \Using_FPGA.AND2B1L_Inst1_i_2_1 ,
    aw_fifo_full,
    \pending_write_reg[0] ,
    update_need_aw,
    S0_AXI_GEN_BRESP,
    \Using_FPGA.MUXCY_I_i_1__50 ,
    M0_AXI_RDATA,
    lu_mem_removed_way_hold,
    \lu_mem_release_lock_hold_reg[1] ,
    lookup_tag_current_word_i,
    lud_mem_conflict,
    \lu_mem_release_lock_hold_reg[3] ,
    \lu_mem_release_lock_hold_reg[0] ,
    \lu_mem_release_lock_hold_reg[2] ,
    \wm_use_bits_reg[5]_0 ,
    \wm_offset_reg[5]_0 ,
    \wm_stp_bits_reg[5]_0 ,
    \ri_len_reg[7]_0 ,
    \ri_use_reg[5]_0 ,
    \ri_stp_reg[5]_0 ,
    M0_AXI_BRESP,
    update_wm_pop_normal_hold_reg_0,
    \update_wma_data_reg[31]_1 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output update_tag_conflict;
  output update_piperun;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output update_data_we;
  output update_write_miss_full;
  output \Use_FPGA.Full_Inst ;
  output \Use_FPGA.Full_Inst_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output \Use_FPGA.Full_Inst_1 ;
  output \Use_FPGA.Full_Inst_2 ;
  output update_readback_available;
  output ri_merge_reg_0;
  output \wm_port_reg[0]_0 ;
  output wm_allocate_reg_0;
  output \bs_port_num_reg[0]_0 ;
  output bs_slv;
  output wm_allow_reg_0;
  output update_done_ar_reg_0;
  output [1:0]D;
  output update_done_aw_reg_0;
  output wm_allocate_reg_1;
  output \write_data_info[0][Valid] ;
  output [1:0]update_write_data_ready;
  output \Use_FPGA.Full_Inst_3 ;
  output \write_data_info[0][Last] ;
  output [1:0]Q;
  output \Use_FPGA.Empty_Inst ;
  output \update_read_data_info[0,0][Last] ;
  output \update_read_data_info[0,0][Valid] ;
  output \update_read_data_info[0,1][Valid] ;
  output [10:0]ADDRB;
  output [10:0]I168;
  output [10:0]\ri_addr_reg[23]_0 ;
  output update_done_tag_write_reg_0;
  output [6:0]A;
  output [0:0]update_word_cnt_almost_last_reg_0;
  output M0_AXI_BREADY;
  output update_evict_valid_reg_0;
  output [1:0]update_cur_tag_rd_way;
  output [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  output [1:0]out;
  output [3:0]update_evict_busy_reg_0;
  output [31:0]update_evict_busy_reg_1;
  output p_0_in5_out;
  output p_0_in4_out;
  output p_0_in2_out;
  output p_0_in0_out;
  output \update_release_tag_reg[Addr][7]_0 ;
  output [0:0]\Use_FPGA.Full_Inst_4 ;
  output queue_push26_out;
  output \bs_src_reg[0]_0 ;
  output S_2;
  output queue_push;
  output \Use_FPGA.Empty_Inst_0 ;
  output update_done_ar_reg_1;
  output lud_mem_waiting_for_pipe_reg;
  output [31:0]DATA_INB;
  output \update_lock_way_reg[0]_0 ;
  output \update_lock_way_reg[0]_1 ;
  output \update_lock_way_reg[0]_2 ;
  output [3:0]\update_lock_way_reg[0]_3 ;
  output \update_lock_way_reg[0]_4 ;
  output \update_lock_way_reg[0]_5 ;
  output \update_lock_way_reg[0]_6 ;
  output \update_lock_way_reg[0]_7 ;
  output \update_lock_way_reg[0]_8 ;
  output \update_lock_way_reg[0]_9 ;
  output \update_lock_way_reg[0]_10 ;
  output \update_lock_way_reg[0]_11 ;
  output \update_lock_way_reg[0]_12 ;
  output \update_lock_way_reg[0]_13 ;
  output \update_lock_way_reg[0]_14 ;
  output \update_lock_way_reg[0]_15 ;
  output \update_lock_way_reg[0]_16 ;
  output \update_lock_way_reg[0]_17 ;
  output \update_lock_way_reg[0]_18 ;
  output \update_lock_way_reg[0]_19 ;
  output \update_lock_way_reg[0]_20 ;
  output O;
  output \ri_way_reg[1]_0 ;
  output \ri_way_reg[0]_0 ;
  output \ri_way_reg[1]_1 ;
  output [1:0]update_write_miss_busy;
  input ACLK;
  input ARESET;
  input \The_Compare[0].sel_reg_3 ;
  input A_4;
  input \Using_FPGA.MUXCY_I ;
  input access_valid;
  input S_5;
  input ud_new_tag_valid2;
  input update_read_miss;
  input S;
  input S_0;
  input S_1;
  input update_valid;
  input lookup_push_write_miss;
  input M0_AXI_RVALID;
  input \Use_FPGA.Almost_Full_Inst ;
  input [0:0]E;
  input \The_Compare[0].sel_reg ;
  input A_2;
  input \The_Compare[2].sel_reg ;
  input \The_Compare[3].sel_reg ;
  input \The_Compare[0].sel_reg_4 ;
  input A_5;
  input \The_Compare[2].sel_reg_6 ;
  input \The_Compare[3].sel_reg_7 ;
  input \The_Compare[0].sel_reg_8 ;
  input A_9;
  input \The_Compare[2].sel_reg_10 ;
  input \The_Compare[3].sel_reg_11 ;
  input \The_Compare[0].sel_reg_12 ;
  input A_13;
  input \The_Compare[2].sel_reg_14 ;
  input \The_Compare[3].sel_reg_15 ;
  input \update_info[Allocate] ;
  input \update_info[Wr] ;
  input \update_write_miss_busy_i_reg[1]_0 ;
  input lookup_wm_allocate;
  input \Use_FPGA.Full_Inst_5 ;
  input lookup_wm_evict;
  input wm_kind_reg_0;
  input \ri_port_reg[0]_0 ;
  input \update_info[Kind] ;
  input \update_info[Early] ;
  input \update_info[Internal_Cmd] ;
  input lookup_wm_allow_write;
  input lookup_wm_will_use;
  input write_data_full;
  input M0_AXI_RLAST;
  input \bs_fifo_mem_reg[0][Src][1]_0 ;
  input \bs_fifo_mem_reg[0][Src][0]_0 ;
  input update_done_aw_reg_1;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input write_data_almost_full;
  input \access_data_info[0,1][Last] ;
  input \access_data_info[0,0][Last] ;
  input \update_wma_data_reg[31]_0 ;
  input \update_wma_data_reg[23]_0 ;
  input \update_wma_data_reg[15]_0 ;
  input \update_wma_data_reg[7]_0 ;
  input update_write_miss_ongoing_reg_0;
  input update_need_bs;
  input M0_AXI_BVALID;
  input queue_full;
  input update_done_ar_reg_2;
  input r_miss_fifo_full;
  input \read_data_status[0,0][Hit_Full] ;
  input \lookup_read_data_info[0,0][Valid] ;
  input r_miss_fifo_full_6;
  input \read_data_status[0,1][Hit_Full] ;
  input \lookup_read_data_info[0,1][Valid] ;
  input [23:0]in;
  input update_need_tag_write;
  input \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ;
  input [1:0]\ri_way_reg[1]_2 ;
  input [0:0]CO;
  input [3:0]\M_AXI_WSTRB_reg[3] ;
  input [3:0]\M_AXI_WSTRB_reg[3]_0 ;
  input [31:0]\M_AXI_WDATA_reg[31] ;
  input [31:0]\M_AXI_WDATA_reg[31]_0 ;
  input [31:0]DATA_OUTB;
  input [31:0]\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 ;
  input [31:0]\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 ;
  input [31:0]\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 ;
  input [5:0]B_Vec;
  input \Using_FPGA.AND2B1L_Inst1_i_2_0 ;
  input [0:0]\Using_FPGA.AND2B1L_Inst1_i_2_1 ;
  input aw_fifo_full;
  input \pending_write_reg[0] ;
  input update_need_aw;
  input [1:0]S0_AXI_GEN_BRESP;
  input \Using_FPGA.MUXCY_I_i_1__50 ;
  input [31:0]M0_AXI_RDATA;
  input [3:0]lu_mem_removed_way_hold;
  input \lu_mem_release_lock_hold_reg[1] ;
  input [11:0]lookup_tag_current_word_i;
  input lud_mem_conflict;
  input \lu_mem_release_lock_hold_reg[3] ;
  input \lu_mem_release_lock_hold_reg[0] ;
  input \lu_mem_release_lock_hold_reg[2] ;
  input [5:0]\wm_use_bits_reg[5]_0 ;
  input [5:0]\wm_offset_reg[5]_0 ;
  input [5:0]\wm_stp_bits_reg[5]_0 ;
  input [7:0]\ri_len_reg[7]_0 ;
  input [5:0]\ri_use_reg[5]_0 ;
  input [5:0]\ri_stp_reg[5]_0 ;
  input [1:0]M0_AXI_BRESP;
  input update_wm_pop_normal_hold_reg_0;
  input [31:0]\update_wma_data_reg[31]_1 ;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire [6:0]A;
  wire A17_out;
  wire A18_out;
  wire ACLK;
  wire [10:0]ADDRB;
  wire ARESET;
  wire ARESET_I;
  wire A_0;
  wire A_13;
  wire A_2;
  wire A_4;
  wire A_5;
  wire A_9;
  wire A_N;
  wire [5:0]B_Vec;
  wire [0:0]CO;
  wire [1:0]D;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTB;
  wire [0:0]E;
  wire FIFO_BS_Pointer_n_10;
  wire FIFO_BS_Pointer_n_9;
  wire FIFO_ED_Pointer_n_1;
  wire FIFO_ED_Pointer_n_2;
  wire FIFO_ED_Pointer_n_35;
  wire FIFO_ED_Pointer_n_36;
  wire FIFO_ED_Pointer_n_6;
  wire FIFO_ED_Pointer_n_8;
  wire FIFO_ED_Pointer_n_9;
  wire FIFO_E_Pointer_n_5;
  wire FIFO_E_Pointer_n_6;
  wire FIFO_E_Pointer_n_7;
  wire FIFO_E_Pointer_n_8;
  wire FIFO_RI_Pointer_n_11;
  wire FIFO_RI_Pointer_n_12;
  wire FIFO_RI_Pointer_n_8;
  wire FIFO_RI_Pointer_n_9;
  wire FIFO_WMAD_Pointer_n_1;
  wire FIFO_WMA_Pointer_n_10;
  wire FIFO_WMA_Pointer_n_12;
  wire FIFO_WMA_Pointer_n_13;
  wire FIFO_WMA_Pointer_n_15;
  wire FIFO_WMA_Pointer_n_16;
  wire FIFO_WMA_Pointer_n_17;
  wire FIFO_WMA_Pointer_n_8;
  wire FIFO_WM_Pointer_n_12;
  wire FIFO_WM_Pointer_n_13;
  wire FIFO_WM_Pointer_n_14;
  wire FIFO_WM_Pointer_n_15;
  wire FIFO_WM_Pointer_n_16;
  wire FIFO_WM_Pointer_n_19;
  wire FIFO_WM_Pointer_n_20;
  wire FIFO_WM_Pointer_n_22;
  wire FIFO_WM_Pointer_n_23;
  wire FIFO_WM_Pointer_n_24;
  wire FIFO_WM_Pointer_n_25;
  wire FIFO_WM_Pointer_n_26;
  wire FIFO_WM_Pointer_n_27;
  wire FIFO_WM_Pointer_n_6;
  wire FIFO_WM_Pointer_n_7;
  wire FIFO_WM_Pointer_n_8;
  wire \Gen_Set_Data_En[0].update_data_en_sel_n_reg ;
  wire \Gen_Set_Data_En[2].update_data_en_sel_n_reg ;
  wire \Gen_Set_Data_En[3].update_data_en_sel_n_reg ;
  wire \Gen_Set_Tag[2].UD_Tag_Or_Inst1_n_1 ;
  wire [10:0]I168;
  wire \Long_External_Burst.update_rb_pos_phase_reg_n_0 ;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RLAST;
  wire M0_AXI_RVALID;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [31:0]\M_AXI_WDATA_reg[31]_0 ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire [3:0]\M_AXI_WSTRB_reg[3]_0 ;
  wire \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ;
  wire O;
  wire [1:0]Q;
  wire S;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_12 ;
  wire \The_Compare[0].sel_reg_3 ;
  wire \The_Compare[0].sel_reg_4 ;
  wire \The_Compare[0].sel_reg_8 ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[2].sel_reg_10 ;
  wire \The_Compare[2].sel_reg_14 ;
  wire \The_Compare[2].sel_reg_6 ;
  wire \The_Compare[3].sel_reg ;
  wire \The_Compare[3].sel_reg_11 ;
  wire \The_Compare[3].sel_reg_15 ;
  wire \The_Compare[3].sel_reg_7 ;
  wire UD_RD_And_Inst8b_n_2;
  wire UD_RD_Or_Inst3_n_1;
  wire UD_RD_Or_Inst3_n_2;
  wire UD_RD_Or_Inst3_n_3;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_2 ;
  wire \Use_FPGA.Full_Inst_3 ;
  wire [0:0]\Use_FPGA.Full_Inst_4 ;
  wire \Use_FPGA.Full_Inst_5 ;
  wire \Use_FPGA_1.LUT_Refresh_Inst_i_4_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Using_FPGA.AND2B1L_Inst1_i_2_0 ;
  wire [0:0]\Using_FPGA.AND2B1L_Inst1_i_2_1 ;
  wire \Using_FPGA.AND2B1L_Inst1_i_3_n_0 ;
  wire \Using_FPGA.AND2B1L_Inst1_i_4_n_0 ;
  wire \Using_FPGA.AND2B1L_Inst1_i_5_n_0 ;
  wire \Using_FPGA.AND2B1L_Inst1_i_6_n_0 ;
  wire \Using_FPGA.MUXCY_I ;
  wire \Using_FPGA.MUXCY_I_i_1__50 ;
  wire \Using_FPGA.MUXCY_I_i_2__7_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_2__8_n_0 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Last] ;
  wire access_valid;
  wire aw_fifo_full;
  wire backend_rd_data_pop;
  wire backend_rd_data_use;
  wire backend_rd_data_use_ii;
  wire bp_fifo_empty;
  wire [3:0]bp_read_fifo_addr;
  wire [1:0]\bs_fifo_mem[15][Src] ;
  wire \bs_fifo_mem_reg[0][Src][0]_0 ;
  wire \bs_fifo_mem_reg[0][Src][1]_0 ;
  wire [1:0]\bs_fifo_mem_reg[10][Src] ;
  wire [1:0]\bs_fifo_mem_reg[11][Src] ;
  wire [1:0]\bs_fifo_mem_reg[12][Src] ;
  wire [1:0]\bs_fifo_mem_reg[13][Src] ;
  wire [1:0]\bs_fifo_mem_reg[14][Src] ;
  wire \bs_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ;
  wire \bs_fifo_mem_reg[15][Slv][-1111111111]_srl16_n_0 ;
  wire [1:0]\bs_fifo_mem_reg[15][Src] ;
  wire [1:0]\bs_fifo_mem_reg[1][Src] ;
  wire [1:0]\bs_fifo_mem_reg[2][Src] ;
  wire [1:0]\bs_fifo_mem_reg[3][Src] ;
  wire [1:0]\bs_fifo_mem_reg[4][Src] ;
  wire [1:0]\bs_fifo_mem_reg[5][Src] ;
  wire [1:0]\bs_fifo_mem_reg[6][Src] ;
  wire [1:0]\bs_fifo_mem_reg[7][Src] ;
  wire [1:0]\bs_fifo_mem_reg[8][Src] ;
  wire [1:0]\bs_fifo_mem_reg[9][Src] ;
  wire \bs_port_num_reg[0]_0 ;
  wire [3:0]bs_read_fifo_addr;
  wire bs_slv;
  wire \bs_src_reg[0]_0 ;
  wire e_fifo_empty;
  wire \e_fifo_mem_reg[15][Offset][10]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][11]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][12]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][6]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][7]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][8]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][9]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Way][0]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Way][1]_srl16_n_0 ;
  wire [3:0]e_read_fifo_addr;
  wire ed_fifo_empty;
  wire [23:0]in;
  wire lookup_push_write_miss;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire [11:0]lookup_tag_current_word_i;
  wire lookup_wm_allocate;
  wire lookup_wm_allow_write;
  wire lookup_wm_evict;
  wire lookup_wm_will_use;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire \lu_mem_release_lock_hold_reg[0] ;
  wire \lu_mem_release_lock_hold_reg[1] ;
  wire \lu_mem_release_lock_hold_reg[2] ;
  wire \lu_mem_release_lock_hold_reg[3] ;
  wire [3:0]lu_mem_removed_way_hold;
  wire lud_mem_conflict;
  wire lud_mem_waiting_for_pipe_reg;
  wire [3:2]minusOp;
  wire [7:0]minusOp__0;
  wire [1:0]out;
  wire p_0_in0_out;
  wire p_0_in2_out;
  wire p_0_in42_in;
  wire p_0_in47_in;
  wire p_0_in4_out;
  wire p_0_in52_in;
  wire p_0_in57_in;
  wire p_0_in5_out;
  wire p_0_in62_in;
  wire p_156_in;
  wire [5:0]p_1_in;
  wire \pending_write_reg[0] ;
  wire [3:0]plusOp;
  wire queue_full;
  wire queue_pop;
  wire queue_pop118_out;
  wire queue_pop131_out;
  wire queue_pop136_out;
  wire queue_push;
  wire queue_push120_out;
  wire queue_push26_out;
  wire queue_push_1;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_6;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire [10:0]\ri_addr_reg[23]_0 ;
  wire \ri_addr_reg_n_0_[0] ;
  wire \ri_addr_reg_n_0_[1] ;
  wire \ri_addr_reg_n_0_[2] ;
  wire \ri_addr_reg_n_0_[3] ;
  wire \ri_addr_reg_n_0_[4] ;
  wire \ri_addr_reg_n_0_[5] ;
  wire ri_allocate;
  wire ri_evicted;
  wire ri_exist;
  wire \ri_fifo_mem_reg[15][Addr][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][10]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][11]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][12]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][13]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][14]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][15]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][16]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][17]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][18]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][19]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][20]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][21]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][22]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][23]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][6]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][7]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][8]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][9]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][6]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][7]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Way][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Way][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16_n_0 ;
  wire [0:0]ri_hot_port;
  wire \ri_hot_port[0]_i_1_n_0 ;
  wire ri_kind;
  wire [7:0]ri_len;
  wire [7:0]\ri_len_reg[7]_0 ;
  wire ri_merge_reg_0;
  wire ri_port;
  wire \ri_port_reg[0]_0 ;
  wire [3:0]ri_read_fifo_addr;
  wire ri_refresh_reg;
  wire [5:0]ri_stp;
  wire [5:0]\ri_stp_reg[5]_0 ;
  wire [5:0]ri_use;
  wire [5:0]\ri_use_reg[5]_0 ;
  wire [1:0]ri_way;
  wire \ri_way_reg[0]_0 ;
  wire \ri_way_reg[1]_0 ;
  wire \ri_way_reg[1]_1 ;
  wire [1:0]\ri_way_reg[1]_2 ;
  wire s2b_n_0;
  wire ud_new_tag_valid2;
  wire ud_rm_available;
  wire ud_rm_use_and_lock_safe;
  wire ud_rm_use_pre_safe;
  wire ud_rm_use_resize_part_ok;
  wire ud_rm_use_safe;
  wire [1:0]update_cur_evict_way_d1;
  wire [1:0]update_cur_tag_rd_way;
  wire \update_cur_tag_rd_way[0]_i_1_n_0 ;
  wire \update_cur_tag_rd_way[1]_i_1_n_0 ;
  wire [0:0]update_cur_tag_way;
  wire update_data_en_ii_1;
  wire update_data_en_ii_2;
  wire update_data_en_ii_3;
  wire update_data_we;
  wire update_done_ar_reg_0;
  wire update_done_ar_reg_1;
  wire update_done_ar_reg_2;
  wire update_done_aw_reg_0;
  wire update_done_aw_reg_1;
  wire update_done_bs;
  wire update_done_evict;
  wire update_done_tag_write;
  wire update_done_tag_write_i_2_n_0;
  wire update_done_tag_write_reg_0;
  wire update_evict_busy;
  wire [3:0]update_evict_busy_reg_0;
  wire [31:0]update_evict_busy_reg_1;
  wire update_evict_last;
  wire update_evict_ongoing90_out;
  wire update_evict_ongoing_reg_n_0;
  wire update_evict_valid;
  wire update_evict_valid_reg_0;
  wire [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  wire \update_info[Allocate] ;
  wire \update_info[Early] ;
  wire \update_info[Internal_Cmd] ;
  wire \update_info[Kind] ;
  wire \update_info[Wr] ;
  wire update_lock_release;
  wire [1:0]update_lock_way;
  wire \update_lock_way_reg[0]_0 ;
  wire \update_lock_way_reg[0]_1 ;
  wire \update_lock_way_reg[0]_10 ;
  wire \update_lock_way_reg[0]_11 ;
  wire \update_lock_way_reg[0]_12 ;
  wire \update_lock_way_reg[0]_13 ;
  wire \update_lock_way_reg[0]_14 ;
  wire \update_lock_way_reg[0]_15 ;
  wire \update_lock_way_reg[0]_16 ;
  wire \update_lock_way_reg[0]_17 ;
  wire \update_lock_way_reg[0]_18 ;
  wire \update_lock_way_reg[0]_19 ;
  wire \update_lock_way_reg[0]_2 ;
  wire \update_lock_way_reg[0]_20 ;
  wire [3:0]\update_lock_way_reg[0]_3 ;
  wire \update_lock_way_reg[0]_4 ;
  wire \update_lock_way_reg[0]_5 ;
  wire \update_lock_way_reg[0]_6 ;
  wire \update_lock_way_reg[0]_7 ;
  wire \update_lock_way_reg[0]_8 ;
  wire \update_lock_way_reg[0]_9 ;
  wire update_match_addr;
  wire update_need_aw;
  wire update_need_bs;
  wire update_need_tag_write;
  wire update_need_tag_write_carry;
  wire update_need_tag_write_pre1;
  wire update_need_tag_write_pre2;
  wire update_need_tag_write_pre3;
  wire update_need_tag_write_pre4;
  wire update_need_tag_write_pre5;
  wire update_piperun;
  wire update_piperun_pre1;
  wire update_piperun_pre2;
  wire update_piperun_pre3;
  wire update_piperun_pre4;
  wire update_piperun_pre5;
  wire \update_rd_len_cnt[1]_i_1_n_0 ;
  wire \update_rd_len_cnt[2]_i_2_n_0 ;
  wire \update_rd_len_cnt[3]_i_2_n_0 ;
  wire \update_rd_len_cnt[4]_i_2_n_0 ;
  wire \update_rd_len_cnt[5]_i_2_n_0 ;
  wire \update_rd_len_cnt[6]_i_2_n_0 ;
  wire \update_rd_len_cnt[7]_i_3_n_0 ;
  wire [7:0]update_rd_len_cnt_reg;
  wire [5:0]update_rd_offset_cnt;
  wire update_rd_offset_cnt0;
  wire update_rd_offset_cnt1;
  wire \update_rd_offset_cnt[3]_i_3_n_0 ;
  wire \update_rd_offset_cnt[3]_i_4_n_0 ;
  wire \update_rd_offset_cnt[3]_i_5_n_0 ;
  wire \update_rd_offset_cnt[3]_i_6_n_0 ;
  wire \update_rd_offset_cnt[5]_i_3_n_0 ;
  wire \update_rd_offset_cnt[5]_i_4_n_0 ;
  wire [5:0]update_rd_offset_cnt_next;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_0 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_1 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_2 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_3 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_4 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_5 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_6 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_7 ;
  wire \update_rd_offset_cnt_reg[5]_i_2_n_3 ;
  wire \update_rd_offset_cnt_reg[5]_i_2_n_6 ;
  wire \update_rd_offset_cnt_reg[5]_i_2_n_7 ;
  wire \update_read_data_info[0,0][Last] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_read_miss;
  wire update_read_miss_ongoing_reg_n_0;
  wire update_read_miss_resize_ok;
  wire update_read_miss_use_ok;
  wire update_read_resize_finish_reg_n_0;
  wire update_read_resize_first;
  wire update_read_resize_first_i_2_n_0;
  wire update_read_resize_first_i_3_n_0;
  wire update_read_resize_selected_i_10_n_0;
  wire update_read_resize_selected_i_4_n_0;
  wire update_read_resize_selected_i_5_n_0;
  wire update_read_resize_selected_i_6_n_0;
  wire update_read_resize_selected_i_7_n_0;
  wire update_read_resize_selected_i_8_n_0;
  wire update_read_resize_selected_i_9_n_0;
  wire update_read_resize_selected_reg_n_0;
  wire update_readback_available;
  wire update_readback_possible;
  wire [12:6]\update_release_tag[Addr] ;
  wire \update_release_tag[Valid] ;
  wire \update_release_tag_reg[Addr][7]_0 ;
  wire update_remove_locked;
  wire update_rm_alloc_ongoing_reg_n_0;
  wire update_sel_readback_tag_0;
  wire update_sel_readback_tag_1;
  wire update_sel_readback_tag_2;
  wire update_sel_readback_tag_3;
  wire update_tag_conflict;
  wire update_tag_is_alive_0;
  wire update_tag_is_alive_1;
  wire update_tag_is_alive_2;
  wire update_tag_is_alive_3;
  wire update_tag_match_pre_0;
  wire update_tag_match_pre_1;
  wire update_tag_match_pre_2;
  wire update_tag_match_pre_3;
  wire update_tag_remove_lock_0;
  wire update_tag_remove_lock_1;
  wire update_tag_remove_lock_2;
  wire update_tag_remove_lock_3;
  wire [12:6]update_tag_unlock_addr;
  wire update_valid;
  wire update_wm_pop_evict;
  wire update_wm_pop_evict_hold;
  wire update_wm_pop_normal_hold_reg_0;
  wire update_wm_pop_normal_hold_reg_n_0;
  wire [31:0]update_wma_data;
  wire \update_wma_data_reg[15]_0 ;
  wire \update_wma_data_reg[23]_0 ;
  wire \update_wma_data_reg[31]_0 ;
  wire [31:0]\update_wma_data_reg[31]_1 ;
  wire \update_wma_data_reg[7]_0 ;
  wire update_wma_last;
  wire [3:0]update_wma_strb;
  wire update_word_cnt_almost_last;
  wire update_word_cnt_almost_last_i_1_n_0;
  wire [0:0]update_word_cnt_almost_last_reg_0;
  wire update_word_cnt_en;
  wire update_word_cnt_first;
  wire update_word_cnt_last;
  wire update_word_cnt_last_i_1_n_0;
  wire \update_word_cnt_len[2]_i_1_n_0 ;
  wire \update_word_cnt_len[3]_i_1_n_0 ;
  wire [5:2]update_word_cnt_len_reg;
  wire [5:2]update_word_cnt_next_reg;
  wire [5:0]update_wr_offset_cnt;
  wire \update_wr_offset_cnt[3]_i_10_n_0 ;
  wire \update_wr_offset_cnt[3]_i_3_n_0 ;
  wire \update_wr_offset_cnt[3]_i_4_n_0 ;
  wire \update_wr_offset_cnt[3]_i_5_n_0 ;
  wire \update_wr_offset_cnt[3]_i_6_n_0 ;
  wire \update_wr_offset_cnt[3]_i_7_n_0 ;
  wire \update_wr_offset_cnt[3]_i_8_n_0 ;
  wire \update_wr_offset_cnt[3]_i_9_n_0 ;
  wire \update_wr_offset_cnt[5]_i_10_n_0 ;
  wire \update_wr_offset_cnt[5]_i_8_n_0 ;
  wire \update_wr_offset_cnt[5]_i_9_n_0 ;
  wire [5:0]update_wr_offset_cnt_cmb;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_0 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_1 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_2 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_3 ;
  wire \update_wr_offset_cnt_reg[5]_i_4_n_3 ;
  wire [1:0]update_write_data_ready;
  wire [1:0]update_write_miss_busy;
  wire \update_write_miss_busy_i_reg[1]_0 ;
  wire update_write_miss_full;
  wire update_write_miss_ongoing;
  wire update_write_miss_ongoing_reg_0;
  wire \w_fifo_mem_reg[31][Data][0]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][10]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][11]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][12]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][13]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][14]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][15]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][16]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][17]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][18]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][19]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][1]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][20]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][21]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][22]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][23]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][24]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][25]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][26]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][27]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][28]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][29]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][2]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][30]_srl32_i_2_n_0 ;
  wire [31:0]\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 ;
  wire [31:0]\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 ;
  wire [31:0]\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 ;
  wire \w_fifo_mem_reg[31][Data][31]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][3]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][4]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][5]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][6]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][7]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][8]_srl32_i_2_n_0 ;
  wire \w_fifo_mem_reg[31][Data][9]_srl32_i_2_n_0 ;
  wire wm_allocate_reg_0;
  wire wm_allocate_reg_1;
  wire wm_allow_reg_0;
  wire wm_evict;
  wire wm_exist;
  wire \wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Allow][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][1]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][2]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][3]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][4]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][5]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_n_0 ;
  wire wm_kind;
  wire wm_kind_reg_0;
  wire wm_local_wrap;
  wire wm_local_wrap0_n_0;
  wire [5:0]wm_offset;
  wire [5:0]\wm_offset_reg[5]_0 ;
  wire \wm_port_reg[0]_0 ;
  wire [3:0]wm_read_fifo_addr;
  wire wm_refresh_reg;
  wire \wm_remove_unaligned[1]_i_1_n_0 ;
  wire \wm_remove_unaligned[2]_i_1_n_0 ;
  wire \wm_remove_unaligned[3]_i_1_n_0 ;
  wire \wm_remove_unaligned[4]_i_1_n_0 ;
  wire \wm_remove_unaligned[5]_i_2_n_0 ;
  wire \wm_remove_unaligned_reg_n_0_[0] ;
  wire [5:0]wm_stp_bits;
  wire [5:0]\wm_stp_bits_reg[5]_0 ;
  wire [5:0]wm_use_bits;
  wire [5:0]\wm_use_bits_reg[5]_0 ;
  wire wm_will_use;
  wire wma_fifo_empty;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32_n_1 ;
  wire wma_merge_done;
  wire wma_pop;
  wire [6:0]wma_read_fifo_addr;
  wire wma_word_done_d1;
  wire wma_word_done_d1_i_3_n_0;
  wire wmad_fifo_empty;
  wire write_data_almost_full;
  wire write_data_full;
  wire write_data_full_d1;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire [3:1]\NLW_update_rd_offset_cnt_reg[5]_i_2_CO_UNCONNECTED ;
  wire [3:2]\NLW_update_rd_offset_cnt_reg[5]_i_2_O_UNCONNECTED ;
  wire [3:1]\NLW_update_wr_offset_cnt_reg[5]_i_4_CO_UNCONNECTED ;
  wire [3:2]\NLW_update_wr_offset_cnt_reg[5]_i_4_O_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][0]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][10]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][11]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][12]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][13]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][14]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][15]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][16]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][17]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][18]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][19]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][1]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][20]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][21]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][22]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][23]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][24]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][25]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][26]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][27]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][28]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][29]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][2]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][30]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][31]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][3]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][4]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][5]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][6]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][7]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][8]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][9]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Last][0]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][0]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][1]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][2]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][3]_srl32__14_Q31_UNCONNECTED ;

  assign lopt = lopt_9;
  assign lopt_10 = lopt_1;
  assign lopt_12 = lopt_3;
  assign lopt_13 = lopt_4;
  assign lopt_2 = lopt_11;
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_110 FIFO_BP_Pointer
       (.ACLK(ACLK),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .Q(ARESET_I),
        .S_2(S_2),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Empty_Inst_1 (Q),
        .\Use_FPGA.Empty_Inst_2 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_2 ),
        .\Use_FPGA.Full_Inst_1 (\Use_FPGA.Full_Inst_4 ),
        .aw_fifo_full(aw_fifo_full),
        .bp_fifo_empty(bp_fifo_empty),
        .bp_read_fifo_addr(bp_read_fifo_addr),
        .\pending_write_reg[0] (\pending_write_reg[0] ),
        .\pending_write_reg[0]_0 (update_done_aw_reg_0),
        .sel(queue_push_1),
        .update_need_aw(update_need_aw),
        .wmad_fifo_empty(wmad_fifo_empty));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_111 FIFO_BS_Pointer
       (.ACLK(ACLK),
        .D(\bs_fifo_mem[15][Src] ),
        .E(\Use_FPGA.Full_Inst_1 ),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FIFO_BS_Pointer_n_9),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (FIFO_BS_Pointer_n_10),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Empty_Inst_0 (Q[0]),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (E),
        .bs_read_fifo_addr(bs_read_fifo_addr),
        .\bs_src_reg[1]_i_2_0 (\bs_fifo_mem_reg[3][Src] ),
        .\bs_src_reg[1]_i_2_1 (\bs_fifo_mem_reg[2][Src] ),
        .\bs_src_reg[1]_i_2_2 (\bs_fifo_mem_reg[1][Src] ),
        .\bs_src_reg[1]_i_2_3 (D),
        .\bs_src_reg[1]_i_2_4 (\bs_fifo_mem_reg[7][Src] ),
        .\bs_src_reg[1]_i_2_5 (\bs_fifo_mem_reg[6][Src] ),
        .\bs_src_reg[1]_i_2_6 (\bs_fifo_mem_reg[5][Src] ),
        .\bs_src_reg[1]_i_2_7 (\bs_fifo_mem_reg[4][Src] ),
        .\bs_src_reg[1]_i_3_0 (\bs_fifo_mem_reg[11][Src] ),
        .\bs_src_reg[1]_i_3_1 (\bs_fifo_mem_reg[10][Src] ),
        .\bs_src_reg[1]_i_3_2 (\bs_fifo_mem_reg[9][Src] ),
        .\bs_src_reg[1]_i_3_3 (\bs_fifo_mem_reg[8][Src] ),
        .\bs_src_reg[1]_i_3_4 (\bs_fifo_mem_reg[15][Src] ),
        .\bs_src_reg[1]_i_3_5 (\bs_fifo_mem_reg[14][Src] ),
        .\bs_src_reg[1]_i_3_6 (\bs_fifo_mem_reg[13][Src] ),
        .\bs_src_reg[1]_i_3_7 (\bs_fifo_mem_reg[12][Src] ),
        .queue_pop118_out(queue_pop118_out),
        .update_done_bs(update_done_bs),
        .update_need_bs(update_need_bs),
        .wmad_fifo_empty(wmad_fifo_empty));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_112 FIFO_ED_Pointer
       (.A17_out(A17_out),
        .ACLK(ACLK),
        .ADDRB(ADDRB[10:2]),
        .A_N(\Gen_Set_Data_En[2].update_data_en_sel_n_reg ),
        .D(plusOp),
        .E(update_rd_offset_cnt1),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (ri_merge_reg_0),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ({update_tag_unlock_addr,\ri_addr_reg_n_0_[5] ,\ri_addr_reg_n_0_[4] ,\ri_addr_reg_n_0_[3] ,\ri_addr_reg_n_0_[2] }),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (update_word_cnt_next_reg),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ({\e_fifo_mem_reg[15][Way][1]_srl16_n_0 ,\e_fifo_mem_reg[15][Way][0]_srl16_n_0 }),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 (ri_way),
        .Q(ARESET_I),
        .S(S_3),
        .SS(FIFO_ED_Pointer_n_2),
        .\Use_FPGA_1.LUT_Refresh_Inst_i_2_0 (update_read_miss_ongoing_reg_n_0),
        .\Use_Reg_Ctrl.queue_exist_i_reg (wm_allocate_reg_0),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (FIFO_WM_Pointer_n_7),
        .ed_fifo_empty(ed_fifo_empty),
        .out({\e_fifo_mem_reg[15][Offset][12]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][11]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][10]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][9]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][8]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][7]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][6]_srl16_n_0 }),
        .p_156_in(p_156_in),
        .queue_pop(queue_pop),
        .queue_pop131_out(queue_pop131_out),
        .queue_pop136_out(queue_pop136_out),
        .\ri_addr_reg[2] (ADDRB[0]),
        .\ri_addr_reg[3] (ADDRB[1]),
        .ri_allocate(ri_allocate),
        .ri_evicted(ri_evicted),
        .ri_exist(ri_exist),
        .ri_hot_port(ri_hot_port),
        .ri_kind(ri_kind),
        .ri_kind_reg(FIFO_ED_Pointer_n_1),
        .ri_port(ri_port),
        .\ri_way_reg[1] (A_N),
        .\ri_way_reg[1]_0 (\Gen_Set_Data_En[3].update_data_en_sel_n_reg ),
        .\ri_way_reg[1]_1 (\Gen_Set_Data_En[0].update_data_en_sel_n_reg ),
        .update_evict_ongoing90_out(update_evict_ongoing90_out),
        .update_evict_ongoing_reg(FIFO_ED_Pointer_n_6),
        .update_evict_ongoing_reg_0(FIFO_ED_Pointer_n_8),
        .update_evict_ongoing_reg_1(update_evict_ongoing_reg_n_0),
        .update_evict_valid_reg(UD_RD_Or_Inst3_n_2),
        .update_evict_valid_reg_0(FIFO_WM_Pointer_n_6),
        .update_rd_offset_cnt0(update_rd_offset_cnt0),
        .\update_rd_offset_cnt_reg[0] (update_read_resize_first_i_2_n_0),
        .\update_rd_offset_cnt_reg[0]_0 (\Use_FPGA_1.LUT_Refresh_Inst_i_4_n_0 ),
        .\update_read_data_info[0,0][Last] (\update_read_data_info[0,0][Last] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_read_resize_finish_reg(update_read_resize_selected_reg_n_0),
        .update_read_resize_finish_reg_0(update_read_resize_finish_reg_n_0),
        .update_read_resize_selected_reg(FIFO_ED_Pointer_n_9),
        .update_read_resize_selected_reg_0(update_read_resize_selected_i_4_n_0),
        .update_wm_pop_evict(update_wm_pop_evict),
        .update_wm_pop_evict_hold(update_wm_pop_evict_hold),
        .update_wm_pop_evict_hold_reg(FIFO_ED_Pointer_n_36),
        .update_wm_pop_normal_hold_reg(FIFO_ED_Pointer_n_35),
        .update_wm_pop_normal_hold_reg_0(update_wm_pop_normal_hold_reg_n_0),
        .update_wm_pop_normal_hold_reg_1(update_wm_pop_normal_hold_reg_0),
        .update_word_cnt_en(update_word_cnt_en),
        .update_word_cnt_first(update_word_cnt_first),
        .update_word_cnt_last(update_word_cnt_last),
        .wm_evict(wm_evict),
        .wm_exist(wm_exist),
        .wm_refresh_reg(wm_refresh_reg),
        .\wm_remove_unaligned_reg[0] (\wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ),
        .\wm_remove_unaligned_reg[0]_0 (\wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ),
        .wm_will_use(wm_will_use),
        .wma_fifo_empty(wma_fifo_empty),
        .wma_merge_done(wma_merge_done));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_113 FIFO_E_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FIFO_E_Pointer_n_6),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (FIFO_E_Pointer_n_7),
        .\Use_FPGA.Empty_Inst_0 (FIFO_E_Pointer_n_8),
        .\Use_FPGA.Full_Inst_0 (FIFO_E_Pointer_n_5),
        .\Use_FPGA.Full_Inst_1 (\Use_FPGA.Full_Inst_5 ),
        .e_fifo_empty(e_fifo_empty),
        .e_read_fifo_addr(e_read_fifo_addr),
        .update_done_evict(update_done_evict),
        .update_wm_pop_evict(update_wm_pop_evict),
        .update_wm_pop_evict_hold(update_wm_pop_evict_hold),
        .update_word_cnt_en(update_word_cnt_en),
        .wm_evict(wm_evict),
        .wm_exist(wm_exist));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_114 FIFO_RI_Pointer
       (.ACLK(ACLK),
        .E(ri_refresh_reg),
        .Q(ARESET_I),
        .S(S_4),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FIFO_RI_Pointer_n_8),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .\Use_FPGA.Full_Inst_1 (\Use_FPGA.Full_Inst_0 ),
        .\Using_FPGA.MUXCY_I (update_evict_ongoing_reg_n_0),
        .queue_full(queue_full),
        .queue_pop136_out(queue_pop136_out),
        .ri_allocate(ri_allocate),
        .ri_exist(ri_exist),
        .ri_read_fifo_addr(ri_read_fifo_addr),
        .update_done_ar_reg(update_done_ar_reg_1),
        .update_done_ar_reg_0(update_done_ar_reg_2),
        .update_done_ar_reg_1(update_done_ar_reg_0),
        .update_evict_ongoing_reg(FIFO_RI_Pointer_n_11),
        .update_read_miss_ongoing_reg(FIFO_RI_Pointer_n_12),
        .update_read_miss_ongoing_reg_0(update_read_miss_ongoing_reg_n_0),
        .update_read_miss_ongoing_reg_1(update_data_we),
        .update_read_miss_ongoing_reg_2(FIFO_ED_Pointer_n_8),
        .update_word_cnt_en(update_word_cnt_en),
        .update_word_cnt_last(update_word_cnt_last),
        .update_word_cnt_last_reg(FIFO_RI_Pointer_n_9));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized7_115 FIFO_WMAD_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\S_AXI_BID_reg[0] (Q),
        .\S_AXI_BID_reg[0]_0 (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_0 ),
        .bp_fifo_empty(bp_fifo_empty),
        .bs_slv(bs_slv),
        .queue_pop118_out(queue_pop118_out),
        .queue_push120_out(queue_push120_out),
        .\update_wr_offset_cnt[5]_i_3_0 (wm_use_bits),
        .\update_wr_offset_cnt[5]_i_6_0 (wm_offset),
        .\update_wr_offset_cnt[5]_i_6_1 (update_wr_offset_cnt),
        .update_write_miss_ongoing(update_write_miss_ongoing),
        .wm_kind(wm_kind),
        .wm_kind_reg(FIFO_WMAD_Pointer_n_1),
        .wm_local_wrap(wm_local_wrap),
        .wmad_fifo_empty(wmad_fifo_empty));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized12 FIFO_WMA_Pointer
       (.A18_out(A18_out),
        .ACLK(ACLK),
        .A_N(FIFO_WMA_Pointer_n_13),
        .DATA_INB(DATA_INB),
        .E(FIFO_WMA_Pointer_n_17),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (\wma_fifo_mem_reg[511][Strb][0]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_0 (\wma_fifo_mem_reg[511][Strb][0]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_1 (\wma_fifo_mem_reg[511][Strb][0]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_10 (\wma_fifo_mem_reg[511][Data][0]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_11 (\wma_fifo_mem_reg[511][Data][1]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_12 (\wma_fifo_mem_reg[511][Data][1]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_13 (\wma_fifo_mem_reg[511][Data][1]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_14 (\wma_fifo_mem_reg[511][Data][1]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_15 (\wma_fifo_mem_reg[511][Data][2]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_16 (\wma_fifo_mem_reg[511][Data][2]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_17 (\wma_fifo_mem_reg[511][Data][2]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_18 (\wma_fifo_mem_reg[511][Data][2]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_19 (\wma_fifo_mem_reg[511][Data][3]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_2 (\wma_fifo_mem_reg[511][Strb][0]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_20 (\wma_fifo_mem_reg[511][Data][3]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_21 (\wma_fifo_mem_reg[511][Data][3]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_22 (\wma_fifo_mem_reg[511][Data][3]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_23 (\wma_fifo_mem_reg[511][Data][4]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_24 (\wma_fifo_mem_reg[511][Data][4]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_25 (\wma_fifo_mem_reg[511][Data][4]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_26 (\wma_fifo_mem_reg[511][Data][4]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_27 (\wma_fifo_mem_reg[511][Data][5]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_28 (\wma_fifo_mem_reg[511][Data][5]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_29 (\wma_fifo_mem_reg[511][Data][5]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_3 (\wma_fifo_mem_reg[511][Strb][1]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_30 (\wma_fifo_mem_reg[511][Data][5]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_31 (\wma_fifo_mem_reg[511][Data][6]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_32 (\wma_fifo_mem_reg[511][Data][6]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_33 (\wma_fifo_mem_reg[511][Data][6]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_34 (\wma_fifo_mem_reg[511][Data][6]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_35 (\wma_fifo_mem_reg[511][Data][7]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_36 (\wma_fifo_mem_reg[511][Data][7]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_37 (\wma_fifo_mem_reg[511][Data][7]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_38 (\wma_fifo_mem_reg[511][Data][7]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_39 (\wma_fifo_mem_reg[511][Data][8]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_4 (\wma_fifo_mem_reg[511][Strb][1]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_40 (\wma_fifo_mem_reg[511][Data][8]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_41 (\wma_fifo_mem_reg[511][Data][8]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_42 (\wma_fifo_mem_reg[511][Data][8]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_43 (\wma_fifo_mem_reg[511][Data][9]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_44 (\wma_fifo_mem_reg[511][Data][9]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_45 (\wma_fifo_mem_reg[511][Data][9]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_46 (\wma_fifo_mem_reg[511][Data][9]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_47 (\wma_fifo_mem_reg[511][Data][10]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_48 (\wma_fifo_mem_reg[511][Data][10]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_49 (\wma_fifo_mem_reg[511][Data][10]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_5 (\wma_fifo_mem_reg[511][Strb][1]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_50 (\wma_fifo_mem_reg[511][Data][10]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_51 (\wma_fifo_mem_reg[511][Data][11]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_52 (\wma_fifo_mem_reg[511][Data][11]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_53 (\wma_fifo_mem_reg[511][Data][11]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_54 (\wma_fifo_mem_reg[511][Data][11]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_55 (\wma_fifo_mem_reg[511][Data][12]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_56 (\wma_fifo_mem_reg[511][Data][12]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_57 (\wma_fifo_mem_reg[511][Data][12]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_58 (\wma_fifo_mem_reg[511][Data][12]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_59 (\wma_fifo_mem_reg[511][Data][13]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_6 (\wma_fifo_mem_reg[511][Strb][1]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_60 (\wma_fifo_mem_reg[511][Data][13]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_61 (\wma_fifo_mem_reg[511][Data][13]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_62 (\wma_fifo_mem_reg[511][Data][13]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_63 (\wma_fifo_mem_reg[511][Data][14]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_64 (\wma_fifo_mem_reg[511][Data][14]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_65 (\wma_fifo_mem_reg[511][Data][14]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_66 (\wma_fifo_mem_reg[511][Data][14]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_67 (\wma_fifo_mem_reg[511][Data][15]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_68 (\wma_fifo_mem_reg[511][Data][15]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_69 (\wma_fifo_mem_reg[511][Data][15]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_7 (\wma_fifo_mem_reg[511][Data][0]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_70 (\wma_fifo_mem_reg[511][Data][15]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_8 (\wma_fifo_mem_reg[511][Data][0]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_9 (\wma_fifo_mem_reg[511][Data][0]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (ri_merge_reg_0),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (\wma_fifo_mem_reg[511][Strb][2]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (\wma_fifo_mem_reg[511][Strb][2]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_10 (\wma_fifo_mem_reg[511][Data][16]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_11 (\wma_fifo_mem_reg[511][Data][16]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_12 (\wma_fifo_mem_reg[511][Data][17]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_13 (\wma_fifo_mem_reg[511][Data][17]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_14 (\wma_fifo_mem_reg[511][Data][17]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_15 (\wma_fifo_mem_reg[511][Data][17]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_16 (\wma_fifo_mem_reg[511][Data][18]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_17 (\wma_fifo_mem_reg[511][Data][18]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_18 (\wma_fifo_mem_reg[511][Data][18]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_19 (\wma_fifo_mem_reg[511][Data][18]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 (\wma_fifo_mem_reg[511][Strb][2]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_20 (\wma_fifo_mem_reg[511][Data][19]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_21 (\wma_fifo_mem_reg[511][Data][19]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_22 (\wma_fifo_mem_reg[511][Data][19]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_23 (\wma_fifo_mem_reg[511][Data][19]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_24 (\wma_fifo_mem_reg[511][Data][20]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_25 (\wma_fifo_mem_reg[511][Data][20]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_26 (\wma_fifo_mem_reg[511][Data][20]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_27 (\wma_fifo_mem_reg[511][Data][20]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_28 (\wma_fifo_mem_reg[511][Data][21]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_29 (\wma_fifo_mem_reg[511][Data][21]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 (\wma_fifo_mem_reg[511][Strb][2]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_30 (\wma_fifo_mem_reg[511][Data][21]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_31 (\wma_fifo_mem_reg[511][Data][21]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_32 (\wma_fifo_mem_reg[511][Data][22]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_33 (\wma_fifo_mem_reg[511][Data][22]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_34 (\wma_fifo_mem_reg[511][Data][22]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_35 (\wma_fifo_mem_reg[511][Data][22]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_36 (\wma_fifo_mem_reg[511][Data][23]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_37 (\wma_fifo_mem_reg[511][Data][23]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_38 (\wma_fifo_mem_reg[511][Data][23]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_39 (\wma_fifo_mem_reg[511][Data][23]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_4 (\wma_fifo_mem_reg[511][Strb][3]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_40 (\wma_fifo_mem_reg[511][Data][24]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_41 (\wma_fifo_mem_reg[511][Data][24]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_42 (\wma_fifo_mem_reg[511][Data][24]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_43 (\wma_fifo_mem_reg[511][Data][24]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_44 (\wma_fifo_mem_reg[511][Data][25]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_45 (\wma_fifo_mem_reg[511][Data][25]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_46 (\wma_fifo_mem_reg[511][Data][25]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_47 (\wma_fifo_mem_reg[511][Data][25]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_48 (\wma_fifo_mem_reg[511][Data][26]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_49 (\wma_fifo_mem_reg[511][Data][26]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_5 (\wma_fifo_mem_reg[511][Strb][3]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_50 (\wma_fifo_mem_reg[511][Data][26]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_51 (\wma_fifo_mem_reg[511][Data][26]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_52 (\wma_fifo_mem_reg[511][Data][27]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_53 (\wma_fifo_mem_reg[511][Data][27]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_54 (\wma_fifo_mem_reg[511][Data][27]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_55 (\wma_fifo_mem_reg[511][Data][27]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_56 (\wma_fifo_mem_reg[511][Data][28]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_57 (\wma_fifo_mem_reg[511][Data][28]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_58 (\wma_fifo_mem_reg[511][Data][28]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_59 (\wma_fifo_mem_reg[511][Data][28]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_6 (\wma_fifo_mem_reg[511][Strb][3]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_60 (\wma_fifo_mem_reg[511][Data][29]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_61 (\wma_fifo_mem_reg[511][Data][29]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_62 (\wma_fifo_mem_reg[511][Data][29]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_63 (\wma_fifo_mem_reg[511][Data][29]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_64 (\wma_fifo_mem_reg[511][Data][30]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_65 (\wma_fifo_mem_reg[511][Data][30]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_66 (\wma_fifo_mem_reg[511][Data][30]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_67 (\wma_fifo_mem_reg[511][Data][30]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_68 (\wma_fifo_mem_reg[511][Data][31]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_69 (\wma_fifo_mem_reg[511][Data][31]_mux__9_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_7 (\wma_fifo_mem_reg[511][Strb][3]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_70 (\wma_fifo_mem_reg[511][Data][31]_mux__8_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_71 (\wma_fifo_mem_reg[511][Data][31]_mux__7_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_8 (\wma_fifo_mem_reg[511][Data][16]_mux__10_n_0 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_9 (\wma_fifo_mem_reg[511][Data][16]_mux__9_n_0 ),
        .O(wma_pop),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FIFO_WMA_Pointer_n_16),
        .\Use_FPGA.Almost_Full_Inst_0 (FIFO_WMA_Pointer_n_12),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1 (FIFO_WM_Pointer_n_20),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_0 (FIFO_WM_Pointer_n_19),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__1_1 (FIFO_WM_Pointer_n_16),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 (wma_read_fifo_addr),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_3 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .backend_rd_data_pop(backend_rd_data_pop),
        .ed_fifo_empty(ed_fifo_empty),
        .ri_allocate(ri_allocate),
        .ri_evicted(ri_evicted),
        .ri_exist(ri_exist),
        .update_evict_busy(update_evict_busy),
        .update_evict_busy_reg(FIFO_WMA_Pointer_n_8),
        .update_evict_busy_reg_0(update_read_miss_ongoing_reg_n_0),
        .update_evict_busy_reg_1(FIFO_E_Pointer_n_8),
        .update_evict_last(update_evict_last),
        .update_evict_ongoing90_out(update_evict_ongoing90_out),
        .update_wma_last(update_wma_last),
        .update_wma_last_reg(\wm_port_reg[0]_0 ),
        .\update_wr_offset_cnt_reg[5] (wm_allocate_reg_1),
        .\update_wr_offset_cnt_reg[5]_0 (wm_allocate_reg_0),
        .\update_wr_offset_cnt_reg[5]_1 (FIFO_WMAD_Pointer_n_1),
        .wm_exist(wm_exist),
        .wma_fifo_empty(wma_fifo_empty),
        .wma_merge_done(wma_merge_done),
        .wma_merge_done_reg(\wma_fifo_mem_reg[511][Last][0]_mux__10_n_0 ),
        .wma_merge_done_reg_0(\wma_fifo_mem_reg[511][Last][0]_mux__9_n_0 ),
        .wma_merge_done_reg_1(\wma_fifo_mem_reg[511][Last][0]_mux__8_n_0 ),
        .wma_merge_done_reg_2(\wma_fifo_mem_reg[511][Last][0]_mux__7_n_0 ),
        .wma_word_done_d1(wma_word_done_d1),
        .wma_word_done_d1_reg(wma_word_done_d1_i_3_n_0),
        .wr_port_data_last_i_reg(FIFO_WMA_Pointer_n_10),
        .wr_port_data_last_i_reg_0(FIFO_WMA_Pointer_n_15),
        .write_data_full(write_data_full));
  Fast_IP_Clock_system_cache_0_0_sc_srl_fifo_counter__parameterized3_116 FIFO_WM_Pointer
       (.ACLK(ACLK),
        .E({FIFO_WM_Pointer_n_12,FIFO_WM_Pointer_n_13,FIFO_WM_Pointer_n_14,FIFO_WM_Pointer_n_15}),
        .Q(ARESET_I),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 (update_wm_pop_normal_hold_reg_n_0),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_0 (update_wr_offset_cnt),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_1 (wm_use_bits),
        .\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5_2 (wm_offset),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .e_fifo_empty(e_fifo_empty),
        .lookup_push_write_miss(lookup_push_write_miss),
        .\lu_check_info_reg[Port_Num][0] (FIFO_WM_Pointer_n_22),
        .\lu_check_info_reg[Port_Num][0]_0 (FIFO_WM_Pointer_n_23),
        .queue_pop(queue_pop),
        .queue_push(queue_push),
        .queue_push120_out(queue_push120_out),
        .update_evict_busy(update_evict_busy),
        .update_evict_valid(update_evict_valid),
        .update_wm_pop_evict_hold(update_wm_pop_evict_hold),
        .update_wm_pop_evict_hold_reg(FIFO_WM_Pointer_n_7),
        .\update_wma_data_reg[15] (\update_wma_data_reg[15]_0 ),
        .\update_wma_data_reg[23] (\update_wma_data_reg[23]_0 ),
        .\update_wma_data_reg[31] (wm_allocate_reg_0),
        .\update_wma_data_reg[31]_0 (FIFO_WMA_Pointer_n_12),
        .\update_wma_data_reg[31]_1 (\update_wma_data_reg[31]_0 ),
        .\update_wma_data_reg[7] (\update_wma_data_reg[7]_0 ),
        .update_wma_strb(update_wma_strb),
        .\update_wma_strb_reg[3] (FIFO_WMAD_Pointer_n_1),
        .\update_wr_offset_cnt_reg[4] (FIFO_WM_Pointer_n_20),
        .update_write_data_ready(update_write_data_ready),
        .update_write_miss_busy(update_write_miss_busy),
        .\update_write_miss_busy_i_reg[1] (\update_write_miss_busy_i_reg[1]_0 ),
        .update_write_miss_full(update_write_miss_full),
        .update_write_miss_ongoing(update_write_miss_ongoing),
        .update_write_miss_ongoing_reg(\wm_port_reg[0]_0 ),
        .update_write_miss_ongoing_reg_0(update_write_miss_ongoing_reg_0),
        .wm_allocate_reg(wm_allocate_reg_1),
        .wm_evict(wm_evict),
        .wm_evict_reg(FIFO_WM_Pointer_n_6),
        .wm_evict_reg_0(FIFO_WM_Pointer_n_16),
        .wm_exist(wm_exist),
        .wm_kind(wm_kind),
        .wm_local_wrap(wm_local_wrap),
        .wm_local_wrap_reg(FIFO_WM_Pointer_n_19),
        .wm_read_fifo_addr(wm_read_fifo_addr),
        .wm_refresh_reg(wm_refresh_reg),
        .wma_word_done_d1(wma_word_done_d1),
        .wma_word_done_d1_reg(FIFO_WM_Pointer_n_24),
        .wma_word_done_d1_reg_0(FIFO_WM_Pointer_n_25),
        .wma_word_done_d1_reg_1(FIFO_WM_Pointer_n_26),
        .wma_word_done_d1_reg_2(FIFO_WM_Pointer_n_27),
        .\wr_port_data_info_reg[0][Last] (FIFO_WM_Pointer_n_8),
        .write_data_full(write_data_full),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_n \Gen_Set_Data_En[0].UD_RD_And_Inst10 
       (.A_N(\Gen_Set_Data_En[0].update_data_en_sel_n_reg ),
        .Carry_OUT(update_data_en_ii_1),
        .O(O),
        .lopt(lopt_40),
        .lopt_1(lopt_41),
        .lopt_2(lopt_42),
        .lopt_3(lopt_43),
        .update_word_cnt_en(update_word_cnt_en));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1 \Gen_Set_Data_En[1].UD_RD_And_Inst10 
       (.A_N(A_N),
        .Carry_IN(update_data_en_ii_1),
        .Carry_OUT(update_data_en_ii_2),
        .lopt(lopt_40),
        .lopt_1(lopt_41),
        .lopt_2(lopt_42),
        .lopt_3(lopt_43),
        .lopt_4(lopt_44),
        .lopt_5(lopt_45),
        .lopt_6(lopt_46),
        .lopt_7(lopt_47),
        .\ri_way_reg[1] (\ri_way_reg[1]_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1_117 \Gen_Set_Data_En[2].UD_RD_And_Inst10 
       (.A_N(\Gen_Set_Data_En[2].update_data_en_sel_n_reg ),
        .Carry_IN(update_data_en_ii_2),
        .Carry_OUT(update_data_en_ii_3),
        .lopt(lopt_44),
        .lopt_1(lopt_45),
        .lopt_2(lopt_46),
        .lopt_3(lopt_47),
        .lopt_4(lopt_48),
        .lopt_5(lopt_49),
        .lopt_6(lopt_50),
        .lopt_7(lopt_51),
        .\ri_way_reg[0] (\ri_way_reg[0]_0 ));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1_118 \Gen_Set_Data_En[3].UD_RD_And_Inst10 
       (.A_N(\Gen_Set_Data_En[3].update_data_en_sel_n_reg ),
        .Carry_IN(update_data_en_ii_3),
        .lopt(lopt_48),
        .lopt_1(lopt_49),
        .lopt_2(lopt_50),
        .lopt_3(lopt_51),
        .\ri_way_reg[1] (\ri_way_reg[1]_1 ));
  Fast_IP_Clock_system_cache_0_0_carry_and_119 \Gen_Set_Tag[0].UD_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (update_cur_tag_rd_way[1]),
        .\Using_FPGA.MUXCY_I_1 (update_cur_tag_rd_way[0]),
        .lopt(lopt_52),
        .lopt_1(lopt_53),
        .lopt_2(\The_Compare[0].sel_reg ),
        .lopt_3(lopt_54),
        .lopt_4(lopt_55),
        .lopt_5(A_2),
        .lopt_6(lopt_56),
        .lopt_7(lopt_57),
        .lopt_8(\The_Compare[2].sel_reg ),
        .ri_allocate(ri_allocate),
        .update_sel_readback_tag_0(update_sel_readback_tag_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_120 \Gen_Set_Tag[0].UD_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (update_readback_available),
        .lopt(lopt_58),
        .lopt_1(lopt_59),
        .update_tag_is_alive_0(update_tag_is_alive_0),
        .update_tag_match_pre_0(update_tag_match_pre_0));
  Fast_IP_Clock_system_cache_0_0_carry_and_121 \Gen_Set_Tag[0].UD_Tag_And_Inst3 
       (.backend_rd_data_pop(backend_rd_data_pop),
        .lopt(lopt_60),
        .lopt_1(lopt_61),
        .update_tag_is_alive_0(update_tag_is_alive_0),
        .update_tag_remove_lock_0(update_tag_remove_lock_0));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2 \Gen_Set_Tag[0].UD_Tag_Compare_Inst1 
       (.A_2(A_2),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .\The_Compare[3].sel_reg (\The_Compare[3].sel_reg ),
        .lopt(lopt_52),
        .lopt_1(lopt_53),
        .lopt_10(lopt_61),
        .lopt_11(backend_rd_data_pop),
        .lopt_12(lopt_62),
        .lopt_13(lopt_63),
        .lopt_14(lopt_64),
        .lopt_2(lopt_54),
        .lopt_3(lopt_55),
        .lopt_4(lopt_56),
        .lopt_5(lopt_57),
        .lopt_6(lopt_58),
        .lopt_7(lopt_59),
        .lopt_8(update_readback_available),
        .lopt_9(lopt_60),
        .update_sel_readback_tag_0(update_sel_readback_tag_0),
        .update_tag_match_pre_0(update_tag_match_pre_0));
  Fast_IP_Clock_system_cache_0_0_carry_or_122 \Gen_Set_Tag[0].UD_Tag_Or_Inst1 
       (.\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14] (update_readback_available),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outa_ii_reg[14]_0 (update_done_tag_write_reg_0),
        .Q(ri_way[1]),
        .\Using_FPGA.MUXCY_I_0 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .\Using_FPGA.MUXCY_I_1 (\Gen_Set_Tag[2].UD_Tag_Or_Inst1_n_1 ),
        .\Using_FPGA.MUXCY_I_2 (\ri_way_reg[1]_2 [1]),
        .lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .p_0_in5_out(p_0_in5_out),
        .update_cur_tag_way(update_cur_tag_way),
        .update_need_tag_write(update_need_tag_write),
        .update_tag_remove_lock_0(update_tag_remove_lock_0),
        .update_word_cnt_almost_last(update_word_cnt_almost_last));
  Fast_IP_Clock_system_cache_0_0_carry_and_123 \Gen_Set_Tag[1].UD_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (update_cur_tag_rd_way[0]),
        .\Using_FPGA.MUXCY_I_1 (update_cur_tag_rd_way[1]),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(\The_Compare[0].sel_reg_4 ),
        .lopt_3(lopt_67),
        .lopt_4(lopt_68),
        .lopt_5(A_5),
        .lopt_6(lopt_69),
        .lopt_7(lopt_70),
        .lopt_8(\The_Compare[2].sel_reg_6 ),
        .ri_allocate(ri_allocate),
        .update_sel_readback_tag_1(update_sel_readback_tag_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_124 \Gen_Set_Tag[1].UD_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (update_readback_available),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .update_tag_is_alive_1(update_tag_is_alive_1),
        .update_tag_match_pre_1(update_tag_match_pre_1));
  Fast_IP_Clock_system_cache_0_0_carry_and_125 \Gen_Set_Tag[1].UD_Tag_And_Inst3 
       (.backend_rd_data_pop(backend_rd_data_pop),
        .lopt(lopt_73),
        .lopt_1(lopt_74),
        .update_tag_is_alive_1(update_tag_is_alive_1),
        .update_tag_remove_lock_1(update_tag_remove_lock_1));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_126 \Gen_Set_Tag[1].UD_Tag_Compare_Inst1 
       (.A_5(A_5),
        .\The_Compare[0].sel_reg_4 (\The_Compare[0].sel_reg_4 ),
        .\The_Compare[2].sel_reg_6 (\The_Compare[2].sel_reg_6 ),
        .\The_Compare[3].sel_reg_7 (\The_Compare[3].sel_reg_7 ),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_10(lopt_74),
        .lopt_11(backend_rd_data_pop),
        .lopt_12(lopt_75),
        .lopt_13(lopt_76),
        .lopt_14(lopt_77),
        .lopt_2(lopt_67),
        .lopt_3(lopt_68),
        .lopt_4(lopt_69),
        .lopt_5(lopt_70),
        .lopt_6(lopt_71),
        .lopt_7(lopt_72),
        .lopt_8(update_readback_available),
        .lopt_9(lopt_73),
        .update_sel_readback_tag_1(update_sel_readback_tag_1),
        .update_tag_match_pre_1(update_tag_match_pre_1));
  Fast_IP_Clock_system_cache_0_0_carry_or_127 \Gen_Set_Tag[1].UD_Tag_Or_Inst1 
       (.\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29] (update_readback_available),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[1].Block_DistRAM.data_outa_ii_reg[29]_0 (update_done_tag_write_reg_0),
        .Q(ri_way[1]),
        .\Using_FPGA.MUXCY_I_0 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .\Using_FPGA.MUXCY_I_1 (\Gen_Set_Tag[2].UD_Tag_Or_Inst1_n_1 ),
        .\Using_FPGA.MUXCY_I_2 (\ri_way_reg[1]_2 [1]),
        .lopt(lopt_75),
        .lopt_1(lopt_76),
        .lopt_2(lopt_77),
        .p_0_in4_out(p_0_in4_out),
        .update_cur_tag_way(update_cur_tag_way),
        .update_need_tag_write(update_need_tag_write),
        .update_tag_remove_lock_1(update_tag_remove_lock_1),
        .update_word_cnt_almost_last(update_word_cnt_almost_last));
  Fast_IP_Clock_system_cache_0_0_carry_and_128 \Gen_Set_Tag[2].UD_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (update_cur_tag_rd_way[1]),
        .\Using_FPGA.MUXCY_I_1 (update_cur_tag_rd_way[0]),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_2(\The_Compare[0].sel_reg_8 ),
        .lopt_3(lopt_80),
        .lopt_4(lopt_81),
        .lopt_5(A_9),
        .lopt_6(lopt_82),
        .lopt_7(lopt_83),
        .lopt_8(\The_Compare[2].sel_reg_10 ),
        .ri_allocate(ri_allocate),
        .update_sel_readback_tag_2(update_sel_readback_tag_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_129 \Gen_Set_Tag[2].UD_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (update_readback_available),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .update_tag_is_alive_2(update_tag_is_alive_2),
        .update_tag_match_pre_2(update_tag_match_pre_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_130 \Gen_Set_Tag[2].UD_Tag_And_Inst3 
       (.backend_rd_data_pop(backend_rd_data_pop),
        .lopt(lopt_86),
        .lopt_1(lopt_87),
        .update_tag_is_alive_2(update_tag_is_alive_2),
        .update_tag_remove_lock_2(update_tag_remove_lock_2));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_131 \Gen_Set_Tag[2].UD_Tag_Compare_Inst1 
       (.A_9(A_9),
        .\The_Compare[0].sel_reg_8 (\The_Compare[0].sel_reg_8 ),
        .\The_Compare[2].sel_reg_10 (\The_Compare[2].sel_reg_10 ),
        .\The_Compare[3].sel_reg_11 (\The_Compare[3].sel_reg_11 ),
        .lopt(lopt_78),
        .lopt_1(lopt_79),
        .lopt_10(lopt_87),
        .lopt_11(backend_rd_data_pop),
        .lopt_12(lopt_88),
        .lopt_13(lopt_89),
        .lopt_14(lopt_90),
        .lopt_2(lopt_80),
        .lopt_3(lopt_81),
        .lopt_4(lopt_82),
        .lopt_5(lopt_83),
        .lopt_6(lopt_84),
        .lopt_7(lopt_85),
        .lopt_8(update_readback_available),
        .lopt_9(lopt_86),
        .update_sel_readback_tag_2(update_sel_readback_tag_2),
        .update_tag_match_pre_2(update_tag_match_pre_2));
  Fast_IP_Clock_system_cache_0_0_carry_or_132 \Gen_Set_Tag[2].UD_Tag_Or_Inst1 
       (.\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44] (update_readback_available),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[44]_0 (update_done_tag_write_reg_0),
        .Q(ri_way),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\Gen_Set_Tag[2].UD_Tag_Or_Inst1_n_1 ),
        .\Using_FPGA.MUXCY_I_0 (\ri_way_reg[1]_2 ),
        .\Using_FPGA.MUXCY_I_1 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .\Using_FPGA.MUXCY_I_i_1__5 (\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .lopt(lopt_88),
        .lopt_1(lopt_89),
        .lopt_2(lopt_90),
        .p_0_in2_out(p_0_in2_out),
        .update_cur_tag_way(update_cur_tag_way),
        .update_need_tag_write(update_need_tag_write),
        .update_tag_remove_lock_2(update_tag_remove_lock_2),
        .update_valid(update_valid),
        .update_word_cnt_almost_last(update_word_cnt_almost_last));
  Fast_IP_Clock_system_cache_0_0_carry_and_133 \Gen_Set_Tag[3].UD_Tag_And_Inst1 
       (.\Using_FPGA.MUXCY_I_0 (update_cur_tag_rd_way[1]),
        .\Using_FPGA.MUXCY_I_1 (update_cur_tag_rd_way[0]),
        .lopt(lopt_91),
        .lopt_1(lopt_92),
        .lopt_2(\The_Compare[0].sel_reg_12 ),
        .lopt_3(lopt_93),
        .lopt_4(lopt_94),
        .lopt_5(A_13),
        .lopt_6(lopt_95),
        .lopt_7(lopt_96),
        .lopt_8(\The_Compare[2].sel_reg_14 ),
        .ri_allocate(ri_allocate),
        .update_sel_readback_tag_3(update_sel_readback_tag_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_134 \Gen_Set_Tag[3].UD_Tag_And_Inst2 
       (.\Using_FPGA.MUXCY_I_0 (update_readback_available),
        .lopt(lopt_97),
        .lopt_1(lopt_98),
        .update_tag_is_alive_3(update_tag_is_alive_3),
        .update_tag_match_pre_3(update_tag_match_pre_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_135 \Gen_Set_Tag[3].UD_Tag_And_Inst3 
       (.backend_rd_data_pop(backend_rd_data_pop),
        .lopt(lopt_99),
        .lopt_1(lopt_100),
        .update_tag_is_alive_3(update_tag_is_alive_3),
        .update_tag_remove_lock_3(update_tag_remove_lock_3));
  Fast_IP_Clock_system_cache_0_0_carry_compare__parameterized2_136 \Gen_Set_Tag[3].UD_Tag_Compare_Inst1 
       (.A_13(A_13),
        .\The_Compare[0].sel_reg_12 (\The_Compare[0].sel_reg_12 ),
        .\The_Compare[2].sel_reg_14 (\The_Compare[2].sel_reg_14 ),
        .\The_Compare[3].sel_reg_15 (\The_Compare[3].sel_reg_15 ),
        .lopt(lopt_91),
        .lopt_1(lopt_92),
        .lopt_10(lopt_100),
        .lopt_11(backend_rd_data_pop),
        .lopt_12(lopt_101),
        .lopt_13(lopt_102),
        .lopt_14(lopt_103),
        .lopt_2(lopt_93),
        .lopt_3(lopt_94),
        .lopt_4(lopt_95),
        .lopt_5(lopt_96),
        .lopt_6(lopt_97),
        .lopt_7(lopt_98),
        .lopt_8(update_readback_available),
        .lopt_9(lopt_99),
        .update_sel_readback_tag_3(update_sel_readback_tag_3),
        .update_tag_match_pre_3(update_tag_match_pre_3));
  Fast_IP_Clock_system_cache_0_0_carry_or_137 \Gen_Set_Tag[3].UD_Tag_Or_Inst1 
       (.\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59] (update_readback_available),
        .\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[3].Block_DistRAM.data_outa_ii_reg[59]_0 (update_done_tag_write_reg_0),
        .Q(ri_way[1]),
        .\Using_FPGA.MUXCY_I_0 (\Gen_Set_Tag[2].UD_Tag_Or_Inst1_n_1 ),
        .\Using_FPGA.MUXCY_I_1 (\ri_way_reg[1]_2 [1]),
        .\Using_FPGA.MUXCY_I_2 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .lopt(lopt_101),
        .lopt_1(lopt_102),
        .lopt_2(lopt_103),
        .p_0_in0_out(p_0_in0_out),
        .update_cur_tag_way(update_cur_tag_way),
        .update_need_tag_write(update_need_tag_write),
        .update_tag_remove_lock_3(update_tag_remove_lock_3),
        .update_word_cnt_almost_last(update_word_cnt_almost_last));
  FDRE \Long_External_Burst.update_rb_pos_phase_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(UD_RD_Or_Inst3_n_1),
        .Q(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .R(1'b0));
  Fast_IP_Clock_system_cache_0_0_carry_and_138 \No_Read_FIFO.UD_RD_NO_R_And_Inst1 
       (.lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18),
        .ud_rm_use_resize_part_ok(ud_rm_use_resize_part_ok),
        .update_read_miss_use_ok(update_read_miss_use_ok));
  Fast_IP_Clock_system_cache_0_0_carry_select_and \No_Read_FIFO.UD_RD_NO_R_And_Inst2 
       (.\Using_FPGA.MUXCY_I (update_read_resize_selected_reg_n_0),
        .\Using_FPGA.MUXCY_I_0 (update_read_resize_finish_reg_n_0),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lopt(lopt_19),
        .lopt_1(lopt_20),
        .lopt_10(lopt_27),
        .lopt_11(lopt_28),
        .lopt_2(lopt_21),
        .lopt_3(lopt_22),
        .lopt_4(lopt_23),
        .lopt_5(A18_out),
        .lopt_6(lopt_24),
        .lopt_7(lopt_25),
        .lopt_8(A17_out),
        .lopt_9(lopt_26),
        .r_miss_fifo_full(r_miss_fifo_full),
        .r_miss_fifo_full_6(r_miss_fifo_full_6),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .ri_port(ri_port),
        .ud_rm_use_resize_part_ok(ud_rm_use_resize_part_ok),
        .update_read_miss_resize_ok(update_read_miss_resize_ok));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_1 
       (.I0(\ri_addr_reg[23]_0 [0]),
        .I1(update_readback_available),
        .I2(in[13]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[0]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_3 
       (.I0(update_tag_unlock_addr[12]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[12]),
        .O(A[6]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_4 
       (.I0(update_tag_unlock_addr[11]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[11]),
        .O(A[5]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_5 
       (.I0(update_tag_unlock_addr[10]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[10]),
        .O(A[4]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_6 
       (.I0(update_tag_unlock_addr[9]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[9]),
        .O(A[3]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_7 
       (.I0(update_tag_unlock_addr[8]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[8]),
        .O(A[2]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_8 
       (.I0(update_tag_unlock_addr[7]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[7]),
        .O(A[1]));
  LUT6 #(
    .INIT(64'hAEAAAFA0A2AAA0A0)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_0_0_i_9 
       (.I0(update_tag_unlock_addr[6]),
        .I1(update_valid),
        .I2(update_readback_available),
        .I3(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I5(in[6]),
        .O(A[0]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_10_10_i_1 
       (.I0(\ri_addr_reg[23]_0 [10]),
        .I1(update_readback_available),
        .I2(in[23]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[10]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_1_1_i_1 
       (.I0(\ri_addr_reg[23]_0 [1]),
        .I1(update_readback_available),
        .I2(in[14]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[1]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_2_2_i_1 
       (.I0(\ri_addr_reg[23]_0 [2]),
        .I1(update_readback_available),
        .I2(in[15]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[2]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_3_3_i_1 
       (.I0(\ri_addr_reg[23]_0 [3]),
        .I1(update_readback_available),
        .I2(in[16]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[3]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_4_4_i_1 
       (.I0(\ri_addr_reg[23]_0 [4]),
        .I1(update_readback_available),
        .I2(in[17]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[4]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_5_5_i_1 
       (.I0(\ri_addr_reg[23]_0 [5]),
        .I1(update_readback_available),
        .I2(in[18]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[5]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_6_6_i_1 
       (.I0(\ri_addr_reg[23]_0 [6]),
        .I1(update_readback_available),
        .I2(in[19]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[6]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_7_7_i_1 
       (.I0(\ri_addr_reg[23]_0 [7]),
        .I1(update_readback_available),
        .I2(in[20]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[7]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_8_8_i_1 
       (.I0(\ri_addr_reg[23]_0 [8]),
        .I1(update_readback_available),
        .I2(in[21]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[8]));
  LUT5 #(
    .INIT(32'h88B88888)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.RAM_reg_0_127_9_9_i_1 
       (.I0(\ri_addr_reg[23]_0 [9]),
        .I1(update_readback_available),
        .I2(in[22]),
        .I3(update_done_tag_write_reg_0),
        .I4(update_need_tag_write),
        .O(I168[9]));
  LUT4 #(
    .INIT(16'hFFAE)) 
    \Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[0].Block_DistRAM.data_outb_ii[10]_i_1 
       (.I0(update_word_cnt_almost_last),
        .I1(update_need_tag_write),
        .I2(update_done_tag_write_reg_0),
        .I3(update_readback_available),
        .O(update_word_cnt_almost_last_reg_0));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "0" *) 
  (* DONT_TOUCH *) 
  Fast_IP_Clock_system_cache_0_0_bit_reg_ce__17 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \S_AXI_BRESP[0]_i_2 
       (.I0(out[0]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\update_ext_bresp_info[0,0][BRESP] [0]));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \S_AXI_BRESP[1]_i_2 
       (.I0(out[1]),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\update_ext_bresp_info[0,0][BRESP] [1]));
  LUT6 #(
    .INIT(64'h0040004040440040)) 
    \S_AXI_BRESP_I[1]_i_4 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(out[1]),
        .I3(S0_AXI_GEN_BRESP[1]),
        .I4(out[0]),
        .I5(S0_AXI_GEN_BRESP[0]),
        .O(\bs_src_reg[0]_0 ));
  LUT5 #(
    .INIT(32'hF0F000E0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__12 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[1]),
        .I3(\lu_mem_release_lock_hold_reg[0] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_14 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'hF0F000E0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__13 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[0]),
        .I3(\lu_mem_release_lock_hold_reg[0] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_15 ));
  LUT5 #(
    .INIT(32'hF0F000D0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[4]),
        .I3(\lu_mem_release_lock_hold_reg[1] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_4 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'hF0F000D0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[3]),
        .I3(\lu_mem_release_lock_hold_reg[1] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_5 ));
  LUT5 #(
    .INIT(32'hF0F000E0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[7]),
        .I3(\lu_mem_release_lock_hold_reg[2] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_19 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'hF0F000E0)) 
    \The_Bit[2].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[6]),
        .I3(\lu_mem_release_lock_hold_reg[2] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_20 ));
  LUT5 #(
    .INIT(32'hF0F000D0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[10]),
        .I3(\lu_mem_release_lock_hold_reg[3] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_9 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hF0F000D0)) 
    \The_Bit[3].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[9]),
        .I3(\lu_mem_release_lock_hold_reg[3] ),
        .I4(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_10 ));
  Fast_IP_Clock_system_cache_0_0_carry_piperun_step UD_PR_Comp_Inst1
       (.\Using_FPGA.MUXCY_I_0 (update_readback_available),
        .\Using_FPGA.MUXCY_I_1 (update_done_tag_write_reg_0),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(FIFO_E_Pointer_n_7),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(FIFO_BS_Pointer_n_10),
        .lopt_6(\^lopt_4 ),
        .lopt_7(lopt_5),
        .lopt_8(S_5),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun_pre5(update_piperun_pre5));
  Fast_IP_Clock_system_cache_0_0_carry_piperun_step_139 UD_PR_Comp_Inst2
       (.\Using_FPGA.MUXCY_I_0 (FIFO_E_Pointer_n_7),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .update_piperun_pre4(update_piperun_pre4),
        .update_piperun_pre5(update_piperun_pre5));
  Fast_IP_Clock_system_cache_0_0_carry_piperun_step_140 UD_PR_Comp_Inst4
       (.\Using_FPGA.MUXCY_I_0 (FIFO_BS_Pointer_n_10),
        .lopt(\^lopt_2 ),
        .lopt_1(\^lopt_3 ),
        .update_piperun_pre3(update_piperun_pre3),
        .update_piperun_pre4(update_piperun_pre4));
  Fast_IP_Clock_system_cache_0_0_carry_piperun_step_141 UD_PR_Comp_Inst5
       (.S_5(S_5),
        .lopt(\^lopt_4 ),
        .lopt_1(lopt_5),
        .update_piperun_pre2(update_piperun_pre2),
        .update_piperun_pre3(update_piperun_pre3));
  Fast_IP_Clock_system_cache_0_0_carry_piperun_step_142 UD_PR_Comp_Inst6
       (.S(S_4),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .lopt_3(lopt_9),
        .lopt_4(lopt_10),
        .lopt_5(update_valid),
        .lopt_6(lopt_11),
        .lopt_7(lopt_12),
        .lopt_8(lopt_13),
        .update_piperun_pre1(update_piperun_pre1),
        .update_piperun_pre2(update_piperun_pre2));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_143 UD_PR_Comp_Inst7
       (.Q(ARESET_I),
        .\Using_FPGA.MUXCY_I_0 (update_read_miss_ongoing_reg_n_0),
        .\Using_FPGA.MUXCY_I_1 (update_readback_available),
        .\Using_FPGA.MUXCY_I_2 (update_done_tag_write_reg_0),
        .\Using_FPGA.MUXCY_I_3 (\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .update_done_tag_write(update_done_tag_write),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun(update_piperun),
        .update_piperun_pre1(update_piperun_pre1),
        .update_valid(update_valid));
  Fast_IP_Clock_system_cache_0_0_carry_and_144 UD_RD_And_Inst1
       (.\Using_FPGA.MUXCY_I_0 (FIFO_RI_Pointer_n_11),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .lopt_2(FIFO_RI_Pointer_n_12),
        .lopt_3(lopt_16),
        .lopt_4(lopt_17),
        .lopt_5(lopt_18),
        .lopt_6(lopt_19),
        .lopt_7(lopt_20),
        .lopt_8(lopt_21),
        .ud_rm_available(ud_rm_available));
  Fast_IP_Clock_system_cache_0_0_carry_and_145 UD_RD_And_Inst4
       (.A18_out(A18_out),
        .lopt(lopt_22),
        .lopt_1(lopt_23),
        .ud_rm_use_pre_safe(ud_rm_use_pre_safe),
        .update_read_miss_resize_ok(update_read_miss_resize_ok));
  Fast_IP_Clock_system_cache_0_0_carry_and_146 UD_RD_And_Inst5
       (.A17_out(A17_out),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .ud_rm_use_pre_safe(ud_rm_use_pre_safe),
        .ud_rm_use_safe(ud_rm_use_safe));
  Fast_IP_Clock_system_cache_0_0_carry_and_147 UD_RD_And_Inst6
       (.\Using_FPGA.MUXCY_I_0 (\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .\Using_FPGA.MUXCY_I_1 (update_readback_available),
        .\Using_FPGA.MUXCY_I_2 (\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .\Using_FPGA.MUXCY_I_3 (update_rm_alloc_ongoing_reg_n_0),
        .lopt(lopt_26),
        .lopt_1(lopt_27),
        .lopt_2(lopt_28),
        .ud_rm_use_and_lock_safe(ud_rm_use_and_lock_safe),
        .ud_rm_use_safe(ud_rm_use_safe),
        .update_valid(update_valid),
        .update_word_cnt_almost_last(update_word_cnt_almost_last));
  Fast_IP_Clock_system_cache_0_0_carry_and_n_148 UD_RD_And_Inst7
       (.E(ri_refresh_reg),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt(lopt_29),
        .lopt_1(lopt_30),
        .lopt_2(lopt_31),
        .lopt_3(lopt_32),
        .lopt_4(lopt_33),
        .lopt_5(lopt_34),
        .queue_pop131_out(queue_pop131_out),
        .queue_pop136_out(queue_pop136_out),
        .ri_evicted(ri_evicted),
        .ri_exist(ri_exist),
        .ud_rm_use_and_lock_safe(ud_rm_use_and_lock_safe));
  Fast_IP_Clock_system_cache_0_0_carry_and_149 UD_RD_And_Inst8
       (.Carry_IN(backend_rd_data_use_ii),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\Using_FPGA.AND2B1L_Inst1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt(lopt_29),
        .lopt_1(lopt_30));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized3 UD_RD_And_Inst8b
       (.CO(CO),
        .Carry_IN(backend_rd_data_use_ii),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (UD_RD_And_Inst8b_n_2),
        .backend_rd_data_pop(backend_rd_data_pop),
        .ri_allocate(ri_allocate),
        .update_lock_release_reg(update_readback_available),
        .update_need_tag_write(update_need_tag_write),
        .update_readback_available_reg(update_done_tag_write_reg_0),
        .update_readback_available_reg_0(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .update_remove_locked(update_remove_locked),
        .update_valid(update_valid));
  Fast_IP_Clock_system_cache_0_0_carry_latch_and_n__parameterized1_150 UD_RD_And_Inst8c
       (.A_N(FIFO_WMA_Pointer_n_13),
        .Carry_IN(backend_rd_data_use_ii),
        .Carry_OUT(backend_rd_data_use),
        .O(wma_pop),
        .lopt(lopt_31),
        .lopt_1(lopt_32),
        .lopt_2(lopt_33),
        .lopt_3(lopt_34),
        .lopt_4(lopt_35),
        .lopt_5(lopt_36),
        .lopt_6(lopt_37),
        .lopt_7(lopt_38),
        .lopt_8(lopt_39),
        .lopt_9(S_3));
  Fast_IP_Clock_system_cache_0_0_carry_and_151 UD_RD_And_Inst9
       (.Carry_OUT(backend_rd_data_use),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (update_evict_ongoing_reg_n_0),
        .lopt(lopt_35),
        .lopt_1(lopt_36),
        .lopt_2(lopt_37),
        .ri_allocate(ri_allocate),
        .ri_allocate_reg(update_data_we));
  Fast_IP_Clock_system_cache_0_0_carry_or_152 UD_RD_Or_Inst1
       (.\Using_FPGA.MUXCY_I_0 (FIFO_RI_Pointer_n_12),
        .lopt(lopt_14),
        .lopt_1(lopt_15),
        .ud_rm_available(ud_rm_available),
        .update_read_miss_use_ok(update_read_miss_use_ok));
  Fast_IP_Clock_system_cache_0_0_carry_or_153 UD_RD_Or_Inst3
       (.\Long_External_Burst.update_rb_pos_phase_reg (update_word_cnt_almost_last_i_1_n_0),
        .\Long_External_Burst.update_rb_pos_phase_reg_0 (update_read_miss_ongoing_reg_n_0),
        .\Long_External_Burst.update_rb_pos_phase_reg_1 (\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .Q(ARESET_I),
        .S(S_3),
        .lopt(lopt_38),
        .lopt_1(lopt_39),
        .ri_allocate(ri_allocate),
        .ri_allocate_reg(UD_RD_Or_Inst3_n_1),
        .ri_exist(ri_exist),
        .update_rm_alloc_ongoing_reg(UD_RD_Or_Inst3_n_3),
        .update_rm_alloc_ongoing_reg_0(update_rm_alloc_ongoing_reg_n_0),
        .update_rm_alloc_ongoing_reg_1(FIFO_ED_Pointer_n_8),
        .update_word_cnt_en(update_word_cnt_en),
        .update_word_cnt_last(update_word_cnt_last),
        .\update_word_cnt_len_reg[2] (update_data_we),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .write_data_full_d1(write_data_full_d1),
        .write_data_full_d1_reg(UD_RD_Or_Inst3_n_2));
  Fast_IP_Clock_system_cache_0_0_carry_and_154 UD_TagConf_And_Inst1
       (.access_valid(access_valid),
        .lopt(lopt_116),
        .lopt_1(lopt_117),
        .update_match_addr(update_match_addr),
        .update_tag_conflict(update_tag_conflict));
  Fast_IP_Clock_system_cache_0_0_carry_compare UD_TagConf_Compare_Inst1
       (.A_4(A_4),
        .\The_Compare[0].sel_reg_3 (\The_Compare[0].sel_reg_3 ),
        .\Using_FPGA.MUXCY_I (\Using_FPGA.MUXCY_I ),
        .lopt(lopt_112),
        .lopt_1(lopt_113),
        .lopt_2(lopt_114),
        .lopt_3(lopt_115),
        .lopt_4(lopt_116),
        .lopt_5(lopt_117),
        .lopt_6(access_valid),
        .update_match_addr(update_match_addr),
        .update_need_tag_write_carry(update_need_tag_write_carry));
  Fast_IP_Clock_system_cache_0_0_carry_and_155 UD_TagWrite_And_Inst1
       (.lopt(lopt_104),
        .lopt_1(lopt_105),
        .update_need_tag_write_pre4(update_need_tag_write_pre4),
        .update_need_tag_write_pre5(update_need_tag_write_pre5),
        .update_read_miss(update_read_miss));
  Fast_IP_Clock_system_cache_0_0_carry_and_156 UD_TagWrite_And_Inst2
       (.lopt(lopt_110),
        .lopt_1(lopt_111),
        .update_need_tag_write_carry(update_need_tag_write_carry),
        .update_need_tag_write_pre1(update_need_tag_write_pre1),
        .update_valid(update_valid));
  Fast_IP_Clock_system_cache_0_0_carry_or_157 UD_TagWrite_Or_Inst1
       (.lopt(lopt_104),
        .lopt_1(lopt_105),
        .lopt_2(update_read_miss),
        .lopt_3(lopt_106),
        .lopt_4(lopt_107),
        .lopt_5(S),
        .lopt_6(lopt_108),
        .lopt_7(lopt_109),
        .lopt_8(S_0),
        .ud_new_tag_valid2(ud_new_tag_valid2),
        .update_need_tag_write_pre5(update_need_tag_write_pre5));
  Fast_IP_Clock_system_cache_0_0_carry_or_158 UD_TagWrite_Or_Inst2
       (.S(S),
        .lopt(lopt_106),
        .lopt_1(lopt_107),
        .update_need_tag_write_pre3(update_need_tag_write_pre3),
        .update_need_tag_write_pre4(update_need_tag_write_pre4));
  Fast_IP_Clock_system_cache_0_0_carry_or_159 UD_TagWrite_Or_Inst3
       (.S_0(S_0),
        .lopt(lopt_108),
        .lopt_1(lopt_109),
        .update_need_tag_write_pre2(update_need_tag_write_pre2),
        .update_need_tag_write_pre3(update_need_tag_write_pre3));
  Fast_IP_Clock_system_cache_0_0_carry_or_160 UD_TagWrite_Or_Inst4
       (.S_1(S_1),
        .lopt(lopt_110),
        .lopt_1(lopt_111),
        .lopt_2(update_valid),
        .lopt_3(lopt_112),
        .lopt_4(lopt_113),
        .lopt_5(\The_Compare[0].sel_reg_3 ),
        .lopt_6(lopt_114),
        .lopt_7(lopt_115),
        .lopt_8(A_4),
        .update_need_tag_write_pre1(update_need_tag_write_pre1),
        .update_need_tag_write_pre2(update_need_tag_write_pre2));
  LUT2 #(
    .INIT(4'h8)) 
    \Use_FPGA.Almost_Full_Inst_i_4 
       (.I0(update_evict_valid),
        .I1(update_evict_busy),
        .O(update_evict_valid_reg_0));
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__1 
       (.I0(update_done_aw_reg_0),
        .I1(update_need_aw),
        .I2(\pending_write_reg[0] ),
        .I3(aw_fifo_full),
        .O(queue_push26_out));
  LUT6 #(
    .INIT(64'hDDFDFFFFFFFFFFFF)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_4 
       (.I0(\Not_Using_XPM.Using_DistRAM.Native.The_DistRAMs[2].Block_DistRAM.data_outa_ii_reg[30] ),
        .I1(update_readback_available),
        .I2(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I3(update_valid),
        .I4(update_word_cnt_almost_last),
        .I5(update_rm_alloc_ongoing_reg_n_0),
        .O(\Use_FPGA_1.LUT_Refresh_Inst_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Using_FPGA.AND2B1L_Inst1_i_2 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_3_n_0 ),
        .I1(\Using_FPGA.AND2B1L_Inst1_i_4_n_0 ),
        .I2(\Using_FPGA.AND2B1L_Inst1_i_5_n_0 ),
        .I3(\Using_FPGA.AND2B1L_Inst1_i_6_n_0 ),
        .O(\update_release_tag_reg[Addr][7]_0 ));
  LUT6 #(
    .INIT(64'h44F444F4FFFF44F4)) 
    \Using_FPGA.AND2B1L_Inst1_i_3 
       (.I0(\update_release_tag[Addr] [7]),
        .I1(B_Vec[1]),
        .I2(B_Vec[4]),
        .I3(\update_release_tag[Addr] [10]),
        .I4(\update_release_tag[Addr] [12]),
        .I5(\Using_FPGA.AND2B1L_Inst1_i_2_1 ),
        .O(\Using_FPGA.AND2B1L_Inst1_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h22F2FFFFFFFF22F2)) 
    \Using_FPGA.AND2B1L_Inst1_i_4 
       (.I0(\update_release_tag[Addr] [8]),
        .I1(B_Vec[2]),
        .I2(\Using_FPGA.AND2B1L_Inst1_i_2_1 ),
        .I3(\update_release_tag[Addr] [12]),
        .I4(\update_release_tag[Addr] [9]),
        .I5(B_Vec[3]),
        .O(\Using_FPGA.AND2B1L_Inst1_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h6FFF6FFFFFFF6FFF)) 
    \Using_FPGA.AND2B1L_Inst1_i_5 
       (.I0(\update_release_tag[Addr] [6]),
        .I1(B_Vec[0]),
        .I2(\Using_FPGA.AND2B1L_Inst1_i_2_0 ),
        .I3(update_lock_release),
        .I4(B_Vec[2]),
        .I5(\update_release_tag[Addr] [8]),
        .O(\Using_FPGA.AND2B1L_Inst1_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h22F2FFFFFFFF22F2)) 
    \Using_FPGA.AND2B1L_Inst1_i_6 
       (.I0(\update_release_tag[Addr] [10]),
        .I1(B_Vec[4]),
        .I2(\update_release_tag[Addr] [7]),
        .I3(B_Vec[1]),
        .I4(\update_release_tag[Addr] [11]),
        .I5(B_Vec[5]),
        .O(\Using_FPGA.AND2B1L_Inst1_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000D0)) 
    \Using_FPGA.MUXCY_I_i_1__210 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[5]),
        .I3(lu_mem_removed_way_hold[1]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_2 ));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000D0)) 
    \Using_FPGA.MUXCY_I_i_1__211 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[11]),
        .I3(lu_mem_removed_way_hold[3]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_8 ));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000E0)) 
    \Using_FPGA.MUXCY_I_i_1__212 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[2]),
        .I3(lu_mem_removed_way_hold[0]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_13 ));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000E0)) 
    \Using_FPGA.MUXCY_I_i_1__213 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[8]),
        .I3(lu_mem_removed_way_hold[2]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_18 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_2__18 
       (.I0(\update_release_tag_reg[Addr][7]_0 ),
        .I1(\Using_FPGA.MUXCY_I_i_1__50 ),
        .O(lud_mem_waiting_for_pipe_reg));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_2__7 
       (.I0(update_lock_way[1]),
        .I1(\update_release_tag_reg[Addr][7]_0 ),
        .O(\Using_FPGA.MUXCY_I_i_2__7_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_2__8 
       (.I0(\update_release_tag_reg[Addr][7]_0 ),
        .I1(update_lock_way[1]),
        .O(\Using_FPGA.MUXCY_I_i_2__8_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][BRESP][0]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(queue_push_1),
        .CLK(ACLK),
        .D(M0_AXI_BRESP[0]),
        .Q(out[0]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][BRESP][1]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(queue_push_1),
        .CLK(ACLK),
        .D(M0_AXI_BRESP[1]),
        .Q(out[1]));
  FDRE \bs_fifo_mem_reg[0][Src][0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\bs_fifo_mem_reg[0][Src][0]_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[0][Src][1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\bs_fifo_mem_reg[0][Src][1]_0 ),
        .Q(D[1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[10][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[9][Src] [0]),
        .Q(\bs_fifo_mem_reg[10][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[10][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[9][Src] [1]),
        .Q(\bs_fifo_mem_reg[10][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[11][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[10][Src] [0]),
        .Q(\bs_fifo_mem_reg[11][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[11][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[10][Src] [1]),
        .Q(\bs_fifo_mem_reg[11][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[12][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[11][Src] [0]),
        .Q(\bs_fifo_mem_reg[12][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[12][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[11][Src] [1]),
        .Q(\bs_fifo_mem_reg[12][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[13][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[12][Src] [0]),
        .Q(\bs_fifo_mem_reg[13][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[13][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[12][Src] [1]),
        .Q(\bs_fifo_mem_reg[13][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[14][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[13][Src] [0]),
        .Q(\bs_fifo_mem_reg[14][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[14][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[13][Src] [1]),
        .Q(\bs_fifo_mem_reg[14][Src] [1]),
        .R(1'b0));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Port_Num] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Port_Num][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bs_fifo_mem_reg[15][Port_Num][0]_srl16 
       (.A0(bs_read_fifo_addr[0]),
        .A1(bs_read_fifo_addr[1]),
        .A2(bs_read_fifo_addr[2]),
        .A3(bs_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .CLK(ACLK),
        .D(\ri_port_reg[0]_0 ),
        .Q(\bs_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Slv] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Slv][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bs_fifo_mem_reg[15][Slv][-1111111111]_srl16 
       (.A0(bs_read_fifo_addr[0]),
        .A1(bs_read_fifo_addr[1]),
        .A2(bs_read_fifo_addr[2]),
        .A3(bs_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .CLK(ACLK),
        .D(s2b_n_0),
        .Q(\bs_fifo_mem_reg[15][Slv][-1111111111]_srl16_n_0 ));
  FDRE \bs_fifo_mem_reg[15][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[14][Src] [0]),
        .Q(\bs_fifo_mem_reg[15][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[15][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[14][Src] [1]),
        .Q(\bs_fifo_mem_reg[15][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[1][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(D[0]),
        .Q(\bs_fifo_mem_reg[1][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[1][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(D[1]),
        .Q(\bs_fifo_mem_reg[1][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[2][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[1][Src] [0]),
        .Q(\bs_fifo_mem_reg[2][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[2][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[1][Src] [1]),
        .Q(\bs_fifo_mem_reg[2][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[3][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[2][Src] [0]),
        .Q(\bs_fifo_mem_reg[3][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[3][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[2][Src] [1]),
        .Q(\bs_fifo_mem_reg[3][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[4][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[3][Src] [0]),
        .Q(\bs_fifo_mem_reg[4][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[4][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[3][Src] [1]),
        .Q(\bs_fifo_mem_reg[4][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[5][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[4][Src] [0]),
        .Q(\bs_fifo_mem_reg[5][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[5][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[4][Src] [1]),
        .Q(\bs_fifo_mem_reg[5][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[6][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[5][Src] [0]),
        .Q(\bs_fifo_mem_reg[6][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[6][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[5][Src] [1]),
        .Q(\bs_fifo_mem_reg[6][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[7][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[6][Src] [0]),
        .Q(\bs_fifo_mem_reg[7][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[7][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[6][Src] [1]),
        .Q(\bs_fifo_mem_reg[7][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[8][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[7][Src] [0]),
        .Q(\bs_fifo_mem_reg[8][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[8][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[7][Src] [1]),
        .Q(\bs_fifo_mem_reg[8][Src] [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[9][Src][0] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[8][Src] [0]),
        .Q(\bs_fifo_mem_reg[9][Src] [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[9][Src][1] 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst_1 ),
        .D(\bs_fifo_mem_reg[8][Src] [1]),
        .Q(\bs_fifo_mem_reg[9][Src] [1]),
        .R(1'b0));
  FDRE \bs_port_num_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(\bs_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ),
        .Q(\bs_port_num_reg[0]_0 ),
        .R(ARESET_I));
  FDRE bs_slv_reg
       (.C(ACLK),
        .CE(E),
        .D(\bs_fifo_mem_reg[15][Slv][-1111111111]_srl16_n_0 ),
        .Q(bs_slv),
        .R(ARESET_I));
  FDRE \bs_src_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(\bs_fifo_mem[15][Src] [0]),
        .Q(Q[0]),
        .R(ARESET_I));
  FDRE \bs_src_reg[1] 
       (.C(ACLK),
        .CE(E),
        .D(\bs_fifo_mem[15][Src] [1]),
        .Q(Q[1]),
        .R(ARESET_I));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][10]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[10]),
        .Q(\e_fifo_mem_reg[15][Offset][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][11]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[11]),
        .Q(\e_fifo_mem_reg[15][Offset][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][12]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[12]),
        .Q(\e_fifo_mem_reg[15][Offset][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][6]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[6]),
        .Q(\e_fifo_mem_reg[15][Offset][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][7]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[7]),
        .Q(\e_fifo_mem_reg[15][Offset][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][8]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[8]),
        .Q(\e_fifo_mem_reg[15][Offset][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][9]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(in[9]),
        .Q(\e_fifo_mem_reg[15][Offset][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Way] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Way][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Way][0]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(\ri_way_reg[1]_2 [0]),
        .Q(\e_fifo_mem_reg[15][Way][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Way] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Way][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Way][1]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(FIFO_E_Pointer_n_5),
        .CLK(ACLK),
        .D(\ri_way_reg[1]_2 [1]),
        .Q(\e_fifo_mem_reg[15][Way][1]_srl16_n_0 ));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000E0)) 
    \lu_check_valid_bits[0]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[2]),
        .I3(lu_mem_removed_way_hold[0]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_3 [0]));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000D0)) 
    \lu_check_valid_bits[1]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lookup_tag_current_word_i[5]),
        .I3(lu_mem_removed_way_hold[1]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_3 [1]));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000E0)) 
    \lu_check_valid_bits[2]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[8]),
        .I3(lu_mem_removed_way_hold[2]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_3 [2]));
  LUT6 #(
    .INIT(64'hF0F0F0F000F000D0)) 
    \lu_check_valid_bits[3]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lookup_tag_current_word_i[11]),
        .I3(lu_mem_removed_way_hold[3]),
        .I4(\update_release_tag[Valid] ),
        .I5(lud_mem_conflict),
        .O(\update_lock_way_reg[0]_3 [3]));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'hF1)) 
    \lu_mem_release_lock_hold[0]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(\lu_mem_release_lock_hold_reg[0] ),
        .O(\update_lock_way_reg[0]_11 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT3 #(
    .INIT(8'hF2)) 
    \lu_mem_release_lock_hold[1]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(\lu_mem_release_lock_hold_reg[1] ),
        .O(\update_lock_way_reg[0]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hF1)) 
    \lu_mem_release_lock_hold[2]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(\lu_mem_release_lock_hold_reg[2] ),
        .O(\update_lock_way_reg[0]_16 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'hF2)) 
    \lu_mem_release_lock_hold[3]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(\lu_mem_release_lock_hold_reg[3] ),
        .O(\update_lock_way_reg[0]_7 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'hF0F1)) 
    \lu_mem_removed_way_hold[0]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lu_mem_removed_way_hold[0]),
        .I3(\update_release_tag[Valid] ),
        .O(\update_lock_way_reg[0]_12 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT4 #(
    .INIT(16'hF0F2)) 
    \lu_mem_removed_way_hold[1]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I2(lu_mem_removed_way_hold[1]),
        .I3(\update_release_tag[Valid] ),
        .O(\update_lock_way_reg[0]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'hF0F1)) 
    \lu_mem_removed_way_hold[2]_i_1 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lu_mem_removed_way_hold[2]),
        .I3(\update_release_tag[Valid] ),
        .O(\update_lock_way_reg[0]_17 ));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT4 #(
    .INIT(16'hF0F2)) 
    \lu_mem_removed_way_hold[3]_i_2 
       (.I0(update_lock_way[0]),
        .I1(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I2(lu_mem_removed_way_hold[3]),
        .I3(\update_release_tag[Valid] ),
        .O(\update_lock_way_reg[0]_6 ));
  FDRE \ri_addr_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][0]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \ri_addr_reg[10] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][10]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[10]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[11] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][11]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[11]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[12] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][12]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[12]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[13] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][13]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [0]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[14] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][14]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [1]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[15] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][15]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [2]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[16] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][16]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [3]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[17] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][17]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [4]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[18] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][18]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [5]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[19] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][19]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [6]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[1] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][1]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[1] ),
        .R(ARESET_I));
  FDRE \ri_addr_reg[20] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][20]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [7]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[21] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][21]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [8]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[22] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][22]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [9]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[23] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][23]_srl16_n_0 ),
        .Q(\ri_addr_reg[23]_0 [10]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[2] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][2]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[2] ),
        .R(ARESET_I));
  FDRE \ri_addr_reg[3] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][3]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[3] ),
        .R(ARESET_I));
  FDRE \ri_addr_reg[4] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][4]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[4] ),
        .R(ARESET_I));
  FDRE \ri_addr_reg[5] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][5]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[5] ),
        .R(ARESET_I));
  FDRE \ri_addr_reg[6] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][6]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[6]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[7] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][7]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[7]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[8] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][8]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[8]),
        .R(ARESET_I));
  FDRE \ri_addr_reg[9] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Addr][9]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[9]),
        .R(ARESET_I));
  FDRE ri_allocate_reg
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ),
        .Q(ri_allocate),
        .R(ARESET_I));
  FDRE ri_evicted_reg
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16_n_0 ),
        .Q(ri_evicted),
        .R(ARESET_I));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[0]),
        .Q(\ri_fifo_mem_reg[15][Addr][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][10]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[10]),
        .Q(\ri_fifo_mem_reg[15][Addr][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][11]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[11]),
        .Q(\ri_fifo_mem_reg[15][Addr][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][12]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[12]),
        .Q(\ri_fifo_mem_reg[15][Addr][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][13]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[13]),
        .Q(\ri_fifo_mem_reg[15][Addr][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][14]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[14]),
        .Q(\ri_fifo_mem_reg[15][Addr][14]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][15]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[15]),
        .Q(\ri_fifo_mem_reg[15][Addr][15]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][16]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[16]),
        .Q(\ri_fifo_mem_reg[15][Addr][16]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][17]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[17]),
        .Q(\ri_fifo_mem_reg[15][Addr][17]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][18]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[18]),
        .Q(\ri_fifo_mem_reg[15][Addr][18]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][19]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[19]),
        .Q(\ri_fifo_mem_reg[15][Addr][19]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[1]),
        .Q(\ri_fifo_mem_reg[15][Addr][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][20]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[20]),
        .Q(\ri_fifo_mem_reg[15][Addr][20]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][21]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[21]),
        .Q(\ri_fifo_mem_reg[15][Addr][21]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][22]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[22]),
        .Q(\ri_fifo_mem_reg[15][Addr][22]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][23]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[23]),
        .Q(\ri_fifo_mem_reg[15][Addr][23]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[2]),
        .Q(\ri_fifo_mem_reg[15][Addr][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[3]),
        .Q(\ri_fifo_mem_reg[15][Addr][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[4]),
        .Q(\ri_fifo_mem_reg[15][Addr][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[5]),
        .Q(\ri_fifo_mem_reg[15][Addr][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][6]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[6]),
        .Q(\ri_fifo_mem_reg[15][Addr][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][7]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[7]),
        .Q(\ri_fifo_mem_reg[15][Addr][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][8]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[8]),
        .Q(\ri_fifo_mem_reg[15][Addr][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][9]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(in[9]),
        .Q(\ri_fifo_mem_reg[15][Addr][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Allocate] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\update_info[Allocate] ),
        .Q(\ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Evicted_Line] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\Use_FPGA.Full_Inst_5 ),
        .Q(\ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\update_info[Kind] ),
        .Q(\ri_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [0]),
        .Q(\ri_fifo_mem_reg[15][Len][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [1]),
        .Q(\ri_fifo_mem_reg[15][Len][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [2]),
        .Q(\ri_fifo_mem_reg[15][Len][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [3]),
        .Q(\ri_fifo_mem_reg[15][Len][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [4]),
        .Q(\ri_fifo_mem_reg[15][Len][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [5]),
        .Q(\ri_fifo_mem_reg[15][Len][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [6]),
        .Q(\ri_fifo_mem_reg[15][Len][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_len_reg[7]_0 [7]),
        .Q(\ri_fifo_mem_reg[15][Len][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Port_Num] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Port_Num][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Port_Num][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_port_reg[0]_0 ),
        .Q(\ri_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_stp_reg[5]_0 [0]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_stp_reg[5]_0 [1]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_stp_reg[5]_0 [2]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_stp_reg[5]_0 [3]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_stp_reg[5]_0 [4]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_stp_reg[5]_0 [5]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_use_reg[5]_0 [0]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_use_reg[5]_0 [1]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_use_reg[5]_0 [2]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_use_reg[5]_0 [3]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_use_reg[5]_0 [4]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_use_reg[5]_0 [5]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Way] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Way][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Way][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_way_reg[1]_2 [0]),
        .Q(\ri_fifo_mem_reg[15][Way][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Way] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Way][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Way][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\ri_way_reg[1]_2 [1]),
        .Q(\ri_fifo_mem_reg[15][Way][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Write_Merge] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Full_Inst_0 ),
        .CLK(ACLK),
        .D(\update_info[Wr] ),
        .Q(\ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \ri_hot_port[0]_i_1 
       (.I0(\ri_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ),
        .O(\ri_hot_port[0]_i_1_n_0 ));
  FDRE \ri_hot_port_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_hot_port[0]_i_1_n_0 ),
        .Q(ri_hot_port),
        .R(ARESET_I));
  FDRE ri_kind_reg
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ),
        .Q(ri_kind),
        .R(ARESET_I));
  FDRE \ri_len_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][0]_srl16_n_0 ),
        .Q(ri_len[0]),
        .R(ARESET_I));
  FDRE \ri_len_reg[1] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][1]_srl16_n_0 ),
        .Q(ri_len[1]),
        .R(ARESET_I));
  FDRE \ri_len_reg[2] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][2]_srl16_n_0 ),
        .Q(ri_len[2]),
        .R(ARESET_I));
  FDRE \ri_len_reg[3] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][3]_srl16_n_0 ),
        .Q(ri_len[3]),
        .R(ARESET_I));
  FDRE \ri_len_reg[4] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][4]_srl16_n_0 ),
        .Q(ri_len[4]),
        .R(ARESET_I));
  FDRE \ri_len_reg[5] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][5]_srl16_n_0 ),
        .Q(ri_len[5]),
        .R(ARESET_I));
  FDRE \ri_len_reg[6] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][6]_srl16_n_0 ),
        .Q(ri_len[6]),
        .R(ARESET_I));
  FDRE \ri_len_reg[7] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Len][7]_srl16_n_0 ),
        .Q(ri_len[7]),
        .R(ARESET_I));
  FDRE ri_merge_reg
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16_n_0 ),
        .Q(ri_merge_reg_0),
        .R(ARESET_I));
  FDRE \ri_port_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ),
        .Q(ri_port),
        .R(ARESET_I));
  FDRE \ri_stp_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(ri_stp[0]),
        .R(ARESET_I));
  FDRE \ri_stp_reg[1] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .Q(ri_stp[1]),
        .R(ARESET_I));
  FDRE \ri_stp_reg[2] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .Q(ri_stp[2]),
        .R(ARESET_I));
  FDRE \ri_stp_reg[3] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .Q(ri_stp[3]),
        .R(ARESET_I));
  FDRE \ri_stp_reg[4] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .Q(ri_stp[4]),
        .R(ARESET_I));
  FDRE \ri_stp_reg[5] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ),
        .Q(ri_stp[5]),
        .R(ARESET_I));
  FDRE \ri_use_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ),
        .Q(ri_use[0]),
        .R(ARESET_I));
  FDRE \ri_use_reg[1] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ),
        .Q(ri_use[1]),
        .R(ARESET_I));
  FDRE \ri_use_reg[2] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ),
        .Q(ri_use[2]),
        .R(ARESET_I));
  FDRE \ri_use_reg[3] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ),
        .Q(ri_use[3]),
        .R(ARESET_I));
  FDRE \ri_use_reg[4] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ),
        .Q(ri_use[4]),
        .R(ARESET_I));
  FDRE \ri_use_reg[5] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ),
        .Q(ri_use[5]),
        .R(ARESET_I));
  FDRE \ri_way_reg[0] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Way][0]_srl16_n_0 ),
        .Q(ri_way[0]),
        .R(ARESET_I));
  FDRE \ri_way_reg[1] 
       (.C(ACLK),
        .CE(ri_refresh_reg),
        .D(\ri_fifo_mem_reg[15][Way][1]_srl16_n_0 ),
        .Q(ri_way[1]),
        .R(ARESET_I));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_2
       (.I0(ri_len[6]),
        .I1(update_rd_len_cnt_reg[6]),
        .I2(\update_rd_len_cnt[7]_i_3_n_0 ),
        .I3(update_rd_len_cnt_reg[7]),
        .I4(update_read_resize_first),
        .I5(ri_len[7]),
        .O(\update_read_data_info[0,0][Last] ));
  LUT3 #(
    .INIT(8'h04)) 
    s2b
       (.I0(\update_info[Early] ),
        .I1(\update_info[Wr] ),
        .I2(\update_info[Internal_Cmd] ),
        .O(s2b_n_0));
  FDRE \update_cur_evict_way_d1_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\e_fifo_mem_reg[15][Way][0]_srl16_n_0 ),
        .Q(update_cur_evict_way_d1[0]),
        .R(ARESET_I));
  FDRE \update_cur_evict_way_d1_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\e_fifo_mem_reg[15][Way][1]_srl16_n_0 ),
        .Q(update_cur_evict_way_d1[1]),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_cur_tag_rd_way[0]_i_1 
       (.I0(ri_way[0]),
        .I1(update_readback_possible),
        .I2(update_cur_tag_rd_way[0]),
        .O(\update_cur_tag_rd_way[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_cur_tag_rd_way[1]_i_1 
       (.I0(ri_way[1]),
        .I1(update_readback_possible),
        .I2(update_cur_tag_rd_way[1]),
        .O(\update_cur_tag_rd_way[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT5 #(
    .INIT(32'hAA8AAAAA)) 
    \update_cur_tag_rd_way[1]_i_2 
       (.I0(\Long_External_Burst.update_rb_pos_phase_reg_n_0 ),
        .I1(update_done_tag_write_reg_0),
        .I2(update_need_tag_write),
        .I3(update_readback_available),
        .I4(update_valid),
        .O(update_readback_possible));
  FDRE \update_cur_tag_rd_way_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\update_cur_tag_rd_way[0]_i_1_n_0 ),
        .Q(update_cur_tag_rd_way[0]),
        .R(ARESET_I));
  FDRE \update_cur_tag_rd_way_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\update_cur_tag_rd_way[1]_i_1_n_0 ),
        .Q(update_cur_tag_rd_way[1]),
        .R(ARESET_I));
  FDRE update_done_ar_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_RI_Pointer_n_8),
        .Q(update_done_ar_reg_0),
        .R(update_done_tag_write));
  FDRE update_done_aw_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_done_aw_reg_1),
        .Q(update_done_aw_reg_0),
        .R(update_done_tag_write));
  FDRE update_done_bs_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BS_Pointer_n_9),
        .Q(update_done_bs),
        .R(update_done_tag_write));
  FDRE update_done_evict_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_E_Pointer_n_6),
        .Q(update_done_evict),
        .R(update_done_tag_write));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    update_done_tag_write_i_2
       (.I0(update_readback_available),
        .I1(update_need_tag_write),
        .I2(update_done_tag_write_reg_0),
        .O(update_done_tag_write_i_2_n_0));
  FDRE update_done_tag_write_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_done_tag_write_i_2_n_0),
        .Q(update_done_tag_write_reg_0),
        .R(update_done_tag_write));
  FDRE update_evict_busy_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_8),
        .Q(update_evict_busy),
        .R(1'b0));
  FDRE update_evict_last_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_wm_pop_evict),
        .Q(update_evict_last),
        .R(ARESET_I));
  FDRE update_evict_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_6),
        .Q(update_evict_ongoing_reg_n_0),
        .R(1'b0));
  FDRE update_evict_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(p_156_in),
        .Q(update_evict_valid),
        .R(ARESET_I));
  FDRE update_lock_release_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_remove_locked),
        .Q(update_lock_release),
        .R(ARESET_I));
  FDRE \update_lock_way_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(ri_way[0]),
        .Q(update_lock_way[0]),
        .R(ARESET_I));
  FDRE \update_lock_way_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(ri_way[1]),
        .Q(update_lock_way[1]),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \update_rd_len_cnt[0]_i_1 
       (.I0(update_rd_len_cnt_reg[0]),
        .I1(update_read_resize_first),
        .I2(ri_len[0]),
        .O(minusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \update_rd_len_cnt[1]_i_1 
       (.I0(update_rd_len_cnt_reg[1]),
        .I1(ri_len[1]),
        .I2(update_rd_len_cnt_reg[0]),
        .I3(update_read_resize_first),
        .I4(ri_len[0]),
        .O(\update_rd_len_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEFA051111FA05)) 
    \update_rd_len_cnt[2]_i_1 
       (.I0(\update_rd_len_cnt[2]_i_2_n_0 ),
        .I1(ri_len[1]),
        .I2(update_rd_len_cnt_reg[1]),
        .I3(update_rd_len_cnt_reg[2]),
        .I4(update_read_resize_first),
        .I5(ri_len[2]),
        .O(minusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_rd_len_cnt[2]_i_2 
       (.I0(ri_len[0]),
        .I1(update_read_resize_first),
        .I2(update_rd_len_cnt_reg[0]),
        .O(\update_rd_len_cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hC3AAC355CCAACCAA)) 
    \update_rd_len_cnt[3]_i_1 
       (.I0(update_rd_len_cnt_reg[3]),
        .I1(ri_len[3]),
        .I2(ri_len[2]),
        .I3(update_read_resize_first),
        .I4(update_rd_len_cnt_reg[2]),
        .I5(\update_rd_len_cnt[3]_i_2_n_0 ),
        .O(minusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT5 #(
    .INIT(32'h00053305)) 
    \update_rd_len_cnt[3]_i_2 
       (.I0(update_rd_len_cnt_reg[1]),
        .I1(ri_len[1]),
        .I2(update_rd_len_cnt_reg[0]),
        .I3(update_read_resize_first),
        .I4(ri_len[0]),
        .O(\update_rd_len_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \update_rd_len_cnt[4]_i_1 
       (.I0(ri_len[3]),
        .I1(update_rd_len_cnt_reg[3]),
        .I2(\update_rd_len_cnt[4]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg[4]),
        .I4(update_read_resize_first),
        .I5(ri_len[4]),
        .O(minusOp__0[4]));
  LUT6 #(
    .INIT(64'h0000000511110005)) 
    \update_rd_len_cnt[4]_i_2 
       (.I0(\update_rd_len_cnt[2]_i_2_n_0 ),
        .I1(ri_len[1]),
        .I2(update_rd_len_cnt_reg[1]),
        .I3(update_rd_len_cnt_reg[2]),
        .I4(update_read_resize_first),
        .I5(ri_len[2]),
        .O(\update_rd_len_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \update_rd_len_cnt[5]_i_1 
       (.I0(ri_len[4]),
        .I1(update_rd_len_cnt_reg[4]),
        .I2(\update_rd_len_cnt[5]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg[5]),
        .I4(update_read_resize_first),
        .I5(ri_len[5]),
        .O(minusOp__0[5]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \update_rd_len_cnt[5]_i_2 
       (.I0(ri_len[2]),
        .I1(update_rd_len_cnt_reg[2]),
        .I2(\update_rd_len_cnt[3]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg[3]),
        .I4(update_read_resize_first),
        .I5(ri_len[3]),
        .O(\update_rd_len_cnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \update_rd_len_cnt[6]_i_1 
       (.I0(ri_len[5]),
        .I1(update_rd_len_cnt_reg[5]),
        .I2(\update_rd_len_cnt[6]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg[6]),
        .I4(update_read_resize_first),
        .I5(ri_len[6]),
        .O(minusOp__0[6]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \update_rd_len_cnt[6]_i_2 
       (.I0(ri_len[3]),
        .I1(update_rd_len_cnt_reg[3]),
        .I2(\update_rd_len_cnt[4]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg[4]),
        .I4(update_read_resize_first),
        .I5(ri_len[4]),
        .O(\update_rd_len_cnt[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFAFCF305050CF30)) 
    \update_rd_len_cnt[7]_i_2 
       (.I0(ri_len[6]),
        .I1(update_rd_len_cnt_reg[6]),
        .I2(\update_rd_len_cnt[7]_i_3_n_0 ),
        .I3(update_rd_len_cnt_reg[7]),
        .I4(update_read_resize_first),
        .I5(ri_len[7]),
        .O(minusOp__0[7]));
  LUT6 #(
    .INIT(64'h0000003050500030)) 
    \update_rd_len_cnt[7]_i_3 
       (.I0(ri_len[4]),
        .I1(update_rd_len_cnt_reg[4]),
        .I2(\update_rd_len_cnt[5]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg[5]),
        .I4(update_read_resize_first),
        .I5(ri_len[5]),
        .O(\update_rd_len_cnt[7]_i_3_n_0 ));
  FDRE \update_rd_len_cnt_reg[0] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[0]),
        .Q(update_rd_len_cnt_reg[0]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[1] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[1]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg[1]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[2] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[2]),
        .Q(update_rd_len_cnt_reg[2]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[3] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[3]),
        .Q(update_rd_len_cnt_reg[3]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[4] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[4]),
        .Q(update_rd_len_cnt_reg[4]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[5] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[5]),
        .Q(update_rd_len_cnt_reg[5]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[6] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[6]),
        .Q(update_rd_len_cnt_reg[6]),
        .R(ARESET_I));
  FDRE \update_rd_len_cnt_reg[7] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp__0[7]),
        .Q(update_rd_len_cnt_reg[7]),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hAABAAA8A)) 
    \update_rd_offset_cnt[0]_i_1 
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_7 ),
        .I1(ri_use[0]),
        .I2(ri_kind),
        .I3(ri_allocate),
        .I4(\ri_addr_reg_n_0_[0] ),
        .O(update_rd_offset_cnt_next[0]));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'hAABAAA8A)) 
    \update_rd_offset_cnt[1]_i_1 
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_6 ),
        .I1(ri_use[1]),
        .I2(ri_kind),
        .I3(ri_allocate),
        .I4(\ri_addr_reg_n_0_[1] ),
        .O(update_rd_offset_cnt_next[1]));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'hAABAAA8A)) 
    \update_rd_offset_cnt[2]_i_1 
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_5 ),
        .I1(ri_use[2]),
        .I2(ri_kind),
        .I3(ri_allocate),
        .I4(\ri_addr_reg_n_0_[2] ),
        .O(update_rd_offset_cnt_next[2]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'hAABAAA8A)) 
    \update_rd_offset_cnt[3]_i_1 
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_4 ),
        .I1(ri_use[3]),
        .I2(ri_kind),
        .I3(ri_allocate),
        .I4(\ri_addr_reg_n_0_[3] ),
        .O(update_rd_offset_cnt_next[3]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_3 
       (.I0(update_rd_offset_cnt[3]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[3] ),
        .I3(ri_stp[3]),
        .O(\update_rd_offset_cnt[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_4 
       (.I0(update_rd_offset_cnt[2]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[2] ),
        .I3(ri_stp[2]),
        .O(\update_rd_offset_cnt[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_5 
       (.I0(update_rd_offset_cnt[1]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[1] ),
        .I3(ri_stp[1]),
        .O(\update_rd_offset_cnt[3]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_6 
       (.I0(update_rd_offset_cnt[0]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[0] ),
        .I3(ri_stp[0]),
        .O(\update_rd_offset_cnt[3]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'hAABAAA8A)) 
    \update_rd_offset_cnt[4]_i_1 
       (.I0(\update_rd_offset_cnt_reg[5]_i_2_n_7 ),
        .I1(ri_use[4]),
        .I2(ri_kind),
        .I3(ri_allocate),
        .I4(\ri_addr_reg_n_0_[4] ),
        .O(update_rd_offset_cnt_next[4]));
  LUT5 #(
    .INIT(32'hAABAAA8A)) 
    \update_rd_offset_cnt[5]_i_1 
       (.I0(\update_rd_offset_cnt_reg[5]_i_2_n_6 ),
        .I1(ri_use[5]),
        .I2(ri_kind),
        .I3(ri_allocate),
        .I4(\ri_addr_reg_n_0_[5] ),
        .O(update_rd_offset_cnt_next[5]));
  LUT4 #(
    .INIT(16'h56A6)) 
    \update_rd_offset_cnt[5]_i_3 
       (.I0(ri_stp[5]),
        .I1(update_rd_offset_cnt[5]),
        .I2(update_read_resize_first),
        .I3(\ri_addr_reg_n_0_[5] ),
        .O(\update_rd_offset_cnt[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[5]_i_4 
       (.I0(update_rd_offset_cnt[4]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[4] ),
        .I3(ri_stp[4]),
        .O(\update_rd_offset_cnt[5]_i_4_n_0 ));
  FDRE \update_rd_offset_cnt_reg[0] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[0]),
        .Q(update_rd_offset_cnt[0]),
        .R(ARESET_I));
  FDRE \update_rd_offset_cnt_reg[1] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[1]),
        .Q(update_rd_offset_cnt[1]),
        .R(ARESET_I));
  FDRE \update_rd_offset_cnt_reg[2] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[2]),
        .Q(update_rd_offset_cnt[2]),
        .R(ARESET_I));
  FDRE \update_rd_offset_cnt_reg[3] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[3]),
        .Q(update_rd_offset_cnt[3]),
        .R(ARESET_I));
  CARRY4 \update_rd_offset_cnt_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\update_rd_offset_cnt_reg[3]_i_2_n_0 ,\update_rd_offset_cnt_reg[3]_i_2_n_1 ,\update_rd_offset_cnt_reg[3]_i_2_n_2 ,\update_rd_offset_cnt_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(ri_stp[3:0]),
        .O({\update_rd_offset_cnt_reg[3]_i_2_n_4 ,\update_rd_offset_cnt_reg[3]_i_2_n_5 ,\update_rd_offset_cnt_reg[3]_i_2_n_6 ,\update_rd_offset_cnt_reg[3]_i_2_n_7 }),
        .S({\update_rd_offset_cnt[3]_i_3_n_0 ,\update_rd_offset_cnt[3]_i_4_n_0 ,\update_rd_offset_cnt[3]_i_5_n_0 ,\update_rd_offset_cnt[3]_i_6_n_0 }));
  FDRE \update_rd_offset_cnt_reg[4] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[4]),
        .Q(update_rd_offset_cnt[4]),
        .R(ARESET_I));
  FDRE \update_rd_offset_cnt_reg[5] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[5]),
        .Q(update_rd_offset_cnt[5]),
        .R(ARESET_I));
  CARRY4 \update_rd_offset_cnt_reg[5]_i_2 
       (.CI(\update_rd_offset_cnt_reg[3]_i_2_n_0 ),
        .CO({\NLW_update_rd_offset_cnt_reg[5]_i_2_CO_UNCONNECTED [3:1],\update_rd_offset_cnt_reg[5]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,ri_stp[4]}),
        .O({\NLW_update_rd_offset_cnt_reg[5]_i_2_O_UNCONNECTED [3:2],\update_rd_offset_cnt_reg[5]_i_2_n_6 ,\update_rd_offset_cnt_reg[5]_i_2_n_7 }),
        .S({1'b0,1'b0,\update_rd_offset_cnt[5]_i_3_n_0 ,\update_rd_offset_cnt[5]_i_4_n_0 }));
  FDRE update_read_miss_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_RI_Pointer_n_9),
        .Q(update_read_miss_ongoing_reg_n_0),
        .R(1'b0));
  FDRE update_read_resize_finish_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_9),
        .Q(update_read_resize_finish_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00004544FFFFFFFF)) 
    update_read_resize_first_i_2
       (.I0(ri_port),
        .I1(r_miss_fifo_full),
        .I2(\read_data_status[0,0][Hit_Full] ),
        .I3(\lookup_read_data_info[0,0][Valid] ),
        .I4(update_read_resize_first_i_3_n_0),
        .I5(A_0),
        .O(update_read_resize_first_i_2_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    update_read_resize_first_i_3
       (.I0(update_read_resize_finish_reg_n_0),
        .I1(update_read_resize_selected_reg_n_0),
        .O(update_read_resize_first_i_3_n_0));
  LUT6 #(
    .INIT(64'hFFFF45FFFFFFFFFF)) 
    update_read_resize_first_i_4
       (.I0(r_miss_fifo_full_6),
        .I1(\read_data_status[0,1][Hit_Full] ),
        .I2(\lookup_read_data_info[0,1][Valid] ),
        .I3(ri_port),
        .I4(update_read_resize_finish_reg_n_0),
        .I5(update_read_resize_selected_reg_n_0),
        .O(A_0));
  FDSE update_read_resize_first_reg
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(M0_AXI_RLAST),
        .Q(update_read_resize_first),
        .S(ARESET_I));
  LUT6 #(
    .INIT(64'hABAAFFFFAEAAFFFF)) 
    update_read_resize_selected_i_10
       (.I0(update_read_resize_finish_reg_n_0),
        .I1(\ri_addr_reg_n_0_[5] ),
        .I2(ri_use[5]),
        .I3(ri_allocate),
        .I4(ri_kind),
        .I5(\update_rd_offset_cnt_reg[5]_i_2_n_6 ),
        .O(update_read_resize_selected_i_10_n_0));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    update_read_resize_selected_i_4
       (.I0(update_read_resize_selected_i_5_n_0),
        .I1(update_read_resize_selected_i_6_n_0),
        .I2(update_read_resize_selected_i_7_n_0),
        .I3(update_read_resize_selected_i_8_n_0),
        .I4(update_read_resize_selected_i_9_n_0),
        .I5(update_read_resize_selected_i_10_n_0),
        .O(update_read_resize_selected_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h005100A2)) 
    update_read_resize_selected_i_5
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_5 ),
        .I1(ri_kind),
        .I2(ri_allocate),
        .I3(ri_use[2]),
        .I4(\ri_addr_reg_n_0_[2] ),
        .O(update_read_resize_selected_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'h005100A2)) 
    update_read_resize_selected_i_6
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_4 ),
        .I1(ri_kind),
        .I2(ri_allocate),
        .I3(ri_use[3]),
        .I4(\ri_addr_reg_n_0_[3] ),
        .O(update_read_resize_selected_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT5 #(
    .INIT(32'hFFAEFF5D)) 
    update_read_resize_selected_i_7
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_7 ),
        .I1(ri_kind),
        .I2(ri_allocate),
        .I3(ri_use[0]),
        .I4(\ri_addr_reg_n_0_[0] ),
        .O(update_read_resize_selected_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT5 #(
    .INIT(32'h005100A2)) 
    update_read_resize_selected_i_8
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_6 ),
        .I1(ri_kind),
        .I2(ri_allocate),
        .I3(ri_use[1]),
        .I4(\ri_addr_reg_n_0_[1] ),
        .O(update_read_resize_selected_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'h005100A2)) 
    update_read_resize_selected_i_9
       (.I0(\update_rd_offset_cnt_reg[5]_i_2_n_7 ),
        .I1(ri_kind),
        .I2(ri_allocate),
        .I3(ri_use[4]),
        .I4(\ri_addr_reg_n_0_[4] ),
        .O(update_read_resize_selected_i_9_n_0));
  FDRE update_read_resize_selected_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_1),
        .Q(update_read_resize_selected_reg_n_0),
        .R(1'b0));
  FDRE update_readback_available_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(UD_RD_And_Inst8b_n_2),
        .Q(update_readback_available),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][10] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[10]),
        .Q(\update_release_tag[Addr] [10]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][11] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[11]),
        .Q(\update_release_tag[Addr] [11]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][12] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[12]),
        .Q(\update_release_tag[Addr] [12]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][6] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[6]),
        .Q(\update_release_tag[Addr] [6]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][7] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[7]),
        .Q(\update_release_tag[Addr] [7]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][8] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[8]),
        .Q(\update_release_tag[Addr] [8]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Addr][9] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[9]),
        .Q(\update_release_tag[Addr] [9]),
        .R(ARESET_I));
  FDRE \update_release_tag_reg[Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(\update_release_tag[Valid] ),
        .R(ARESET_I));
  FDRE update_rm_alloc_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(UD_RD_Or_Inst3_n_3),
        .Q(update_rm_alloc_ongoing_reg_n_0),
        .R(1'b0));
  FDRE update_wm_pop_evict_hold_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_36),
        .Q(update_wm_pop_evict_hold),
        .R(1'b0));
  FDRE update_wm_pop_normal_hold_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_35),
        .Q(update_wm_pop_normal_hold_reg_n_0),
        .R(1'b0));
  FDRE \update_wma_data_reg[0] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [0]),
        .Q(update_wma_data[0]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[10] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [10]),
        .Q(update_wma_data[10]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[11] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [11]),
        .Q(update_wma_data[11]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[12] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [12]),
        .Q(update_wma_data[12]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[13] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [13]),
        .Q(update_wma_data[13]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[14] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [14]),
        .Q(update_wma_data[14]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[15] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [15]),
        .Q(update_wma_data[15]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[16] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [16]),
        .Q(update_wma_data[16]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[17] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [17]),
        .Q(update_wma_data[17]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[18] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [18]),
        .Q(update_wma_data[18]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[19] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [19]),
        .Q(update_wma_data[19]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[1] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [1]),
        .Q(update_wma_data[1]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[20] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [20]),
        .Q(update_wma_data[20]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[21] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [21]),
        .Q(update_wma_data[21]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[22] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [22]),
        .Q(update_wma_data[22]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[23] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_13),
        .D(\update_wma_data_reg[31]_1 [23]),
        .Q(update_wma_data[23]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[24] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [24]),
        .Q(update_wma_data[24]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[25] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [25]),
        .Q(update_wma_data[25]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[26] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [26]),
        .Q(update_wma_data[26]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[27] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [27]),
        .Q(update_wma_data[27]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[28] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [28]),
        .Q(update_wma_data[28]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[29] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [29]),
        .Q(update_wma_data[29]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[2] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [2]),
        .Q(update_wma_data[2]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[30] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [30]),
        .Q(update_wma_data[30]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[31] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_12),
        .D(\update_wma_data_reg[31]_1 [31]),
        .Q(update_wma_data[31]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[3] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [3]),
        .Q(update_wma_data[3]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[4] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [4]),
        .Q(update_wma_data[4]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[5] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [5]),
        .Q(update_wma_data[5]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[6] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [6]),
        .Q(update_wma_data[6]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[7] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_15),
        .D(\update_wma_data_reg[31]_1 [7]),
        .Q(update_wma_data[7]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[8] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [8]),
        .Q(update_wma_data[8]),
        .R(ARESET_I));
  FDRE \update_wma_data_reg[9] 
       (.C(ACLK),
        .CE(FIFO_WM_Pointer_n_14),
        .D(\update_wma_data_reg[31]_1 [9]),
        .Q(update_wma_data[9]),
        .R(ARESET_I));
  FDRE update_wma_last_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_15),
        .Q(update_wma_last),
        .R(ARESET_I));
  FDRE \update_wma_strb_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_27),
        .Q(update_wma_strb[0]),
        .R(ARESET_I));
  FDRE \update_wma_strb_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_26),
        .Q(update_wma_strb[1]),
        .R(ARESET_I));
  FDRE \update_wma_strb_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_25),
        .Q(update_wma_strb[2]),
        .R(ARESET_I));
  FDRE \update_wma_strb_reg[3] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_24),
        .Q(update_wma_strb[3]),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    update_word_cnt_almost_last_i_1
       (.I0(update_word_cnt_len_reg[2]),
        .I1(update_word_cnt_len_reg[3]),
        .I2(update_word_cnt_len_reg[5]),
        .I3(update_word_cnt_len_reg[4]),
        .O(update_word_cnt_almost_last_i_1_n_0));
  FDRE update_word_cnt_almost_last_reg
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(update_word_cnt_almost_last_i_1_n_0),
        .Q(update_word_cnt_almost_last),
        .R(ARESET_I));
  FDSE update_word_cnt_first_reg
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(update_word_cnt_last),
        .Q(update_word_cnt_first),
        .S(ARESET_I));
  LUT4 #(
    .INIT(16'h0004)) 
    update_word_cnt_last_i_1
       (.I0(update_word_cnt_len_reg[3]),
        .I1(update_word_cnt_len_reg[2]),
        .I2(update_word_cnt_len_reg[5]),
        .I3(update_word_cnt_len_reg[4]),
        .O(update_word_cnt_last_i_1_n_0));
  FDRE update_word_cnt_last_reg
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(update_word_cnt_last_i_1_n_0),
        .Q(update_word_cnt_last),
        .R(ARESET_I));
  LUT1 #(
    .INIT(2'h1)) 
    \update_word_cnt_len[2]_i_1 
       (.I0(update_word_cnt_len_reg[2]),
        .O(\update_word_cnt_len[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \update_word_cnt_len[3]_i_1 
       (.I0(update_word_cnt_len_reg[3]),
        .I1(update_word_cnt_len_reg[2]),
        .O(\update_word_cnt_len[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \update_word_cnt_len[4]_i_1 
       (.I0(update_word_cnt_len_reg[4]),
        .I1(update_word_cnt_len_reg[2]),
        .I2(update_word_cnt_len_reg[3]),
        .O(minusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT4 #(
    .INIT(16'hAAA9)) 
    \update_word_cnt_len[5]_i_1 
       (.I0(update_word_cnt_len_reg[5]),
        .I1(update_word_cnt_len_reg[4]),
        .I2(update_word_cnt_len_reg[3]),
        .I3(update_word_cnt_len_reg[2]),
        .O(minusOp[3]));
  FDSE \update_word_cnt_len_reg[2] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(\update_word_cnt_len[2]_i_1_n_0 ),
        .Q(update_word_cnt_len_reg[2]),
        .S(ARESET_I));
  FDSE \update_word_cnt_len_reg[3] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(\update_word_cnt_len[3]_i_1_n_0 ),
        .Q(update_word_cnt_len_reg[3]),
        .S(ARESET_I));
  FDSE \update_word_cnt_len_reg[4] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(minusOp[2]),
        .Q(update_word_cnt_len_reg[4]),
        .S(ARESET_I));
  FDSE \update_word_cnt_len_reg[5] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(minusOp[3]),
        .Q(update_word_cnt_len_reg[5]),
        .S(ARESET_I));
  FDRE \update_word_cnt_next_reg[2] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[0]),
        .Q(update_word_cnt_next_reg[2]),
        .R(ARESET_I));
  FDRE \update_word_cnt_next_reg[3] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[1]),
        .Q(update_word_cnt_next_reg[3]),
        .R(ARESET_I));
  FDRE \update_word_cnt_next_reg[4] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[2]),
        .Q(update_word_cnt_next_reg[4]),
        .R(ARESET_I));
  FDRE \update_word_cnt_next_reg[5] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[3]),
        .Q(update_word_cnt_next_reg[5]),
        .R(ARESET_I));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[0]_i_1 
       (.I0(wm_offset[0]),
        .I1(wm_use_bits[0]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_0),
        .I4(p_1_in[0]),
        .I5(\wm_remove_unaligned_reg_n_0_[0] ),
        .O(update_wr_offset_cnt_cmb[0]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[1]_i_1 
       (.I0(wm_offset[1]),
        .I1(wm_use_bits[1]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_0),
        .I4(p_1_in[1]),
        .I5(p_0_in42_in),
        .O(update_wr_offset_cnt_cmb[1]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[2]_i_1 
       (.I0(wm_offset[2]),
        .I1(wm_use_bits[2]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_0),
        .I4(p_1_in[2]),
        .I5(p_0_in47_in),
        .O(update_wr_offset_cnt_cmb[2]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[3]_i_1 
       (.I0(wm_offset[3]),
        .I1(wm_use_bits[3]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_0),
        .I4(p_1_in[3]),
        .I5(p_0_in52_in),
        .O(update_wr_offset_cnt_cmb[3]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_10 
       (.I0(wm_offset[0]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[0]),
        .I3(wm_stp_bits[0]),
        .O(\update_wr_offset_cnt[3]_i_10_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[3]_i_3 
       (.I0(update_wr_offset_cnt[3]),
        .I1(update_write_miss_ongoing),
        .I2(wm_offset[3]),
        .O(\update_wr_offset_cnt[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[3]_i_4 
       (.I0(update_wr_offset_cnt[2]),
        .I1(update_write_miss_ongoing),
        .I2(wm_offset[2]),
        .O(\update_wr_offset_cnt[3]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[3]_i_5 
       (.I0(update_wr_offset_cnt[1]),
        .I1(update_write_miss_ongoing),
        .I2(wm_offset[1]),
        .O(\update_wr_offset_cnt[3]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[3]_i_6 
       (.I0(update_wr_offset_cnt[0]),
        .I1(update_write_miss_ongoing),
        .I2(wm_offset[0]),
        .O(\update_wr_offset_cnt[3]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_7 
       (.I0(wm_offset[3]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[3]),
        .I3(wm_stp_bits[3]),
        .O(\update_wr_offset_cnt[3]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_8 
       (.I0(wm_offset[2]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[2]),
        .I3(wm_stp_bits[2]),
        .O(\update_wr_offset_cnt[3]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_9 
       (.I0(wm_offset[1]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[1]),
        .I3(wm_stp_bits[1]),
        .O(\update_wr_offset_cnt[3]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[4]_i_1 
       (.I0(wm_offset[4]),
        .I1(wm_use_bits[4]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_0),
        .I4(p_1_in[4]),
        .I5(p_0_in57_in),
        .O(update_wr_offset_cnt_cmb[4]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[5]_i_10 
       (.I0(wm_offset[4]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[4]),
        .I3(wm_stp_bits[4]),
        .O(\update_wr_offset_cnt[5]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[5]_i_2 
       (.I0(wm_offset[5]),
        .I1(wm_use_bits[5]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_0),
        .I4(p_1_in[5]),
        .I5(p_0_in62_in),
        .O(update_wr_offset_cnt_cmb[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \update_wr_offset_cnt[5]_i_8 
       (.I0(update_wr_offset_cnt[4]),
        .I1(update_write_miss_ongoing),
        .I2(wm_offset[4]),
        .O(\update_wr_offset_cnt[5]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h56A6)) 
    \update_wr_offset_cnt[5]_i_9 
       (.I0(wm_stp_bits[5]),
        .I1(wm_offset[5]),
        .I2(update_write_miss_ongoing),
        .I3(update_wr_offset_cnt[5]),
        .O(\update_wr_offset_cnt[5]_i_9_n_0 ));
  FDRE \update_wr_offset_cnt_reg[0] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_17),
        .D(update_wr_offset_cnt_cmb[0]),
        .Q(update_wr_offset_cnt[0]),
        .R(ARESET_I));
  FDRE \update_wr_offset_cnt_reg[1] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_17),
        .D(update_wr_offset_cnt_cmb[1]),
        .Q(update_wr_offset_cnt[1]),
        .R(ARESET_I));
  FDRE \update_wr_offset_cnt_reg[2] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_17),
        .D(update_wr_offset_cnt_cmb[2]),
        .Q(update_wr_offset_cnt[2]),
        .R(ARESET_I));
  FDRE \update_wr_offset_cnt_reg[3] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_17),
        .D(update_wr_offset_cnt_cmb[3]),
        .Q(update_wr_offset_cnt[3]),
        .R(ARESET_I));
  CARRY4 \update_wr_offset_cnt_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\update_wr_offset_cnt_reg[3]_i_2_n_0 ,\update_wr_offset_cnt_reg[3]_i_2_n_1 ,\update_wr_offset_cnt_reg[3]_i_2_n_2 ,\update_wr_offset_cnt_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({\update_wr_offset_cnt[3]_i_3_n_0 ,\update_wr_offset_cnt[3]_i_4_n_0 ,\update_wr_offset_cnt[3]_i_5_n_0 ,\update_wr_offset_cnt[3]_i_6_n_0 }),
        .O(p_1_in[3:0]),
        .S({\update_wr_offset_cnt[3]_i_7_n_0 ,\update_wr_offset_cnt[3]_i_8_n_0 ,\update_wr_offset_cnt[3]_i_9_n_0 ,\update_wr_offset_cnt[3]_i_10_n_0 }));
  FDRE \update_wr_offset_cnt_reg[4] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_17),
        .D(update_wr_offset_cnt_cmb[4]),
        .Q(update_wr_offset_cnt[4]),
        .R(ARESET_I));
  FDRE \update_wr_offset_cnt_reg[5] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_17),
        .D(update_wr_offset_cnt_cmb[5]),
        .Q(update_wr_offset_cnt[5]),
        .R(ARESET_I));
  CARRY4 \update_wr_offset_cnt_reg[5]_i_4 
       (.CI(\update_wr_offset_cnt_reg[3]_i_2_n_0 ),
        .CO({\NLW_update_wr_offset_cnt_reg[5]_i_4_CO_UNCONNECTED [3:1],\update_wr_offset_cnt_reg[5]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,\update_wr_offset_cnt[5]_i_8_n_0 }),
        .O({\NLW_update_wr_offset_cnt_reg[5]_i_4_O_UNCONNECTED [3:2],p_1_in[5:4]}),
        .S({1'b0,1'b0,\update_wr_offset_cnt[5]_i_9_n_0 ,\update_wr_offset_cnt[5]_i_10_n_0 }));
  FDRE \update_write_miss_busy_i_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_23),
        .Q(update_write_miss_busy[0]),
        .R(ARESET_I));
  FDRE \update_write_miss_busy_i_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_22),
        .Q(update_write_miss_busy[1]),
        .R(ARESET_I));
  FDRE update_write_miss_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_8),
        .Q(update_write_miss_ongoing),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hEAEEEAAA)) 
    \w_fifo_mem_reg[31][BE][0]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(wm_allow_reg_0),
        .I2(\M_AXI_WSTRB_reg[3] [0]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WSTRB_reg[3]_0 [0]),
        .O(update_evict_busy_reg_0[0]));
  LUT5 #(
    .INIT(32'hEAEEEAAA)) 
    \w_fifo_mem_reg[31][BE][1]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(wm_allow_reg_0),
        .I2(\M_AXI_WSTRB_reg[3] [1]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WSTRB_reg[3]_0 [1]),
        .O(update_evict_busy_reg_0[1]));
  LUT5 #(
    .INIT(32'hEAEEEAAA)) 
    \w_fifo_mem_reg[31][BE][2]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(wm_allow_reg_0),
        .I2(\M_AXI_WSTRB_reg[3] [2]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WSTRB_reg[3]_0 [2]),
        .O(update_evict_busy_reg_0[2]));
  LUT5 #(
    .INIT(32'hEAEEEAAA)) 
    \w_fifo_mem_reg[31][BE][3]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(wm_allow_reg_0),
        .I2(\M_AXI_WSTRB_reg[3] [3]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WSTRB_reg[3]_0 [3]),
        .O(update_evict_busy_reg_0[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][0]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][0]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [0]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [0]),
        .O(update_evict_busy_reg_1[0]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][0]_srl32_i_2 
       (.I0(DATA_OUTB[0]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [0]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [0]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [0]),
        .O(\w_fifo_mem_reg[31][Data][0]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][10]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][10]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [10]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [10]),
        .O(update_evict_busy_reg_1[10]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][10]_srl32_i_2 
       (.I0(DATA_OUTB[10]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [10]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [10]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [10]),
        .O(\w_fifo_mem_reg[31][Data][10]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][11]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][11]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [11]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [11]),
        .O(update_evict_busy_reg_1[11]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][11]_srl32_i_2 
       (.I0(DATA_OUTB[11]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [11]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [11]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [11]),
        .O(\w_fifo_mem_reg[31][Data][11]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][12]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][12]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [12]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [12]),
        .O(update_evict_busy_reg_1[12]));
  LUT6 #(
    .INIT(64'hAACCFFF0AACC00F0)) 
    \w_fifo_mem_reg[31][Data][12]_srl32_i_2 
       (.I0(DATA_OUTB[12]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [12]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [12]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [12]),
        .O(\w_fifo_mem_reg[31][Data][12]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][13]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][13]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [13]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [13]),
        .O(update_evict_busy_reg_1[13]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][13]_srl32_i_2 
       (.I0(DATA_OUTB[13]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [13]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [13]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [13]),
        .O(\w_fifo_mem_reg[31][Data][13]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][14]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][14]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [14]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [14]),
        .O(update_evict_busy_reg_1[14]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][14]_srl32_i_2 
       (.I0(DATA_OUTB[14]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [14]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [14]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [14]),
        .O(\w_fifo_mem_reg[31][Data][14]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][15]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][15]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [15]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [15]),
        .O(update_evict_busy_reg_1[15]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][15]_srl32_i_2 
       (.I0(DATA_OUTB[15]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [15]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [15]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [15]),
        .O(\w_fifo_mem_reg[31][Data][15]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][16]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][16]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [16]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [16]),
        .O(update_evict_busy_reg_1[16]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][16]_srl32_i_2 
       (.I0(DATA_OUTB[16]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [16]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [16]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [16]),
        .O(\w_fifo_mem_reg[31][Data][16]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][17]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][17]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [17]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [17]),
        .O(update_evict_busy_reg_1[17]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][17]_srl32_i_2 
       (.I0(DATA_OUTB[17]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [17]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [17]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [17]),
        .O(\w_fifo_mem_reg[31][Data][17]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][18]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][18]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [18]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [18]),
        .O(update_evict_busy_reg_1[18]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][18]_srl32_i_2 
       (.I0(DATA_OUTB[18]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [18]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [18]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [18]),
        .O(\w_fifo_mem_reg[31][Data][18]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][19]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][19]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [19]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [19]),
        .O(update_evict_busy_reg_1[19]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][19]_srl32_i_2 
       (.I0(DATA_OUTB[19]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [19]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [19]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [19]),
        .O(\w_fifo_mem_reg[31][Data][19]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][1]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][1]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [1]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [1]),
        .O(update_evict_busy_reg_1[1]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][1]_srl32_i_2 
       (.I0(DATA_OUTB[1]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [1]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [1]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [1]),
        .O(\w_fifo_mem_reg[31][Data][1]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][20]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][20]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [20]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [20]),
        .O(update_evict_busy_reg_1[20]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][20]_srl32_i_2 
       (.I0(DATA_OUTB[20]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [20]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [20]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [20]),
        .O(\w_fifo_mem_reg[31][Data][20]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][21]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][21]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [21]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [21]),
        .O(update_evict_busy_reg_1[21]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][21]_srl32_i_2 
       (.I0(DATA_OUTB[21]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [21]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [21]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [21]),
        .O(\w_fifo_mem_reg[31][Data][21]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][22]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][22]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [22]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [22]),
        .O(update_evict_busy_reg_1[22]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][22]_srl32_i_2 
       (.I0(DATA_OUTB[22]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [22]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [22]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [22]),
        .O(\w_fifo_mem_reg[31][Data][22]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][23]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][23]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [23]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [23]),
        .O(update_evict_busy_reg_1[23]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][23]_srl32_i_2 
       (.I0(DATA_OUTB[23]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [23]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [23]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [23]),
        .O(\w_fifo_mem_reg[31][Data][23]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][24]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][24]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [24]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [24]),
        .O(update_evict_busy_reg_1[24]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][24]_srl32_i_2 
       (.I0(DATA_OUTB[24]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [24]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [24]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [24]),
        .O(\w_fifo_mem_reg[31][Data][24]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][25]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][25]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [25]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [25]),
        .O(update_evict_busy_reg_1[25]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][25]_srl32_i_2 
       (.I0(DATA_OUTB[25]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [25]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [25]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [25]),
        .O(\w_fifo_mem_reg[31][Data][25]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][26]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][26]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [26]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [26]),
        .O(update_evict_busy_reg_1[26]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][26]_srl32_i_2 
       (.I0(DATA_OUTB[26]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [26]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [26]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [26]),
        .O(\w_fifo_mem_reg[31][Data][26]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][27]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][27]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [27]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [27]),
        .O(update_evict_busy_reg_1[27]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][27]_srl32_i_2 
       (.I0(DATA_OUTB[27]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [27]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [27]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [27]),
        .O(\w_fifo_mem_reg[31][Data][27]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][28]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][28]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [28]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [28]),
        .O(update_evict_busy_reg_1[28]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][28]_srl32_i_2 
       (.I0(DATA_OUTB[28]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [28]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [28]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [28]),
        .O(\w_fifo_mem_reg[31][Data][28]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][29]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][29]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [29]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [29]),
        .O(update_evict_busy_reg_1[29]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][29]_srl32_i_2 
       (.I0(DATA_OUTB[29]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [29]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [29]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [29]),
        .O(\w_fifo_mem_reg[31][Data][29]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][2]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][2]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [2]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [2]),
        .O(update_evict_busy_reg_1[2]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][2]_srl32_i_2 
       (.I0(DATA_OUTB[2]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [2]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [2]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [2]),
        .O(\w_fifo_mem_reg[31][Data][2]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][30]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][30]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [30]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [30]),
        .O(update_evict_busy_reg_1[30]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][30]_srl32_i_2 
       (.I0(DATA_OUTB[30]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [30]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [30]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [30]),
        .O(\w_fifo_mem_reg[31][Data][30]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][31]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][31]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [31]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [31]),
        .O(update_evict_busy_reg_1[31]));
  LUT6 #(
    .INIT(64'hAACCFFF0AACC00F0)) 
    \w_fifo_mem_reg[31][Data][31]_srl32_i_2 
       (.I0(DATA_OUTB[31]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [31]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [31]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [31]),
        .O(\w_fifo_mem_reg[31][Data][31]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][3]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][3]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [3]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [3]),
        .O(update_evict_busy_reg_1[3]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][3]_srl32_i_2 
       (.I0(DATA_OUTB[3]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [3]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [3]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [3]),
        .O(\w_fifo_mem_reg[31][Data][3]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][4]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][4]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [4]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [4]),
        .O(update_evict_busy_reg_1[4]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][4]_srl32_i_2 
       (.I0(DATA_OUTB[4]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [4]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [4]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [4]),
        .O(\w_fifo_mem_reg[31][Data][4]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][5]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][5]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [5]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [5]),
        .O(update_evict_busy_reg_1[5]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][5]_srl32_i_2 
       (.I0(DATA_OUTB[5]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [5]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [5]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [5]),
        .O(\w_fifo_mem_reg[31][Data][5]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][6]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][6]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [6]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [6]),
        .O(update_evict_busy_reg_1[6]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][6]_srl32_i_2 
       (.I0(DATA_OUTB[6]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [6]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [6]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [6]),
        .O(\w_fifo_mem_reg[31][Data][6]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][7]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][7]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [7]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [7]),
        .O(update_evict_busy_reg_1[7]));
  LUT6 #(
    .INIT(64'hAACCFFF0AACC00F0)) 
    \w_fifo_mem_reg[31][Data][7]_srl32_i_2 
       (.I0(DATA_OUTB[7]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [7]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [7]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [7]),
        .O(\w_fifo_mem_reg[31][Data][7]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][8]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][8]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [8]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [8]),
        .O(update_evict_busy_reg_1[8]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][8]_srl32_i_2 
       (.I0(DATA_OUTB[8]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [8]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [8]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [8]),
        .O(\w_fifo_mem_reg[31][Data][8]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Data][9]_srl32_i_1 
       (.I0(\w_fifo_mem_reg[31][Data][9]_srl32_i_2_n_0 ),
        .I1(update_evict_busy),
        .I2(\M_AXI_WDATA_reg[31] [9]),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\M_AXI_WDATA_reg[31]_0 [9]),
        .O(update_evict_busy_reg_1[9]));
  LUT6 #(
    .INIT(64'hAACCF0FFAACCF000)) 
    \w_fifo_mem_reg[31][Data][9]_srl32_i_2 
       (.I0(DATA_OUTB[9]),
        .I1(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_0 [9]),
        .I2(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_1 [9]),
        .I3(update_cur_evict_way_d1[0]),
        .I4(update_cur_evict_way_d1[1]),
        .I5(\w_fifo_mem_reg[31][Data][31]_srl32_i_1_2 [9]),
        .O(\w_fifo_mem_reg[31][Data][9]_srl32_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Last][-1111111111]_srl32_i_1 
       (.I0(update_evict_last),
        .I1(update_evict_busy),
        .I2(\access_data_info[0,1][Last] ),
        .I3(\wm_port_reg[0]_0 ),
        .I4(\access_data_info[0,0][Last] ),
        .O(\write_data_info[0][Last] ));
  FDRE wm_allocate_reg
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ),
        .Q(wm_allocate_reg_0),
        .R(ARESET_I));
  FDSE wm_allow_reg
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Allow][-1111111111]_srl16_n_0 ),
        .Q(wm_allow_reg_0),
        .S(ARESET_I));
  FDRE wm_evict_reg
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_n_0 ),
        .Q(wm_evict),
        .R(ARESET_I));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allocate] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_allocate),
        .Q(\wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allow] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allow][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Allow][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_allow_write),
        .Q(\wm_fifo_mem_reg[15][Allow][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Evict] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Evict][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_evict),
        .Q(\wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(wm_kind_reg_0),
        .Q(\wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_offset_reg[5]_0 [0]),
        .Q(\wm_fifo_mem_reg[15][Offset][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][1]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_offset_reg[5]_0 [1]),
        .Q(\wm_fifo_mem_reg[15][Offset][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][2]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_offset_reg[5]_0 [2]),
        .Q(\wm_fifo_mem_reg[15][Offset][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][3]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_offset_reg[5]_0 [3]),
        .Q(\wm_fifo_mem_reg[15][Offset][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][4]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_offset_reg[5]_0 [4]),
        .Q(\wm_fifo_mem_reg[15][Offset][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][5]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_offset_reg[5]_0 [5]),
        .Q(\wm_fifo_mem_reg[15][Offset][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Port_Num] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Port_Num][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Port_Num][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\update_write_miss_busy_i_reg[1]_0 ),
        .Q(\wm_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_stp_bits_reg[5]_0 [0]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][1]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_stp_bits_reg[5]_0 [1]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][2]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_stp_bits_reg[5]_0 [2]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][3]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_stp_bits_reg[5]_0 [3]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][4]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_stp_bits_reg[5]_0 [4]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][5]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_stp_bits_reg[5]_0 [5]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_use_bits_reg[5]_0 [0]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][1]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_use_bits_reg[5]_0 [1]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][2]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_use_bits_reg[5]_0 [2]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][3]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_use_bits_reg[5]_0 [3]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][4]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_use_bits_reg[5]_0 [4]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][5]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\wm_use_bits_reg[5]_0 [5]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Will_Use] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_will_use),
        .Q(\wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_n_0 ));
  FDRE wm_kind_reg
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ),
        .Q(wm_kind),
        .R(ARESET_I));
  LUT4 #(
    .INIT(16'h0001)) 
    wm_local_wrap0
       (.I0(\wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ),
        .O(wm_local_wrap0_n_0));
  FDRE wm_local_wrap_reg
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(wm_local_wrap0_n_0),
        .Q(wm_local_wrap),
        .R(ARESET_I));
  FDRE \wm_offset_reg[0] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Offset][0]_srl16_n_0 ),
        .Q(wm_offset[0]),
        .R(ARESET_I));
  FDRE \wm_offset_reg[1] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Offset][1]_srl16_n_0 ),
        .Q(wm_offset[1]),
        .R(ARESET_I));
  FDRE \wm_offset_reg[2] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Offset][2]_srl16_n_0 ),
        .Q(wm_offset[2]),
        .R(ARESET_I));
  FDRE \wm_offset_reg[3] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Offset][3]_srl16_n_0 ),
        .Q(wm_offset[3]),
        .R(ARESET_I));
  FDRE \wm_offset_reg[4] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Offset][4]_srl16_n_0 ),
        .Q(wm_offset[4]),
        .R(ARESET_I));
  FDRE \wm_offset_reg[5] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Offset][5]_srl16_n_0 ),
        .Q(wm_offset[5]),
        .R(ARESET_I));
  FDRE \wm_port_reg[0] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ),
        .Q(\wm_port_reg[0]_0 ),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wm_remove_unaligned[1]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .O(\wm_remove_unaligned[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    \wm_remove_unaligned[2]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .O(\wm_remove_unaligned[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT4 #(
    .INIT(16'h01FE)) 
    \wm_remove_unaligned[3]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .O(\wm_remove_unaligned[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT5 #(
    .INIT(32'h0001FFFE)) 
    \wm_remove_unaligned[4]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .I4(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .O(\wm_remove_unaligned[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFE)) 
    \wm_remove_unaligned[5]_i_2 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I4(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .I5(\wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ),
        .O(\wm_remove_unaligned[5]_i_2_n_0 ));
  FDSE \wm_remove_unaligned_reg[0] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(\wm_remove_unaligned_reg_n_0_[0] ),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[1] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_remove_unaligned[1]_i_1_n_0 ),
        .Q(p_0_in42_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[2] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_remove_unaligned[2]_i_1_n_0 ),
        .Q(p_0_in47_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[3] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_remove_unaligned[3]_i_1_n_0 ),
        .Q(p_0_in52_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[4] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_remove_unaligned[4]_i_1_n_0 ),
        .Q(p_0_in57_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[5] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_remove_unaligned[5]_i_2_n_0 ),
        .Q(p_0_in62_in),
        .S(FIFO_ED_Pointer_n_2));
  FDRE \wm_stp_bits_reg[0] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(wm_stp_bits[0]),
        .R(ARESET_I));
  FDRE \wm_stp_bits_reg[1] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .Q(wm_stp_bits[1]),
        .R(ARESET_I));
  FDRE \wm_stp_bits_reg[2] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .Q(wm_stp_bits[2]),
        .R(ARESET_I));
  FDRE \wm_stp_bits_reg[3] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .Q(wm_stp_bits[3]),
        .R(ARESET_I));
  FDRE \wm_stp_bits_reg[4] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .Q(wm_stp_bits[4]),
        .R(ARESET_I));
  FDRE \wm_stp_bits_reg[5] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ),
        .Q(wm_stp_bits[5]),
        .R(ARESET_I));
  FDRE \wm_use_bits_reg[0] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ),
        .Q(wm_use_bits[0]),
        .R(ARESET_I));
  FDRE \wm_use_bits_reg[1] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ),
        .Q(wm_use_bits[1]),
        .R(ARESET_I));
  FDRE \wm_use_bits_reg[2] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ),
        .Q(wm_use_bits[2]),
        .R(ARESET_I));
  FDRE \wm_use_bits_reg[3] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ),
        .Q(wm_use_bits[3]),
        .R(ARESET_I));
  FDRE \wm_use_bits_reg[4] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ),
        .Q(wm_use_bits[4]),
        .R(ARESET_I));
  FDRE \wm_use_bits_reg[5] 
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ),
        .Q(wm_use_bits[5]),
        .R(ARESET_I));
  FDRE wm_will_use_reg
       (.C(ACLK),
        .CE(wm_refresh_reg),
        .D(\wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_n_0 ),
        .Q(wm_will_use),
        .R(ARESET_I));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[0]),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][0]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[10]),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][10]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[11]),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][11]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[12]),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][12]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[13]),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][13]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[14]),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][14]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[15]),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][15]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[16]),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][16]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[17]),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][17]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[18]),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][18]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[19]),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][19]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[1]),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][1]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[20]),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][20]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[21]),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][21]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[22]),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][22]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[23]),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][23]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[24]),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][24]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[25]),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][25]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[26]),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][26]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[27]),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][27]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[28]),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][28]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[29]),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][29]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[2]),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][2]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[30]),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][30]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[31]),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][31]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[3]),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][3]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[4]),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][4]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[5]),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][5]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[6]),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][6]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[7]),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][7]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[8]),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][8]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[9]),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][9]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_last),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Last][0]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[0]),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][0]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[1]),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][1]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[2]),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][2]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[3]),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][3]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_1 ));
  FDRE wma_merge_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_16),
        .Q(wma_merge_done),
        .R(1'b0));
  LUT4 #(
    .INIT(16'hFFEA)) 
    wma_word_done_d1_i_3
       (.I0(update_wr_offset_cnt_cmb[1]),
        .I1(wm_kind),
        .I2(wm_local_wrap),
        .I3(update_wr_offset_cnt_cmb[0]),
        .O(wma_word_done_d1_i_3_n_0));
  FDRE wma_word_done_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_10),
        .Q(wma_word_done_d1),
        .R(1'b0));
  FDRE write_data_full_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(write_data_full),
        .Q(write_data_full_d1),
        .R(ARESET_I));
endmodule

(* C_BASEADDR = "64'b0000000000000000000000000000000010000000000000000000000000000000" *) (* C_CACHE_BLOCKS = "1" *) (* C_CACHE_DATA_WIDTH = "32" *) 
(* C_CACHE_LINE_LENGTH = "16" *) (* C_CACHE_SIZE = "32768" *) (* C_ENABLE_COHERENCY = "0" *) 
(* C_ENABLE_CTRL = "0" *) (* C_ENABLE_ERROR_HANDLING = "0" *) (* C_ENABLE_EXCLUSIVE = "0" *) 
(* C_ENABLE_NON_SECURE = "0" *) (* C_ENABLE_PEER_PORT_DATA = "0" *) (* C_ENABLE_STATISTICS = "0" *) 
(* C_ENABLE_VERSION_REGISTER = "0" *) (* C_FAMILY = "artix7" *) (* C_FREQ = "0" *) 
(* C_GEN_MATCH_Lx_CACHE = "0" *) (* C_HIGHADDR = "64'b0000000000000000000000000000000010000000111111111111111111111111" *) (* C_INSTANCE = "system_cache" *) 
(* C_KEEP_SHARED_WRITE = "1" *) (* C_Lx_CACHE_LINE_LENGTH = "8" *) (* C_Lx_CACHE_SIZE = "8192" *) 
(* C_Lx_NUM_WAYS = "1" *) (* C_M0_AXI_ADDR_WIDTH = "24" *) (* C_M0_AXI_DATA_WIDTH = "32" *) 
(* C_M0_AXI_RRESP_WIDTH = "2" *) (* C_M0_AXI_THREAD_ID_WIDTH = "1" *) (* C_M1_AXI_ADDR_WIDTH = "32" *) 
(* C_M1_AXI_DATA_WIDTH = "32" *) (* C_M1_AXI_RRESP_WIDTH = "2" *) (* C_M1_AXI_THREAD_ID_WIDTH = "1" *) 
(* C_M2_AXI_ADDR_WIDTH = "32" *) (* C_M2_AXI_DATA_WIDTH = "32" *) (* C_M2_AXI_RRESP_WIDTH = "2" *) 
(* C_M2_AXI_THREAD_ID_WIDTH = "1" *) (* C_M3_AXI_ADDR_WIDTH = "32" *) (* C_M3_AXI_DATA_WIDTH = "32" *) 
(* C_M3_AXI_RRESP_WIDTH = "2" *) (* C_M3_AXI_THREAD_ID_WIDTH = "1" *) (* C_NUM_GENERIC_PORTS = "1" *) 
(* C_NUM_MASTER_PORTS = "1" *) (* C_NUM_OPTIMIZED_PORTS = "1" *) (* C_NUM_WAYS = "4" *) 
(* C_READ_EXCLUSIVE_CLEAN = "1" *) (* C_READ_ONLY_UNIQUE = "0" *) (* C_S0_AXI_ADDR_WIDTH = "24" *) 
(* C_S0_AXI_DATA_WIDTH = "32" *) (* C_S0_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S0_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S0_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S0_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S0_AXI_GEN_ADDR_WIDTH = "24" *) 
(* C_S0_AXI_GEN_DATA_WIDTH = "32" *) (* C_S0_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S0_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S0_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S0_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S0_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S0_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S0_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S0_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S0_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S0_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S0_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S0_AXI_ID_WIDTH = "1" *) (* C_S0_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S0_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S0_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S0_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S0_AXI_RRESP_WIDTH = "2" *) 
(* C_S0_AXI_SUPPORT_DIRTY = "0" *) (* C_S0_AXI_SUPPORT_UNIQUE = "0" *) (* C_S10_AXI_ADDR_WIDTH = "32" *) 
(* C_S10_AXI_DATA_WIDTH = "32" *) (* C_S10_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S10_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S10_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S10_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S10_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S10_AXI_GEN_DATA_WIDTH = "32" *) (* C_S10_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S10_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S10_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S10_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S10_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S10_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S10_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S10_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S10_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S10_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S10_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S10_AXI_ID_WIDTH = "1" *) (* C_S10_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S10_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S10_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S10_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S10_AXI_RRESP_WIDTH = "2" *) 
(* C_S10_AXI_SUPPORT_DIRTY = "0" *) (* C_S10_AXI_SUPPORT_UNIQUE = "0" *) (* C_S11_AXI_ADDR_WIDTH = "32" *) 
(* C_S11_AXI_DATA_WIDTH = "32" *) (* C_S11_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S11_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S11_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S11_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S11_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S11_AXI_GEN_DATA_WIDTH = "32" *) (* C_S11_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S11_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S11_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S11_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S11_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S11_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S11_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S11_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S11_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S11_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S11_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S11_AXI_ID_WIDTH = "1" *) (* C_S11_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S11_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S11_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S11_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S11_AXI_RRESP_WIDTH = "2" *) 
(* C_S11_AXI_SUPPORT_DIRTY = "0" *) (* C_S11_AXI_SUPPORT_UNIQUE = "0" *) (* C_S12_AXI_ADDR_WIDTH = "32" *) 
(* C_S12_AXI_DATA_WIDTH = "32" *) (* C_S12_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S12_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S12_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S12_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S12_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S12_AXI_GEN_DATA_WIDTH = "32" *) (* C_S12_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S12_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S12_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S12_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S12_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S12_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S12_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S12_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S12_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S12_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S12_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S12_AXI_ID_WIDTH = "1" *) (* C_S12_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S12_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S12_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S12_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S12_AXI_RRESP_WIDTH = "2" *) 
(* C_S12_AXI_SUPPORT_DIRTY = "0" *) (* C_S12_AXI_SUPPORT_UNIQUE = "0" *) (* C_S13_AXI_ADDR_WIDTH = "32" *) 
(* C_S13_AXI_DATA_WIDTH = "32" *) (* C_S13_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S13_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S13_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S13_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S13_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S13_AXI_GEN_DATA_WIDTH = "32" *) (* C_S13_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S13_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S13_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S13_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S13_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S13_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S13_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S13_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S13_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S13_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S13_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S13_AXI_ID_WIDTH = "1" *) (* C_S13_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S13_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S13_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S13_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S13_AXI_RRESP_WIDTH = "2" *) 
(* C_S13_AXI_SUPPORT_DIRTY = "0" *) (* C_S13_AXI_SUPPORT_UNIQUE = "0" *) (* C_S14_AXI_ADDR_WIDTH = "32" *) 
(* C_S14_AXI_DATA_WIDTH = "32" *) (* C_S14_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S14_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S14_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S14_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S14_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S14_AXI_GEN_DATA_WIDTH = "32" *) (* C_S14_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S14_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S14_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S14_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S14_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S14_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S14_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S14_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S14_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S14_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S14_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S14_AXI_ID_WIDTH = "1" *) (* C_S14_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S14_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S14_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S14_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S14_AXI_RRESP_WIDTH = "2" *) 
(* C_S14_AXI_SUPPORT_DIRTY = "0" *) (* C_S14_AXI_SUPPORT_UNIQUE = "0" *) (* C_S15_AXI_ADDR_WIDTH = "32" *) 
(* C_S15_AXI_DATA_WIDTH = "32" *) (* C_S15_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S15_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S15_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S15_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S15_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S15_AXI_GEN_DATA_WIDTH = "32" *) (* C_S15_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S15_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S15_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S15_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S15_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S15_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S15_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S15_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S15_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S15_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S15_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S15_AXI_ID_WIDTH = "1" *) (* C_S15_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S15_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S15_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S15_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S15_AXI_RRESP_WIDTH = "2" *) 
(* C_S15_AXI_SUPPORT_DIRTY = "0" *) (* C_S15_AXI_SUPPORT_UNIQUE = "0" *) (* C_S1_AXI_ADDR_WIDTH = "32" *) 
(* C_S1_AXI_DATA_WIDTH = "32" *) (* C_S1_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S1_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S1_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S1_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S1_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S1_AXI_GEN_DATA_WIDTH = "32" *) (* C_S1_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S1_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S1_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S1_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S1_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S1_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S1_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S1_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S1_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S1_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S1_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S1_AXI_ID_WIDTH = "1" *) (* C_S1_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S1_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S1_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S1_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S1_AXI_RRESP_WIDTH = "2" *) 
(* C_S1_AXI_SUPPORT_DIRTY = "0" *) (* C_S1_AXI_SUPPORT_UNIQUE = "0" *) (* C_S2_AXI_ADDR_WIDTH = "32" *) 
(* C_S2_AXI_DATA_WIDTH = "32" *) (* C_S2_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S2_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S2_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S2_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S2_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S2_AXI_GEN_DATA_WIDTH = "32" *) (* C_S2_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S2_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S2_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S2_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S2_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S2_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S2_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S2_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S2_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S2_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S2_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S2_AXI_ID_WIDTH = "1" *) (* C_S2_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S2_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S2_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S2_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S2_AXI_RRESP_WIDTH = "2" *) 
(* C_S2_AXI_SUPPORT_DIRTY = "0" *) (* C_S2_AXI_SUPPORT_UNIQUE = "0" *) (* C_S3_AXI_ADDR_WIDTH = "32" *) 
(* C_S3_AXI_DATA_WIDTH = "32" *) (* C_S3_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S3_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S3_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S3_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S3_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S3_AXI_GEN_DATA_WIDTH = "32" *) (* C_S3_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S3_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S3_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S3_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S3_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S3_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S3_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S3_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S3_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S3_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S3_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S3_AXI_ID_WIDTH = "1" *) (* C_S3_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S3_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S3_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S3_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S3_AXI_RRESP_WIDTH = "2" *) 
(* C_S3_AXI_SUPPORT_DIRTY = "0" *) (* C_S3_AXI_SUPPORT_UNIQUE = "0" *) (* C_S4_AXI_ADDR_WIDTH = "32" *) 
(* C_S4_AXI_DATA_WIDTH = "32" *) (* C_S4_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S4_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S4_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S4_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S4_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S4_AXI_GEN_DATA_WIDTH = "32" *) (* C_S4_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S4_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S4_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S4_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S4_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S4_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S4_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S4_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S4_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S4_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S4_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S4_AXI_ID_WIDTH = "1" *) (* C_S4_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S4_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S4_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S4_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S4_AXI_RRESP_WIDTH = "2" *) 
(* C_S4_AXI_SUPPORT_DIRTY = "0" *) (* C_S4_AXI_SUPPORT_UNIQUE = "0" *) (* C_S5_AXI_ADDR_WIDTH = "32" *) 
(* C_S5_AXI_DATA_WIDTH = "32" *) (* C_S5_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S5_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S5_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S5_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S5_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S5_AXI_GEN_DATA_WIDTH = "32" *) (* C_S5_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S5_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S5_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S5_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S5_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S5_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S5_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S5_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S5_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S5_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S5_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S5_AXI_ID_WIDTH = "1" *) (* C_S5_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S5_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S5_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S5_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S5_AXI_RRESP_WIDTH = "2" *) 
(* C_S5_AXI_SUPPORT_DIRTY = "0" *) (* C_S5_AXI_SUPPORT_UNIQUE = "0" *) (* C_S6_AXI_ADDR_WIDTH = "32" *) 
(* C_S6_AXI_DATA_WIDTH = "32" *) (* C_S6_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S6_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S6_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S6_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S6_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S6_AXI_GEN_DATA_WIDTH = "32" *) (* C_S6_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S6_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S6_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S6_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S6_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S6_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S6_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S6_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S6_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S6_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S6_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S6_AXI_ID_WIDTH = "1" *) (* C_S6_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S6_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S6_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S6_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S6_AXI_RRESP_WIDTH = "2" *) 
(* C_S6_AXI_SUPPORT_DIRTY = "0" *) (* C_S6_AXI_SUPPORT_UNIQUE = "0" *) (* C_S7_AXI_ADDR_WIDTH = "32" *) 
(* C_S7_AXI_DATA_WIDTH = "32" *) (* C_S7_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S7_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S7_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S7_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S7_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S7_AXI_GEN_DATA_WIDTH = "32" *) (* C_S7_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S7_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S7_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S7_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S7_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S7_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S7_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S7_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S7_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S7_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S7_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S7_AXI_ID_WIDTH = "1" *) (* C_S7_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S7_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S7_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S7_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S7_AXI_RRESP_WIDTH = "2" *) 
(* C_S7_AXI_SUPPORT_DIRTY = "0" *) (* C_S7_AXI_SUPPORT_UNIQUE = "0" *) (* C_S8_AXI_ADDR_WIDTH = "32" *) 
(* C_S8_AXI_DATA_WIDTH = "32" *) (* C_S8_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S8_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S8_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S8_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S8_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S8_AXI_GEN_DATA_WIDTH = "32" *) (* C_S8_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S8_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S8_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S8_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S8_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S8_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S8_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S8_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S8_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S8_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S8_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S8_AXI_ID_WIDTH = "1" *) (* C_S8_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S8_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S8_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S8_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S8_AXI_RRESP_WIDTH = "2" *) 
(* C_S8_AXI_SUPPORT_DIRTY = "0" *) (* C_S8_AXI_SUPPORT_UNIQUE = "0" *) (* C_S9_AXI_ADDR_WIDTH = "32" *) 
(* C_S9_AXI_DATA_WIDTH = "32" *) (* C_S9_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S9_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S9_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S9_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S9_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S9_AXI_GEN_DATA_WIDTH = "32" *) (* C_S9_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S9_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S9_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S9_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S9_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S9_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S9_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S9_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S9_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S9_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S9_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S9_AXI_ID_WIDTH = "1" *) (* C_S9_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S9_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S9_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S9_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S9_AXI_RRESP_WIDTH = "2" *) 
(* C_S9_AXI_SUPPORT_DIRTY = "0" *) (* C_S9_AXI_SUPPORT_UNIQUE = "0" *) (* C_SNOOP_KEEP_CLEAN_SHARED = "0" *) 
(* C_SNOOP_KEEP_READ_CLEAN = "0" *) (* C_SNOOP_KEEP_READ_NSD = "0" *) (* C_SNOOP_KEEP_READ_SHARED = "0" *) 
(* C_SUPPORT_SNOOP_FILTER = "0" *) (* C_S_AXI_CTRL_ADDR_WIDTH = "17" *) (* C_S_AXI_CTRL_DATA_WIDTH = "32" *) 
(* ORIG_REF_NAME = "system_cache" *) 
module Fast_IP_Clock_system_cache_0_0_system_cache
   (ACLK,
    ARESETN,
    S0_AXI_AWID,
    S0_AXI_AWADDR,
    S0_AXI_AWLEN,
    S0_AXI_AWSIZE,
    S0_AXI_AWBURST,
    S0_AXI_AWLOCK,
    S0_AXI_AWCACHE,
    S0_AXI_AWPROT,
    S0_AXI_AWQOS,
    S0_AXI_AWVALID,
    S0_AXI_AWREADY,
    S0_AXI_AWDOMAIN,
    S0_AXI_AWSNOOP,
    S0_AXI_AWBAR,
    S0_AXI_WDATA,
    S0_AXI_WSTRB,
    S0_AXI_WLAST,
    S0_AXI_WVALID,
    S0_AXI_WREADY,
    S0_AXI_BRESP,
    S0_AXI_BID,
    S0_AXI_BVALID,
    S0_AXI_BREADY,
    S0_AXI_WACK,
    S0_AXI_ARID,
    S0_AXI_ARADDR,
    S0_AXI_ARLEN,
    S0_AXI_ARSIZE,
    S0_AXI_ARBURST,
    S0_AXI_ARLOCK,
    S0_AXI_ARCACHE,
    S0_AXI_ARPROT,
    S0_AXI_ARQOS,
    S0_AXI_ARVALID,
    S0_AXI_ARREADY,
    S0_AXI_ARDOMAIN,
    S0_AXI_ARSNOOP,
    S0_AXI_ARBAR,
    S0_AXI_RID,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    S0_AXI_RLAST,
    S0_AXI_RVALID,
    S0_AXI_RREADY,
    S0_AXI_RACK,
    S0_AXI_ACVALID,
    S0_AXI_ACADDR,
    S0_AXI_ACSNOOP,
    S0_AXI_ACPROT,
    S0_AXI_ACREADY,
    S0_AXI_CRVALID,
    S0_AXI_CRRESP,
    S0_AXI_CRREADY,
    S0_AXI_CDVALID,
    S0_AXI_CDDATA,
    S0_AXI_CDLAST,
    S0_AXI_CDREADY,
    S1_AXI_AWID,
    S1_AXI_AWADDR,
    S1_AXI_AWLEN,
    S1_AXI_AWSIZE,
    S1_AXI_AWBURST,
    S1_AXI_AWLOCK,
    S1_AXI_AWCACHE,
    S1_AXI_AWPROT,
    S1_AXI_AWQOS,
    S1_AXI_AWVALID,
    S1_AXI_AWREADY,
    S1_AXI_AWDOMAIN,
    S1_AXI_AWSNOOP,
    S1_AXI_AWBAR,
    S1_AXI_WDATA,
    S1_AXI_WSTRB,
    S1_AXI_WLAST,
    S1_AXI_WVALID,
    S1_AXI_WREADY,
    S1_AXI_BRESP,
    S1_AXI_BID,
    S1_AXI_BVALID,
    S1_AXI_BREADY,
    S1_AXI_WACK,
    S1_AXI_ARID,
    S1_AXI_ARADDR,
    S1_AXI_ARLEN,
    S1_AXI_ARSIZE,
    S1_AXI_ARBURST,
    S1_AXI_ARLOCK,
    S1_AXI_ARCACHE,
    S1_AXI_ARPROT,
    S1_AXI_ARQOS,
    S1_AXI_ARVALID,
    S1_AXI_ARREADY,
    S1_AXI_ARDOMAIN,
    S1_AXI_ARSNOOP,
    S1_AXI_ARBAR,
    S1_AXI_RID,
    S1_AXI_RDATA,
    S1_AXI_RRESP,
    S1_AXI_RLAST,
    S1_AXI_RVALID,
    S1_AXI_RREADY,
    S1_AXI_RACK,
    S1_AXI_ACVALID,
    S1_AXI_ACADDR,
    S1_AXI_ACSNOOP,
    S1_AXI_ACPROT,
    S1_AXI_ACREADY,
    S1_AXI_CRVALID,
    S1_AXI_CRRESP,
    S1_AXI_CRREADY,
    S1_AXI_CDVALID,
    S1_AXI_CDDATA,
    S1_AXI_CDLAST,
    S1_AXI_CDREADY,
    S2_AXI_AWID,
    S2_AXI_AWADDR,
    S2_AXI_AWLEN,
    S2_AXI_AWSIZE,
    S2_AXI_AWBURST,
    S2_AXI_AWLOCK,
    S2_AXI_AWCACHE,
    S2_AXI_AWPROT,
    S2_AXI_AWQOS,
    S2_AXI_AWVALID,
    S2_AXI_AWREADY,
    S2_AXI_AWDOMAIN,
    S2_AXI_AWSNOOP,
    S2_AXI_AWBAR,
    S2_AXI_WDATA,
    S2_AXI_WSTRB,
    S2_AXI_WLAST,
    S2_AXI_WVALID,
    S2_AXI_WREADY,
    S2_AXI_BRESP,
    S2_AXI_BID,
    S2_AXI_BVALID,
    S2_AXI_BREADY,
    S2_AXI_WACK,
    S2_AXI_ARID,
    S2_AXI_ARADDR,
    S2_AXI_ARLEN,
    S2_AXI_ARSIZE,
    S2_AXI_ARBURST,
    S2_AXI_ARLOCK,
    S2_AXI_ARCACHE,
    S2_AXI_ARPROT,
    S2_AXI_ARQOS,
    S2_AXI_ARVALID,
    S2_AXI_ARREADY,
    S2_AXI_ARDOMAIN,
    S2_AXI_ARSNOOP,
    S2_AXI_ARBAR,
    S2_AXI_RID,
    S2_AXI_RDATA,
    S2_AXI_RRESP,
    S2_AXI_RLAST,
    S2_AXI_RVALID,
    S2_AXI_RREADY,
    S2_AXI_RACK,
    S2_AXI_ACVALID,
    S2_AXI_ACADDR,
    S2_AXI_ACSNOOP,
    S2_AXI_ACPROT,
    S2_AXI_ACREADY,
    S2_AXI_CRVALID,
    S2_AXI_CRRESP,
    S2_AXI_CRREADY,
    S2_AXI_CDVALID,
    S2_AXI_CDDATA,
    S2_AXI_CDLAST,
    S2_AXI_CDREADY,
    S3_AXI_AWID,
    S3_AXI_AWADDR,
    S3_AXI_AWLEN,
    S3_AXI_AWSIZE,
    S3_AXI_AWBURST,
    S3_AXI_AWLOCK,
    S3_AXI_AWCACHE,
    S3_AXI_AWPROT,
    S3_AXI_AWQOS,
    S3_AXI_AWVALID,
    S3_AXI_AWREADY,
    S3_AXI_AWDOMAIN,
    S3_AXI_AWSNOOP,
    S3_AXI_AWBAR,
    S3_AXI_WDATA,
    S3_AXI_WSTRB,
    S3_AXI_WLAST,
    S3_AXI_WVALID,
    S3_AXI_WREADY,
    S3_AXI_BRESP,
    S3_AXI_BID,
    S3_AXI_BVALID,
    S3_AXI_BREADY,
    S3_AXI_WACK,
    S3_AXI_ARID,
    S3_AXI_ARADDR,
    S3_AXI_ARLEN,
    S3_AXI_ARSIZE,
    S3_AXI_ARBURST,
    S3_AXI_ARLOCK,
    S3_AXI_ARCACHE,
    S3_AXI_ARPROT,
    S3_AXI_ARQOS,
    S3_AXI_ARVALID,
    S3_AXI_ARREADY,
    S3_AXI_ARDOMAIN,
    S3_AXI_ARSNOOP,
    S3_AXI_ARBAR,
    S3_AXI_RID,
    S3_AXI_RDATA,
    S3_AXI_RRESP,
    S3_AXI_RLAST,
    S3_AXI_RVALID,
    S3_AXI_RREADY,
    S3_AXI_RACK,
    S3_AXI_ACVALID,
    S3_AXI_ACADDR,
    S3_AXI_ACSNOOP,
    S3_AXI_ACPROT,
    S3_AXI_ACREADY,
    S3_AXI_CRVALID,
    S3_AXI_CRRESP,
    S3_AXI_CRREADY,
    S3_AXI_CDVALID,
    S3_AXI_CDDATA,
    S3_AXI_CDLAST,
    S3_AXI_CDREADY,
    S4_AXI_AWID,
    S4_AXI_AWADDR,
    S4_AXI_AWLEN,
    S4_AXI_AWSIZE,
    S4_AXI_AWBURST,
    S4_AXI_AWLOCK,
    S4_AXI_AWCACHE,
    S4_AXI_AWPROT,
    S4_AXI_AWQOS,
    S4_AXI_AWVALID,
    S4_AXI_AWREADY,
    S4_AXI_AWDOMAIN,
    S4_AXI_AWSNOOP,
    S4_AXI_AWBAR,
    S4_AXI_WDATA,
    S4_AXI_WSTRB,
    S4_AXI_WLAST,
    S4_AXI_WVALID,
    S4_AXI_WREADY,
    S4_AXI_BRESP,
    S4_AXI_BID,
    S4_AXI_BVALID,
    S4_AXI_BREADY,
    S4_AXI_WACK,
    S4_AXI_ARID,
    S4_AXI_ARADDR,
    S4_AXI_ARLEN,
    S4_AXI_ARSIZE,
    S4_AXI_ARBURST,
    S4_AXI_ARLOCK,
    S4_AXI_ARCACHE,
    S4_AXI_ARPROT,
    S4_AXI_ARQOS,
    S4_AXI_ARVALID,
    S4_AXI_ARREADY,
    S4_AXI_ARDOMAIN,
    S4_AXI_ARSNOOP,
    S4_AXI_ARBAR,
    S4_AXI_RID,
    S4_AXI_RDATA,
    S4_AXI_RRESP,
    S4_AXI_RLAST,
    S4_AXI_RVALID,
    S4_AXI_RREADY,
    S4_AXI_RACK,
    S4_AXI_ACVALID,
    S4_AXI_ACADDR,
    S4_AXI_ACSNOOP,
    S4_AXI_ACPROT,
    S4_AXI_ACREADY,
    S4_AXI_CRVALID,
    S4_AXI_CRRESP,
    S4_AXI_CRREADY,
    S4_AXI_CDVALID,
    S4_AXI_CDDATA,
    S4_AXI_CDLAST,
    S4_AXI_CDREADY,
    S5_AXI_AWID,
    S5_AXI_AWADDR,
    S5_AXI_AWLEN,
    S5_AXI_AWSIZE,
    S5_AXI_AWBURST,
    S5_AXI_AWLOCK,
    S5_AXI_AWCACHE,
    S5_AXI_AWPROT,
    S5_AXI_AWQOS,
    S5_AXI_AWVALID,
    S5_AXI_AWREADY,
    S5_AXI_AWDOMAIN,
    S5_AXI_AWSNOOP,
    S5_AXI_AWBAR,
    S5_AXI_WDATA,
    S5_AXI_WSTRB,
    S5_AXI_WLAST,
    S5_AXI_WVALID,
    S5_AXI_WREADY,
    S5_AXI_BRESP,
    S5_AXI_BID,
    S5_AXI_BVALID,
    S5_AXI_BREADY,
    S5_AXI_WACK,
    S5_AXI_ARID,
    S5_AXI_ARADDR,
    S5_AXI_ARLEN,
    S5_AXI_ARSIZE,
    S5_AXI_ARBURST,
    S5_AXI_ARLOCK,
    S5_AXI_ARCACHE,
    S5_AXI_ARPROT,
    S5_AXI_ARQOS,
    S5_AXI_ARVALID,
    S5_AXI_ARREADY,
    S5_AXI_ARDOMAIN,
    S5_AXI_ARSNOOP,
    S5_AXI_ARBAR,
    S5_AXI_RID,
    S5_AXI_RDATA,
    S5_AXI_RRESP,
    S5_AXI_RLAST,
    S5_AXI_RVALID,
    S5_AXI_RREADY,
    S5_AXI_RACK,
    S5_AXI_ACVALID,
    S5_AXI_ACADDR,
    S5_AXI_ACSNOOP,
    S5_AXI_ACPROT,
    S5_AXI_ACREADY,
    S5_AXI_CRVALID,
    S5_AXI_CRRESP,
    S5_AXI_CRREADY,
    S5_AXI_CDVALID,
    S5_AXI_CDDATA,
    S5_AXI_CDLAST,
    S5_AXI_CDREADY,
    S6_AXI_AWID,
    S6_AXI_AWADDR,
    S6_AXI_AWLEN,
    S6_AXI_AWSIZE,
    S6_AXI_AWBURST,
    S6_AXI_AWLOCK,
    S6_AXI_AWCACHE,
    S6_AXI_AWPROT,
    S6_AXI_AWQOS,
    S6_AXI_AWVALID,
    S6_AXI_AWREADY,
    S6_AXI_AWDOMAIN,
    S6_AXI_AWSNOOP,
    S6_AXI_AWBAR,
    S6_AXI_WDATA,
    S6_AXI_WSTRB,
    S6_AXI_WLAST,
    S6_AXI_WVALID,
    S6_AXI_WREADY,
    S6_AXI_BRESP,
    S6_AXI_BID,
    S6_AXI_BVALID,
    S6_AXI_BREADY,
    S6_AXI_WACK,
    S6_AXI_ARID,
    S6_AXI_ARADDR,
    S6_AXI_ARLEN,
    S6_AXI_ARSIZE,
    S6_AXI_ARBURST,
    S6_AXI_ARLOCK,
    S6_AXI_ARCACHE,
    S6_AXI_ARPROT,
    S6_AXI_ARQOS,
    S6_AXI_ARVALID,
    S6_AXI_ARREADY,
    S6_AXI_ARDOMAIN,
    S6_AXI_ARSNOOP,
    S6_AXI_ARBAR,
    S6_AXI_RID,
    S6_AXI_RDATA,
    S6_AXI_RRESP,
    S6_AXI_RLAST,
    S6_AXI_RVALID,
    S6_AXI_RREADY,
    S6_AXI_RACK,
    S6_AXI_ACVALID,
    S6_AXI_ACADDR,
    S6_AXI_ACSNOOP,
    S6_AXI_ACPROT,
    S6_AXI_ACREADY,
    S6_AXI_CRVALID,
    S6_AXI_CRRESP,
    S6_AXI_CRREADY,
    S6_AXI_CDVALID,
    S6_AXI_CDDATA,
    S6_AXI_CDLAST,
    S6_AXI_CDREADY,
    S7_AXI_AWID,
    S7_AXI_AWADDR,
    S7_AXI_AWLEN,
    S7_AXI_AWSIZE,
    S7_AXI_AWBURST,
    S7_AXI_AWLOCK,
    S7_AXI_AWCACHE,
    S7_AXI_AWPROT,
    S7_AXI_AWQOS,
    S7_AXI_AWVALID,
    S7_AXI_AWREADY,
    S7_AXI_AWDOMAIN,
    S7_AXI_AWSNOOP,
    S7_AXI_AWBAR,
    S7_AXI_WDATA,
    S7_AXI_WSTRB,
    S7_AXI_WLAST,
    S7_AXI_WVALID,
    S7_AXI_WREADY,
    S7_AXI_BRESP,
    S7_AXI_BID,
    S7_AXI_BVALID,
    S7_AXI_BREADY,
    S7_AXI_WACK,
    S7_AXI_ARID,
    S7_AXI_ARADDR,
    S7_AXI_ARLEN,
    S7_AXI_ARSIZE,
    S7_AXI_ARBURST,
    S7_AXI_ARLOCK,
    S7_AXI_ARCACHE,
    S7_AXI_ARPROT,
    S7_AXI_ARQOS,
    S7_AXI_ARVALID,
    S7_AXI_ARREADY,
    S7_AXI_ARDOMAIN,
    S7_AXI_ARSNOOP,
    S7_AXI_ARBAR,
    S7_AXI_RID,
    S7_AXI_RDATA,
    S7_AXI_RRESP,
    S7_AXI_RLAST,
    S7_AXI_RVALID,
    S7_AXI_RREADY,
    S7_AXI_RACK,
    S7_AXI_ACVALID,
    S7_AXI_ACADDR,
    S7_AXI_ACSNOOP,
    S7_AXI_ACPROT,
    S7_AXI_ACREADY,
    S7_AXI_CRVALID,
    S7_AXI_CRRESP,
    S7_AXI_CRREADY,
    S7_AXI_CDVALID,
    S7_AXI_CDDATA,
    S7_AXI_CDLAST,
    S7_AXI_CDREADY,
    S8_AXI_AWID,
    S8_AXI_AWADDR,
    S8_AXI_AWLEN,
    S8_AXI_AWSIZE,
    S8_AXI_AWBURST,
    S8_AXI_AWLOCK,
    S8_AXI_AWCACHE,
    S8_AXI_AWPROT,
    S8_AXI_AWQOS,
    S8_AXI_AWVALID,
    S8_AXI_AWREADY,
    S8_AXI_AWDOMAIN,
    S8_AXI_AWSNOOP,
    S8_AXI_AWBAR,
    S8_AXI_WDATA,
    S8_AXI_WSTRB,
    S8_AXI_WLAST,
    S8_AXI_WVALID,
    S8_AXI_WREADY,
    S8_AXI_BRESP,
    S8_AXI_BID,
    S8_AXI_BVALID,
    S8_AXI_BREADY,
    S8_AXI_WACK,
    S8_AXI_ARID,
    S8_AXI_ARADDR,
    S8_AXI_ARLEN,
    S8_AXI_ARSIZE,
    S8_AXI_ARBURST,
    S8_AXI_ARLOCK,
    S8_AXI_ARCACHE,
    S8_AXI_ARPROT,
    S8_AXI_ARQOS,
    S8_AXI_ARVALID,
    S8_AXI_ARREADY,
    S8_AXI_ARDOMAIN,
    S8_AXI_ARSNOOP,
    S8_AXI_ARBAR,
    S8_AXI_RID,
    S8_AXI_RDATA,
    S8_AXI_RRESP,
    S8_AXI_RLAST,
    S8_AXI_RVALID,
    S8_AXI_RREADY,
    S8_AXI_RACK,
    S8_AXI_ACVALID,
    S8_AXI_ACADDR,
    S8_AXI_ACSNOOP,
    S8_AXI_ACPROT,
    S8_AXI_ACREADY,
    S8_AXI_CRVALID,
    S8_AXI_CRRESP,
    S8_AXI_CRREADY,
    S8_AXI_CDVALID,
    S8_AXI_CDDATA,
    S8_AXI_CDLAST,
    S8_AXI_CDREADY,
    S9_AXI_AWID,
    S9_AXI_AWADDR,
    S9_AXI_AWLEN,
    S9_AXI_AWSIZE,
    S9_AXI_AWBURST,
    S9_AXI_AWLOCK,
    S9_AXI_AWCACHE,
    S9_AXI_AWPROT,
    S9_AXI_AWQOS,
    S9_AXI_AWVALID,
    S9_AXI_AWREADY,
    S9_AXI_AWDOMAIN,
    S9_AXI_AWSNOOP,
    S9_AXI_AWBAR,
    S9_AXI_WDATA,
    S9_AXI_WSTRB,
    S9_AXI_WLAST,
    S9_AXI_WVALID,
    S9_AXI_WREADY,
    S9_AXI_BRESP,
    S9_AXI_BID,
    S9_AXI_BVALID,
    S9_AXI_BREADY,
    S9_AXI_WACK,
    S9_AXI_ARID,
    S9_AXI_ARADDR,
    S9_AXI_ARLEN,
    S9_AXI_ARSIZE,
    S9_AXI_ARBURST,
    S9_AXI_ARLOCK,
    S9_AXI_ARCACHE,
    S9_AXI_ARPROT,
    S9_AXI_ARQOS,
    S9_AXI_ARVALID,
    S9_AXI_ARREADY,
    S9_AXI_ARDOMAIN,
    S9_AXI_ARSNOOP,
    S9_AXI_ARBAR,
    S9_AXI_RID,
    S9_AXI_RDATA,
    S9_AXI_RRESP,
    S9_AXI_RLAST,
    S9_AXI_RVALID,
    S9_AXI_RREADY,
    S9_AXI_RACK,
    S9_AXI_ACVALID,
    S9_AXI_ACADDR,
    S9_AXI_ACSNOOP,
    S9_AXI_ACPROT,
    S9_AXI_ACREADY,
    S9_AXI_CRVALID,
    S9_AXI_CRRESP,
    S9_AXI_CRREADY,
    S9_AXI_CDVALID,
    S9_AXI_CDDATA,
    S9_AXI_CDLAST,
    S9_AXI_CDREADY,
    S10_AXI_AWID,
    S10_AXI_AWADDR,
    S10_AXI_AWLEN,
    S10_AXI_AWSIZE,
    S10_AXI_AWBURST,
    S10_AXI_AWLOCK,
    S10_AXI_AWCACHE,
    S10_AXI_AWPROT,
    S10_AXI_AWQOS,
    S10_AXI_AWVALID,
    S10_AXI_AWREADY,
    S10_AXI_AWDOMAIN,
    S10_AXI_AWSNOOP,
    S10_AXI_AWBAR,
    S10_AXI_WDATA,
    S10_AXI_WSTRB,
    S10_AXI_WLAST,
    S10_AXI_WVALID,
    S10_AXI_WREADY,
    S10_AXI_BRESP,
    S10_AXI_BID,
    S10_AXI_BVALID,
    S10_AXI_BREADY,
    S10_AXI_WACK,
    S10_AXI_ARID,
    S10_AXI_ARADDR,
    S10_AXI_ARLEN,
    S10_AXI_ARSIZE,
    S10_AXI_ARBURST,
    S10_AXI_ARLOCK,
    S10_AXI_ARCACHE,
    S10_AXI_ARPROT,
    S10_AXI_ARQOS,
    S10_AXI_ARVALID,
    S10_AXI_ARREADY,
    S10_AXI_ARDOMAIN,
    S10_AXI_ARSNOOP,
    S10_AXI_ARBAR,
    S10_AXI_RID,
    S10_AXI_RDATA,
    S10_AXI_RRESP,
    S10_AXI_RLAST,
    S10_AXI_RVALID,
    S10_AXI_RREADY,
    S10_AXI_RACK,
    S10_AXI_ACVALID,
    S10_AXI_ACADDR,
    S10_AXI_ACSNOOP,
    S10_AXI_ACPROT,
    S10_AXI_ACREADY,
    S10_AXI_CRVALID,
    S10_AXI_CRRESP,
    S10_AXI_CRREADY,
    S10_AXI_CDVALID,
    S10_AXI_CDDATA,
    S10_AXI_CDLAST,
    S10_AXI_CDREADY,
    S11_AXI_AWID,
    S11_AXI_AWADDR,
    S11_AXI_AWLEN,
    S11_AXI_AWSIZE,
    S11_AXI_AWBURST,
    S11_AXI_AWLOCK,
    S11_AXI_AWCACHE,
    S11_AXI_AWPROT,
    S11_AXI_AWQOS,
    S11_AXI_AWVALID,
    S11_AXI_AWREADY,
    S11_AXI_AWDOMAIN,
    S11_AXI_AWSNOOP,
    S11_AXI_AWBAR,
    S11_AXI_WDATA,
    S11_AXI_WSTRB,
    S11_AXI_WLAST,
    S11_AXI_WVALID,
    S11_AXI_WREADY,
    S11_AXI_BRESP,
    S11_AXI_BID,
    S11_AXI_BVALID,
    S11_AXI_BREADY,
    S11_AXI_WACK,
    S11_AXI_ARID,
    S11_AXI_ARADDR,
    S11_AXI_ARLEN,
    S11_AXI_ARSIZE,
    S11_AXI_ARBURST,
    S11_AXI_ARLOCK,
    S11_AXI_ARCACHE,
    S11_AXI_ARPROT,
    S11_AXI_ARQOS,
    S11_AXI_ARVALID,
    S11_AXI_ARREADY,
    S11_AXI_ARDOMAIN,
    S11_AXI_ARSNOOP,
    S11_AXI_ARBAR,
    S11_AXI_RID,
    S11_AXI_RDATA,
    S11_AXI_RRESP,
    S11_AXI_RLAST,
    S11_AXI_RVALID,
    S11_AXI_RREADY,
    S11_AXI_RACK,
    S11_AXI_ACVALID,
    S11_AXI_ACADDR,
    S11_AXI_ACSNOOP,
    S11_AXI_ACPROT,
    S11_AXI_ACREADY,
    S11_AXI_CRVALID,
    S11_AXI_CRRESP,
    S11_AXI_CRREADY,
    S11_AXI_CDVALID,
    S11_AXI_CDDATA,
    S11_AXI_CDLAST,
    S11_AXI_CDREADY,
    S12_AXI_AWID,
    S12_AXI_AWADDR,
    S12_AXI_AWLEN,
    S12_AXI_AWSIZE,
    S12_AXI_AWBURST,
    S12_AXI_AWLOCK,
    S12_AXI_AWCACHE,
    S12_AXI_AWPROT,
    S12_AXI_AWQOS,
    S12_AXI_AWVALID,
    S12_AXI_AWREADY,
    S12_AXI_AWDOMAIN,
    S12_AXI_AWSNOOP,
    S12_AXI_AWBAR,
    S12_AXI_WDATA,
    S12_AXI_WSTRB,
    S12_AXI_WLAST,
    S12_AXI_WVALID,
    S12_AXI_WREADY,
    S12_AXI_BRESP,
    S12_AXI_BID,
    S12_AXI_BVALID,
    S12_AXI_BREADY,
    S12_AXI_WACK,
    S12_AXI_ARID,
    S12_AXI_ARADDR,
    S12_AXI_ARLEN,
    S12_AXI_ARSIZE,
    S12_AXI_ARBURST,
    S12_AXI_ARLOCK,
    S12_AXI_ARCACHE,
    S12_AXI_ARPROT,
    S12_AXI_ARQOS,
    S12_AXI_ARVALID,
    S12_AXI_ARREADY,
    S12_AXI_ARDOMAIN,
    S12_AXI_ARSNOOP,
    S12_AXI_ARBAR,
    S12_AXI_RID,
    S12_AXI_RDATA,
    S12_AXI_RRESP,
    S12_AXI_RLAST,
    S12_AXI_RVALID,
    S12_AXI_RREADY,
    S12_AXI_RACK,
    S12_AXI_ACVALID,
    S12_AXI_ACADDR,
    S12_AXI_ACSNOOP,
    S12_AXI_ACPROT,
    S12_AXI_ACREADY,
    S12_AXI_CRVALID,
    S12_AXI_CRRESP,
    S12_AXI_CRREADY,
    S12_AXI_CDVALID,
    S12_AXI_CDDATA,
    S12_AXI_CDLAST,
    S12_AXI_CDREADY,
    S13_AXI_AWID,
    S13_AXI_AWADDR,
    S13_AXI_AWLEN,
    S13_AXI_AWSIZE,
    S13_AXI_AWBURST,
    S13_AXI_AWLOCK,
    S13_AXI_AWCACHE,
    S13_AXI_AWPROT,
    S13_AXI_AWQOS,
    S13_AXI_AWVALID,
    S13_AXI_AWREADY,
    S13_AXI_AWDOMAIN,
    S13_AXI_AWSNOOP,
    S13_AXI_AWBAR,
    S13_AXI_WDATA,
    S13_AXI_WSTRB,
    S13_AXI_WLAST,
    S13_AXI_WVALID,
    S13_AXI_WREADY,
    S13_AXI_BRESP,
    S13_AXI_BID,
    S13_AXI_BVALID,
    S13_AXI_BREADY,
    S13_AXI_WACK,
    S13_AXI_ARID,
    S13_AXI_ARADDR,
    S13_AXI_ARLEN,
    S13_AXI_ARSIZE,
    S13_AXI_ARBURST,
    S13_AXI_ARLOCK,
    S13_AXI_ARCACHE,
    S13_AXI_ARPROT,
    S13_AXI_ARQOS,
    S13_AXI_ARVALID,
    S13_AXI_ARREADY,
    S13_AXI_ARDOMAIN,
    S13_AXI_ARSNOOP,
    S13_AXI_ARBAR,
    S13_AXI_RID,
    S13_AXI_RDATA,
    S13_AXI_RRESP,
    S13_AXI_RLAST,
    S13_AXI_RVALID,
    S13_AXI_RREADY,
    S13_AXI_RACK,
    S13_AXI_ACVALID,
    S13_AXI_ACADDR,
    S13_AXI_ACSNOOP,
    S13_AXI_ACPROT,
    S13_AXI_ACREADY,
    S13_AXI_CRVALID,
    S13_AXI_CRRESP,
    S13_AXI_CRREADY,
    S13_AXI_CDVALID,
    S13_AXI_CDDATA,
    S13_AXI_CDLAST,
    S13_AXI_CDREADY,
    S14_AXI_AWID,
    S14_AXI_AWADDR,
    S14_AXI_AWLEN,
    S14_AXI_AWSIZE,
    S14_AXI_AWBURST,
    S14_AXI_AWLOCK,
    S14_AXI_AWCACHE,
    S14_AXI_AWPROT,
    S14_AXI_AWQOS,
    S14_AXI_AWVALID,
    S14_AXI_AWREADY,
    S14_AXI_AWDOMAIN,
    S14_AXI_AWSNOOP,
    S14_AXI_AWBAR,
    S14_AXI_WDATA,
    S14_AXI_WSTRB,
    S14_AXI_WLAST,
    S14_AXI_WVALID,
    S14_AXI_WREADY,
    S14_AXI_BRESP,
    S14_AXI_BID,
    S14_AXI_BVALID,
    S14_AXI_BREADY,
    S14_AXI_WACK,
    S14_AXI_ARID,
    S14_AXI_ARADDR,
    S14_AXI_ARLEN,
    S14_AXI_ARSIZE,
    S14_AXI_ARBURST,
    S14_AXI_ARLOCK,
    S14_AXI_ARCACHE,
    S14_AXI_ARPROT,
    S14_AXI_ARQOS,
    S14_AXI_ARVALID,
    S14_AXI_ARREADY,
    S14_AXI_ARDOMAIN,
    S14_AXI_ARSNOOP,
    S14_AXI_ARBAR,
    S14_AXI_RID,
    S14_AXI_RDATA,
    S14_AXI_RRESP,
    S14_AXI_RLAST,
    S14_AXI_RVALID,
    S14_AXI_RREADY,
    S14_AXI_RACK,
    S14_AXI_ACVALID,
    S14_AXI_ACADDR,
    S14_AXI_ACSNOOP,
    S14_AXI_ACPROT,
    S14_AXI_ACREADY,
    S14_AXI_CRVALID,
    S14_AXI_CRRESP,
    S14_AXI_CRREADY,
    S14_AXI_CDVALID,
    S14_AXI_CDDATA,
    S14_AXI_CDLAST,
    S14_AXI_CDREADY,
    S15_AXI_AWID,
    S15_AXI_AWADDR,
    S15_AXI_AWLEN,
    S15_AXI_AWSIZE,
    S15_AXI_AWBURST,
    S15_AXI_AWLOCK,
    S15_AXI_AWCACHE,
    S15_AXI_AWPROT,
    S15_AXI_AWQOS,
    S15_AXI_AWVALID,
    S15_AXI_AWREADY,
    S15_AXI_AWDOMAIN,
    S15_AXI_AWSNOOP,
    S15_AXI_AWBAR,
    S15_AXI_WDATA,
    S15_AXI_WSTRB,
    S15_AXI_WLAST,
    S15_AXI_WVALID,
    S15_AXI_WREADY,
    S15_AXI_BRESP,
    S15_AXI_BID,
    S15_AXI_BVALID,
    S15_AXI_BREADY,
    S15_AXI_WACK,
    S15_AXI_ARID,
    S15_AXI_ARADDR,
    S15_AXI_ARLEN,
    S15_AXI_ARSIZE,
    S15_AXI_ARBURST,
    S15_AXI_ARLOCK,
    S15_AXI_ARCACHE,
    S15_AXI_ARPROT,
    S15_AXI_ARQOS,
    S15_AXI_ARVALID,
    S15_AXI_ARREADY,
    S15_AXI_ARDOMAIN,
    S15_AXI_ARSNOOP,
    S15_AXI_ARBAR,
    S15_AXI_RID,
    S15_AXI_RDATA,
    S15_AXI_RRESP,
    S15_AXI_RLAST,
    S15_AXI_RVALID,
    S15_AXI_RREADY,
    S15_AXI_RACK,
    S15_AXI_ACVALID,
    S15_AXI_ACADDR,
    S15_AXI_ACSNOOP,
    S15_AXI_ACPROT,
    S15_AXI_ACREADY,
    S15_AXI_CRVALID,
    S15_AXI_CRRESP,
    S15_AXI_CRREADY,
    S15_AXI_CDVALID,
    S15_AXI_CDDATA,
    S15_AXI_CDLAST,
    S15_AXI_CDREADY,
    S0_AXI_GEN_AWID,
    S0_AXI_GEN_AWADDR,
    S0_AXI_GEN_AWLEN,
    S0_AXI_GEN_AWSIZE,
    S0_AXI_GEN_AWBURST,
    S0_AXI_GEN_AWLOCK,
    S0_AXI_GEN_AWCACHE,
    S0_AXI_GEN_AWPROT,
    S0_AXI_GEN_AWQOS,
    S0_AXI_GEN_AWVALID,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_WDATA,
    S0_AXI_GEN_WSTRB,
    S0_AXI_GEN_WLAST,
    S0_AXI_GEN_WVALID,
    S0_AXI_GEN_WREADY,
    S0_AXI_GEN_BRESP,
    S0_AXI_GEN_BID,
    S0_AXI_GEN_BVALID,
    S0_AXI_GEN_BREADY,
    S0_AXI_GEN_ARID,
    S0_AXI_GEN_ARADDR,
    S0_AXI_GEN_ARLEN,
    S0_AXI_GEN_ARSIZE,
    S0_AXI_GEN_ARBURST,
    S0_AXI_GEN_ARLOCK,
    S0_AXI_GEN_ARCACHE,
    S0_AXI_GEN_ARPROT,
    S0_AXI_GEN_ARQOS,
    S0_AXI_GEN_ARVALID,
    S0_AXI_GEN_ARREADY,
    S0_AXI_GEN_RID,
    S0_AXI_GEN_RDATA,
    S0_AXI_GEN_RRESP,
    S0_AXI_GEN_RLAST,
    S0_AXI_GEN_RVALID,
    S0_AXI_GEN_RREADY,
    S1_AXI_GEN_AWID,
    S1_AXI_GEN_AWADDR,
    S1_AXI_GEN_AWLEN,
    S1_AXI_GEN_AWSIZE,
    S1_AXI_GEN_AWBURST,
    S1_AXI_GEN_AWLOCK,
    S1_AXI_GEN_AWCACHE,
    S1_AXI_GEN_AWPROT,
    S1_AXI_GEN_AWQOS,
    S1_AXI_GEN_AWVALID,
    S1_AXI_GEN_AWREADY,
    S1_AXI_GEN_WDATA,
    S1_AXI_GEN_WSTRB,
    S1_AXI_GEN_WLAST,
    S1_AXI_GEN_WVALID,
    S1_AXI_GEN_WREADY,
    S1_AXI_GEN_BRESP,
    S1_AXI_GEN_BID,
    S1_AXI_GEN_BVALID,
    S1_AXI_GEN_BREADY,
    S1_AXI_GEN_ARID,
    S1_AXI_GEN_ARADDR,
    S1_AXI_GEN_ARLEN,
    S1_AXI_GEN_ARSIZE,
    S1_AXI_GEN_ARBURST,
    S1_AXI_GEN_ARLOCK,
    S1_AXI_GEN_ARCACHE,
    S1_AXI_GEN_ARPROT,
    S1_AXI_GEN_ARQOS,
    S1_AXI_GEN_ARVALID,
    S1_AXI_GEN_ARREADY,
    S1_AXI_GEN_RID,
    S1_AXI_GEN_RDATA,
    S1_AXI_GEN_RRESP,
    S1_AXI_GEN_RLAST,
    S1_AXI_GEN_RVALID,
    S1_AXI_GEN_RREADY,
    S2_AXI_GEN_AWID,
    S2_AXI_GEN_AWADDR,
    S2_AXI_GEN_AWLEN,
    S2_AXI_GEN_AWSIZE,
    S2_AXI_GEN_AWBURST,
    S2_AXI_GEN_AWLOCK,
    S2_AXI_GEN_AWCACHE,
    S2_AXI_GEN_AWPROT,
    S2_AXI_GEN_AWQOS,
    S2_AXI_GEN_AWVALID,
    S2_AXI_GEN_AWREADY,
    S2_AXI_GEN_WDATA,
    S2_AXI_GEN_WSTRB,
    S2_AXI_GEN_WLAST,
    S2_AXI_GEN_WVALID,
    S2_AXI_GEN_WREADY,
    S2_AXI_GEN_BRESP,
    S2_AXI_GEN_BID,
    S2_AXI_GEN_BVALID,
    S2_AXI_GEN_BREADY,
    S2_AXI_GEN_ARID,
    S2_AXI_GEN_ARADDR,
    S2_AXI_GEN_ARLEN,
    S2_AXI_GEN_ARSIZE,
    S2_AXI_GEN_ARBURST,
    S2_AXI_GEN_ARLOCK,
    S2_AXI_GEN_ARCACHE,
    S2_AXI_GEN_ARPROT,
    S2_AXI_GEN_ARQOS,
    S2_AXI_GEN_ARVALID,
    S2_AXI_GEN_ARREADY,
    S2_AXI_GEN_RID,
    S2_AXI_GEN_RDATA,
    S2_AXI_GEN_RRESP,
    S2_AXI_GEN_RLAST,
    S2_AXI_GEN_RVALID,
    S2_AXI_GEN_RREADY,
    S3_AXI_GEN_AWID,
    S3_AXI_GEN_AWADDR,
    S3_AXI_GEN_AWLEN,
    S3_AXI_GEN_AWSIZE,
    S3_AXI_GEN_AWBURST,
    S3_AXI_GEN_AWLOCK,
    S3_AXI_GEN_AWCACHE,
    S3_AXI_GEN_AWPROT,
    S3_AXI_GEN_AWQOS,
    S3_AXI_GEN_AWVALID,
    S3_AXI_GEN_AWREADY,
    S3_AXI_GEN_WDATA,
    S3_AXI_GEN_WSTRB,
    S3_AXI_GEN_WLAST,
    S3_AXI_GEN_WVALID,
    S3_AXI_GEN_WREADY,
    S3_AXI_GEN_BRESP,
    S3_AXI_GEN_BID,
    S3_AXI_GEN_BVALID,
    S3_AXI_GEN_BREADY,
    S3_AXI_GEN_ARID,
    S3_AXI_GEN_ARADDR,
    S3_AXI_GEN_ARLEN,
    S3_AXI_GEN_ARSIZE,
    S3_AXI_GEN_ARBURST,
    S3_AXI_GEN_ARLOCK,
    S3_AXI_GEN_ARCACHE,
    S3_AXI_GEN_ARPROT,
    S3_AXI_GEN_ARQOS,
    S3_AXI_GEN_ARVALID,
    S3_AXI_GEN_ARREADY,
    S3_AXI_GEN_RID,
    S3_AXI_GEN_RDATA,
    S3_AXI_GEN_RRESP,
    S3_AXI_GEN_RLAST,
    S3_AXI_GEN_RVALID,
    S3_AXI_GEN_RREADY,
    S4_AXI_GEN_AWID,
    S4_AXI_GEN_AWADDR,
    S4_AXI_GEN_AWLEN,
    S4_AXI_GEN_AWSIZE,
    S4_AXI_GEN_AWBURST,
    S4_AXI_GEN_AWLOCK,
    S4_AXI_GEN_AWCACHE,
    S4_AXI_GEN_AWPROT,
    S4_AXI_GEN_AWQOS,
    S4_AXI_GEN_AWVALID,
    S4_AXI_GEN_AWREADY,
    S4_AXI_GEN_WDATA,
    S4_AXI_GEN_WSTRB,
    S4_AXI_GEN_WLAST,
    S4_AXI_GEN_WVALID,
    S4_AXI_GEN_WREADY,
    S4_AXI_GEN_BRESP,
    S4_AXI_GEN_BID,
    S4_AXI_GEN_BVALID,
    S4_AXI_GEN_BREADY,
    S4_AXI_GEN_ARID,
    S4_AXI_GEN_ARADDR,
    S4_AXI_GEN_ARLEN,
    S4_AXI_GEN_ARSIZE,
    S4_AXI_GEN_ARBURST,
    S4_AXI_GEN_ARLOCK,
    S4_AXI_GEN_ARCACHE,
    S4_AXI_GEN_ARPROT,
    S4_AXI_GEN_ARQOS,
    S4_AXI_GEN_ARVALID,
    S4_AXI_GEN_ARREADY,
    S4_AXI_GEN_RID,
    S4_AXI_GEN_RDATA,
    S4_AXI_GEN_RRESP,
    S4_AXI_GEN_RLAST,
    S4_AXI_GEN_RVALID,
    S4_AXI_GEN_RREADY,
    S5_AXI_GEN_AWID,
    S5_AXI_GEN_AWADDR,
    S5_AXI_GEN_AWLEN,
    S5_AXI_GEN_AWSIZE,
    S5_AXI_GEN_AWBURST,
    S5_AXI_GEN_AWLOCK,
    S5_AXI_GEN_AWCACHE,
    S5_AXI_GEN_AWPROT,
    S5_AXI_GEN_AWQOS,
    S5_AXI_GEN_AWVALID,
    S5_AXI_GEN_AWREADY,
    S5_AXI_GEN_WDATA,
    S5_AXI_GEN_WSTRB,
    S5_AXI_GEN_WLAST,
    S5_AXI_GEN_WVALID,
    S5_AXI_GEN_WREADY,
    S5_AXI_GEN_BRESP,
    S5_AXI_GEN_BID,
    S5_AXI_GEN_BVALID,
    S5_AXI_GEN_BREADY,
    S5_AXI_GEN_ARID,
    S5_AXI_GEN_ARADDR,
    S5_AXI_GEN_ARLEN,
    S5_AXI_GEN_ARSIZE,
    S5_AXI_GEN_ARBURST,
    S5_AXI_GEN_ARLOCK,
    S5_AXI_GEN_ARCACHE,
    S5_AXI_GEN_ARPROT,
    S5_AXI_GEN_ARQOS,
    S5_AXI_GEN_ARVALID,
    S5_AXI_GEN_ARREADY,
    S5_AXI_GEN_RID,
    S5_AXI_GEN_RDATA,
    S5_AXI_GEN_RRESP,
    S5_AXI_GEN_RLAST,
    S5_AXI_GEN_RVALID,
    S5_AXI_GEN_RREADY,
    S6_AXI_GEN_AWID,
    S6_AXI_GEN_AWADDR,
    S6_AXI_GEN_AWLEN,
    S6_AXI_GEN_AWSIZE,
    S6_AXI_GEN_AWBURST,
    S6_AXI_GEN_AWLOCK,
    S6_AXI_GEN_AWCACHE,
    S6_AXI_GEN_AWPROT,
    S6_AXI_GEN_AWQOS,
    S6_AXI_GEN_AWVALID,
    S6_AXI_GEN_AWREADY,
    S6_AXI_GEN_WDATA,
    S6_AXI_GEN_WSTRB,
    S6_AXI_GEN_WLAST,
    S6_AXI_GEN_WVALID,
    S6_AXI_GEN_WREADY,
    S6_AXI_GEN_BRESP,
    S6_AXI_GEN_BID,
    S6_AXI_GEN_BVALID,
    S6_AXI_GEN_BREADY,
    S6_AXI_GEN_ARID,
    S6_AXI_GEN_ARADDR,
    S6_AXI_GEN_ARLEN,
    S6_AXI_GEN_ARSIZE,
    S6_AXI_GEN_ARBURST,
    S6_AXI_GEN_ARLOCK,
    S6_AXI_GEN_ARCACHE,
    S6_AXI_GEN_ARPROT,
    S6_AXI_GEN_ARQOS,
    S6_AXI_GEN_ARVALID,
    S6_AXI_GEN_ARREADY,
    S6_AXI_GEN_RID,
    S6_AXI_GEN_RDATA,
    S6_AXI_GEN_RRESP,
    S6_AXI_GEN_RLAST,
    S6_AXI_GEN_RVALID,
    S6_AXI_GEN_RREADY,
    S7_AXI_GEN_AWID,
    S7_AXI_GEN_AWADDR,
    S7_AXI_GEN_AWLEN,
    S7_AXI_GEN_AWSIZE,
    S7_AXI_GEN_AWBURST,
    S7_AXI_GEN_AWLOCK,
    S7_AXI_GEN_AWCACHE,
    S7_AXI_GEN_AWPROT,
    S7_AXI_GEN_AWQOS,
    S7_AXI_GEN_AWVALID,
    S7_AXI_GEN_AWREADY,
    S7_AXI_GEN_WDATA,
    S7_AXI_GEN_WSTRB,
    S7_AXI_GEN_WLAST,
    S7_AXI_GEN_WVALID,
    S7_AXI_GEN_WREADY,
    S7_AXI_GEN_BRESP,
    S7_AXI_GEN_BID,
    S7_AXI_GEN_BVALID,
    S7_AXI_GEN_BREADY,
    S7_AXI_GEN_ARID,
    S7_AXI_GEN_ARADDR,
    S7_AXI_GEN_ARLEN,
    S7_AXI_GEN_ARSIZE,
    S7_AXI_GEN_ARBURST,
    S7_AXI_GEN_ARLOCK,
    S7_AXI_GEN_ARCACHE,
    S7_AXI_GEN_ARPROT,
    S7_AXI_GEN_ARQOS,
    S7_AXI_GEN_ARVALID,
    S7_AXI_GEN_ARREADY,
    S7_AXI_GEN_RID,
    S7_AXI_GEN_RDATA,
    S7_AXI_GEN_RRESP,
    S7_AXI_GEN_RLAST,
    S7_AXI_GEN_RVALID,
    S7_AXI_GEN_RREADY,
    S8_AXI_GEN_AWID,
    S8_AXI_GEN_AWADDR,
    S8_AXI_GEN_AWLEN,
    S8_AXI_GEN_AWSIZE,
    S8_AXI_GEN_AWBURST,
    S8_AXI_GEN_AWLOCK,
    S8_AXI_GEN_AWCACHE,
    S8_AXI_GEN_AWPROT,
    S8_AXI_GEN_AWQOS,
    S8_AXI_GEN_AWVALID,
    S8_AXI_GEN_AWREADY,
    S8_AXI_GEN_WDATA,
    S8_AXI_GEN_WSTRB,
    S8_AXI_GEN_WLAST,
    S8_AXI_GEN_WVALID,
    S8_AXI_GEN_WREADY,
    S8_AXI_GEN_BRESP,
    S8_AXI_GEN_BID,
    S8_AXI_GEN_BVALID,
    S8_AXI_GEN_BREADY,
    S8_AXI_GEN_ARID,
    S8_AXI_GEN_ARADDR,
    S8_AXI_GEN_ARLEN,
    S8_AXI_GEN_ARSIZE,
    S8_AXI_GEN_ARBURST,
    S8_AXI_GEN_ARLOCK,
    S8_AXI_GEN_ARCACHE,
    S8_AXI_GEN_ARPROT,
    S8_AXI_GEN_ARQOS,
    S8_AXI_GEN_ARVALID,
    S8_AXI_GEN_ARREADY,
    S8_AXI_GEN_RID,
    S8_AXI_GEN_RDATA,
    S8_AXI_GEN_RRESP,
    S8_AXI_GEN_RLAST,
    S8_AXI_GEN_RVALID,
    S8_AXI_GEN_RREADY,
    S9_AXI_GEN_AWID,
    S9_AXI_GEN_AWADDR,
    S9_AXI_GEN_AWLEN,
    S9_AXI_GEN_AWSIZE,
    S9_AXI_GEN_AWBURST,
    S9_AXI_GEN_AWLOCK,
    S9_AXI_GEN_AWCACHE,
    S9_AXI_GEN_AWPROT,
    S9_AXI_GEN_AWQOS,
    S9_AXI_GEN_AWVALID,
    S9_AXI_GEN_AWREADY,
    S9_AXI_GEN_WDATA,
    S9_AXI_GEN_WSTRB,
    S9_AXI_GEN_WLAST,
    S9_AXI_GEN_WVALID,
    S9_AXI_GEN_WREADY,
    S9_AXI_GEN_BRESP,
    S9_AXI_GEN_BID,
    S9_AXI_GEN_BVALID,
    S9_AXI_GEN_BREADY,
    S9_AXI_GEN_ARID,
    S9_AXI_GEN_ARADDR,
    S9_AXI_GEN_ARLEN,
    S9_AXI_GEN_ARSIZE,
    S9_AXI_GEN_ARBURST,
    S9_AXI_GEN_ARLOCK,
    S9_AXI_GEN_ARCACHE,
    S9_AXI_GEN_ARPROT,
    S9_AXI_GEN_ARQOS,
    S9_AXI_GEN_ARVALID,
    S9_AXI_GEN_ARREADY,
    S9_AXI_GEN_RID,
    S9_AXI_GEN_RDATA,
    S9_AXI_GEN_RRESP,
    S9_AXI_GEN_RLAST,
    S9_AXI_GEN_RVALID,
    S9_AXI_GEN_RREADY,
    S10_AXI_GEN_AWID,
    S10_AXI_GEN_AWADDR,
    S10_AXI_GEN_AWLEN,
    S10_AXI_GEN_AWSIZE,
    S10_AXI_GEN_AWBURST,
    S10_AXI_GEN_AWLOCK,
    S10_AXI_GEN_AWCACHE,
    S10_AXI_GEN_AWPROT,
    S10_AXI_GEN_AWQOS,
    S10_AXI_GEN_AWVALID,
    S10_AXI_GEN_AWREADY,
    S10_AXI_GEN_WDATA,
    S10_AXI_GEN_WSTRB,
    S10_AXI_GEN_WLAST,
    S10_AXI_GEN_WVALID,
    S10_AXI_GEN_WREADY,
    S10_AXI_GEN_BRESP,
    S10_AXI_GEN_BID,
    S10_AXI_GEN_BVALID,
    S10_AXI_GEN_BREADY,
    S10_AXI_GEN_ARID,
    S10_AXI_GEN_ARADDR,
    S10_AXI_GEN_ARLEN,
    S10_AXI_GEN_ARSIZE,
    S10_AXI_GEN_ARBURST,
    S10_AXI_GEN_ARLOCK,
    S10_AXI_GEN_ARCACHE,
    S10_AXI_GEN_ARPROT,
    S10_AXI_GEN_ARQOS,
    S10_AXI_GEN_ARVALID,
    S10_AXI_GEN_ARREADY,
    S10_AXI_GEN_RID,
    S10_AXI_GEN_RDATA,
    S10_AXI_GEN_RRESP,
    S10_AXI_GEN_RLAST,
    S10_AXI_GEN_RVALID,
    S10_AXI_GEN_RREADY,
    S11_AXI_GEN_AWID,
    S11_AXI_GEN_AWADDR,
    S11_AXI_GEN_AWLEN,
    S11_AXI_GEN_AWSIZE,
    S11_AXI_GEN_AWBURST,
    S11_AXI_GEN_AWLOCK,
    S11_AXI_GEN_AWCACHE,
    S11_AXI_GEN_AWPROT,
    S11_AXI_GEN_AWQOS,
    S11_AXI_GEN_AWVALID,
    S11_AXI_GEN_AWREADY,
    S11_AXI_GEN_WDATA,
    S11_AXI_GEN_WSTRB,
    S11_AXI_GEN_WLAST,
    S11_AXI_GEN_WVALID,
    S11_AXI_GEN_WREADY,
    S11_AXI_GEN_BRESP,
    S11_AXI_GEN_BID,
    S11_AXI_GEN_BVALID,
    S11_AXI_GEN_BREADY,
    S11_AXI_GEN_ARID,
    S11_AXI_GEN_ARADDR,
    S11_AXI_GEN_ARLEN,
    S11_AXI_GEN_ARSIZE,
    S11_AXI_GEN_ARBURST,
    S11_AXI_GEN_ARLOCK,
    S11_AXI_GEN_ARCACHE,
    S11_AXI_GEN_ARPROT,
    S11_AXI_GEN_ARQOS,
    S11_AXI_GEN_ARVALID,
    S11_AXI_GEN_ARREADY,
    S11_AXI_GEN_RID,
    S11_AXI_GEN_RDATA,
    S11_AXI_GEN_RRESP,
    S11_AXI_GEN_RLAST,
    S11_AXI_GEN_RVALID,
    S11_AXI_GEN_RREADY,
    S12_AXI_GEN_AWID,
    S12_AXI_GEN_AWADDR,
    S12_AXI_GEN_AWLEN,
    S12_AXI_GEN_AWSIZE,
    S12_AXI_GEN_AWBURST,
    S12_AXI_GEN_AWLOCK,
    S12_AXI_GEN_AWCACHE,
    S12_AXI_GEN_AWPROT,
    S12_AXI_GEN_AWQOS,
    S12_AXI_GEN_AWVALID,
    S12_AXI_GEN_AWREADY,
    S12_AXI_GEN_WDATA,
    S12_AXI_GEN_WSTRB,
    S12_AXI_GEN_WLAST,
    S12_AXI_GEN_WVALID,
    S12_AXI_GEN_WREADY,
    S12_AXI_GEN_BRESP,
    S12_AXI_GEN_BID,
    S12_AXI_GEN_BVALID,
    S12_AXI_GEN_BREADY,
    S12_AXI_GEN_ARID,
    S12_AXI_GEN_ARADDR,
    S12_AXI_GEN_ARLEN,
    S12_AXI_GEN_ARSIZE,
    S12_AXI_GEN_ARBURST,
    S12_AXI_GEN_ARLOCK,
    S12_AXI_GEN_ARCACHE,
    S12_AXI_GEN_ARPROT,
    S12_AXI_GEN_ARQOS,
    S12_AXI_GEN_ARVALID,
    S12_AXI_GEN_ARREADY,
    S12_AXI_GEN_RID,
    S12_AXI_GEN_RDATA,
    S12_AXI_GEN_RRESP,
    S12_AXI_GEN_RLAST,
    S12_AXI_GEN_RVALID,
    S12_AXI_GEN_RREADY,
    S13_AXI_GEN_AWID,
    S13_AXI_GEN_AWADDR,
    S13_AXI_GEN_AWLEN,
    S13_AXI_GEN_AWSIZE,
    S13_AXI_GEN_AWBURST,
    S13_AXI_GEN_AWLOCK,
    S13_AXI_GEN_AWCACHE,
    S13_AXI_GEN_AWPROT,
    S13_AXI_GEN_AWQOS,
    S13_AXI_GEN_AWVALID,
    S13_AXI_GEN_AWREADY,
    S13_AXI_GEN_WDATA,
    S13_AXI_GEN_WSTRB,
    S13_AXI_GEN_WLAST,
    S13_AXI_GEN_WVALID,
    S13_AXI_GEN_WREADY,
    S13_AXI_GEN_BRESP,
    S13_AXI_GEN_BID,
    S13_AXI_GEN_BVALID,
    S13_AXI_GEN_BREADY,
    S13_AXI_GEN_ARID,
    S13_AXI_GEN_ARADDR,
    S13_AXI_GEN_ARLEN,
    S13_AXI_GEN_ARSIZE,
    S13_AXI_GEN_ARBURST,
    S13_AXI_GEN_ARLOCK,
    S13_AXI_GEN_ARCACHE,
    S13_AXI_GEN_ARPROT,
    S13_AXI_GEN_ARQOS,
    S13_AXI_GEN_ARVALID,
    S13_AXI_GEN_ARREADY,
    S13_AXI_GEN_RID,
    S13_AXI_GEN_RDATA,
    S13_AXI_GEN_RRESP,
    S13_AXI_GEN_RLAST,
    S13_AXI_GEN_RVALID,
    S13_AXI_GEN_RREADY,
    S14_AXI_GEN_AWID,
    S14_AXI_GEN_AWADDR,
    S14_AXI_GEN_AWLEN,
    S14_AXI_GEN_AWSIZE,
    S14_AXI_GEN_AWBURST,
    S14_AXI_GEN_AWLOCK,
    S14_AXI_GEN_AWCACHE,
    S14_AXI_GEN_AWPROT,
    S14_AXI_GEN_AWQOS,
    S14_AXI_GEN_AWVALID,
    S14_AXI_GEN_AWREADY,
    S14_AXI_GEN_WDATA,
    S14_AXI_GEN_WSTRB,
    S14_AXI_GEN_WLAST,
    S14_AXI_GEN_WVALID,
    S14_AXI_GEN_WREADY,
    S14_AXI_GEN_BRESP,
    S14_AXI_GEN_BID,
    S14_AXI_GEN_BVALID,
    S14_AXI_GEN_BREADY,
    S14_AXI_GEN_ARID,
    S14_AXI_GEN_ARADDR,
    S14_AXI_GEN_ARLEN,
    S14_AXI_GEN_ARSIZE,
    S14_AXI_GEN_ARBURST,
    S14_AXI_GEN_ARLOCK,
    S14_AXI_GEN_ARCACHE,
    S14_AXI_GEN_ARPROT,
    S14_AXI_GEN_ARQOS,
    S14_AXI_GEN_ARVALID,
    S14_AXI_GEN_ARREADY,
    S14_AXI_GEN_RID,
    S14_AXI_GEN_RDATA,
    S14_AXI_GEN_RRESP,
    S14_AXI_GEN_RLAST,
    S14_AXI_GEN_RVALID,
    S14_AXI_GEN_RREADY,
    S15_AXI_GEN_AWID,
    S15_AXI_GEN_AWADDR,
    S15_AXI_GEN_AWLEN,
    S15_AXI_GEN_AWSIZE,
    S15_AXI_GEN_AWBURST,
    S15_AXI_GEN_AWLOCK,
    S15_AXI_GEN_AWCACHE,
    S15_AXI_GEN_AWPROT,
    S15_AXI_GEN_AWQOS,
    S15_AXI_GEN_AWVALID,
    S15_AXI_GEN_AWREADY,
    S15_AXI_GEN_WDATA,
    S15_AXI_GEN_WSTRB,
    S15_AXI_GEN_WLAST,
    S15_AXI_GEN_WVALID,
    S15_AXI_GEN_WREADY,
    S15_AXI_GEN_BRESP,
    S15_AXI_GEN_BID,
    S15_AXI_GEN_BVALID,
    S15_AXI_GEN_BREADY,
    S15_AXI_GEN_ARID,
    S15_AXI_GEN_ARADDR,
    S15_AXI_GEN_ARLEN,
    S15_AXI_GEN_ARSIZE,
    S15_AXI_GEN_ARBURST,
    S15_AXI_GEN_ARLOCK,
    S15_AXI_GEN_ARCACHE,
    S15_AXI_GEN_ARPROT,
    S15_AXI_GEN_ARQOS,
    S15_AXI_GEN_ARVALID,
    S15_AXI_GEN_ARREADY,
    S15_AXI_GEN_RID,
    S15_AXI_GEN_RDATA,
    S15_AXI_GEN_RRESP,
    S15_AXI_GEN_RLAST,
    S15_AXI_GEN_RVALID,
    S15_AXI_GEN_RREADY,
    S_AXI_CTRL_AWADDR,
    S_AXI_CTRL_AWPROT,
    S_AXI_CTRL_AWVALID,
    S_AXI_CTRL_AWREADY,
    S_AXI_CTRL_WDATA,
    S_AXI_CTRL_WVALID,
    S_AXI_CTRL_WREADY,
    S_AXI_CTRL_BRESP,
    S_AXI_CTRL_BVALID,
    S_AXI_CTRL_BREADY,
    S_AXI_CTRL_ARADDR,
    S_AXI_CTRL_ARPROT,
    S_AXI_CTRL_ARVALID,
    S_AXI_CTRL_ARREADY,
    S_AXI_CTRL_RDATA,
    S_AXI_CTRL_RRESP,
    S_AXI_CTRL_RVALID,
    S_AXI_CTRL_RREADY,
    M0_AXI_AWID,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_AWLOCK,
    M0_AXI_AWCACHE,
    M0_AXI_AWPROT,
    M0_AXI_AWQOS,
    M0_AXI_AWVALID,
    M0_AXI_AWREADY,
    M0_AXI_AWDOMAIN,
    M0_AXI_AWSNOOP,
    M0_AXI_AWBAR,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_WLAST,
    M0_AXI_WVALID,
    M0_AXI_WREADY,
    M0_AXI_BRESP,
    M0_AXI_BID,
    M0_AXI_BVALID,
    M0_AXI_BREADY,
    M0_AXI_WACK,
    M0_AXI_ARID,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    M0_AXI_ARLOCK,
    M0_AXI_ARCACHE,
    M0_AXI_ARPROT,
    M0_AXI_ARQOS,
    M0_AXI_ARVALID,
    M0_AXI_ARREADY,
    M0_AXI_ARDOMAIN,
    M0_AXI_ARSNOOP,
    M0_AXI_ARBAR,
    M0_AXI_RID,
    M0_AXI_RDATA,
    M0_AXI_RRESP,
    M0_AXI_RLAST,
    M0_AXI_RVALID,
    M0_AXI_RREADY,
    M0_AXI_RACK,
    M0_AXI_ACVALID,
    M0_AXI_ACADDR,
    M0_AXI_ACSNOOP,
    M0_AXI_ACPROT,
    M0_AXI_ACREADY,
    M0_AXI_CRVALID,
    M0_AXI_CRRESP,
    M0_AXI_CRREADY,
    M0_AXI_CDVALID,
    M0_AXI_CDDATA,
    M0_AXI_CDLAST,
    M0_AXI_CDREADY,
    M1_AXI_AWID,
    M1_AXI_AWADDR,
    M1_AXI_AWLEN,
    M1_AXI_AWSIZE,
    M1_AXI_AWBURST,
    M1_AXI_AWLOCK,
    M1_AXI_AWCACHE,
    M1_AXI_AWPROT,
    M1_AXI_AWQOS,
    M1_AXI_AWVALID,
    M1_AXI_AWREADY,
    M1_AXI_WDATA,
    M1_AXI_WSTRB,
    M1_AXI_WLAST,
    M1_AXI_WVALID,
    M1_AXI_WREADY,
    M1_AXI_BRESP,
    M1_AXI_BID,
    M1_AXI_BVALID,
    M1_AXI_BREADY,
    M1_AXI_ARID,
    M1_AXI_ARADDR,
    M1_AXI_ARLEN,
    M1_AXI_ARSIZE,
    M1_AXI_ARBURST,
    M1_AXI_ARLOCK,
    M1_AXI_ARCACHE,
    M1_AXI_ARPROT,
    M1_AXI_ARQOS,
    M1_AXI_ARVALID,
    M1_AXI_ARREADY,
    M1_AXI_RID,
    M1_AXI_RDATA,
    M1_AXI_RRESP,
    M1_AXI_RLAST,
    M1_AXI_RVALID,
    M1_AXI_RREADY,
    M2_AXI_AWID,
    M2_AXI_AWADDR,
    M2_AXI_AWLEN,
    M2_AXI_AWSIZE,
    M2_AXI_AWBURST,
    M2_AXI_AWLOCK,
    M2_AXI_AWCACHE,
    M2_AXI_AWPROT,
    M2_AXI_AWQOS,
    M2_AXI_AWVALID,
    M2_AXI_AWREADY,
    M2_AXI_WDATA,
    M2_AXI_WSTRB,
    M2_AXI_WLAST,
    M2_AXI_WVALID,
    M2_AXI_WREADY,
    M2_AXI_BRESP,
    M2_AXI_BID,
    M2_AXI_BVALID,
    M2_AXI_BREADY,
    M2_AXI_ARID,
    M2_AXI_ARADDR,
    M2_AXI_ARLEN,
    M2_AXI_ARSIZE,
    M2_AXI_ARBURST,
    M2_AXI_ARLOCK,
    M2_AXI_ARCACHE,
    M2_AXI_ARPROT,
    M2_AXI_ARQOS,
    M2_AXI_ARVALID,
    M2_AXI_ARREADY,
    M2_AXI_RID,
    M2_AXI_RDATA,
    M2_AXI_RRESP,
    M2_AXI_RLAST,
    M2_AXI_RVALID,
    M2_AXI_RREADY,
    M3_AXI_AWID,
    M3_AXI_AWADDR,
    M3_AXI_AWLEN,
    M3_AXI_AWSIZE,
    M3_AXI_AWBURST,
    M3_AXI_AWLOCK,
    M3_AXI_AWCACHE,
    M3_AXI_AWPROT,
    M3_AXI_AWQOS,
    M3_AXI_AWVALID,
    M3_AXI_AWREADY,
    M3_AXI_WDATA,
    M3_AXI_WSTRB,
    M3_AXI_WLAST,
    M3_AXI_WVALID,
    M3_AXI_WREADY,
    M3_AXI_BRESP,
    M3_AXI_BID,
    M3_AXI_BVALID,
    M3_AXI_BREADY,
    M3_AXI_ARID,
    M3_AXI_ARADDR,
    M3_AXI_ARLEN,
    M3_AXI_ARSIZE,
    M3_AXI_ARBURST,
    M3_AXI_ARLOCK,
    M3_AXI_ARCACHE,
    M3_AXI_ARPROT,
    M3_AXI_ARQOS,
    M3_AXI_ARVALID,
    M3_AXI_ARREADY,
    M3_AXI_RID,
    M3_AXI_RDATA,
    M3_AXI_RRESP,
    M3_AXI_RLAST,
    M3_AXI_RVALID,
    M3_AXI_RREADY);
  input ACLK;
  input ARESETN;
  input [0:0]S0_AXI_AWID;
  input [23:0]S0_AXI_AWADDR;
  input [7:0]S0_AXI_AWLEN;
  input [2:0]S0_AXI_AWSIZE;
  input [1:0]S0_AXI_AWBURST;
  input S0_AXI_AWLOCK;
  input [3:0]S0_AXI_AWCACHE;
  input [2:0]S0_AXI_AWPROT;
  input [3:0]S0_AXI_AWQOS;
  input S0_AXI_AWVALID;
  output S0_AXI_AWREADY;
  input [1:0]S0_AXI_AWDOMAIN;
  input [2:0]S0_AXI_AWSNOOP;
  input [1:0]S0_AXI_AWBAR;
  input [31:0]S0_AXI_WDATA;
  input [3:0]S0_AXI_WSTRB;
  input S0_AXI_WLAST;
  input S0_AXI_WVALID;
  output S0_AXI_WREADY;
  output [1:0]S0_AXI_BRESP;
  output [0:0]S0_AXI_BID;
  output S0_AXI_BVALID;
  input S0_AXI_BREADY;
  input S0_AXI_WACK;
  input [0:0]S0_AXI_ARID;
  input [23:0]S0_AXI_ARADDR;
  input [7:0]S0_AXI_ARLEN;
  input [2:0]S0_AXI_ARSIZE;
  input [1:0]S0_AXI_ARBURST;
  input S0_AXI_ARLOCK;
  input [3:0]S0_AXI_ARCACHE;
  input [2:0]S0_AXI_ARPROT;
  input [3:0]S0_AXI_ARQOS;
  input S0_AXI_ARVALID;
  output S0_AXI_ARREADY;
  input [1:0]S0_AXI_ARDOMAIN;
  input [3:0]S0_AXI_ARSNOOP;
  input [1:0]S0_AXI_ARBAR;
  output [0:0]S0_AXI_RID;
  output [31:0]S0_AXI_RDATA;
  output [1:0]S0_AXI_RRESP;
  output S0_AXI_RLAST;
  output S0_AXI_RVALID;
  input S0_AXI_RREADY;
  input S0_AXI_RACK;
  output S0_AXI_ACVALID;
  output [23:0]S0_AXI_ACADDR;
  output [3:0]S0_AXI_ACSNOOP;
  output [2:0]S0_AXI_ACPROT;
  input S0_AXI_ACREADY;
  input S0_AXI_CRVALID;
  input [4:0]S0_AXI_CRRESP;
  output S0_AXI_CRREADY;
  input S0_AXI_CDVALID;
  input [31:0]S0_AXI_CDDATA;
  input S0_AXI_CDLAST;
  output S0_AXI_CDREADY;
  input [0:0]S1_AXI_AWID;
  input [31:0]S1_AXI_AWADDR;
  input [7:0]S1_AXI_AWLEN;
  input [2:0]S1_AXI_AWSIZE;
  input [1:0]S1_AXI_AWBURST;
  input S1_AXI_AWLOCK;
  input [3:0]S1_AXI_AWCACHE;
  input [2:0]S1_AXI_AWPROT;
  input [3:0]S1_AXI_AWQOS;
  input S1_AXI_AWVALID;
  output S1_AXI_AWREADY;
  input [1:0]S1_AXI_AWDOMAIN;
  input [2:0]S1_AXI_AWSNOOP;
  input [1:0]S1_AXI_AWBAR;
  input [31:0]S1_AXI_WDATA;
  input [3:0]S1_AXI_WSTRB;
  input S1_AXI_WLAST;
  input S1_AXI_WVALID;
  output S1_AXI_WREADY;
  output [1:0]S1_AXI_BRESP;
  output [0:0]S1_AXI_BID;
  output S1_AXI_BVALID;
  input S1_AXI_BREADY;
  input S1_AXI_WACK;
  input [0:0]S1_AXI_ARID;
  input [31:0]S1_AXI_ARADDR;
  input [7:0]S1_AXI_ARLEN;
  input [2:0]S1_AXI_ARSIZE;
  input [1:0]S1_AXI_ARBURST;
  input S1_AXI_ARLOCK;
  input [3:0]S1_AXI_ARCACHE;
  input [2:0]S1_AXI_ARPROT;
  input [3:0]S1_AXI_ARQOS;
  input S1_AXI_ARVALID;
  output S1_AXI_ARREADY;
  input [1:0]S1_AXI_ARDOMAIN;
  input [3:0]S1_AXI_ARSNOOP;
  input [1:0]S1_AXI_ARBAR;
  output [0:0]S1_AXI_RID;
  output [31:0]S1_AXI_RDATA;
  output [1:0]S1_AXI_RRESP;
  output S1_AXI_RLAST;
  output S1_AXI_RVALID;
  input S1_AXI_RREADY;
  input S1_AXI_RACK;
  output S1_AXI_ACVALID;
  output [31:0]S1_AXI_ACADDR;
  output [3:0]S1_AXI_ACSNOOP;
  output [2:0]S1_AXI_ACPROT;
  input S1_AXI_ACREADY;
  input S1_AXI_CRVALID;
  input [4:0]S1_AXI_CRRESP;
  output S1_AXI_CRREADY;
  input S1_AXI_CDVALID;
  input [31:0]S1_AXI_CDDATA;
  input S1_AXI_CDLAST;
  output S1_AXI_CDREADY;
  input [0:0]S2_AXI_AWID;
  input [31:0]S2_AXI_AWADDR;
  input [7:0]S2_AXI_AWLEN;
  input [2:0]S2_AXI_AWSIZE;
  input [1:0]S2_AXI_AWBURST;
  input S2_AXI_AWLOCK;
  input [3:0]S2_AXI_AWCACHE;
  input [2:0]S2_AXI_AWPROT;
  input [3:0]S2_AXI_AWQOS;
  input S2_AXI_AWVALID;
  output S2_AXI_AWREADY;
  input [1:0]S2_AXI_AWDOMAIN;
  input [2:0]S2_AXI_AWSNOOP;
  input [1:0]S2_AXI_AWBAR;
  input [31:0]S2_AXI_WDATA;
  input [3:0]S2_AXI_WSTRB;
  input S2_AXI_WLAST;
  input S2_AXI_WVALID;
  output S2_AXI_WREADY;
  output [1:0]S2_AXI_BRESP;
  output [0:0]S2_AXI_BID;
  output S2_AXI_BVALID;
  input S2_AXI_BREADY;
  input S2_AXI_WACK;
  input [0:0]S2_AXI_ARID;
  input [31:0]S2_AXI_ARADDR;
  input [7:0]S2_AXI_ARLEN;
  input [2:0]S2_AXI_ARSIZE;
  input [1:0]S2_AXI_ARBURST;
  input S2_AXI_ARLOCK;
  input [3:0]S2_AXI_ARCACHE;
  input [2:0]S2_AXI_ARPROT;
  input [3:0]S2_AXI_ARQOS;
  input S2_AXI_ARVALID;
  output S2_AXI_ARREADY;
  input [1:0]S2_AXI_ARDOMAIN;
  input [3:0]S2_AXI_ARSNOOP;
  input [1:0]S2_AXI_ARBAR;
  output [0:0]S2_AXI_RID;
  output [31:0]S2_AXI_RDATA;
  output [1:0]S2_AXI_RRESP;
  output S2_AXI_RLAST;
  output S2_AXI_RVALID;
  input S2_AXI_RREADY;
  input S2_AXI_RACK;
  output S2_AXI_ACVALID;
  output [31:0]S2_AXI_ACADDR;
  output [3:0]S2_AXI_ACSNOOP;
  output [2:0]S2_AXI_ACPROT;
  input S2_AXI_ACREADY;
  input S2_AXI_CRVALID;
  input [4:0]S2_AXI_CRRESP;
  output S2_AXI_CRREADY;
  input S2_AXI_CDVALID;
  input [31:0]S2_AXI_CDDATA;
  input S2_AXI_CDLAST;
  output S2_AXI_CDREADY;
  input [0:0]S3_AXI_AWID;
  input [31:0]S3_AXI_AWADDR;
  input [7:0]S3_AXI_AWLEN;
  input [2:0]S3_AXI_AWSIZE;
  input [1:0]S3_AXI_AWBURST;
  input S3_AXI_AWLOCK;
  input [3:0]S3_AXI_AWCACHE;
  input [2:0]S3_AXI_AWPROT;
  input [3:0]S3_AXI_AWQOS;
  input S3_AXI_AWVALID;
  output S3_AXI_AWREADY;
  input [1:0]S3_AXI_AWDOMAIN;
  input [2:0]S3_AXI_AWSNOOP;
  input [1:0]S3_AXI_AWBAR;
  input [31:0]S3_AXI_WDATA;
  input [3:0]S3_AXI_WSTRB;
  input S3_AXI_WLAST;
  input S3_AXI_WVALID;
  output S3_AXI_WREADY;
  output [1:0]S3_AXI_BRESP;
  output [0:0]S3_AXI_BID;
  output S3_AXI_BVALID;
  input S3_AXI_BREADY;
  input S3_AXI_WACK;
  input [0:0]S3_AXI_ARID;
  input [31:0]S3_AXI_ARADDR;
  input [7:0]S3_AXI_ARLEN;
  input [2:0]S3_AXI_ARSIZE;
  input [1:0]S3_AXI_ARBURST;
  input S3_AXI_ARLOCK;
  input [3:0]S3_AXI_ARCACHE;
  input [2:0]S3_AXI_ARPROT;
  input [3:0]S3_AXI_ARQOS;
  input S3_AXI_ARVALID;
  output S3_AXI_ARREADY;
  input [1:0]S3_AXI_ARDOMAIN;
  input [3:0]S3_AXI_ARSNOOP;
  input [1:0]S3_AXI_ARBAR;
  output [0:0]S3_AXI_RID;
  output [31:0]S3_AXI_RDATA;
  output [1:0]S3_AXI_RRESP;
  output S3_AXI_RLAST;
  output S3_AXI_RVALID;
  input S3_AXI_RREADY;
  input S3_AXI_RACK;
  output S3_AXI_ACVALID;
  output [31:0]S3_AXI_ACADDR;
  output [3:0]S3_AXI_ACSNOOP;
  output [2:0]S3_AXI_ACPROT;
  input S3_AXI_ACREADY;
  input S3_AXI_CRVALID;
  input [4:0]S3_AXI_CRRESP;
  output S3_AXI_CRREADY;
  input S3_AXI_CDVALID;
  input [31:0]S3_AXI_CDDATA;
  input S3_AXI_CDLAST;
  output S3_AXI_CDREADY;
  input [0:0]S4_AXI_AWID;
  input [31:0]S4_AXI_AWADDR;
  input [7:0]S4_AXI_AWLEN;
  input [2:0]S4_AXI_AWSIZE;
  input [1:0]S4_AXI_AWBURST;
  input S4_AXI_AWLOCK;
  input [3:0]S4_AXI_AWCACHE;
  input [2:0]S4_AXI_AWPROT;
  input [3:0]S4_AXI_AWQOS;
  input S4_AXI_AWVALID;
  output S4_AXI_AWREADY;
  input [1:0]S4_AXI_AWDOMAIN;
  input [2:0]S4_AXI_AWSNOOP;
  input [1:0]S4_AXI_AWBAR;
  input [31:0]S4_AXI_WDATA;
  input [3:0]S4_AXI_WSTRB;
  input S4_AXI_WLAST;
  input S4_AXI_WVALID;
  output S4_AXI_WREADY;
  output [1:0]S4_AXI_BRESP;
  output [0:0]S4_AXI_BID;
  output S4_AXI_BVALID;
  input S4_AXI_BREADY;
  input S4_AXI_WACK;
  input [0:0]S4_AXI_ARID;
  input [31:0]S4_AXI_ARADDR;
  input [7:0]S4_AXI_ARLEN;
  input [2:0]S4_AXI_ARSIZE;
  input [1:0]S4_AXI_ARBURST;
  input S4_AXI_ARLOCK;
  input [3:0]S4_AXI_ARCACHE;
  input [2:0]S4_AXI_ARPROT;
  input [3:0]S4_AXI_ARQOS;
  input S4_AXI_ARVALID;
  output S4_AXI_ARREADY;
  input [1:0]S4_AXI_ARDOMAIN;
  input [3:0]S4_AXI_ARSNOOP;
  input [1:0]S4_AXI_ARBAR;
  output [0:0]S4_AXI_RID;
  output [31:0]S4_AXI_RDATA;
  output [1:0]S4_AXI_RRESP;
  output S4_AXI_RLAST;
  output S4_AXI_RVALID;
  input S4_AXI_RREADY;
  input S4_AXI_RACK;
  output S4_AXI_ACVALID;
  output [31:0]S4_AXI_ACADDR;
  output [3:0]S4_AXI_ACSNOOP;
  output [2:0]S4_AXI_ACPROT;
  input S4_AXI_ACREADY;
  input S4_AXI_CRVALID;
  input [4:0]S4_AXI_CRRESP;
  output S4_AXI_CRREADY;
  input S4_AXI_CDVALID;
  input [31:0]S4_AXI_CDDATA;
  input S4_AXI_CDLAST;
  output S4_AXI_CDREADY;
  input [0:0]S5_AXI_AWID;
  input [31:0]S5_AXI_AWADDR;
  input [7:0]S5_AXI_AWLEN;
  input [2:0]S5_AXI_AWSIZE;
  input [1:0]S5_AXI_AWBURST;
  input S5_AXI_AWLOCK;
  input [3:0]S5_AXI_AWCACHE;
  input [2:0]S5_AXI_AWPROT;
  input [3:0]S5_AXI_AWQOS;
  input S5_AXI_AWVALID;
  output S5_AXI_AWREADY;
  input [1:0]S5_AXI_AWDOMAIN;
  input [2:0]S5_AXI_AWSNOOP;
  input [1:0]S5_AXI_AWBAR;
  input [31:0]S5_AXI_WDATA;
  input [3:0]S5_AXI_WSTRB;
  input S5_AXI_WLAST;
  input S5_AXI_WVALID;
  output S5_AXI_WREADY;
  output [1:0]S5_AXI_BRESP;
  output [0:0]S5_AXI_BID;
  output S5_AXI_BVALID;
  input S5_AXI_BREADY;
  input S5_AXI_WACK;
  input [0:0]S5_AXI_ARID;
  input [31:0]S5_AXI_ARADDR;
  input [7:0]S5_AXI_ARLEN;
  input [2:0]S5_AXI_ARSIZE;
  input [1:0]S5_AXI_ARBURST;
  input S5_AXI_ARLOCK;
  input [3:0]S5_AXI_ARCACHE;
  input [2:0]S5_AXI_ARPROT;
  input [3:0]S5_AXI_ARQOS;
  input S5_AXI_ARVALID;
  output S5_AXI_ARREADY;
  input [1:0]S5_AXI_ARDOMAIN;
  input [3:0]S5_AXI_ARSNOOP;
  input [1:0]S5_AXI_ARBAR;
  output [0:0]S5_AXI_RID;
  output [31:0]S5_AXI_RDATA;
  output [1:0]S5_AXI_RRESP;
  output S5_AXI_RLAST;
  output S5_AXI_RVALID;
  input S5_AXI_RREADY;
  input S5_AXI_RACK;
  output S5_AXI_ACVALID;
  output [31:0]S5_AXI_ACADDR;
  output [3:0]S5_AXI_ACSNOOP;
  output [2:0]S5_AXI_ACPROT;
  input S5_AXI_ACREADY;
  input S5_AXI_CRVALID;
  input [4:0]S5_AXI_CRRESP;
  output S5_AXI_CRREADY;
  input S5_AXI_CDVALID;
  input [31:0]S5_AXI_CDDATA;
  input S5_AXI_CDLAST;
  output S5_AXI_CDREADY;
  input [0:0]S6_AXI_AWID;
  input [31:0]S6_AXI_AWADDR;
  input [7:0]S6_AXI_AWLEN;
  input [2:0]S6_AXI_AWSIZE;
  input [1:0]S6_AXI_AWBURST;
  input S6_AXI_AWLOCK;
  input [3:0]S6_AXI_AWCACHE;
  input [2:0]S6_AXI_AWPROT;
  input [3:0]S6_AXI_AWQOS;
  input S6_AXI_AWVALID;
  output S6_AXI_AWREADY;
  input [1:0]S6_AXI_AWDOMAIN;
  input [2:0]S6_AXI_AWSNOOP;
  input [1:0]S6_AXI_AWBAR;
  input [31:0]S6_AXI_WDATA;
  input [3:0]S6_AXI_WSTRB;
  input S6_AXI_WLAST;
  input S6_AXI_WVALID;
  output S6_AXI_WREADY;
  output [1:0]S6_AXI_BRESP;
  output [0:0]S6_AXI_BID;
  output S6_AXI_BVALID;
  input S6_AXI_BREADY;
  input S6_AXI_WACK;
  input [0:0]S6_AXI_ARID;
  input [31:0]S6_AXI_ARADDR;
  input [7:0]S6_AXI_ARLEN;
  input [2:0]S6_AXI_ARSIZE;
  input [1:0]S6_AXI_ARBURST;
  input S6_AXI_ARLOCK;
  input [3:0]S6_AXI_ARCACHE;
  input [2:0]S6_AXI_ARPROT;
  input [3:0]S6_AXI_ARQOS;
  input S6_AXI_ARVALID;
  output S6_AXI_ARREADY;
  input [1:0]S6_AXI_ARDOMAIN;
  input [3:0]S6_AXI_ARSNOOP;
  input [1:0]S6_AXI_ARBAR;
  output [0:0]S6_AXI_RID;
  output [31:0]S6_AXI_RDATA;
  output [1:0]S6_AXI_RRESP;
  output S6_AXI_RLAST;
  output S6_AXI_RVALID;
  input S6_AXI_RREADY;
  input S6_AXI_RACK;
  output S6_AXI_ACVALID;
  output [31:0]S6_AXI_ACADDR;
  output [3:0]S6_AXI_ACSNOOP;
  output [2:0]S6_AXI_ACPROT;
  input S6_AXI_ACREADY;
  input S6_AXI_CRVALID;
  input [4:0]S6_AXI_CRRESP;
  output S6_AXI_CRREADY;
  input S6_AXI_CDVALID;
  input [31:0]S6_AXI_CDDATA;
  input S6_AXI_CDLAST;
  output S6_AXI_CDREADY;
  input [0:0]S7_AXI_AWID;
  input [31:0]S7_AXI_AWADDR;
  input [7:0]S7_AXI_AWLEN;
  input [2:0]S7_AXI_AWSIZE;
  input [1:0]S7_AXI_AWBURST;
  input S7_AXI_AWLOCK;
  input [3:0]S7_AXI_AWCACHE;
  input [2:0]S7_AXI_AWPROT;
  input [3:0]S7_AXI_AWQOS;
  input S7_AXI_AWVALID;
  output S7_AXI_AWREADY;
  input [1:0]S7_AXI_AWDOMAIN;
  input [2:0]S7_AXI_AWSNOOP;
  input [1:0]S7_AXI_AWBAR;
  input [31:0]S7_AXI_WDATA;
  input [3:0]S7_AXI_WSTRB;
  input S7_AXI_WLAST;
  input S7_AXI_WVALID;
  output S7_AXI_WREADY;
  output [1:0]S7_AXI_BRESP;
  output [0:0]S7_AXI_BID;
  output S7_AXI_BVALID;
  input S7_AXI_BREADY;
  input S7_AXI_WACK;
  input [0:0]S7_AXI_ARID;
  input [31:0]S7_AXI_ARADDR;
  input [7:0]S7_AXI_ARLEN;
  input [2:0]S7_AXI_ARSIZE;
  input [1:0]S7_AXI_ARBURST;
  input S7_AXI_ARLOCK;
  input [3:0]S7_AXI_ARCACHE;
  input [2:0]S7_AXI_ARPROT;
  input [3:0]S7_AXI_ARQOS;
  input S7_AXI_ARVALID;
  output S7_AXI_ARREADY;
  input [1:0]S7_AXI_ARDOMAIN;
  input [3:0]S7_AXI_ARSNOOP;
  input [1:0]S7_AXI_ARBAR;
  output [0:0]S7_AXI_RID;
  output [31:0]S7_AXI_RDATA;
  output [1:0]S7_AXI_RRESP;
  output S7_AXI_RLAST;
  output S7_AXI_RVALID;
  input S7_AXI_RREADY;
  input S7_AXI_RACK;
  output S7_AXI_ACVALID;
  output [31:0]S7_AXI_ACADDR;
  output [3:0]S7_AXI_ACSNOOP;
  output [2:0]S7_AXI_ACPROT;
  input S7_AXI_ACREADY;
  input S7_AXI_CRVALID;
  input [4:0]S7_AXI_CRRESP;
  output S7_AXI_CRREADY;
  input S7_AXI_CDVALID;
  input [31:0]S7_AXI_CDDATA;
  input S7_AXI_CDLAST;
  output S7_AXI_CDREADY;
  input [0:0]S8_AXI_AWID;
  input [31:0]S8_AXI_AWADDR;
  input [7:0]S8_AXI_AWLEN;
  input [2:0]S8_AXI_AWSIZE;
  input [1:0]S8_AXI_AWBURST;
  input S8_AXI_AWLOCK;
  input [3:0]S8_AXI_AWCACHE;
  input [2:0]S8_AXI_AWPROT;
  input [3:0]S8_AXI_AWQOS;
  input S8_AXI_AWVALID;
  output S8_AXI_AWREADY;
  input [1:0]S8_AXI_AWDOMAIN;
  input [2:0]S8_AXI_AWSNOOP;
  input [1:0]S8_AXI_AWBAR;
  input [31:0]S8_AXI_WDATA;
  input [3:0]S8_AXI_WSTRB;
  input S8_AXI_WLAST;
  input S8_AXI_WVALID;
  output S8_AXI_WREADY;
  output [1:0]S8_AXI_BRESP;
  output [0:0]S8_AXI_BID;
  output S8_AXI_BVALID;
  input S8_AXI_BREADY;
  input S8_AXI_WACK;
  input [0:0]S8_AXI_ARID;
  input [31:0]S8_AXI_ARADDR;
  input [7:0]S8_AXI_ARLEN;
  input [2:0]S8_AXI_ARSIZE;
  input [1:0]S8_AXI_ARBURST;
  input S8_AXI_ARLOCK;
  input [3:0]S8_AXI_ARCACHE;
  input [2:0]S8_AXI_ARPROT;
  input [3:0]S8_AXI_ARQOS;
  input S8_AXI_ARVALID;
  output S8_AXI_ARREADY;
  input [1:0]S8_AXI_ARDOMAIN;
  input [3:0]S8_AXI_ARSNOOP;
  input [1:0]S8_AXI_ARBAR;
  output [0:0]S8_AXI_RID;
  output [31:0]S8_AXI_RDATA;
  output [1:0]S8_AXI_RRESP;
  output S8_AXI_RLAST;
  output S8_AXI_RVALID;
  input S8_AXI_RREADY;
  input S8_AXI_RACK;
  output S8_AXI_ACVALID;
  output [31:0]S8_AXI_ACADDR;
  output [3:0]S8_AXI_ACSNOOP;
  output [2:0]S8_AXI_ACPROT;
  input S8_AXI_ACREADY;
  input S8_AXI_CRVALID;
  input [4:0]S8_AXI_CRRESP;
  output S8_AXI_CRREADY;
  input S8_AXI_CDVALID;
  input [31:0]S8_AXI_CDDATA;
  input S8_AXI_CDLAST;
  output S8_AXI_CDREADY;
  input [0:0]S9_AXI_AWID;
  input [31:0]S9_AXI_AWADDR;
  input [7:0]S9_AXI_AWLEN;
  input [2:0]S9_AXI_AWSIZE;
  input [1:0]S9_AXI_AWBURST;
  input S9_AXI_AWLOCK;
  input [3:0]S9_AXI_AWCACHE;
  input [2:0]S9_AXI_AWPROT;
  input [3:0]S9_AXI_AWQOS;
  input S9_AXI_AWVALID;
  output S9_AXI_AWREADY;
  input [1:0]S9_AXI_AWDOMAIN;
  input [2:0]S9_AXI_AWSNOOP;
  input [1:0]S9_AXI_AWBAR;
  input [31:0]S9_AXI_WDATA;
  input [3:0]S9_AXI_WSTRB;
  input S9_AXI_WLAST;
  input S9_AXI_WVALID;
  output S9_AXI_WREADY;
  output [1:0]S9_AXI_BRESP;
  output [0:0]S9_AXI_BID;
  output S9_AXI_BVALID;
  input S9_AXI_BREADY;
  input S9_AXI_WACK;
  input [0:0]S9_AXI_ARID;
  input [31:0]S9_AXI_ARADDR;
  input [7:0]S9_AXI_ARLEN;
  input [2:0]S9_AXI_ARSIZE;
  input [1:0]S9_AXI_ARBURST;
  input S9_AXI_ARLOCK;
  input [3:0]S9_AXI_ARCACHE;
  input [2:0]S9_AXI_ARPROT;
  input [3:0]S9_AXI_ARQOS;
  input S9_AXI_ARVALID;
  output S9_AXI_ARREADY;
  input [1:0]S9_AXI_ARDOMAIN;
  input [3:0]S9_AXI_ARSNOOP;
  input [1:0]S9_AXI_ARBAR;
  output [0:0]S9_AXI_RID;
  output [31:0]S9_AXI_RDATA;
  output [1:0]S9_AXI_RRESP;
  output S9_AXI_RLAST;
  output S9_AXI_RVALID;
  input S9_AXI_RREADY;
  input S9_AXI_RACK;
  output S9_AXI_ACVALID;
  output [31:0]S9_AXI_ACADDR;
  output [3:0]S9_AXI_ACSNOOP;
  output [2:0]S9_AXI_ACPROT;
  input S9_AXI_ACREADY;
  input S9_AXI_CRVALID;
  input [4:0]S9_AXI_CRRESP;
  output S9_AXI_CRREADY;
  input S9_AXI_CDVALID;
  input [31:0]S9_AXI_CDDATA;
  input S9_AXI_CDLAST;
  output S9_AXI_CDREADY;
  input [0:0]S10_AXI_AWID;
  input [31:0]S10_AXI_AWADDR;
  input [7:0]S10_AXI_AWLEN;
  input [2:0]S10_AXI_AWSIZE;
  input [1:0]S10_AXI_AWBURST;
  input S10_AXI_AWLOCK;
  input [3:0]S10_AXI_AWCACHE;
  input [2:0]S10_AXI_AWPROT;
  input [3:0]S10_AXI_AWQOS;
  input S10_AXI_AWVALID;
  output S10_AXI_AWREADY;
  input [1:0]S10_AXI_AWDOMAIN;
  input [2:0]S10_AXI_AWSNOOP;
  input [1:0]S10_AXI_AWBAR;
  input [31:0]S10_AXI_WDATA;
  input [3:0]S10_AXI_WSTRB;
  input S10_AXI_WLAST;
  input S10_AXI_WVALID;
  output S10_AXI_WREADY;
  output [1:0]S10_AXI_BRESP;
  output [0:0]S10_AXI_BID;
  output S10_AXI_BVALID;
  input S10_AXI_BREADY;
  input S10_AXI_WACK;
  input [0:0]S10_AXI_ARID;
  input [31:0]S10_AXI_ARADDR;
  input [7:0]S10_AXI_ARLEN;
  input [2:0]S10_AXI_ARSIZE;
  input [1:0]S10_AXI_ARBURST;
  input S10_AXI_ARLOCK;
  input [3:0]S10_AXI_ARCACHE;
  input [2:0]S10_AXI_ARPROT;
  input [3:0]S10_AXI_ARQOS;
  input S10_AXI_ARVALID;
  output S10_AXI_ARREADY;
  input [1:0]S10_AXI_ARDOMAIN;
  input [3:0]S10_AXI_ARSNOOP;
  input [1:0]S10_AXI_ARBAR;
  output [0:0]S10_AXI_RID;
  output [31:0]S10_AXI_RDATA;
  output [1:0]S10_AXI_RRESP;
  output S10_AXI_RLAST;
  output S10_AXI_RVALID;
  input S10_AXI_RREADY;
  input S10_AXI_RACK;
  output S10_AXI_ACVALID;
  output [31:0]S10_AXI_ACADDR;
  output [3:0]S10_AXI_ACSNOOP;
  output [2:0]S10_AXI_ACPROT;
  input S10_AXI_ACREADY;
  input S10_AXI_CRVALID;
  input [4:0]S10_AXI_CRRESP;
  output S10_AXI_CRREADY;
  input S10_AXI_CDVALID;
  input [31:0]S10_AXI_CDDATA;
  input S10_AXI_CDLAST;
  output S10_AXI_CDREADY;
  input [0:0]S11_AXI_AWID;
  input [31:0]S11_AXI_AWADDR;
  input [7:0]S11_AXI_AWLEN;
  input [2:0]S11_AXI_AWSIZE;
  input [1:0]S11_AXI_AWBURST;
  input S11_AXI_AWLOCK;
  input [3:0]S11_AXI_AWCACHE;
  input [2:0]S11_AXI_AWPROT;
  input [3:0]S11_AXI_AWQOS;
  input S11_AXI_AWVALID;
  output S11_AXI_AWREADY;
  input [1:0]S11_AXI_AWDOMAIN;
  input [2:0]S11_AXI_AWSNOOP;
  input [1:0]S11_AXI_AWBAR;
  input [31:0]S11_AXI_WDATA;
  input [3:0]S11_AXI_WSTRB;
  input S11_AXI_WLAST;
  input S11_AXI_WVALID;
  output S11_AXI_WREADY;
  output [1:0]S11_AXI_BRESP;
  output [0:0]S11_AXI_BID;
  output S11_AXI_BVALID;
  input S11_AXI_BREADY;
  input S11_AXI_WACK;
  input [0:0]S11_AXI_ARID;
  input [31:0]S11_AXI_ARADDR;
  input [7:0]S11_AXI_ARLEN;
  input [2:0]S11_AXI_ARSIZE;
  input [1:0]S11_AXI_ARBURST;
  input S11_AXI_ARLOCK;
  input [3:0]S11_AXI_ARCACHE;
  input [2:0]S11_AXI_ARPROT;
  input [3:0]S11_AXI_ARQOS;
  input S11_AXI_ARVALID;
  output S11_AXI_ARREADY;
  input [1:0]S11_AXI_ARDOMAIN;
  input [3:0]S11_AXI_ARSNOOP;
  input [1:0]S11_AXI_ARBAR;
  output [0:0]S11_AXI_RID;
  output [31:0]S11_AXI_RDATA;
  output [1:0]S11_AXI_RRESP;
  output S11_AXI_RLAST;
  output S11_AXI_RVALID;
  input S11_AXI_RREADY;
  input S11_AXI_RACK;
  output S11_AXI_ACVALID;
  output [31:0]S11_AXI_ACADDR;
  output [3:0]S11_AXI_ACSNOOP;
  output [2:0]S11_AXI_ACPROT;
  input S11_AXI_ACREADY;
  input S11_AXI_CRVALID;
  input [4:0]S11_AXI_CRRESP;
  output S11_AXI_CRREADY;
  input S11_AXI_CDVALID;
  input [31:0]S11_AXI_CDDATA;
  input S11_AXI_CDLAST;
  output S11_AXI_CDREADY;
  input [0:0]S12_AXI_AWID;
  input [31:0]S12_AXI_AWADDR;
  input [7:0]S12_AXI_AWLEN;
  input [2:0]S12_AXI_AWSIZE;
  input [1:0]S12_AXI_AWBURST;
  input S12_AXI_AWLOCK;
  input [3:0]S12_AXI_AWCACHE;
  input [2:0]S12_AXI_AWPROT;
  input [3:0]S12_AXI_AWQOS;
  input S12_AXI_AWVALID;
  output S12_AXI_AWREADY;
  input [1:0]S12_AXI_AWDOMAIN;
  input [2:0]S12_AXI_AWSNOOP;
  input [1:0]S12_AXI_AWBAR;
  input [31:0]S12_AXI_WDATA;
  input [3:0]S12_AXI_WSTRB;
  input S12_AXI_WLAST;
  input S12_AXI_WVALID;
  output S12_AXI_WREADY;
  output [1:0]S12_AXI_BRESP;
  output [0:0]S12_AXI_BID;
  output S12_AXI_BVALID;
  input S12_AXI_BREADY;
  input S12_AXI_WACK;
  input [0:0]S12_AXI_ARID;
  input [31:0]S12_AXI_ARADDR;
  input [7:0]S12_AXI_ARLEN;
  input [2:0]S12_AXI_ARSIZE;
  input [1:0]S12_AXI_ARBURST;
  input S12_AXI_ARLOCK;
  input [3:0]S12_AXI_ARCACHE;
  input [2:0]S12_AXI_ARPROT;
  input [3:0]S12_AXI_ARQOS;
  input S12_AXI_ARVALID;
  output S12_AXI_ARREADY;
  input [1:0]S12_AXI_ARDOMAIN;
  input [3:0]S12_AXI_ARSNOOP;
  input [1:0]S12_AXI_ARBAR;
  output [0:0]S12_AXI_RID;
  output [31:0]S12_AXI_RDATA;
  output [1:0]S12_AXI_RRESP;
  output S12_AXI_RLAST;
  output S12_AXI_RVALID;
  input S12_AXI_RREADY;
  input S12_AXI_RACK;
  output S12_AXI_ACVALID;
  output [31:0]S12_AXI_ACADDR;
  output [3:0]S12_AXI_ACSNOOP;
  output [2:0]S12_AXI_ACPROT;
  input S12_AXI_ACREADY;
  input S12_AXI_CRVALID;
  input [4:0]S12_AXI_CRRESP;
  output S12_AXI_CRREADY;
  input S12_AXI_CDVALID;
  input [31:0]S12_AXI_CDDATA;
  input S12_AXI_CDLAST;
  output S12_AXI_CDREADY;
  input [0:0]S13_AXI_AWID;
  input [31:0]S13_AXI_AWADDR;
  input [7:0]S13_AXI_AWLEN;
  input [2:0]S13_AXI_AWSIZE;
  input [1:0]S13_AXI_AWBURST;
  input S13_AXI_AWLOCK;
  input [3:0]S13_AXI_AWCACHE;
  input [2:0]S13_AXI_AWPROT;
  input [3:0]S13_AXI_AWQOS;
  input S13_AXI_AWVALID;
  output S13_AXI_AWREADY;
  input [1:0]S13_AXI_AWDOMAIN;
  input [2:0]S13_AXI_AWSNOOP;
  input [1:0]S13_AXI_AWBAR;
  input [31:0]S13_AXI_WDATA;
  input [3:0]S13_AXI_WSTRB;
  input S13_AXI_WLAST;
  input S13_AXI_WVALID;
  output S13_AXI_WREADY;
  output [1:0]S13_AXI_BRESP;
  output [0:0]S13_AXI_BID;
  output S13_AXI_BVALID;
  input S13_AXI_BREADY;
  input S13_AXI_WACK;
  input [0:0]S13_AXI_ARID;
  input [31:0]S13_AXI_ARADDR;
  input [7:0]S13_AXI_ARLEN;
  input [2:0]S13_AXI_ARSIZE;
  input [1:0]S13_AXI_ARBURST;
  input S13_AXI_ARLOCK;
  input [3:0]S13_AXI_ARCACHE;
  input [2:0]S13_AXI_ARPROT;
  input [3:0]S13_AXI_ARQOS;
  input S13_AXI_ARVALID;
  output S13_AXI_ARREADY;
  input [1:0]S13_AXI_ARDOMAIN;
  input [3:0]S13_AXI_ARSNOOP;
  input [1:0]S13_AXI_ARBAR;
  output [0:0]S13_AXI_RID;
  output [31:0]S13_AXI_RDATA;
  output [1:0]S13_AXI_RRESP;
  output S13_AXI_RLAST;
  output S13_AXI_RVALID;
  input S13_AXI_RREADY;
  input S13_AXI_RACK;
  output S13_AXI_ACVALID;
  output [31:0]S13_AXI_ACADDR;
  output [3:0]S13_AXI_ACSNOOP;
  output [2:0]S13_AXI_ACPROT;
  input S13_AXI_ACREADY;
  input S13_AXI_CRVALID;
  input [4:0]S13_AXI_CRRESP;
  output S13_AXI_CRREADY;
  input S13_AXI_CDVALID;
  input [31:0]S13_AXI_CDDATA;
  input S13_AXI_CDLAST;
  output S13_AXI_CDREADY;
  input [0:0]S14_AXI_AWID;
  input [31:0]S14_AXI_AWADDR;
  input [7:0]S14_AXI_AWLEN;
  input [2:0]S14_AXI_AWSIZE;
  input [1:0]S14_AXI_AWBURST;
  input S14_AXI_AWLOCK;
  input [3:0]S14_AXI_AWCACHE;
  input [2:0]S14_AXI_AWPROT;
  input [3:0]S14_AXI_AWQOS;
  input S14_AXI_AWVALID;
  output S14_AXI_AWREADY;
  input [1:0]S14_AXI_AWDOMAIN;
  input [2:0]S14_AXI_AWSNOOP;
  input [1:0]S14_AXI_AWBAR;
  input [31:0]S14_AXI_WDATA;
  input [3:0]S14_AXI_WSTRB;
  input S14_AXI_WLAST;
  input S14_AXI_WVALID;
  output S14_AXI_WREADY;
  output [1:0]S14_AXI_BRESP;
  output [0:0]S14_AXI_BID;
  output S14_AXI_BVALID;
  input S14_AXI_BREADY;
  input S14_AXI_WACK;
  input [0:0]S14_AXI_ARID;
  input [31:0]S14_AXI_ARADDR;
  input [7:0]S14_AXI_ARLEN;
  input [2:0]S14_AXI_ARSIZE;
  input [1:0]S14_AXI_ARBURST;
  input S14_AXI_ARLOCK;
  input [3:0]S14_AXI_ARCACHE;
  input [2:0]S14_AXI_ARPROT;
  input [3:0]S14_AXI_ARQOS;
  input S14_AXI_ARVALID;
  output S14_AXI_ARREADY;
  input [1:0]S14_AXI_ARDOMAIN;
  input [3:0]S14_AXI_ARSNOOP;
  input [1:0]S14_AXI_ARBAR;
  output [0:0]S14_AXI_RID;
  output [31:0]S14_AXI_RDATA;
  output [1:0]S14_AXI_RRESP;
  output S14_AXI_RLAST;
  output S14_AXI_RVALID;
  input S14_AXI_RREADY;
  input S14_AXI_RACK;
  output S14_AXI_ACVALID;
  output [31:0]S14_AXI_ACADDR;
  output [3:0]S14_AXI_ACSNOOP;
  output [2:0]S14_AXI_ACPROT;
  input S14_AXI_ACREADY;
  input S14_AXI_CRVALID;
  input [4:0]S14_AXI_CRRESP;
  output S14_AXI_CRREADY;
  input S14_AXI_CDVALID;
  input [31:0]S14_AXI_CDDATA;
  input S14_AXI_CDLAST;
  output S14_AXI_CDREADY;
  input [0:0]S15_AXI_AWID;
  input [31:0]S15_AXI_AWADDR;
  input [7:0]S15_AXI_AWLEN;
  input [2:0]S15_AXI_AWSIZE;
  input [1:0]S15_AXI_AWBURST;
  input S15_AXI_AWLOCK;
  input [3:0]S15_AXI_AWCACHE;
  input [2:0]S15_AXI_AWPROT;
  input [3:0]S15_AXI_AWQOS;
  input S15_AXI_AWVALID;
  output S15_AXI_AWREADY;
  input [1:0]S15_AXI_AWDOMAIN;
  input [2:0]S15_AXI_AWSNOOP;
  input [1:0]S15_AXI_AWBAR;
  input [31:0]S15_AXI_WDATA;
  input [3:0]S15_AXI_WSTRB;
  input S15_AXI_WLAST;
  input S15_AXI_WVALID;
  output S15_AXI_WREADY;
  output [1:0]S15_AXI_BRESP;
  output [0:0]S15_AXI_BID;
  output S15_AXI_BVALID;
  input S15_AXI_BREADY;
  input S15_AXI_WACK;
  input [0:0]S15_AXI_ARID;
  input [31:0]S15_AXI_ARADDR;
  input [7:0]S15_AXI_ARLEN;
  input [2:0]S15_AXI_ARSIZE;
  input [1:0]S15_AXI_ARBURST;
  input S15_AXI_ARLOCK;
  input [3:0]S15_AXI_ARCACHE;
  input [2:0]S15_AXI_ARPROT;
  input [3:0]S15_AXI_ARQOS;
  input S15_AXI_ARVALID;
  output S15_AXI_ARREADY;
  input [1:0]S15_AXI_ARDOMAIN;
  input [3:0]S15_AXI_ARSNOOP;
  input [1:0]S15_AXI_ARBAR;
  output [0:0]S15_AXI_RID;
  output [31:0]S15_AXI_RDATA;
  output [1:0]S15_AXI_RRESP;
  output S15_AXI_RLAST;
  output S15_AXI_RVALID;
  input S15_AXI_RREADY;
  input S15_AXI_RACK;
  output S15_AXI_ACVALID;
  output [31:0]S15_AXI_ACADDR;
  output [3:0]S15_AXI_ACSNOOP;
  output [2:0]S15_AXI_ACPROT;
  input S15_AXI_ACREADY;
  input S15_AXI_CRVALID;
  input [4:0]S15_AXI_CRRESP;
  output S15_AXI_CRREADY;
  input S15_AXI_CDVALID;
  input [31:0]S15_AXI_CDDATA;
  input S15_AXI_CDLAST;
  output S15_AXI_CDREADY;
  input [0:0]S0_AXI_GEN_AWID;
  input [23:0]S0_AXI_GEN_AWADDR;
  input [7:0]S0_AXI_GEN_AWLEN;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [1:0]S0_AXI_GEN_AWBURST;
  input S0_AXI_GEN_AWLOCK;
  input [3:0]S0_AXI_GEN_AWCACHE;
  input [2:0]S0_AXI_GEN_AWPROT;
  input [3:0]S0_AXI_GEN_AWQOS;
  input S0_AXI_GEN_AWVALID;
  output S0_AXI_GEN_AWREADY;
  input [31:0]S0_AXI_GEN_WDATA;
  input [3:0]S0_AXI_GEN_WSTRB;
  input S0_AXI_GEN_WLAST;
  input S0_AXI_GEN_WVALID;
  output S0_AXI_GEN_WREADY;
  output [1:0]S0_AXI_GEN_BRESP;
  output [0:0]S0_AXI_GEN_BID;
  output S0_AXI_GEN_BVALID;
  input S0_AXI_GEN_BREADY;
  input [0:0]S0_AXI_GEN_ARID;
  input [23:0]S0_AXI_GEN_ARADDR;
  input [7:0]S0_AXI_GEN_ARLEN;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [1:0]S0_AXI_GEN_ARBURST;
  input S0_AXI_GEN_ARLOCK;
  input [3:0]S0_AXI_GEN_ARCACHE;
  input [2:0]S0_AXI_GEN_ARPROT;
  input [3:0]S0_AXI_GEN_ARQOS;
  input S0_AXI_GEN_ARVALID;
  output S0_AXI_GEN_ARREADY;
  output [0:0]S0_AXI_GEN_RID;
  output [31:0]S0_AXI_GEN_RDATA;
  output [1:0]S0_AXI_GEN_RRESP;
  output S0_AXI_GEN_RLAST;
  output S0_AXI_GEN_RVALID;
  input S0_AXI_GEN_RREADY;
  input [0:0]S1_AXI_GEN_AWID;
  input [31:0]S1_AXI_GEN_AWADDR;
  input [7:0]S1_AXI_GEN_AWLEN;
  input [2:0]S1_AXI_GEN_AWSIZE;
  input [1:0]S1_AXI_GEN_AWBURST;
  input S1_AXI_GEN_AWLOCK;
  input [3:0]S1_AXI_GEN_AWCACHE;
  input [2:0]S1_AXI_GEN_AWPROT;
  input [3:0]S1_AXI_GEN_AWQOS;
  input S1_AXI_GEN_AWVALID;
  output S1_AXI_GEN_AWREADY;
  input [31:0]S1_AXI_GEN_WDATA;
  input [3:0]S1_AXI_GEN_WSTRB;
  input S1_AXI_GEN_WLAST;
  input S1_AXI_GEN_WVALID;
  output S1_AXI_GEN_WREADY;
  output [1:0]S1_AXI_GEN_BRESP;
  output [0:0]S1_AXI_GEN_BID;
  output S1_AXI_GEN_BVALID;
  input S1_AXI_GEN_BREADY;
  input [0:0]S1_AXI_GEN_ARID;
  input [31:0]S1_AXI_GEN_ARADDR;
  input [7:0]S1_AXI_GEN_ARLEN;
  input [2:0]S1_AXI_GEN_ARSIZE;
  input [1:0]S1_AXI_GEN_ARBURST;
  input S1_AXI_GEN_ARLOCK;
  input [3:0]S1_AXI_GEN_ARCACHE;
  input [2:0]S1_AXI_GEN_ARPROT;
  input [3:0]S1_AXI_GEN_ARQOS;
  input S1_AXI_GEN_ARVALID;
  output S1_AXI_GEN_ARREADY;
  output [0:0]S1_AXI_GEN_RID;
  output [31:0]S1_AXI_GEN_RDATA;
  output [1:0]S1_AXI_GEN_RRESP;
  output S1_AXI_GEN_RLAST;
  output S1_AXI_GEN_RVALID;
  input S1_AXI_GEN_RREADY;
  input [0:0]S2_AXI_GEN_AWID;
  input [31:0]S2_AXI_GEN_AWADDR;
  input [7:0]S2_AXI_GEN_AWLEN;
  input [2:0]S2_AXI_GEN_AWSIZE;
  input [1:0]S2_AXI_GEN_AWBURST;
  input S2_AXI_GEN_AWLOCK;
  input [3:0]S2_AXI_GEN_AWCACHE;
  input [2:0]S2_AXI_GEN_AWPROT;
  input [3:0]S2_AXI_GEN_AWQOS;
  input S2_AXI_GEN_AWVALID;
  output S2_AXI_GEN_AWREADY;
  input [31:0]S2_AXI_GEN_WDATA;
  input [3:0]S2_AXI_GEN_WSTRB;
  input S2_AXI_GEN_WLAST;
  input S2_AXI_GEN_WVALID;
  output S2_AXI_GEN_WREADY;
  output [1:0]S2_AXI_GEN_BRESP;
  output [0:0]S2_AXI_GEN_BID;
  output S2_AXI_GEN_BVALID;
  input S2_AXI_GEN_BREADY;
  input [0:0]S2_AXI_GEN_ARID;
  input [31:0]S2_AXI_GEN_ARADDR;
  input [7:0]S2_AXI_GEN_ARLEN;
  input [2:0]S2_AXI_GEN_ARSIZE;
  input [1:0]S2_AXI_GEN_ARBURST;
  input S2_AXI_GEN_ARLOCK;
  input [3:0]S2_AXI_GEN_ARCACHE;
  input [2:0]S2_AXI_GEN_ARPROT;
  input [3:0]S2_AXI_GEN_ARQOS;
  input S2_AXI_GEN_ARVALID;
  output S2_AXI_GEN_ARREADY;
  output [0:0]S2_AXI_GEN_RID;
  output [31:0]S2_AXI_GEN_RDATA;
  output [1:0]S2_AXI_GEN_RRESP;
  output S2_AXI_GEN_RLAST;
  output S2_AXI_GEN_RVALID;
  input S2_AXI_GEN_RREADY;
  input [0:0]S3_AXI_GEN_AWID;
  input [31:0]S3_AXI_GEN_AWADDR;
  input [7:0]S3_AXI_GEN_AWLEN;
  input [2:0]S3_AXI_GEN_AWSIZE;
  input [1:0]S3_AXI_GEN_AWBURST;
  input S3_AXI_GEN_AWLOCK;
  input [3:0]S3_AXI_GEN_AWCACHE;
  input [2:0]S3_AXI_GEN_AWPROT;
  input [3:0]S3_AXI_GEN_AWQOS;
  input S3_AXI_GEN_AWVALID;
  output S3_AXI_GEN_AWREADY;
  input [31:0]S3_AXI_GEN_WDATA;
  input [3:0]S3_AXI_GEN_WSTRB;
  input S3_AXI_GEN_WLAST;
  input S3_AXI_GEN_WVALID;
  output S3_AXI_GEN_WREADY;
  output [1:0]S3_AXI_GEN_BRESP;
  output [0:0]S3_AXI_GEN_BID;
  output S3_AXI_GEN_BVALID;
  input S3_AXI_GEN_BREADY;
  input [0:0]S3_AXI_GEN_ARID;
  input [31:0]S3_AXI_GEN_ARADDR;
  input [7:0]S3_AXI_GEN_ARLEN;
  input [2:0]S3_AXI_GEN_ARSIZE;
  input [1:0]S3_AXI_GEN_ARBURST;
  input S3_AXI_GEN_ARLOCK;
  input [3:0]S3_AXI_GEN_ARCACHE;
  input [2:0]S3_AXI_GEN_ARPROT;
  input [3:0]S3_AXI_GEN_ARQOS;
  input S3_AXI_GEN_ARVALID;
  output S3_AXI_GEN_ARREADY;
  output [0:0]S3_AXI_GEN_RID;
  output [31:0]S3_AXI_GEN_RDATA;
  output [1:0]S3_AXI_GEN_RRESP;
  output S3_AXI_GEN_RLAST;
  output S3_AXI_GEN_RVALID;
  input S3_AXI_GEN_RREADY;
  input [0:0]S4_AXI_GEN_AWID;
  input [31:0]S4_AXI_GEN_AWADDR;
  input [7:0]S4_AXI_GEN_AWLEN;
  input [2:0]S4_AXI_GEN_AWSIZE;
  input [1:0]S4_AXI_GEN_AWBURST;
  input S4_AXI_GEN_AWLOCK;
  input [3:0]S4_AXI_GEN_AWCACHE;
  input [2:0]S4_AXI_GEN_AWPROT;
  input [3:0]S4_AXI_GEN_AWQOS;
  input S4_AXI_GEN_AWVALID;
  output S4_AXI_GEN_AWREADY;
  input [31:0]S4_AXI_GEN_WDATA;
  input [3:0]S4_AXI_GEN_WSTRB;
  input S4_AXI_GEN_WLAST;
  input S4_AXI_GEN_WVALID;
  output S4_AXI_GEN_WREADY;
  output [1:0]S4_AXI_GEN_BRESP;
  output [0:0]S4_AXI_GEN_BID;
  output S4_AXI_GEN_BVALID;
  input S4_AXI_GEN_BREADY;
  input [0:0]S4_AXI_GEN_ARID;
  input [31:0]S4_AXI_GEN_ARADDR;
  input [7:0]S4_AXI_GEN_ARLEN;
  input [2:0]S4_AXI_GEN_ARSIZE;
  input [1:0]S4_AXI_GEN_ARBURST;
  input S4_AXI_GEN_ARLOCK;
  input [3:0]S4_AXI_GEN_ARCACHE;
  input [2:0]S4_AXI_GEN_ARPROT;
  input [3:0]S4_AXI_GEN_ARQOS;
  input S4_AXI_GEN_ARVALID;
  output S4_AXI_GEN_ARREADY;
  output [0:0]S4_AXI_GEN_RID;
  output [31:0]S4_AXI_GEN_RDATA;
  output [1:0]S4_AXI_GEN_RRESP;
  output S4_AXI_GEN_RLAST;
  output S4_AXI_GEN_RVALID;
  input S4_AXI_GEN_RREADY;
  input [0:0]S5_AXI_GEN_AWID;
  input [31:0]S5_AXI_GEN_AWADDR;
  input [7:0]S5_AXI_GEN_AWLEN;
  input [2:0]S5_AXI_GEN_AWSIZE;
  input [1:0]S5_AXI_GEN_AWBURST;
  input S5_AXI_GEN_AWLOCK;
  input [3:0]S5_AXI_GEN_AWCACHE;
  input [2:0]S5_AXI_GEN_AWPROT;
  input [3:0]S5_AXI_GEN_AWQOS;
  input S5_AXI_GEN_AWVALID;
  output S5_AXI_GEN_AWREADY;
  input [31:0]S5_AXI_GEN_WDATA;
  input [3:0]S5_AXI_GEN_WSTRB;
  input S5_AXI_GEN_WLAST;
  input S5_AXI_GEN_WVALID;
  output S5_AXI_GEN_WREADY;
  output [1:0]S5_AXI_GEN_BRESP;
  output [0:0]S5_AXI_GEN_BID;
  output S5_AXI_GEN_BVALID;
  input S5_AXI_GEN_BREADY;
  input [0:0]S5_AXI_GEN_ARID;
  input [31:0]S5_AXI_GEN_ARADDR;
  input [7:0]S5_AXI_GEN_ARLEN;
  input [2:0]S5_AXI_GEN_ARSIZE;
  input [1:0]S5_AXI_GEN_ARBURST;
  input S5_AXI_GEN_ARLOCK;
  input [3:0]S5_AXI_GEN_ARCACHE;
  input [2:0]S5_AXI_GEN_ARPROT;
  input [3:0]S5_AXI_GEN_ARQOS;
  input S5_AXI_GEN_ARVALID;
  output S5_AXI_GEN_ARREADY;
  output [0:0]S5_AXI_GEN_RID;
  output [31:0]S5_AXI_GEN_RDATA;
  output [1:0]S5_AXI_GEN_RRESP;
  output S5_AXI_GEN_RLAST;
  output S5_AXI_GEN_RVALID;
  input S5_AXI_GEN_RREADY;
  input [0:0]S6_AXI_GEN_AWID;
  input [31:0]S6_AXI_GEN_AWADDR;
  input [7:0]S6_AXI_GEN_AWLEN;
  input [2:0]S6_AXI_GEN_AWSIZE;
  input [1:0]S6_AXI_GEN_AWBURST;
  input S6_AXI_GEN_AWLOCK;
  input [3:0]S6_AXI_GEN_AWCACHE;
  input [2:0]S6_AXI_GEN_AWPROT;
  input [3:0]S6_AXI_GEN_AWQOS;
  input S6_AXI_GEN_AWVALID;
  output S6_AXI_GEN_AWREADY;
  input [31:0]S6_AXI_GEN_WDATA;
  input [3:0]S6_AXI_GEN_WSTRB;
  input S6_AXI_GEN_WLAST;
  input S6_AXI_GEN_WVALID;
  output S6_AXI_GEN_WREADY;
  output [1:0]S6_AXI_GEN_BRESP;
  output [0:0]S6_AXI_GEN_BID;
  output S6_AXI_GEN_BVALID;
  input S6_AXI_GEN_BREADY;
  input [0:0]S6_AXI_GEN_ARID;
  input [31:0]S6_AXI_GEN_ARADDR;
  input [7:0]S6_AXI_GEN_ARLEN;
  input [2:0]S6_AXI_GEN_ARSIZE;
  input [1:0]S6_AXI_GEN_ARBURST;
  input S6_AXI_GEN_ARLOCK;
  input [3:0]S6_AXI_GEN_ARCACHE;
  input [2:0]S6_AXI_GEN_ARPROT;
  input [3:0]S6_AXI_GEN_ARQOS;
  input S6_AXI_GEN_ARVALID;
  output S6_AXI_GEN_ARREADY;
  output [0:0]S6_AXI_GEN_RID;
  output [31:0]S6_AXI_GEN_RDATA;
  output [1:0]S6_AXI_GEN_RRESP;
  output S6_AXI_GEN_RLAST;
  output S6_AXI_GEN_RVALID;
  input S6_AXI_GEN_RREADY;
  input [0:0]S7_AXI_GEN_AWID;
  input [31:0]S7_AXI_GEN_AWADDR;
  input [7:0]S7_AXI_GEN_AWLEN;
  input [2:0]S7_AXI_GEN_AWSIZE;
  input [1:0]S7_AXI_GEN_AWBURST;
  input S7_AXI_GEN_AWLOCK;
  input [3:0]S7_AXI_GEN_AWCACHE;
  input [2:0]S7_AXI_GEN_AWPROT;
  input [3:0]S7_AXI_GEN_AWQOS;
  input S7_AXI_GEN_AWVALID;
  output S7_AXI_GEN_AWREADY;
  input [31:0]S7_AXI_GEN_WDATA;
  input [3:0]S7_AXI_GEN_WSTRB;
  input S7_AXI_GEN_WLAST;
  input S7_AXI_GEN_WVALID;
  output S7_AXI_GEN_WREADY;
  output [1:0]S7_AXI_GEN_BRESP;
  output [0:0]S7_AXI_GEN_BID;
  output S7_AXI_GEN_BVALID;
  input S7_AXI_GEN_BREADY;
  input [0:0]S7_AXI_GEN_ARID;
  input [31:0]S7_AXI_GEN_ARADDR;
  input [7:0]S7_AXI_GEN_ARLEN;
  input [2:0]S7_AXI_GEN_ARSIZE;
  input [1:0]S7_AXI_GEN_ARBURST;
  input S7_AXI_GEN_ARLOCK;
  input [3:0]S7_AXI_GEN_ARCACHE;
  input [2:0]S7_AXI_GEN_ARPROT;
  input [3:0]S7_AXI_GEN_ARQOS;
  input S7_AXI_GEN_ARVALID;
  output S7_AXI_GEN_ARREADY;
  output [0:0]S7_AXI_GEN_RID;
  output [31:0]S7_AXI_GEN_RDATA;
  output [1:0]S7_AXI_GEN_RRESP;
  output S7_AXI_GEN_RLAST;
  output S7_AXI_GEN_RVALID;
  input S7_AXI_GEN_RREADY;
  input [0:0]S8_AXI_GEN_AWID;
  input [31:0]S8_AXI_GEN_AWADDR;
  input [7:0]S8_AXI_GEN_AWLEN;
  input [2:0]S8_AXI_GEN_AWSIZE;
  input [1:0]S8_AXI_GEN_AWBURST;
  input S8_AXI_GEN_AWLOCK;
  input [3:0]S8_AXI_GEN_AWCACHE;
  input [2:0]S8_AXI_GEN_AWPROT;
  input [3:0]S8_AXI_GEN_AWQOS;
  input S8_AXI_GEN_AWVALID;
  output S8_AXI_GEN_AWREADY;
  input [31:0]S8_AXI_GEN_WDATA;
  input [3:0]S8_AXI_GEN_WSTRB;
  input S8_AXI_GEN_WLAST;
  input S8_AXI_GEN_WVALID;
  output S8_AXI_GEN_WREADY;
  output [1:0]S8_AXI_GEN_BRESP;
  output [0:0]S8_AXI_GEN_BID;
  output S8_AXI_GEN_BVALID;
  input S8_AXI_GEN_BREADY;
  input [0:0]S8_AXI_GEN_ARID;
  input [31:0]S8_AXI_GEN_ARADDR;
  input [7:0]S8_AXI_GEN_ARLEN;
  input [2:0]S8_AXI_GEN_ARSIZE;
  input [1:0]S8_AXI_GEN_ARBURST;
  input S8_AXI_GEN_ARLOCK;
  input [3:0]S8_AXI_GEN_ARCACHE;
  input [2:0]S8_AXI_GEN_ARPROT;
  input [3:0]S8_AXI_GEN_ARQOS;
  input S8_AXI_GEN_ARVALID;
  output S8_AXI_GEN_ARREADY;
  output [0:0]S8_AXI_GEN_RID;
  output [31:0]S8_AXI_GEN_RDATA;
  output [1:0]S8_AXI_GEN_RRESP;
  output S8_AXI_GEN_RLAST;
  output S8_AXI_GEN_RVALID;
  input S8_AXI_GEN_RREADY;
  input [0:0]S9_AXI_GEN_AWID;
  input [31:0]S9_AXI_GEN_AWADDR;
  input [7:0]S9_AXI_GEN_AWLEN;
  input [2:0]S9_AXI_GEN_AWSIZE;
  input [1:0]S9_AXI_GEN_AWBURST;
  input S9_AXI_GEN_AWLOCK;
  input [3:0]S9_AXI_GEN_AWCACHE;
  input [2:0]S9_AXI_GEN_AWPROT;
  input [3:0]S9_AXI_GEN_AWQOS;
  input S9_AXI_GEN_AWVALID;
  output S9_AXI_GEN_AWREADY;
  input [31:0]S9_AXI_GEN_WDATA;
  input [3:0]S9_AXI_GEN_WSTRB;
  input S9_AXI_GEN_WLAST;
  input S9_AXI_GEN_WVALID;
  output S9_AXI_GEN_WREADY;
  output [1:0]S9_AXI_GEN_BRESP;
  output [0:0]S9_AXI_GEN_BID;
  output S9_AXI_GEN_BVALID;
  input S9_AXI_GEN_BREADY;
  input [0:0]S9_AXI_GEN_ARID;
  input [31:0]S9_AXI_GEN_ARADDR;
  input [7:0]S9_AXI_GEN_ARLEN;
  input [2:0]S9_AXI_GEN_ARSIZE;
  input [1:0]S9_AXI_GEN_ARBURST;
  input S9_AXI_GEN_ARLOCK;
  input [3:0]S9_AXI_GEN_ARCACHE;
  input [2:0]S9_AXI_GEN_ARPROT;
  input [3:0]S9_AXI_GEN_ARQOS;
  input S9_AXI_GEN_ARVALID;
  output S9_AXI_GEN_ARREADY;
  output [0:0]S9_AXI_GEN_RID;
  output [31:0]S9_AXI_GEN_RDATA;
  output [1:0]S9_AXI_GEN_RRESP;
  output S9_AXI_GEN_RLAST;
  output S9_AXI_GEN_RVALID;
  input S9_AXI_GEN_RREADY;
  input [0:0]S10_AXI_GEN_AWID;
  input [31:0]S10_AXI_GEN_AWADDR;
  input [7:0]S10_AXI_GEN_AWLEN;
  input [2:0]S10_AXI_GEN_AWSIZE;
  input [1:0]S10_AXI_GEN_AWBURST;
  input S10_AXI_GEN_AWLOCK;
  input [3:0]S10_AXI_GEN_AWCACHE;
  input [2:0]S10_AXI_GEN_AWPROT;
  input [3:0]S10_AXI_GEN_AWQOS;
  input S10_AXI_GEN_AWVALID;
  output S10_AXI_GEN_AWREADY;
  input [31:0]S10_AXI_GEN_WDATA;
  input [3:0]S10_AXI_GEN_WSTRB;
  input S10_AXI_GEN_WLAST;
  input S10_AXI_GEN_WVALID;
  output S10_AXI_GEN_WREADY;
  output [1:0]S10_AXI_GEN_BRESP;
  output [0:0]S10_AXI_GEN_BID;
  output S10_AXI_GEN_BVALID;
  input S10_AXI_GEN_BREADY;
  input [0:0]S10_AXI_GEN_ARID;
  input [31:0]S10_AXI_GEN_ARADDR;
  input [7:0]S10_AXI_GEN_ARLEN;
  input [2:0]S10_AXI_GEN_ARSIZE;
  input [1:0]S10_AXI_GEN_ARBURST;
  input S10_AXI_GEN_ARLOCK;
  input [3:0]S10_AXI_GEN_ARCACHE;
  input [2:0]S10_AXI_GEN_ARPROT;
  input [3:0]S10_AXI_GEN_ARQOS;
  input S10_AXI_GEN_ARVALID;
  output S10_AXI_GEN_ARREADY;
  output [0:0]S10_AXI_GEN_RID;
  output [31:0]S10_AXI_GEN_RDATA;
  output [1:0]S10_AXI_GEN_RRESP;
  output S10_AXI_GEN_RLAST;
  output S10_AXI_GEN_RVALID;
  input S10_AXI_GEN_RREADY;
  input [0:0]S11_AXI_GEN_AWID;
  input [31:0]S11_AXI_GEN_AWADDR;
  input [7:0]S11_AXI_GEN_AWLEN;
  input [2:0]S11_AXI_GEN_AWSIZE;
  input [1:0]S11_AXI_GEN_AWBURST;
  input S11_AXI_GEN_AWLOCK;
  input [3:0]S11_AXI_GEN_AWCACHE;
  input [2:0]S11_AXI_GEN_AWPROT;
  input [3:0]S11_AXI_GEN_AWQOS;
  input S11_AXI_GEN_AWVALID;
  output S11_AXI_GEN_AWREADY;
  input [31:0]S11_AXI_GEN_WDATA;
  input [3:0]S11_AXI_GEN_WSTRB;
  input S11_AXI_GEN_WLAST;
  input S11_AXI_GEN_WVALID;
  output S11_AXI_GEN_WREADY;
  output [1:0]S11_AXI_GEN_BRESP;
  output [0:0]S11_AXI_GEN_BID;
  output S11_AXI_GEN_BVALID;
  input S11_AXI_GEN_BREADY;
  input [0:0]S11_AXI_GEN_ARID;
  input [31:0]S11_AXI_GEN_ARADDR;
  input [7:0]S11_AXI_GEN_ARLEN;
  input [2:0]S11_AXI_GEN_ARSIZE;
  input [1:0]S11_AXI_GEN_ARBURST;
  input S11_AXI_GEN_ARLOCK;
  input [3:0]S11_AXI_GEN_ARCACHE;
  input [2:0]S11_AXI_GEN_ARPROT;
  input [3:0]S11_AXI_GEN_ARQOS;
  input S11_AXI_GEN_ARVALID;
  output S11_AXI_GEN_ARREADY;
  output [0:0]S11_AXI_GEN_RID;
  output [31:0]S11_AXI_GEN_RDATA;
  output [1:0]S11_AXI_GEN_RRESP;
  output S11_AXI_GEN_RLAST;
  output S11_AXI_GEN_RVALID;
  input S11_AXI_GEN_RREADY;
  input [0:0]S12_AXI_GEN_AWID;
  input [31:0]S12_AXI_GEN_AWADDR;
  input [7:0]S12_AXI_GEN_AWLEN;
  input [2:0]S12_AXI_GEN_AWSIZE;
  input [1:0]S12_AXI_GEN_AWBURST;
  input S12_AXI_GEN_AWLOCK;
  input [3:0]S12_AXI_GEN_AWCACHE;
  input [2:0]S12_AXI_GEN_AWPROT;
  input [3:0]S12_AXI_GEN_AWQOS;
  input S12_AXI_GEN_AWVALID;
  output S12_AXI_GEN_AWREADY;
  input [31:0]S12_AXI_GEN_WDATA;
  input [3:0]S12_AXI_GEN_WSTRB;
  input S12_AXI_GEN_WLAST;
  input S12_AXI_GEN_WVALID;
  output S12_AXI_GEN_WREADY;
  output [1:0]S12_AXI_GEN_BRESP;
  output [0:0]S12_AXI_GEN_BID;
  output S12_AXI_GEN_BVALID;
  input S12_AXI_GEN_BREADY;
  input [0:0]S12_AXI_GEN_ARID;
  input [31:0]S12_AXI_GEN_ARADDR;
  input [7:0]S12_AXI_GEN_ARLEN;
  input [2:0]S12_AXI_GEN_ARSIZE;
  input [1:0]S12_AXI_GEN_ARBURST;
  input S12_AXI_GEN_ARLOCK;
  input [3:0]S12_AXI_GEN_ARCACHE;
  input [2:0]S12_AXI_GEN_ARPROT;
  input [3:0]S12_AXI_GEN_ARQOS;
  input S12_AXI_GEN_ARVALID;
  output S12_AXI_GEN_ARREADY;
  output [0:0]S12_AXI_GEN_RID;
  output [31:0]S12_AXI_GEN_RDATA;
  output [1:0]S12_AXI_GEN_RRESP;
  output S12_AXI_GEN_RLAST;
  output S12_AXI_GEN_RVALID;
  input S12_AXI_GEN_RREADY;
  input [0:0]S13_AXI_GEN_AWID;
  input [31:0]S13_AXI_GEN_AWADDR;
  input [7:0]S13_AXI_GEN_AWLEN;
  input [2:0]S13_AXI_GEN_AWSIZE;
  input [1:0]S13_AXI_GEN_AWBURST;
  input S13_AXI_GEN_AWLOCK;
  input [3:0]S13_AXI_GEN_AWCACHE;
  input [2:0]S13_AXI_GEN_AWPROT;
  input [3:0]S13_AXI_GEN_AWQOS;
  input S13_AXI_GEN_AWVALID;
  output S13_AXI_GEN_AWREADY;
  input [31:0]S13_AXI_GEN_WDATA;
  input [3:0]S13_AXI_GEN_WSTRB;
  input S13_AXI_GEN_WLAST;
  input S13_AXI_GEN_WVALID;
  output S13_AXI_GEN_WREADY;
  output [1:0]S13_AXI_GEN_BRESP;
  output [0:0]S13_AXI_GEN_BID;
  output S13_AXI_GEN_BVALID;
  input S13_AXI_GEN_BREADY;
  input [0:0]S13_AXI_GEN_ARID;
  input [31:0]S13_AXI_GEN_ARADDR;
  input [7:0]S13_AXI_GEN_ARLEN;
  input [2:0]S13_AXI_GEN_ARSIZE;
  input [1:0]S13_AXI_GEN_ARBURST;
  input S13_AXI_GEN_ARLOCK;
  input [3:0]S13_AXI_GEN_ARCACHE;
  input [2:0]S13_AXI_GEN_ARPROT;
  input [3:0]S13_AXI_GEN_ARQOS;
  input S13_AXI_GEN_ARVALID;
  output S13_AXI_GEN_ARREADY;
  output [0:0]S13_AXI_GEN_RID;
  output [31:0]S13_AXI_GEN_RDATA;
  output [1:0]S13_AXI_GEN_RRESP;
  output S13_AXI_GEN_RLAST;
  output S13_AXI_GEN_RVALID;
  input S13_AXI_GEN_RREADY;
  input [0:0]S14_AXI_GEN_AWID;
  input [31:0]S14_AXI_GEN_AWADDR;
  input [7:0]S14_AXI_GEN_AWLEN;
  input [2:0]S14_AXI_GEN_AWSIZE;
  input [1:0]S14_AXI_GEN_AWBURST;
  input S14_AXI_GEN_AWLOCK;
  input [3:0]S14_AXI_GEN_AWCACHE;
  input [2:0]S14_AXI_GEN_AWPROT;
  input [3:0]S14_AXI_GEN_AWQOS;
  input S14_AXI_GEN_AWVALID;
  output S14_AXI_GEN_AWREADY;
  input [31:0]S14_AXI_GEN_WDATA;
  input [3:0]S14_AXI_GEN_WSTRB;
  input S14_AXI_GEN_WLAST;
  input S14_AXI_GEN_WVALID;
  output S14_AXI_GEN_WREADY;
  output [1:0]S14_AXI_GEN_BRESP;
  output [0:0]S14_AXI_GEN_BID;
  output S14_AXI_GEN_BVALID;
  input S14_AXI_GEN_BREADY;
  input [0:0]S14_AXI_GEN_ARID;
  input [31:0]S14_AXI_GEN_ARADDR;
  input [7:0]S14_AXI_GEN_ARLEN;
  input [2:0]S14_AXI_GEN_ARSIZE;
  input [1:0]S14_AXI_GEN_ARBURST;
  input S14_AXI_GEN_ARLOCK;
  input [3:0]S14_AXI_GEN_ARCACHE;
  input [2:0]S14_AXI_GEN_ARPROT;
  input [3:0]S14_AXI_GEN_ARQOS;
  input S14_AXI_GEN_ARVALID;
  output S14_AXI_GEN_ARREADY;
  output [0:0]S14_AXI_GEN_RID;
  output [31:0]S14_AXI_GEN_RDATA;
  output [1:0]S14_AXI_GEN_RRESP;
  output S14_AXI_GEN_RLAST;
  output S14_AXI_GEN_RVALID;
  input S14_AXI_GEN_RREADY;
  input [0:0]S15_AXI_GEN_AWID;
  input [31:0]S15_AXI_GEN_AWADDR;
  input [7:0]S15_AXI_GEN_AWLEN;
  input [2:0]S15_AXI_GEN_AWSIZE;
  input [1:0]S15_AXI_GEN_AWBURST;
  input S15_AXI_GEN_AWLOCK;
  input [3:0]S15_AXI_GEN_AWCACHE;
  input [2:0]S15_AXI_GEN_AWPROT;
  input [3:0]S15_AXI_GEN_AWQOS;
  input S15_AXI_GEN_AWVALID;
  output S15_AXI_GEN_AWREADY;
  input [31:0]S15_AXI_GEN_WDATA;
  input [3:0]S15_AXI_GEN_WSTRB;
  input S15_AXI_GEN_WLAST;
  input S15_AXI_GEN_WVALID;
  output S15_AXI_GEN_WREADY;
  output [1:0]S15_AXI_GEN_BRESP;
  output [0:0]S15_AXI_GEN_BID;
  output S15_AXI_GEN_BVALID;
  input S15_AXI_GEN_BREADY;
  input [0:0]S15_AXI_GEN_ARID;
  input [31:0]S15_AXI_GEN_ARADDR;
  input [7:0]S15_AXI_GEN_ARLEN;
  input [2:0]S15_AXI_GEN_ARSIZE;
  input [1:0]S15_AXI_GEN_ARBURST;
  input S15_AXI_GEN_ARLOCK;
  input [3:0]S15_AXI_GEN_ARCACHE;
  input [2:0]S15_AXI_GEN_ARPROT;
  input [3:0]S15_AXI_GEN_ARQOS;
  input S15_AXI_GEN_ARVALID;
  output S15_AXI_GEN_ARREADY;
  output [0:0]S15_AXI_GEN_RID;
  output [31:0]S15_AXI_GEN_RDATA;
  output [1:0]S15_AXI_GEN_RRESP;
  output S15_AXI_GEN_RLAST;
  output S15_AXI_GEN_RVALID;
  input S15_AXI_GEN_RREADY;
  input [16:0]S_AXI_CTRL_AWADDR;
  input [2:0]S_AXI_CTRL_AWPROT;
  input S_AXI_CTRL_AWVALID;
  output S_AXI_CTRL_AWREADY;
  input [31:0]S_AXI_CTRL_WDATA;
  input S_AXI_CTRL_WVALID;
  output S_AXI_CTRL_WREADY;
  output [1:0]S_AXI_CTRL_BRESP;
  output S_AXI_CTRL_BVALID;
  input S_AXI_CTRL_BREADY;
  input [16:0]S_AXI_CTRL_ARADDR;
  input [2:0]S_AXI_CTRL_ARPROT;
  input S_AXI_CTRL_ARVALID;
  output S_AXI_CTRL_ARREADY;
  output [31:0]S_AXI_CTRL_RDATA;
  output [1:0]S_AXI_CTRL_RRESP;
  output S_AXI_CTRL_RVALID;
  input S_AXI_CTRL_RREADY;
  output [0:0]M0_AXI_AWID;
  output [23:0]M0_AXI_AWADDR;
  output [7:0]M0_AXI_AWLEN;
  output [2:0]M0_AXI_AWSIZE;
  output [1:0]M0_AXI_AWBURST;
  output M0_AXI_AWLOCK;
  output [3:0]M0_AXI_AWCACHE;
  output [2:0]M0_AXI_AWPROT;
  output [3:0]M0_AXI_AWQOS;
  output M0_AXI_AWVALID;
  input M0_AXI_AWREADY;
  output [1:0]M0_AXI_AWDOMAIN;
  output [2:0]M0_AXI_AWSNOOP;
  output [1:0]M0_AXI_AWBAR;
  output [31:0]M0_AXI_WDATA;
  output [3:0]M0_AXI_WSTRB;
  output M0_AXI_WLAST;
  output M0_AXI_WVALID;
  input M0_AXI_WREADY;
  input [1:0]M0_AXI_BRESP;
  input [0:0]M0_AXI_BID;
  input M0_AXI_BVALID;
  output M0_AXI_BREADY;
  output M0_AXI_WACK;
  output [0:0]M0_AXI_ARID;
  output [23:0]M0_AXI_ARADDR;
  output [7:0]M0_AXI_ARLEN;
  output [2:0]M0_AXI_ARSIZE;
  output [1:0]M0_AXI_ARBURST;
  output M0_AXI_ARLOCK;
  output [3:0]M0_AXI_ARCACHE;
  output [2:0]M0_AXI_ARPROT;
  output [3:0]M0_AXI_ARQOS;
  output M0_AXI_ARVALID;
  input M0_AXI_ARREADY;
  output [1:0]M0_AXI_ARDOMAIN;
  output [3:0]M0_AXI_ARSNOOP;
  output [1:0]M0_AXI_ARBAR;
  input [0:0]M0_AXI_RID;
  input [31:0]M0_AXI_RDATA;
  input [1:0]M0_AXI_RRESP;
  input M0_AXI_RLAST;
  input M0_AXI_RVALID;
  output M0_AXI_RREADY;
  output M0_AXI_RACK;
  input M0_AXI_ACVALID;
  input [23:0]M0_AXI_ACADDR;
  input [3:0]M0_AXI_ACSNOOP;
  input [2:0]M0_AXI_ACPROT;
  output M0_AXI_ACREADY;
  output M0_AXI_CRVALID;
  output [4:0]M0_AXI_CRRESP;
  input M0_AXI_CRREADY;
  output M0_AXI_CDVALID;
  output [31:0]M0_AXI_CDDATA;
  output M0_AXI_CDLAST;
  input M0_AXI_CDREADY;
  output [0:0]M1_AXI_AWID;
  output [31:0]M1_AXI_AWADDR;
  output [7:0]M1_AXI_AWLEN;
  output [2:0]M1_AXI_AWSIZE;
  output [1:0]M1_AXI_AWBURST;
  output M1_AXI_AWLOCK;
  output [3:0]M1_AXI_AWCACHE;
  output [2:0]M1_AXI_AWPROT;
  output [3:0]M1_AXI_AWQOS;
  output M1_AXI_AWVALID;
  input M1_AXI_AWREADY;
  output [31:0]M1_AXI_WDATA;
  output [3:0]M1_AXI_WSTRB;
  output M1_AXI_WLAST;
  output M1_AXI_WVALID;
  input M1_AXI_WREADY;
  input [1:0]M1_AXI_BRESP;
  input [0:0]M1_AXI_BID;
  input M1_AXI_BVALID;
  output M1_AXI_BREADY;
  output [0:0]M1_AXI_ARID;
  output [31:0]M1_AXI_ARADDR;
  output [7:0]M1_AXI_ARLEN;
  output [2:0]M1_AXI_ARSIZE;
  output [1:0]M1_AXI_ARBURST;
  output M1_AXI_ARLOCK;
  output [3:0]M1_AXI_ARCACHE;
  output [2:0]M1_AXI_ARPROT;
  output [3:0]M1_AXI_ARQOS;
  output M1_AXI_ARVALID;
  input M1_AXI_ARREADY;
  input [0:0]M1_AXI_RID;
  input [31:0]M1_AXI_RDATA;
  input [1:0]M1_AXI_RRESP;
  input M1_AXI_RLAST;
  input M1_AXI_RVALID;
  output M1_AXI_RREADY;
  output [0:0]M2_AXI_AWID;
  output [31:0]M2_AXI_AWADDR;
  output [7:0]M2_AXI_AWLEN;
  output [2:0]M2_AXI_AWSIZE;
  output [1:0]M2_AXI_AWBURST;
  output M2_AXI_AWLOCK;
  output [3:0]M2_AXI_AWCACHE;
  output [2:0]M2_AXI_AWPROT;
  output [3:0]M2_AXI_AWQOS;
  output M2_AXI_AWVALID;
  input M2_AXI_AWREADY;
  output [31:0]M2_AXI_WDATA;
  output [3:0]M2_AXI_WSTRB;
  output M2_AXI_WLAST;
  output M2_AXI_WVALID;
  input M2_AXI_WREADY;
  input [1:0]M2_AXI_BRESP;
  input [0:0]M2_AXI_BID;
  input M2_AXI_BVALID;
  output M2_AXI_BREADY;
  output [0:0]M2_AXI_ARID;
  output [31:0]M2_AXI_ARADDR;
  output [7:0]M2_AXI_ARLEN;
  output [2:0]M2_AXI_ARSIZE;
  output [1:0]M2_AXI_ARBURST;
  output M2_AXI_ARLOCK;
  output [3:0]M2_AXI_ARCACHE;
  output [2:0]M2_AXI_ARPROT;
  output [3:0]M2_AXI_ARQOS;
  output M2_AXI_ARVALID;
  input M2_AXI_ARREADY;
  input [0:0]M2_AXI_RID;
  input [31:0]M2_AXI_RDATA;
  input [1:0]M2_AXI_RRESP;
  input M2_AXI_RLAST;
  input M2_AXI_RVALID;
  output M2_AXI_RREADY;
  output [0:0]M3_AXI_AWID;
  output [31:0]M3_AXI_AWADDR;
  output [7:0]M3_AXI_AWLEN;
  output [2:0]M3_AXI_AWSIZE;
  output [1:0]M3_AXI_AWBURST;
  output M3_AXI_AWLOCK;
  output [3:0]M3_AXI_AWCACHE;
  output [2:0]M3_AXI_AWPROT;
  output [3:0]M3_AXI_AWQOS;
  output M3_AXI_AWVALID;
  input M3_AXI_AWREADY;
  output [31:0]M3_AXI_WDATA;
  output [3:0]M3_AXI_WSTRB;
  output M3_AXI_WLAST;
  output M3_AXI_WVALID;
  input M3_AXI_WREADY;
  input [1:0]M3_AXI_BRESP;
  input [0:0]M3_AXI_BID;
  input M3_AXI_BVALID;
  output M3_AXI_BREADY;
  output [0:0]M3_AXI_ARID;
  output [31:0]M3_AXI_ARADDR;
  output [7:0]M3_AXI_ARLEN;
  output [2:0]M3_AXI_ARSIZE;
  output [1:0]M3_AXI_ARBURST;
  output M3_AXI_ARLOCK;
  output [3:0]M3_AXI_ARCACHE;
  output [2:0]M3_AXI_ARPROT;
  output [3:0]M3_AXI_ARQOS;
  output M3_AXI_ARVALID;
  input M3_AXI_ARREADY;
  input [0:0]M3_AXI_RID;
  input [31:0]M3_AXI_RDATA;
  input [1:0]M3_AXI_RRESP;
  input M3_AXI_RLAST;
  input M3_AXI_RVALID;
  output M3_AXI_RREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire ACLK;
  wire ARESET;
  wire ARESETN;
  wire AXI_Ctrl_n_3;
  wire AXI_Ctrl_n_4;
  wire BE_n_8;
  wire \CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.BE_Block_Or_Inst1/S ;
  wire \CB/Gen_Master_Ports[0].TransOrd/aw_fifo_full ;
  wire \CB/Gen_Master_Ports[0].TransOrd/queue_full ;
  wire \CB/Gen_Master_Ports[0].TransOrd/queue_push ;
  wire \CB/Gen_Master_Ports[0].TransOrd/queue_push26_out ;
  wire \CB/Gen_Master_Ports[0].TransOrd/refresh_pending_write ;
  wire CC_n_1;
  wire CC_n_10;
  wire CC_n_12;
  wire CC_n_13;
  wire CC_n_142;
  wire CC_n_144;
  wire CC_n_146;
  wire CC_n_154;
  wire CC_n_18;
  wire CC_n_221;
  wire CC_n_222;
  wire CC_n_223;
  wire CC_n_224;
  wire CC_n_24;
  wire CC_n_26;
  wire CC_n_30;
  wire CC_n_4;
  wire CC_n_62;
  wire CC_n_65;
  wire CC_n_66;
  wire CC_n_76;
  wire CC_n_77;
  wire FE_n_154;
  wire FE_n_158;
  wire FE_n_200;
  wire FE_n_201;
  wire FE_n_202;
  wire FE_n_211;
  wire FE_n_212;
  wire FE_n_213;
  wire FE_n_219;
  wire FE_n_223;
  wire FE_n_224;
  wire FE_n_225;
  wire FE_n_229;
  wire FE_n_29;
  wire FE_n_31;
  wire \Gen_Block[0].ARB/ARESET_I ;
  wire \Gen_Block[0].LU/A161_out ;
  wire [6:6]\Gen_Block[0].LU/B_Vec ;
  wire \Gen_Block[0].LU/LUD_Reg_PR_Or_Inst1/A_N ;
  wire \Gen_Block[0].LU/LU_Data_WE_And_Inst5/A ;
  wire \Gen_Block[0].LU/LU_Data_WE_And_Inst5/The_Compare[0].sel_reg ;
  wire \Gen_Block[0].LU/lu_mem_single_beat ;
  wire \Gen_Block[0].LU/lu_mem_write_alloc0 ;
  wire \Gen_Block[0].LU/lud_addr_pipeline_full ;
  wire \Gen_Block[0].LU/lud_addr_pipeline_full0 ;
  wire [1:1]\Gen_Block[0].LU/lud_mem_port_one_hot ;
  wire \Gen_Block[0].LU/lud_reg_port_num ;
  wire \Gen_Block[0].LU/p_95_in ;
  wire \Gen_Block[0].UD/UD_PR_Comp_Inst5/S ;
  wire \Gen_Block[0].UD/UD_TagConf_Compare_Inst1/A ;
  wire \Gen_Block[0].UD/UD_TagConf_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Block[0].UD/bp_fifo_full ;
  wire \Gen_Block[0].UD/bs_exist ;
  wire \Gen_Block[0].UD/bs_refresh_reg ;
  wire \Gen_Block[0].UD/bs_slv ;
  wire [1:0]\Gen_Block[0].UD/bs_src ;
  wire \Gen_Block[0].UD/ri_fifo_full ;
  wire \Gen_Block[0].UD/update_done_ar ;
  wire \Gen_Block[0].UD/update_done_aw ;
  wire [31:0]\Gen_Block[0].UD/update_wr_miss_word ;
  wire \Gen_Block[0].UD/wm_allow ;
  wire \Gen_Block[0].UD/wm_port ;
  wire [23:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [7:0]M0_AXI_ARLEN;
  wire [1:1]\^M0_AXI_ARPROT ;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire M0_AXI_ARVALID;
  wire [23:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [7:0]M0_AXI_AWLEN;
  wire [1:1]\^M0_AXI_AWPROT ;
  wire M0_AXI_AWREADY;
  wire [1:0]\^M0_AXI_AWSIZE ;
  wire M0_AXI_AWVALID;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire [1:0]M0_AXI_RRESP;
  wire M0_AXI_RVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire M0_AXI_WVALID;
  wire [23:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [3:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARID;
  wire [7:0]S0_AXI_ARLEN;
  wire S0_AXI_ARREADY;
  wire [2:0]S0_AXI_ARSIZE;
  wire [3:0]S0_AXI_ARSNOOP;
  wire S0_AXI_ARVALID;
  wire [23:0]S0_AXI_AWADDR;
  wire [1:0]S0_AXI_AWBAR;
  wire [1:0]S0_AXI_AWBURST;
  wire [3:0]S0_AXI_AWCACHE;
  wire [0:0]S0_AXI_AWID;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire S0_AXI_BVALID;
  wire [23:0]S0_AXI_GEN_ARADDR;
  wire [1:0]S0_AXI_GEN_ARBURST;
  wire [3:0]S0_AXI_GEN_ARCACHE;
  wire [0:0]S0_AXI_GEN_ARID;
  wire [7:0]S0_AXI_GEN_ARLEN;
  wire S0_AXI_GEN_ARREADY;
  wire [2:0]S0_AXI_GEN_ARSIZE;
  wire S0_AXI_GEN_ARVALID;
  wire [23:0]S0_AXI_GEN_AWADDR;
  wire [1:0]S0_AXI_GEN_AWBURST;
  wire [3:0]S0_AXI_GEN_AWCACHE;
  wire [0:0]S0_AXI_GEN_AWID;
  wire [7:0]S0_AXI_GEN_AWLEN;
  wire S0_AXI_GEN_AWLOCK;
  wire S0_AXI_GEN_AWREADY;
  wire [2:0]S0_AXI_GEN_AWSIZE;
  wire S0_AXI_GEN_AWVALID;
  wire [0:0]S0_AXI_GEN_BID;
  wire S0_AXI_GEN_BREADY;
  wire [1:0]S0_AXI_GEN_BRESP;
  wire S0_AXI_GEN_BVALID;
  wire [31:0]S0_AXI_GEN_RDATA;
  wire [0:0]S0_AXI_GEN_RID;
  wire S0_AXI_GEN_RLAST;
  wire S0_AXI_GEN_RREADY;
  wire [1:0]S0_AXI_GEN_RRESP;
  wire S0_AXI_GEN_RVALID;
  wire [31:0]S0_AXI_GEN_WDATA;
  wire S0_AXI_GEN_WREADY;
  wire [3:0]S0_AXI_GEN_WSTRB;
  wire S0_AXI_GEN_WVALID;
  wire [31:0]S0_AXI_RDATA;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire \Use_Generic_Port_0.AXI_0/R_Channel/new_read_data_last ;
  wire [31:0]\Use_Generic_Port_0.AXI_0/R_Channel/new_read_data_word ;
  wire \Use_Generic_Port_0.AXI_0/R_Channel/r_hit_push ;
  wire \Use_Generic_Port_0.AXI_0/R_Channel/r_miss_fifo_full ;
  wire \Use_Generic_Port_0.AXI_0/W_Channel/WC_Or_Inst1/S ;
  wire \Use_Port_0.AXI_0/R_Channel/new_read_data_last ;
  wire \Use_Port_0.AXI_0/R_Channel/r_hit_push ;
  wire \Use_Port_0.AXI_0/R_Channel/r_miss_fifo_full ;
  wire \Use_Port_0.AXI_0/WC_Or_Inst1/S ;
  wire [3:0]\access_data_info[0,0][BE] ;
  wire [31:0]\access_data_info[0,0][Data] ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire [3:0]\access_data_info[0,1][BE] ;
  wire [31:0]\access_data_info[0,1][Data] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire [23:0]\access_info[0][Addr] ;
  wire [5:1]\access_info[0][Addr_Stp] ;
  wire [5:0]\access_info[0][Addr_Use] ;
  wire \access_info[0][Allocate] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [7:0]\access_info[0][Len] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire [2:0]\access_info[0][Size] ;
  wire access_valid;
  wire \arb_access[Evict] ;
  wire \arb_access[Wr] ;
  wire [14:6]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [1:1]\ctrl_access[Size] ;
  wire ctrl_init_done_i;
  wire ctrl_ready;
  wire [31:0]lookup_data_new_word;
  wire lookup_piperun;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire [12:12]lookup_stall_addr;
  wire [31:0]new_read_data_word;
  wire p_0_in;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire [23:0]\read_req_info[0][Addr] ;
  wire \read_req_info[0][Kind] ;
  wire [7:0]\read_req_info[0][Len] ;
  wire [2:0]\read_req_info[0][Size] ;
  wire \read_req_info[0][Valid] ;
  wire [1:0]\update_ext_bresp_info[0,0][BRESP] ;
  wire update_need_ar;
  wire update_need_aw;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire wr_port_data_ready;
  wire write_data_almost_full;
  wire write_data_full;
  wire [3:0]\write_data_info[0][BE] ;
  wire [31:0]\write_data_info[0][Data] ;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire [23:0]\write_req_info[0][Addr] ;
  wire \write_req_info[0][Kind] ;
  wire [7:0]\write_req_info[0][Len] ;
  wire \write_req_info[0][Line_Only] ;
  wire [1:0]\write_req_info[0][Size] ;

  assign M0_AXI_ACREADY = \<const0> ;
  assign M0_AXI_ARBAR[1] = \<const0> ;
  assign M0_AXI_ARBAR[0] = \<const0> ;
  assign M0_AXI_ARCACHE[3] = \<const0> ;
  assign M0_AXI_ARCACHE[2] = \<const0> ;
  assign M0_AXI_ARCACHE[1] = \<const1> ;
  assign M0_AXI_ARCACHE[0] = \<const1> ;
  assign M0_AXI_ARDOMAIN[1] = \<const0> ;
  assign M0_AXI_ARDOMAIN[0] = \<const0> ;
  assign M0_AXI_ARID[0] = \<const0> ;
  assign M0_AXI_ARLOCK = \<const0> ;
  assign M0_AXI_ARPROT[2] = \<const0> ;
  assign M0_AXI_ARPROT[1] = \^M0_AXI_ARPROT [1];
  assign M0_AXI_ARPROT[0] = \<const0> ;
  assign M0_AXI_ARQOS[3] = \<const1> ;
  assign M0_AXI_ARQOS[2] = \<const1> ;
  assign M0_AXI_ARQOS[1] = \<const1> ;
  assign M0_AXI_ARQOS[0] = \<const1> ;
  assign M0_AXI_ARSNOOP[3] = \<const0> ;
  assign M0_AXI_ARSNOOP[2] = \<const0> ;
  assign M0_AXI_ARSNOOP[1] = \<const0> ;
  assign M0_AXI_ARSNOOP[0] = \<const0> ;
  assign M0_AXI_AWBAR[1] = \<const0> ;
  assign M0_AXI_AWBAR[0] = \<const0> ;
  assign M0_AXI_AWCACHE[3] = \<const0> ;
  assign M0_AXI_AWCACHE[2] = \<const0> ;
  assign M0_AXI_AWCACHE[1] = \<const1> ;
  assign M0_AXI_AWCACHE[0] = \<const1> ;
  assign M0_AXI_AWDOMAIN[1] = \<const0> ;
  assign M0_AXI_AWDOMAIN[0] = \<const0> ;
  assign M0_AXI_AWID[0] = \<const0> ;
  assign M0_AXI_AWLOCK = \<const0> ;
  assign M0_AXI_AWPROT[2] = \<const0> ;
  assign M0_AXI_AWPROT[1] = \^M0_AXI_AWPROT [1];
  assign M0_AXI_AWPROT[0] = \<const0> ;
  assign M0_AXI_AWQOS[3] = \<const1> ;
  assign M0_AXI_AWQOS[2] = \<const1> ;
  assign M0_AXI_AWQOS[1] = \<const1> ;
  assign M0_AXI_AWQOS[0] = \<const1> ;
  assign M0_AXI_AWSIZE[2] = \<const0> ;
  assign M0_AXI_AWSIZE[1:0] = \^M0_AXI_AWSIZE [1:0];
  assign M0_AXI_AWSNOOP[2] = \<const0> ;
  assign M0_AXI_AWSNOOP[1] = \<const0> ;
  assign M0_AXI_AWSNOOP[0] = \<const0> ;
  assign M0_AXI_CDDATA[31] = \<const0> ;
  assign M0_AXI_CDDATA[30] = \<const0> ;
  assign M0_AXI_CDDATA[29] = \<const0> ;
  assign M0_AXI_CDDATA[28] = \<const0> ;
  assign M0_AXI_CDDATA[27] = \<const0> ;
  assign M0_AXI_CDDATA[26] = \<const0> ;
  assign M0_AXI_CDDATA[25] = \<const0> ;
  assign M0_AXI_CDDATA[24] = \<const0> ;
  assign M0_AXI_CDDATA[23] = \<const0> ;
  assign M0_AXI_CDDATA[22] = \<const0> ;
  assign M0_AXI_CDDATA[21] = \<const0> ;
  assign M0_AXI_CDDATA[20] = \<const0> ;
  assign M0_AXI_CDDATA[19] = \<const0> ;
  assign M0_AXI_CDDATA[18] = \<const0> ;
  assign M0_AXI_CDDATA[17] = \<const0> ;
  assign M0_AXI_CDDATA[16] = \<const0> ;
  assign M0_AXI_CDDATA[15] = \<const0> ;
  assign M0_AXI_CDDATA[14] = \<const0> ;
  assign M0_AXI_CDDATA[13] = \<const0> ;
  assign M0_AXI_CDDATA[12] = \<const0> ;
  assign M0_AXI_CDDATA[11] = \<const0> ;
  assign M0_AXI_CDDATA[10] = \<const0> ;
  assign M0_AXI_CDDATA[9] = \<const0> ;
  assign M0_AXI_CDDATA[8] = \<const0> ;
  assign M0_AXI_CDDATA[7] = \<const0> ;
  assign M0_AXI_CDDATA[6] = \<const0> ;
  assign M0_AXI_CDDATA[5] = \<const0> ;
  assign M0_AXI_CDDATA[4] = \<const0> ;
  assign M0_AXI_CDDATA[3] = \<const0> ;
  assign M0_AXI_CDDATA[2] = \<const0> ;
  assign M0_AXI_CDDATA[1] = \<const0> ;
  assign M0_AXI_CDDATA[0] = \<const0> ;
  assign M0_AXI_CDLAST = \<const0> ;
  assign M0_AXI_CDVALID = \<const0> ;
  assign M0_AXI_CRRESP[4] = \<const0> ;
  assign M0_AXI_CRRESP[3] = \<const0> ;
  assign M0_AXI_CRRESP[2] = \<const0> ;
  assign M0_AXI_CRRESP[1] = \<const0> ;
  assign M0_AXI_CRRESP[0] = \<const0> ;
  assign M0_AXI_CRVALID = \<const0> ;
  assign M0_AXI_RACK = \<const0> ;
  assign M0_AXI_WACK = \<const0> ;
  assign M1_AXI_ARADDR[31] = \<const0> ;
  assign M1_AXI_ARADDR[30] = \<const0> ;
  assign M1_AXI_ARADDR[29] = \<const0> ;
  assign M1_AXI_ARADDR[28] = \<const0> ;
  assign M1_AXI_ARADDR[27] = \<const0> ;
  assign M1_AXI_ARADDR[26] = \<const0> ;
  assign M1_AXI_ARADDR[25] = \<const0> ;
  assign M1_AXI_ARADDR[24] = \<const0> ;
  assign M1_AXI_ARADDR[23] = \<const0> ;
  assign M1_AXI_ARADDR[22] = \<const0> ;
  assign M1_AXI_ARADDR[21] = \<const0> ;
  assign M1_AXI_ARADDR[20] = \<const0> ;
  assign M1_AXI_ARADDR[19] = \<const0> ;
  assign M1_AXI_ARADDR[18] = \<const0> ;
  assign M1_AXI_ARADDR[17] = \<const0> ;
  assign M1_AXI_ARADDR[16] = \<const0> ;
  assign M1_AXI_ARADDR[15] = \<const0> ;
  assign M1_AXI_ARADDR[14] = \<const0> ;
  assign M1_AXI_ARADDR[13] = \<const0> ;
  assign M1_AXI_ARADDR[12] = \<const0> ;
  assign M1_AXI_ARADDR[11] = \<const0> ;
  assign M1_AXI_ARADDR[10] = \<const0> ;
  assign M1_AXI_ARADDR[9] = \<const0> ;
  assign M1_AXI_ARADDR[8] = \<const0> ;
  assign M1_AXI_ARADDR[7] = \<const0> ;
  assign M1_AXI_ARADDR[6] = \<const0> ;
  assign M1_AXI_ARADDR[5] = \<const0> ;
  assign M1_AXI_ARADDR[4] = \<const0> ;
  assign M1_AXI_ARADDR[3] = \<const0> ;
  assign M1_AXI_ARADDR[2] = \<const0> ;
  assign M1_AXI_ARADDR[1] = \<const0> ;
  assign M1_AXI_ARADDR[0] = \<const0> ;
  assign M1_AXI_ARBURST[1] = \<const0> ;
  assign M1_AXI_ARBURST[0] = \<const0> ;
  assign M1_AXI_ARCACHE[3] = \<const0> ;
  assign M1_AXI_ARCACHE[2] = \<const0> ;
  assign M1_AXI_ARCACHE[1] = \<const0> ;
  assign M1_AXI_ARCACHE[0] = \<const0> ;
  assign M1_AXI_ARID[0] = \<const0> ;
  assign M1_AXI_ARLEN[7] = \<const0> ;
  assign M1_AXI_ARLEN[6] = \<const0> ;
  assign M1_AXI_ARLEN[5] = \<const0> ;
  assign M1_AXI_ARLEN[4] = \<const0> ;
  assign M1_AXI_ARLEN[3] = \<const0> ;
  assign M1_AXI_ARLEN[2] = \<const0> ;
  assign M1_AXI_ARLEN[1] = \<const0> ;
  assign M1_AXI_ARLEN[0] = \<const0> ;
  assign M1_AXI_ARLOCK = \<const0> ;
  assign M1_AXI_ARPROT[2] = \<const0> ;
  assign M1_AXI_ARPROT[1] = \<const0> ;
  assign M1_AXI_ARPROT[0] = \<const0> ;
  assign M1_AXI_ARQOS[3] = \<const0> ;
  assign M1_AXI_ARQOS[2] = \<const0> ;
  assign M1_AXI_ARQOS[1] = \<const0> ;
  assign M1_AXI_ARQOS[0] = \<const0> ;
  assign M1_AXI_ARSIZE[2] = \<const0> ;
  assign M1_AXI_ARSIZE[1] = \<const0> ;
  assign M1_AXI_ARSIZE[0] = \<const0> ;
  assign M1_AXI_ARVALID = \<const0> ;
  assign M1_AXI_AWADDR[31] = \<const0> ;
  assign M1_AXI_AWADDR[30] = \<const0> ;
  assign M1_AXI_AWADDR[29] = \<const0> ;
  assign M1_AXI_AWADDR[28] = \<const0> ;
  assign M1_AXI_AWADDR[27] = \<const0> ;
  assign M1_AXI_AWADDR[26] = \<const0> ;
  assign M1_AXI_AWADDR[25] = \<const0> ;
  assign M1_AXI_AWADDR[24] = \<const0> ;
  assign M1_AXI_AWADDR[23] = \<const0> ;
  assign M1_AXI_AWADDR[22] = \<const0> ;
  assign M1_AXI_AWADDR[21] = \<const0> ;
  assign M1_AXI_AWADDR[20] = \<const0> ;
  assign M1_AXI_AWADDR[19] = \<const0> ;
  assign M1_AXI_AWADDR[18] = \<const0> ;
  assign M1_AXI_AWADDR[17] = \<const0> ;
  assign M1_AXI_AWADDR[16] = \<const0> ;
  assign M1_AXI_AWADDR[15] = \<const0> ;
  assign M1_AXI_AWADDR[14] = \<const0> ;
  assign M1_AXI_AWADDR[13] = \<const0> ;
  assign M1_AXI_AWADDR[12] = \<const0> ;
  assign M1_AXI_AWADDR[11] = \<const0> ;
  assign M1_AXI_AWADDR[10] = \<const0> ;
  assign M1_AXI_AWADDR[9] = \<const0> ;
  assign M1_AXI_AWADDR[8] = \<const0> ;
  assign M1_AXI_AWADDR[7] = \<const0> ;
  assign M1_AXI_AWADDR[6] = \<const0> ;
  assign M1_AXI_AWADDR[5] = \<const0> ;
  assign M1_AXI_AWADDR[4] = \<const0> ;
  assign M1_AXI_AWADDR[3] = \<const0> ;
  assign M1_AXI_AWADDR[2] = \<const0> ;
  assign M1_AXI_AWADDR[1] = \<const0> ;
  assign M1_AXI_AWADDR[0] = \<const0> ;
  assign M1_AXI_AWBURST[1] = \<const0> ;
  assign M1_AXI_AWBURST[0] = \<const0> ;
  assign M1_AXI_AWCACHE[3] = \<const0> ;
  assign M1_AXI_AWCACHE[2] = \<const0> ;
  assign M1_AXI_AWCACHE[1] = \<const0> ;
  assign M1_AXI_AWCACHE[0] = \<const0> ;
  assign M1_AXI_AWID[0] = \<const0> ;
  assign M1_AXI_AWLEN[7] = \<const0> ;
  assign M1_AXI_AWLEN[6] = \<const0> ;
  assign M1_AXI_AWLEN[5] = \<const0> ;
  assign M1_AXI_AWLEN[4] = \<const0> ;
  assign M1_AXI_AWLEN[3] = \<const0> ;
  assign M1_AXI_AWLEN[2] = \<const0> ;
  assign M1_AXI_AWLEN[1] = \<const0> ;
  assign M1_AXI_AWLEN[0] = \<const0> ;
  assign M1_AXI_AWLOCK = \<const0> ;
  assign M1_AXI_AWPROT[2] = \<const0> ;
  assign M1_AXI_AWPROT[1] = \<const0> ;
  assign M1_AXI_AWPROT[0] = \<const0> ;
  assign M1_AXI_AWQOS[3] = \<const0> ;
  assign M1_AXI_AWQOS[2] = \<const0> ;
  assign M1_AXI_AWQOS[1] = \<const0> ;
  assign M1_AXI_AWQOS[0] = \<const0> ;
  assign M1_AXI_AWSIZE[2] = \<const0> ;
  assign M1_AXI_AWSIZE[1] = \<const0> ;
  assign M1_AXI_AWSIZE[0] = \<const0> ;
  assign M1_AXI_AWVALID = \<const0> ;
  assign M1_AXI_BREADY = \<const0> ;
  assign M1_AXI_RREADY = \<const0> ;
  assign M1_AXI_WDATA[31] = \<const0> ;
  assign M1_AXI_WDATA[30] = \<const0> ;
  assign M1_AXI_WDATA[29] = \<const0> ;
  assign M1_AXI_WDATA[28] = \<const0> ;
  assign M1_AXI_WDATA[27] = \<const0> ;
  assign M1_AXI_WDATA[26] = \<const0> ;
  assign M1_AXI_WDATA[25] = \<const0> ;
  assign M1_AXI_WDATA[24] = \<const0> ;
  assign M1_AXI_WDATA[23] = \<const0> ;
  assign M1_AXI_WDATA[22] = \<const0> ;
  assign M1_AXI_WDATA[21] = \<const0> ;
  assign M1_AXI_WDATA[20] = \<const0> ;
  assign M1_AXI_WDATA[19] = \<const0> ;
  assign M1_AXI_WDATA[18] = \<const0> ;
  assign M1_AXI_WDATA[17] = \<const0> ;
  assign M1_AXI_WDATA[16] = \<const0> ;
  assign M1_AXI_WDATA[15] = \<const0> ;
  assign M1_AXI_WDATA[14] = \<const0> ;
  assign M1_AXI_WDATA[13] = \<const0> ;
  assign M1_AXI_WDATA[12] = \<const0> ;
  assign M1_AXI_WDATA[11] = \<const0> ;
  assign M1_AXI_WDATA[10] = \<const0> ;
  assign M1_AXI_WDATA[9] = \<const0> ;
  assign M1_AXI_WDATA[8] = \<const0> ;
  assign M1_AXI_WDATA[7] = \<const0> ;
  assign M1_AXI_WDATA[6] = \<const0> ;
  assign M1_AXI_WDATA[5] = \<const0> ;
  assign M1_AXI_WDATA[4] = \<const0> ;
  assign M1_AXI_WDATA[3] = \<const0> ;
  assign M1_AXI_WDATA[2] = \<const0> ;
  assign M1_AXI_WDATA[1] = \<const0> ;
  assign M1_AXI_WDATA[0] = \<const0> ;
  assign M1_AXI_WLAST = \<const0> ;
  assign M1_AXI_WSTRB[3] = \<const0> ;
  assign M1_AXI_WSTRB[2] = \<const0> ;
  assign M1_AXI_WSTRB[1] = \<const0> ;
  assign M1_AXI_WSTRB[0] = \<const0> ;
  assign M1_AXI_WVALID = \<const0> ;
  assign M2_AXI_ARADDR[31] = \<const0> ;
  assign M2_AXI_ARADDR[30] = \<const0> ;
  assign M2_AXI_ARADDR[29] = \<const0> ;
  assign M2_AXI_ARADDR[28] = \<const0> ;
  assign M2_AXI_ARADDR[27] = \<const0> ;
  assign M2_AXI_ARADDR[26] = \<const0> ;
  assign M2_AXI_ARADDR[25] = \<const0> ;
  assign M2_AXI_ARADDR[24] = \<const0> ;
  assign M2_AXI_ARADDR[23] = \<const0> ;
  assign M2_AXI_ARADDR[22] = \<const0> ;
  assign M2_AXI_ARADDR[21] = \<const0> ;
  assign M2_AXI_ARADDR[20] = \<const0> ;
  assign M2_AXI_ARADDR[19] = \<const0> ;
  assign M2_AXI_ARADDR[18] = \<const0> ;
  assign M2_AXI_ARADDR[17] = \<const0> ;
  assign M2_AXI_ARADDR[16] = \<const0> ;
  assign M2_AXI_ARADDR[15] = \<const0> ;
  assign M2_AXI_ARADDR[14] = \<const0> ;
  assign M2_AXI_ARADDR[13] = \<const0> ;
  assign M2_AXI_ARADDR[12] = \<const0> ;
  assign M2_AXI_ARADDR[11] = \<const0> ;
  assign M2_AXI_ARADDR[10] = \<const0> ;
  assign M2_AXI_ARADDR[9] = \<const0> ;
  assign M2_AXI_ARADDR[8] = \<const0> ;
  assign M2_AXI_ARADDR[7] = \<const0> ;
  assign M2_AXI_ARADDR[6] = \<const0> ;
  assign M2_AXI_ARADDR[5] = \<const0> ;
  assign M2_AXI_ARADDR[4] = \<const0> ;
  assign M2_AXI_ARADDR[3] = \<const0> ;
  assign M2_AXI_ARADDR[2] = \<const0> ;
  assign M2_AXI_ARADDR[1] = \<const0> ;
  assign M2_AXI_ARADDR[0] = \<const0> ;
  assign M2_AXI_ARBURST[1] = \<const0> ;
  assign M2_AXI_ARBURST[0] = \<const0> ;
  assign M2_AXI_ARCACHE[3] = \<const0> ;
  assign M2_AXI_ARCACHE[2] = \<const0> ;
  assign M2_AXI_ARCACHE[1] = \<const0> ;
  assign M2_AXI_ARCACHE[0] = \<const0> ;
  assign M2_AXI_ARID[0] = \<const0> ;
  assign M2_AXI_ARLEN[7] = \<const0> ;
  assign M2_AXI_ARLEN[6] = \<const0> ;
  assign M2_AXI_ARLEN[5] = \<const0> ;
  assign M2_AXI_ARLEN[4] = \<const0> ;
  assign M2_AXI_ARLEN[3] = \<const0> ;
  assign M2_AXI_ARLEN[2] = \<const0> ;
  assign M2_AXI_ARLEN[1] = \<const0> ;
  assign M2_AXI_ARLEN[0] = \<const0> ;
  assign M2_AXI_ARLOCK = \<const0> ;
  assign M2_AXI_ARPROT[2] = \<const0> ;
  assign M2_AXI_ARPROT[1] = \<const0> ;
  assign M2_AXI_ARPROT[0] = \<const0> ;
  assign M2_AXI_ARQOS[3] = \<const0> ;
  assign M2_AXI_ARQOS[2] = \<const0> ;
  assign M2_AXI_ARQOS[1] = \<const0> ;
  assign M2_AXI_ARQOS[0] = \<const0> ;
  assign M2_AXI_ARSIZE[2] = \<const0> ;
  assign M2_AXI_ARSIZE[1] = \<const0> ;
  assign M2_AXI_ARSIZE[0] = \<const0> ;
  assign M2_AXI_ARVALID = \<const0> ;
  assign M2_AXI_AWADDR[31] = \<const0> ;
  assign M2_AXI_AWADDR[30] = \<const0> ;
  assign M2_AXI_AWADDR[29] = \<const0> ;
  assign M2_AXI_AWADDR[28] = \<const0> ;
  assign M2_AXI_AWADDR[27] = \<const0> ;
  assign M2_AXI_AWADDR[26] = \<const0> ;
  assign M2_AXI_AWADDR[25] = \<const0> ;
  assign M2_AXI_AWADDR[24] = \<const0> ;
  assign M2_AXI_AWADDR[23] = \<const0> ;
  assign M2_AXI_AWADDR[22] = \<const0> ;
  assign M2_AXI_AWADDR[21] = \<const0> ;
  assign M2_AXI_AWADDR[20] = \<const0> ;
  assign M2_AXI_AWADDR[19] = \<const0> ;
  assign M2_AXI_AWADDR[18] = \<const0> ;
  assign M2_AXI_AWADDR[17] = \<const0> ;
  assign M2_AXI_AWADDR[16] = \<const0> ;
  assign M2_AXI_AWADDR[15] = \<const0> ;
  assign M2_AXI_AWADDR[14] = \<const0> ;
  assign M2_AXI_AWADDR[13] = \<const0> ;
  assign M2_AXI_AWADDR[12] = \<const0> ;
  assign M2_AXI_AWADDR[11] = \<const0> ;
  assign M2_AXI_AWADDR[10] = \<const0> ;
  assign M2_AXI_AWADDR[9] = \<const0> ;
  assign M2_AXI_AWADDR[8] = \<const0> ;
  assign M2_AXI_AWADDR[7] = \<const0> ;
  assign M2_AXI_AWADDR[6] = \<const0> ;
  assign M2_AXI_AWADDR[5] = \<const0> ;
  assign M2_AXI_AWADDR[4] = \<const0> ;
  assign M2_AXI_AWADDR[3] = \<const0> ;
  assign M2_AXI_AWADDR[2] = \<const0> ;
  assign M2_AXI_AWADDR[1] = \<const0> ;
  assign M2_AXI_AWADDR[0] = \<const0> ;
  assign M2_AXI_AWBURST[1] = \<const0> ;
  assign M2_AXI_AWBURST[0] = \<const0> ;
  assign M2_AXI_AWCACHE[3] = \<const0> ;
  assign M2_AXI_AWCACHE[2] = \<const0> ;
  assign M2_AXI_AWCACHE[1] = \<const0> ;
  assign M2_AXI_AWCACHE[0] = \<const0> ;
  assign M2_AXI_AWID[0] = \<const0> ;
  assign M2_AXI_AWLEN[7] = \<const0> ;
  assign M2_AXI_AWLEN[6] = \<const0> ;
  assign M2_AXI_AWLEN[5] = \<const0> ;
  assign M2_AXI_AWLEN[4] = \<const0> ;
  assign M2_AXI_AWLEN[3] = \<const0> ;
  assign M2_AXI_AWLEN[2] = \<const0> ;
  assign M2_AXI_AWLEN[1] = \<const0> ;
  assign M2_AXI_AWLEN[0] = \<const0> ;
  assign M2_AXI_AWLOCK = \<const0> ;
  assign M2_AXI_AWPROT[2] = \<const0> ;
  assign M2_AXI_AWPROT[1] = \<const0> ;
  assign M2_AXI_AWPROT[0] = \<const0> ;
  assign M2_AXI_AWQOS[3] = \<const0> ;
  assign M2_AXI_AWQOS[2] = \<const0> ;
  assign M2_AXI_AWQOS[1] = \<const0> ;
  assign M2_AXI_AWQOS[0] = \<const0> ;
  assign M2_AXI_AWSIZE[2] = \<const0> ;
  assign M2_AXI_AWSIZE[1] = \<const0> ;
  assign M2_AXI_AWSIZE[0] = \<const0> ;
  assign M2_AXI_AWVALID = \<const0> ;
  assign M2_AXI_BREADY = \<const0> ;
  assign M2_AXI_RREADY = \<const0> ;
  assign M2_AXI_WDATA[31] = \<const0> ;
  assign M2_AXI_WDATA[30] = \<const0> ;
  assign M2_AXI_WDATA[29] = \<const0> ;
  assign M2_AXI_WDATA[28] = \<const0> ;
  assign M2_AXI_WDATA[27] = \<const0> ;
  assign M2_AXI_WDATA[26] = \<const0> ;
  assign M2_AXI_WDATA[25] = \<const0> ;
  assign M2_AXI_WDATA[24] = \<const0> ;
  assign M2_AXI_WDATA[23] = \<const0> ;
  assign M2_AXI_WDATA[22] = \<const0> ;
  assign M2_AXI_WDATA[21] = \<const0> ;
  assign M2_AXI_WDATA[20] = \<const0> ;
  assign M2_AXI_WDATA[19] = \<const0> ;
  assign M2_AXI_WDATA[18] = \<const0> ;
  assign M2_AXI_WDATA[17] = \<const0> ;
  assign M2_AXI_WDATA[16] = \<const0> ;
  assign M2_AXI_WDATA[15] = \<const0> ;
  assign M2_AXI_WDATA[14] = \<const0> ;
  assign M2_AXI_WDATA[13] = \<const0> ;
  assign M2_AXI_WDATA[12] = \<const0> ;
  assign M2_AXI_WDATA[11] = \<const0> ;
  assign M2_AXI_WDATA[10] = \<const0> ;
  assign M2_AXI_WDATA[9] = \<const0> ;
  assign M2_AXI_WDATA[8] = \<const0> ;
  assign M2_AXI_WDATA[7] = \<const0> ;
  assign M2_AXI_WDATA[6] = \<const0> ;
  assign M2_AXI_WDATA[5] = \<const0> ;
  assign M2_AXI_WDATA[4] = \<const0> ;
  assign M2_AXI_WDATA[3] = \<const0> ;
  assign M2_AXI_WDATA[2] = \<const0> ;
  assign M2_AXI_WDATA[1] = \<const0> ;
  assign M2_AXI_WDATA[0] = \<const0> ;
  assign M2_AXI_WLAST = \<const0> ;
  assign M2_AXI_WSTRB[3] = \<const0> ;
  assign M2_AXI_WSTRB[2] = \<const0> ;
  assign M2_AXI_WSTRB[1] = \<const0> ;
  assign M2_AXI_WSTRB[0] = \<const0> ;
  assign M2_AXI_WVALID = \<const0> ;
  assign M3_AXI_ARADDR[31] = \<const0> ;
  assign M3_AXI_ARADDR[30] = \<const0> ;
  assign M3_AXI_ARADDR[29] = \<const0> ;
  assign M3_AXI_ARADDR[28] = \<const0> ;
  assign M3_AXI_ARADDR[27] = \<const0> ;
  assign M3_AXI_ARADDR[26] = \<const0> ;
  assign M3_AXI_ARADDR[25] = \<const0> ;
  assign M3_AXI_ARADDR[24] = \<const0> ;
  assign M3_AXI_ARADDR[23] = \<const0> ;
  assign M3_AXI_ARADDR[22] = \<const0> ;
  assign M3_AXI_ARADDR[21] = \<const0> ;
  assign M3_AXI_ARADDR[20] = \<const0> ;
  assign M3_AXI_ARADDR[19] = \<const0> ;
  assign M3_AXI_ARADDR[18] = \<const0> ;
  assign M3_AXI_ARADDR[17] = \<const0> ;
  assign M3_AXI_ARADDR[16] = \<const0> ;
  assign M3_AXI_ARADDR[15] = \<const0> ;
  assign M3_AXI_ARADDR[14] = \<const0> ;
  assign M3_AXI_ARADDR[13] = \<const0> ;
  assign M3_AXI_ARADDR[12] = \<const0> ;
  assign M3_AXI_ARADDR[11] = \<const0> ;
  assign M3_AXI_ARADDR[10] = \<const0> ;
  assign M3_AXI_ARADDR[9] = \<const0> ;
  assign M3_AXI_ARADDR[8] = \<const0> ;
  assign M3_AXI_ARADDR[7] = \<const0> ;
  assign M3_AXI_ARADDR[6] = \<const0> ;
  assign M3_AXI_ARADDR[5] = \<const0> ;
  assign M3_AXI_ARADDR[4] = \<const0> ;
  assign M3_AXI_ARADDR[3] = \<const0> ;
  assign M3_AXI_ARADDR[2] = \<const0> ;
  assign M3_AXI_ARADDR[1] = \<const0> ;
  assign M3_AXI_ARADDR[0] = \<const0> ;
  assign M3_AXI_ARBURST[1] = \<const0> ;
  assign M3_AXI_ARBURST[0] = \<const0> ;
  assign M3_AXI_ARCACHE[3] = \<const0> ;
  assign M3_AXI_ARCACHE[2] = \<const0> ;
  assign M3_AXI_ARCACHE[1] = \<const0> ;
  assign M3_AXI_ARCACHE[0] = \<const0> ;
  assign M3_AXI_ARID[0] = \<const0> ;
  assign M3_AXI_ARLEN[7] = \<const0> ;
  assign M3_AXI_ARLEN[6] = \<const0> ;
  assign M3_AXI_ARLEN[5] = \<const0> ;
  assign M3_AXI_ARLEN[4] = \<const0> ;
  assign M3_AXI_ARLEN[3] = \<const0> ;
  assign M3_AXI_ARLEN[2] = \<const0> ;
  assign M3_AXI_ARLEN[1] = \<const0> ;
  assign M3_AXI_ARLEN[0] = \<const0> ;
  assign M3_AXI_ARLOCK = \<const0> ;
  assign M3_AXI_ARPROT[2] = \<const0> ;
  assign M3_AXI_ARPROT[1] = \<const0> ;
  assign M3_AXI_ARPROT[0] = \<const0> ;
  assign M3_AXI_ARQOS[3] = \<const0> ;
  assign M3_AXI_ARQOS[2] = \<const0> ;
  assign M3_AXI_ARQOS[1] = \<const0> ;
  assign M3_AXI_ARQOS[0] = \<const0> ;
  assign M3_AXI_ARSIZE[2] = \<const0> ;
  assign M3_AXI_ARSIZE[1] = \<const0> ;
  assign M3_AXI_ARSIZE[0] = \<const0> ;
  assign M3_AXI_ARVALID = \<const0> ;
  assign M3_AXI_AWADDR[31] = \<const0> ;
  assign M3_AXI_AWADDR[30] = \<const0> ;
  assign M3_AXI_AWADDR[29] = \<const0> ;
  assign M3_AXI_AWADDR[28] = \<const0> ;
  assign M3_AXI_AWADDR[27] = \<const0> ;
  assign M3_AXI_AWADDR[26] = \<const0> ;
  assign M3_AXI_AWADDR[25] = \<const0> ;
  assign M3_AXI_AWADDR[24] = \<const0> ;
  assign M3_AXI_AWADDR[23] = \<const0> ;
  assign M3_AXI_AWADDR[22] = \<const0> ;
  assign M3_AXI_AWADDR[21] = \<const0> ;
  assign M3_AXI_AWADDR[20] = \<const0> ;
  assign M3_AXI_AWADDR[19] = \<const0> ;
  assign M3_AXI_AWADDR[18] = \<const0> ;
  assign M3_AXI_AWADDR[17] = \<const0> ;
  assign M3_AXI_AWADDR[16] = \<const0> ;
  assign M3_AXI_AWADDR[15] = \<const0> ;
  assign M3_AXI_AWADDR[14] = \<const0> ;
  assign M3_AXI_AWADDR[13] = \<const0> ;
  assign M3_AXI_AWADDR[12] = \<const0> ;
  assign M3_AXI_AWADDR[11] = \<const0> ;
  assign M3_AXI_AWADDR[10] = \<const0> ;
  assign M3_AXI_AWADDR[9] = \<const0> ;
  assign M3_AXI_AWADDR[8] = \<const0> ;
  assign M3_AXI_AWADDR[7] = \<const0> ;
  assign M3_AXI_AWADDR[6] = \<const0> ;
  assign M3_AXI_AWADDR[5] = \<const0> ;
  assign M3_AXI_AWADDR[4] = \<const0> ;
  assign M3_AXI_AWADDR[3] = \<const0> ;
  assign M3_AXI_AWADDR[2] = \<const0> ;
  assign M3_AXI_AWADDR[1] = \<const0> ;
  assign M3_AXI_AWADDR[0] = \<const0> ;
  assign M3_AXI_AWBURST[1] = \<const0> ;
  assign M3_AXI_AWBURST[0] = \<const0> ;
  assign M3_AXI_AWCACHE[3] = \<const0> ;
  assign M3_AXI_AWCACHE[2] = \<const0> ;
  assign M3_AXI_AWCACHE[1] = \<const0> ;
  assign M3_AXI_AWCACHE[0] = \<const0> ;
  assign M3_AXI_AWID[0] = \<const0> ;
  assign M3_AXI_AWLEN[7] = \<const0> ;
  assign M3_AXI_AWLEN[6] = \<const0> ;
  assign M3_AXI_AWLEN[5] = \<const0> ;
  assign M3_AXI_AWLEN[4] = \<const0> ;
  assign M3_AXI_AWLEN[3] = \<const0> ;
  assign M3_AXI_AWLEN[2] = \<const0> ;
  assign M3_AXI_AWLEN[1] = \<const0> ;
  assign M3_AXI_AWLEN[0] = \<const0> ;
  assign M3_AXI_AWLOCK = \<const0> ;
  assign M3_AXI_AWPROT[2] = \<const0> ;
  assign M3_AXI_AWPROT[1] = \<const0> ;
  assign M3_AXI_AWPROT[0] = \<const0> ;
  assign M3_AXI_AWQOS[3] = \<const0> ;
  assign M3_AXI_AWQOS[2] = \<const0> ;
  assign M3_AXI_AWQOS[1] = \<const0> ;
  assign M3_AXI_AWQOS[0] = \<const0> ;
  assign M3_AXI_AWSIZE[2] = \<const0> ;
  assign M3_AXI_AWSIZE[1] = \<const0> ;
  assign M3_AXI_AWSIZE[0] = \<const0> ;
  assign M3_AXI_AWVALID = \<const0> ;
  assign M3_AXI_BREADY = \<const0> ;
  assign M3_AXI_RREADY = \<const0> ;
  assign M3_AXI_WDATA[31] = \<const0> ;
  assign M3_AXI_WDATA[30] = \<const0> ;
  assign M3_AXI_WDATA[29] = \<const0> ;
  assign M3_AXI_WDATA[28] = \<const0> ;
  assign M3_AXI_WDATA[27] = \<const0> ;
  assign M3_AXI_WDATA[26] = \<const0> ;
  assign M3_AXI_WDATA[25] = \<const0> ;
  assign M3_AXI_WDATA[24] = \<const0> ;
  assign M3_AXI_WDATA[23] = \<const0> ;
  assign M3_AXI_WDATA[22] = \<const0> ;
  assign M3_AXI_WDATA[21] = \<const0> ;
  assign M3_AXI_WDATA[20] = \<const0> ;
  assign M3_AXI_WDATA[19] = \<const0> ;
  assign M3_AXI_WDATA[18] = \<const0> ;
  assign M3_AXI_WDATA[17] = \<const0> ;
  assign M3_AXI_WDATA[16] = \<const0> ;
  assign M3_AXI_WDATA[15] = \<const0> ;
  assign M3_AXI_WDATA[14] = \<const0> ;
  assign M3_AXI_WDATA[13] = \<const0> ;
  assign M3_AXI_WDATA[12] = \<const0> ;
  assign M3_AXI_WDATA[11] = \<const0> ;
  assign M3_AXI_WDATA[10] = \<const0> ;
  assign M3_AXI_WDATA[9] = \<const0> ;
  assign M3_AXI_WDATA[8] = \<const0> ;
  assign M3_AXI_WDATA[7] = \<const0> ;
  assign M3_AXI_WDATA[6] = \<const0> ;
  assign M3_AXI_WDATA[5] = \<const0> ;
  assign M3_AXI_WDATA[4] = \<const0> ;
  assign M3_AXI_WDATA[3] = \<const0> ;
  assign M3_AXI_WDATA[2] = \<const0> ;
  assign M3_AXI_WDATA[1] = \<const0> ;
  assign M3_AXI_WDATA[0] = \<const0> ;
  assign M3_AXI_WLAST = \<const0> ;
  assign M3_AXI_WSTRB[3] = \<const0> ;
  assign M3_AXI_WSTRB[2] = \<const0> ;
  assign M3_AXI_WSTRB[1] = \<const0> ;
  assign M3_AXI_WSTRB[0] = \<const0> ;
  assign M3_AXI_WVALID = \<const0> ;
  assign S0_AXI_ACADDR[23] = \<const0> ;
  assign S0_AXI_ACADDR[22] = \<const0> ;
  assign S0_AXI_ACADDR[21] = \<const0> ;
  assign S0_AXI_ACADDR[20] = \<const0> ;
  assign S0_AXI_ACADDR[19] = \<const0> ;
  assign S0_AXI_ACADDR[18] = \<const0> ;
  assign S0_AXI_ACADDR[17] = \<const0> ;
  assign S0_AXI_ACADDR[16] = \<const0> ;
  assign S0_AXI_ACADDR[15] = \<const0> ;
  assign S0_AXI_ACADDR[14] = \<const0> ;
  assign S0_AXI_ACADDR[13] = \<const0> ;
  assign S0_AXI_ACADDR[12] = \<const0> ;
  assign S0_AXI_ACADDR[11] = \<const0> ;
  assign S0_AXI_ACADDR[10] = \<const0> ;
  assign S0_AXI_ACADDR[9] = \<const0> ;
  assign S0_AXI_ACADDR[8] = \<const0> ;
  assign S0_AXI_ACADDR[7] = \<const0> ;
  assign S0_AXI_ACADDR[6] = \<const0> ;
  assign S0_AXI_ACADDR[5] = \<const0> ;
  assign S0_AXI_ACADDR[4] = \<const0> ;
  assign S0_AXI_ACADDR[3] = \<const0> ;
  assign S0_AXI_ACADDR[2] = \<const0> ;
  assign S0_AXI_ACADDR[1] = \<const0> ;
  assign S0_AXI_ACADDR[0] = \<const0> ;
  assign S0_AXI_ACPROT[2] = \<const0> ;
  assign S0_AXI_ACPROT[1] = \<const1> ;
  assign S0_AXI_ACPROT[0] = \<const0> ;
  assign S0_AXI_ACSNOOP[3] = \<const0> ;
  assign S0_AXI_ACSNOOP[2] = \<const0> ;
  assign S0_AXI_ACSNOOP[1] = \<const0> ;
  assign S0_AXI_ACSNOOP[0] = \<const0> ;
  assign S0_AXI_ACVALID = \<const0> ;
  assign S0_AXI_CDREADY = \<const0> ;
  assign S0_AXI_CRREADY = \<const0> ;
  assign S10_AXI_ACADDR[31] = \<const0> ;
  assign S10_AXI_ACADDR[30] = \<const0> ;
  assign S10_AXI_ACADDR[29] = \<const0> ;
  assign S10_AXI_ACADDR[28] = \<const0> ;
  assign S10_AXI_ACADDR[27] = \<const0> ;
  assign S10_AXI_ACADDR[26] = \<const0> ;
  assign S10_AXI_ACADDR[25] = \<const0> ;
  assign S10_AXI_ACADDR[24] = \<const0> ;
  assign S10_AXI_ACADDR[23] = \<const0> ;
  assign S10_AXI_ACADDR[22] = \<const0> ;
  assign S10_AXI_ACADDR[21] = \<const0> ;
  assign S10_AXI_ACADDR[20] = \<const0> ;
  assign S10_AXI_ACADDR[19] = \<const0> ;
  assign S10_AXI_ACADDR[18] = \<const0> ;
  assign S10_AXI_ACADDR[17] = \<const0> ;
  assign S10_AXI_ACADDR[16] = \<const0> ;
  assign S10_AXI_ACADDR[15] = \<const0> ;
  assign S10_AXI_ACADDR[14] = \<const0> ;
  assign S10_AXI_ACADDR[13] = \<const0> ;
  assign S10_AXI_ACADDR[12] = \<const0> ;
  assign S10_AXI_ACADDR[11] = \<const0> ;
  assign S10_AXI_ACADDR[10] = \<const0> ;
  assign S10_AXI_ACADDR[9] = \<const0> ;
  assign S10_AXI_ACADDR[8] = \<const0> ;
  assign S10_AXI_ACADDR[7] = \<const0> ;
  assign S10_AXI_ACADDR[6] = \<const0> ;
  assign S10_AXI_ACADDR[5] = \<const0> ;
  assign S10_AXI_ACADDR[4] = \<const0> ;
  assign S10_AXI_ACADDR[3] = \<const0> ;
  assign S10_AXI_ACADDR[2] = \<const0> ;
  assign S10_AXI_ACADDR[1] = \<const0> ;
  assign S10_AXI_ACADDR[0] = \<const0> ;
  assign S10_AXI_ACPROT[2] = \<const0> ;
  assign S10_AXI_ACPROT[1] = \<const0> ;
  assign S10_AXI_ACPROT[0] = \<const0> ;
  assign S10_AXI_ACSNOOP[3] = \<const0> ;
  assign S10_AXI_ACSNOOP[2] = \<const0> ;
  assign S10_AXI_ACSNOOP[1] = \<const0> ;
  assign S10_AXI_ACSNOOP[0] = \<const0> ;
  assign S10_AXI_ACVALID = \<const0> ;
  assign S10_AXI_ARREADY = \<const0> ;
  assign S10_AXI_AWREADY = \<const0> ;
  assign S10_AXI_BID[0] = \<const0> ;
  assign S10_AXI_BRESP[1] = \<const0> ;
  assign S10_AXI_BRESP[0] = \<const0> ;
  assign S10_AXI_BVALID = \<const0> ;
  assign S10_AXI_CDREADY = \<const0> ;
  assign S10_AXI_CRREADY = \<const0> ;
  assign S10_AXI_GEN_ARREADY = \<const0> ;
  assign S10_AXI_GEN_AWREADY = \<const0> ;
  assign S10_AXI_GEN_BID[0] = \<const0> ;
  assign S10_AXI_GEN_BRESP[1] = \<const0> ;
  assign S10_AXI_GEN_BRESP[0] = \<const0> ;
  assign S10_AXI_GEN_BVALID = \<const0> ;
  assign S10_AXI_GEN_RDATA[31] = \<const0> ;
  assign S10_AXI_GEN_RDATA[30] = \<const0> ;
  assign S10_AXI_GEN_RDATA[29] = \<const0> ;
  assign S10_AXI_GEN_RDATA[28] = \<const0> ;
  assign S10_AXI_GEN_RDATA[27] = \<const0> ;
  assign S10_AXI_GEN_RDATA[26] = \<const0> ;
  assign S10_AXI_GEN_RDATA[25] = \<const0> ;
  assign S10_AXI_GEN_RDATA[24] = \<const0> ;
  assign S10_AXI_GEN_RDATA[23] = \<const0> ;
  assign S10_AXI_GEN_RDATA[22] = \<const0> ;
  assign S10_AXI_GEN_RDATA[21] = \<const0> ;
  assign S10_AXI_GEN_RDATA[20] = \<const0> ;
  assign S10_AXI_GEN_RDATA[19] = \<const0> ;
  assign S10_AXI_GEN_RDATA[18] = \<const0> ;
  assign S10_AXI_GEN_RDATA[17] = \<const0> ;
  assign S10_AXI_GEN_RDATA[16] = \<const0> ;
  assign S10_AXI_GEN_RDATA[15] = \<const0> ;
  assign S10_AXI_GEN_RDATA[14] = \<const0> ;
  assign S10_AXI_GEN_RDATA[13] = \<const0> ;
  assign S10_AXI_GEN_RDATA[12] = \<const0> ;
  assign S10_AXI_GEN_RDATA[11] = \<const0> ;
  assign S10_AXI_GEN_RDATA[10] = \<const0> ;
  assign S10_AXI_GEN_RDATA[9] = \<const0> ;
  assign S10_AXI_GEN_RDATA[8] = \<const0> ;
  assign S10_AXI_GEN_RDATA[7] = \<const0> ;
  assign S10_AXI_GEN_RDATA[6] = \<const0> ;
  assign S10_AXI_GEN_RDATA[5] = \<const0> ;
  assign S10_AXI_GEN_RDATA[4] = \<const0> ;
  assign S10_AXI_GEN_RDATA[3] = \<const0> ;
  assign S10_AXI_GEN_RDATA[2] = \<const0> ;
  assign S10_AXI_GEN_RDATA[1] = \<const0> ;
  assign S10_AXI_GEN_RDATA[0] = \<const0> ;
  assign S10_AXI_GEN_RID[0] = \<const0> ;
  assign S10_AXI_GEN_RLAST = \<const0> ;
  assign S10_AXI_GEN_RRESP[1] = \<const0> ;
  assign S10_AXI_GEN_RRESP[0] = \<const0> ;
  assign S10_AXI_GEN_RVALID = \<const0> ;
  assign S10_AXI_GEN_WREADY = \<const0> ;
  assign S10_AXI_RDATA[31] = \<const0> ;
  assign S10_AXI_RDATA[30] = \<const0> ;
  assign S10_AXI_RDATA[29] = \<const0> ;
  assign S10_AXI_RDATA[28] = \<const0> ;
  assign S10_AXI_RDATA[27] = \<const0> ;
  assign S10_AXI_RDATA[26] = \<const0> ;
  assign S10_AXI_RDATA[25] = \<const0> ;
  assign S10_AXI_RDATA[24] = \<const0> ;
  assign S10_AXI_RDATA[23] = \<const0> ;
  assign S10_AXI_RDATA[22] = \<const0> ;
  assign S10_AXI_RDATA[21] = \<const0> ;
  assign S10_AXI_RDATA[20] = \<const0> ;
  assign S10_AXI_RDATA[19] = \<const0> ;
  assign S10_AXI_RDATA[18] = \<const0> ;
  assign S10_AXI_RDATA[17] = \<const0> ;
  assign S10_AXI_RDATA[16] = \<const0> ;
  assign S10_AXI_RDATA[15] = \<const0> ;
  assign S10_AXI_RDATA[14] = \<const0> ;
  assign S10_AXI_RDATA[13] = \<const0> ;
  assign S10_AXI_RDATA[12] = \<const0> ;
  assign S10_AXI_RDATA[11] = \<const0> ;
  assign S10_AXI_RDATA[10] = \<const0> ;
  assign S10_AXI_RDATA[9] = \<const0> ;
  assign S10_AXI_RDATA[8] = \<const0> ;
  assign S10_AXI_RDATA[7] = \<const0> ;
  assign S10_AXI_RDATA[6] = \<const0> ;
  assign S10_AXI_RDATA[5] = \<const0> ;
  assign S10_AXI_RDATA[4] = \<const0> ;
  assign S10_AXI_RDATA[3] = \<const0> ;
  assign S10_AXI_RDATA[2] = \<const0> ;
  assign S10_AXI_RDATA[1] = \<const0> ;
  assign S10_AXI_RDATA[0] = \<const0> ;
  assign S10_AXI_RID[0] = \<const0> ;
  assign S10_AXI_RLAST = \<const0> ;
  assign S10_AXI_RRESP[1] = \<const0> ;
  assign S10_AXI_RRESP[0] = \<const0> ;
  assign S10_AXI_RVALID = \<const0> ;
  assign S10_AXI_WREADY = \<const0> ;
  assign S11_AXI_ACADDR[31] = \<const0> ;
  assign S11_AXI_ACADDR[30] = \<const0> ;
  assign S11_AXI_ACADDR[29] = \<const0> ;
  assign S11_AXI_ACADDR[28] = \<const0> ;
  assign S11_AXI_ACADDR[27] = \<const0> ;
  assign S11_AXI_ACADDR[26] = \<const0> ;
  assign S11_AXI_ACADDR[25] = \<const0> ;
  assign S11_AXI_ACADDR[24] = \<const0> ;
  assign S11_AXI_ACADDR[23] = \<const0> ;
  assign S11_AXI_ACADDR[22] = \<const0> ;
  assign S11_AXI_ACADDR[21] = \<const0> ;
  assign S11_AXI_ACADDR[20] = \<const0> ;
  assign S11_AXI_ACADDR[19] = \<const0> ;
  assign S11_AXI_ACADDR[18] = \<const0> ;
  assign S11_AXI_ACADDR[17] = \<const0> ;
  assign S11_AXI_ACADDR[16] = \<const0> ;
  assign S11_AXI_ACADDR[15] = \<const0> ;
  assign S11_AXI_ACADDR[14] = \<const0> ;
  assign S11_AXI_ACADDR[13] = \<const0> ;
  assign S11_AXI_ACADDR[12] = \<const0> ;
  assign S11_AXI_ACADDR[11] = \<const0> ;
  assign S11_AXI_ACADDR[10] = \<const0> ;
  assign S11_AXI_ACADDR[9] = \<const0> ;
  assign S11_AXI_ACADDR[8] = \<const0> ;
  assign S11_AXI_ACADDR[7] = \<const0> ;
  assign S11_AXI_ACADDR[6] = \<const0> ;
  assign S11_AXI_ACADDR[5] = \<const0> ;
  assign S11_AXI_ACADDR[4] = \<const0> ;
  assign S11_AXI_ACADDR[3] = \<const0> ;
  assign S11_AXI_ACADDR[2] = \<const0> ;
  assign S11_AXI_ACADDR[1] = \<const0> ;
  assign S11_AXI_ACADDR[0] = \<const0> ;
  assign S11_AXI_ACPROT[2] = \<const0> ;
  assign S11_AXI_ACPROT[1] = \<const0> ;
  assign S11_AXI_ACPROT[0] = \<const0> ;
  assign S11_AXI_ACSNOOP[3] = \<const0> ;
  assign S11_AXI_ACSNOOP[2] = \<const0> ;
  assign S11_AXI_ACSNOOP[1] = \<const0> ;
  assign S11_AXI_ACSNOOP[0] = \<const0> ;
  assign S11_AXI_ACVALID = \<const0> ;
  assign S11_AXI_ARREADY = \<const0> ;
  assign S11_AXI_AWREADY = \<const0> ;
  assign S11_AXI_BID[0] = \<const0> ;
  assign S11_AXI_BRESP[1] = \<const0> ;
  assign S11_AXI_BRESP[0] = \<const0> ;
  assign S11_AXI_BVALID = \<const0> ;
  assign S11_AXI_CDREADY = \<const0> ;
  assign S11_AXI_CRREADY = \<const0> ;
  assign S11_AXI_GEN_ARREADY = \<const0> ;
  assign S11_AXI_GEN_AWREADY = \<const0> ;
  assign S11_AXI_GEN_BID[0] = \<const0> ;
  assign S11_AXI_GEN_BRESP[1] = \<const0> ;
  assign S11_AXI_GEN_BRESP[0] = \<const0> ;
  assign S11_AXI_GEN_BVALID = \<const0> ;
  assign S11_AXI_GEN_RDATA[31] = \<const0> ;
  assign S11_AXI_GEN_RDATA[30] = \<const0> ;
  assign S11_AXI_GEN_RDATA[29] = \<const0> ;
  assign S11_AXI_GEN_RDATA[28] = \<const0> ;
  assign S11_AXI_GEN_RDATA[27] = \<const0> ;
  assign S11_AXI_GEN_RDATA[26] = \<const0> ;
  assign S11_AXI_GEN_RDATA[25] = \<const0> ;
  assign S11_AXI_GEN_RDATA[24] = \<const0> ;
  assign S11_AXI_GEN_RDATA[23] = \<const0> ;
  assign S11_AXI_GEN_RDATA[22] = \<const0> ;
  assign S11_AXI_GEN_RDATA[21] = \<const0> ;
  assign S11_AXI_GEN_RDATA[20] = \<const0> ;
  assign S11_AXI_GEN_RDATA[19] = \<const0> ;
  assign S11_AXI_GEN_RDATA[18] = \<const0> ;
  assign S11_AXI_GEN_RDATA[17] = \<const0> ;
  assign S11_AXI_GEN_RDATA[16] = \<const0> ;
  assign S11_AXI_GEN_RDATA[15] = \<const0> ;
  assign S11_AXI_GEN_RDATA[14] = \<const0> ;
  assign S11_AXI_GEN_RDATA[13] = \<const0> ;
  assign S11_AXI_GEN_RDATA[12] = \<const0> ;
  assign S11_AXI_GEN_RDATA[11] = \<const0> ;
  assign S11_AXI_GEN_RDATA[10] = \<const0> ;
  assign S11_AXI_GEN_RDATA[9] = \<const0> ;
  assign S11_AXI_GEN_RDATA[8] = \<const0> ;
  assign S11_AXI_GEN_RDATA[7] = \<const0> ;
  assign S11_AXI_GEN_RDATA[6] = \<const0> ;
  assign S11_AXI_GEN_RDATA[5] = \<const0> ;
  assign S11_AXI_GEN_RDATA[4] = \<const0> ;
  assign S11_AXI_GEN_RDATA[3] = \<const0> ;
  assign S11_AXI_GEN_RDATA[2] = \<const0> ;
  assign S11_AXI_GEN_RDATA[1] = \<const0> ;
  assign S11_AXI_GEN_RDATA[0] = \<const0> ;
  assign S11_AXI_GEN_RID[0] = \<const0> ;
  assign S11_AXI_GEN_RLAST = \<const0> ;
  assign S11_AXI_GEN_RRESP[1] = \<const0> ;
  assign S11_AXI_GEN_RRESP[0] = \<const0> ;
  assign S11_AXI_GEN_RVALID = \<const0> ;
  assign S11_AXI_GEN_WREADY = \<const0> ;
  assign S11_AXI_RDATA[31] = \<const0> ;
  assign S11_AXI_RDATA[30] = \<const0> ;
  assign S11_AXI_RDATA[29] = \<const0> ;
  assign S11_AXI_RDATA[28] = \<const0> ;
  assign S11_AXI_RDATA[27] = \<const0> ;
  assign S11_AXI_RDATA[26] = \<const0> ;
  assign S11_AXI_RDATA[25] = \<const0> ;
  assign S11_AXI_RDATA[24] = \<const0> ;
  assign S11_AXI_RDATA[23] = \<const0> ;
  assign S11_AXI_RDATA[22] = \<const0> ;
  assign S11_AXI_RDATA[21] = \<const0> ;
  assign S11_AXI_RDATA[20] = \<const0> ;
  assign S11_AXI_RDATA[19] = \<const0> ;
  assign S11_AXI_RDATA[18] = \<const0> ;
  assign S11_AXI_RDATA[17] = \<const0> ;
  assign S11_AXI_RDATA[16] = \<const0> ;
  assign S11_AXI_RDATA[15] = \<const0> ;
  assign S11_AXI_RDATA[14] = \<const0> ;
  assign S11_AXI_RDATA[13] = \<const0> ;
  assign S11_AXI_RDATA[12] = \<const0> ;
  assign S11_AXI_RDATA[11] = \<const0> ;
  assign S11_AXI_RDATA[10] = \<const0> ;
  assign S11_AXI_RDATA[9] = \<const0> ;
  assign S11_AXI_RDATA[8] = \<const0> ;
  assign S11_AXI_RDATA[7] = \<const0> ;
  assign S11_AXI_RDATA[6] = \<const0> ;
  assign S11_AXI_RDATA[5] = \<const0> ;
  assign S11_AXI_RDATA[4] = \<const0> ;
  assign S11_AXI_RDATA[3] = \<const0> ;
  assign S11_AXI_RDATA[2] = \<const0> ;
  assign S11_AXI_RDATA[1] = \<const0> ;
  assign S11_AXI_RDATA[0] = \<const0> ;
  assign S11_AXI_RID[0] = \<const0> ;
  assign S11_AXI_RLAST = \<const0> ;
  assign S11_AXI_RRESP[1] = \<const0> ;
  assign S11_AXI_RRESP[0] = \<const0> ;
  assign S11_AXI_RVALID = \<const0> ;
  assign S11_AXI_WREADY = \<const0> ;
  assign S12_AXI_ACADDR[31] = \<const0> ;
  assign S12_AXI_ACADDR[30] = \<const0> ;
  assign S12_AXI_ACADDR[29] = \<const0> ;
  assign S12_AXI_ACADDR[28] = \<const0> ;
  assign S12_AXI_ACADDR[27] = \<const0> ;
  assign S12_AXI_ACADDR[26] = \<const0> ;
  assign S12_AXI_ACADDR[25] = \<const0> ;
  assign S12_AXI_ACADDR[24] = \<const0> ;
  assign S12_AXI_ACADDR[23] = \<const0> ;
  assign S12_AXI_ACADDR[22] = \<const0> ;
  assign S12_AXI_ACADDR[21] = \<const0> ;
  assign S12_AXI_ACADDR[20] = \<const0> ;
  assign S12_AXI_ACADDR[19] = \<const0> ;
  assign S12_AXI_ACADDR[18] = \<const0> ;
  assign S12_AXI_ACADDR[17] = \<const0> ;
  assign S12_AXI_ACADDR[16] = \<const0> ;
  assign S12_AXI_ACADDR[15] = \<const0> ;
  assign S12_AXI_ACADDR[14] = \<const0> ;
  assign S12_AXI_ACADDR[13] = \<const0> ;
  assign S12_AXI_ACADDR[12] = \<const0> ;
  assign S12_AXI_ACADDR[11] = \<const0> ;
  assign S12_AXI_ACADDR[10] = \<const0> ;
  assign S12_AXI_ACADDR[9] = \<const0> ;
  assign S12_AXI_ACADDR[8] = \<const0> ;
  assign S12_AXI_ACADDR[7] = \<const0> ;
  assign S12_AXI_ACADDR[6] = \<const0> ;
  assign S12_AXI_ACADDR[5] = \<const0> ;
  assign S12_AXI_ACADDR[4] = \<const0> ;
  assign S12_AXI_ACADDR[3] = \<const0> ;
  assign S12_AXI_ACADDR[2] = \<const0> ;
  assign S12_AXI_ACADDR[1] = \<const0> ;
  assign S12_AXI_ACADDR[0] = \<const0> ;
  assign S12_AXI_ACPROT[2] = \<const0> ;
  assign S12_AXI_ACPROT[1] = \<const0> ;
  assign S12_AXI_ACPROT[0] = \<const0> ;
  assign S12_AXI_ACSNOOP[3] = \<const0> ;
  assign S12_AXI_ACSNOOP[2] = \<const0> ;
  assign S12_AXI_ACSNOOP[1] = \<const0> ;
  assign S12_AXI_ACSNOOP[0] = \<const0> ;
  assign S12_AXI_ACVALID = \<const0> ;
  assign S12_AXI_ARREADY = \<const0> ;
  assign S12_AXI_AWREADY = \<const0> ;
  assign S12_AXI_BID[0] = \<const0> ;
  assign S12_AXI_BRESP[1] = \<const0> ;
  assign S12_AXI_BRESP[0] = \<const0> ;
  assign S12_AXI_BVALID = \<const0> ;
  assign S12_AXI_CDREADY = \<const0> ;
  assign S12_AXI_CRREADY = \<const0> ;
  assign S12_AXI_GEN_ARREADY = \<const0> ;
  assign S12_AXI_GEN_AWREADY = \<const0> ;
  assign S12_AXI_GEN_BID[0] = \<const0> ;
  assign S12_AXI_GEN_BRESP[1] = \<const0> ;
  assign S12_AXI_GEN_BRESP[0] = \<const0> ;
  assign S12_AXI_GEN_BVALID = \<const0> ;
  assign S12_AXI_GEN_RDATA[31] = \<const0> ;
  assign S12_AXI_GEN_RDATA[30] = \<const0> ;
  assign S12_AXI_GEN_RDATA[29] = \<const0> ;
  assign S12_AXI_GEN_RDATA[28] = \<const0> ;
  assign S12_AXI_GEN_RDATA[27] = \<const0> ;
  assign S12_AXI_GEN_RDATA[26] = \<const0> ;
  assign S12_AXI_GEN_RDATA[25] = \<const0> ;
  assign S12_AXI_GEN_RDATA[24] = \<const0> ;
  assign S12_AXI_GEN_RDATA[23] = \<const0> ;
  assign S12_AXI_GEN_RDATA[22] = \<const0> ;
  assign S12_AXI_GEN_RDATA[21] = \<const0> ;
  assign S12_AXI_GEN_RDATA[20] = \<const0> ;
  assign S12_AXI_GEN_RDATA[19] = \<const0> ;
  assign S12_AXI_GEN_RDATA[18] = \<const0> ;
  assign S12_AXI_GEN_RDATA[17] = \<const0> ;
  assign S12_AXI_GEN_RDATA[16] = \<const0> ;
  assign S12_AXI_GEN_RDATA[15] = \<const0> ;
  assign S12_AXI_GEN_RDATA[14] = \<const0> ;
  assign S12_AXI_GEN_RDATA[13] = \<const0> ;
  assign S12_AXI_GEN_RDATA[12] = \<const0> ;
  assign S12_AXI_GEN_RDATA[11] = \<const0> ;
  assign S12_AXI_GEN_RDATA[10] = \<const0> ;
  assign S12_AXI_GEN_RDATA[9] = \<const0> ;
  assign S12_AXI_GEN_RDATA[8] = \<const0> ;
  assign S12_AXI_GEN_RDATA[7] = \<const0> ;
  assign S12_AXI_GEN_RDATA[6] = \<const0> ;
  assign S12_AXI_GEN_RDATA[5] = \<const0> ;
  assign S12_AXI_GEN_RDATA[4] = \<const0> ;
  assign S12_AXI_GEN_RDATA[3] = \<const0> ;
  assign S12_AXI_GEN_RDATA[2] = \<const0> ;
  assign S12_AXI_GEN_RDATA[1] = \<const0> ;
  assign S12_AXI_GEN_RDATA[0] = \<const0> ;
  assign S12_AXI_GEN_RID[0] = \<const0> ;
  assign S12_AXI_GEN_RLAST = \<const0> ;
  assign S12_AXI_GEN_RRESP[1] = \<const0> ;
  assign S12_AXI_GEN_RRESP[0] = \<const0> ;
  assign S12_AXI_GEN_RVALID = \<const0> ;
  assign S12_AXI_GEN_WREADY = \<const0> ;
  assign S12_AXI_RDATA[31] = \<const0> ;
  assign S12_AXI_RDATA[30] = \<const0> ;
  assign S12_AXI_RDATA[29] = \<const0> ;
  assign S12_AXI_RDATA[28] = \<const0> ;
  assign S12_AXI_RDATA[27] = \<const0> ;
  assign S12_AXI_RDATA[26] = \<const0> ;
  assign S12_AXI_RDATA[25] = \<const0> ;
  assign S12_AXI_RDATA[24] = \<const0> ;
  assign S12_AXI_RDATA[23] = \<const0> ;
  assign S12_AXI_RDATA[22] = \<const0> ;
  assign S12_AXI_RDATA[21] = \<const0> ;
  assign S12_AXI_RDATA[20] = \<const0> ;
  assign S12_AXI_RDATA[19] = \<const0> ;
  assign S12_AXI_RDATA[18] = \<const0> ;
  assign S12_AXI_RDATA[17] = \<const0> ;
  assign S12_AXI_RDATA[16] = \<const0> ;
  assign S12_AXI_RDATA[15] = \<const0> ;
  assign S12_AXI_RDATA[14] = \<const0> ;
  assign S12_AXI_RDATA[13] = \<const0> ;
  assign S12_AXI_RDATA[12] = \<const0> ;
  assign S12_AXI_RDATA[11] = \<const0> ;
  assign S12_AXI_RDATA[10] = \<const0> ;
  assign S12_AXI_RDATA[9] = \<const0> ;
  assign S12_AXI_RDATA[8] = \<const0> ;
  assign S12_AXI_RDATA[7] = \<const0> ;
  assign S12_AXI_RDATA[6] = \<const0> ;
  assign S12_AXI_RDATA[5] = \<const0> ;
  assign S12_AXI_RDATA[4] = \<const0> ;
  assign S12_AXI_RDATA[3] = \<const0> ;
  assign S12_AXI_RDATA[2] = \<const0> ;
  assign S12_AXI_RDATA[1] = \<const0> ;
  assign S12_AXI_RDATA[0] = \<const0> ;
  assign S12_AXI_RID[0] = \<const0> ;
  assign S12_AXI_RLAST = \<const0> ;
  assign S12_AXI_RRESP[1] = \<const0> ;
  assign S12_AXI_RRESP[0] = \<const0> ;
  assign S12_AXI_RVALID = \<const0> ;
  assign S12_AXI_WREADY = \<const0> ;
  assign S13_AXI_ACADDR[31] = \<const0> ;
  assign S13_AXI_ACADDR[30] = \<const0> ;
  assign S13_AXI_ACADDR[29] = \<const0> ;
  assign S13_AXI_ACADDR[28] = \<const0> ;
  assign S13_AXI_ACADDR[27] = \<const0> ;
  assign S13_AXI_ACADDR[26] = \<const0> ;
  assign S13_AXI_ACADDR[25] = \<const0> ;
  assign S13_AXI_ACADDR[24] = \<const0> ;
  assign S13_AXI_ACADDR[23] = \<const0> ;
  assign S13_AXI_ACADDR[22] = \<const0> ;
  assign S13_AXI_ACADDR[21] = \<const0> ;
  assign S13_AXI_ACADDR[20] = \<const0> ;
  assign S13_AXI_ACADDR[19] = \<const0> ;
  assign S13_AXI_ACADDR[18] = \<const0> ;
  assign S13_AXI_ACADDR[17] = \<const0> ;
  assign S13_AXI_ACADDR[16] = \<const0> ;
  assign S13_AXI_ACADDR[15] = \<const0> ;
  assign S13_AXI_ACADDR[14] = \<const0> ;
  assign S13_AXI_ACADDR[13] = \<const0> ;
  assign S13_AXI_ACADDR[12] = \<const0> ;
  assign S13_AXI_ACADDR[11] = \<const0> ;
  assign S13_AXI_ACADDR[10] = \<const0> ;
  assign S13_AXI_ACADDR[9] = \<const0> ;
  assign S13_AXI_ACADDR[8] = \<const0> ;
  assign S13_AXI_ACADDR[7] = \<const0> ;
  assign S13_AXI_ACADDR[6] = \<const0> ;
  assign S13_AXI_ACADDR[5] = \<const0> ;
  assign S13_AXI_ACADDR[4] = \<const0> ;
  assign S13_AXI_ACADDR[3] = \<const0> ;
  assign S13_AXI_ACADDR[2] = \<const0> ;
  assign S13_AXI_ACADDR[1] = \<const0> ;
  assign S13_AXI_ACADDR[0] = \<const0> ;
  assign S13_AXI_ACPROT[2] = \<const0> ;
  assign S13_AXI_ACPROT[1] = \<const0> ;
  assign S13_AXI_ACPROT[0] = \<const0> ;
  assign S13_AXI_ACSNOOP[3] = \<const0> ;
  assign S13_AXI_ACSNOOP[2] = \<const0> ;
  assign S13_AXI_ACSNOOP[1] = \<const0> ;
  assign S13_AXI_ACSNOOP[0] = \<const0> ;
  assign S13_AXI_ACVALID = \<const0> ;
  assign S13_AXI_ARREADY = \<const0> ;
  assign S13_AXI_AWREADY = \<const0> ;
  assign S13_AXI_BID[0] = \<const0> ;
  assign S13_AXI_BRESP[1] = \<const0> ;
  assign S13_AXI_BRESP[0] = \<const0> ;
  assign S13_AXI_BVALID = \<const0> ;
  assign S13_AXI_CDREADY = \<const0> ;
  assign S13_AXI_CRREADY = \<const0> ;
  assign S13_AXI_GEN_ARREADY = \<const0> ;
  assign S13_AXI_GEN_AWREADY = \<const0> ;
  assign S13_AXI_GEN_BID[0] = \<const0> ;
  assign S13_AXI_GEN_BRESP[1] = \<const0> ;
  assign S13_AXI_GEN_BRESP[0] = \<const0> ;
  assign S13_AXI_GEN_BVALID = \<const0> ;
  assign S13_AXI_GEN_RDATA[31] = \<const0> ;
  assign S13_AXI_GEN_RDATA[30] = \<const0> ;
  assign S13_AXI_GEN_RDATA[29] = \<const0> ;
  assign S13_AXI_GEN_RDATA[28] = \<const0> ;
  assign S13_AXI_GEN_RDATA[27] = \<const0> ;
  assign S13_AXI_GEN_RDATA[26] = \<const0> ;
  assign S13_AXI_GEN_RDATA[25] = \<const0> ;
  assign S13_AXI_GEN_RDATA[24] = \<const0> ;
  assign S13_AXI_GEN_RDATA[23] = \<const0> ;
  assign S13_AXI_GEN_RDATA[22] = \<const0> ;
  assign S13_AXI_GEN_RDATA[21] = \<const0> ;
  assign S13_AXI_GEN_RDATA[20] = \<const0> ;
  assign S13_AXI_GEN_RDATA[19] = \<const0> ;
  assign S13_AXI_GEN_RDATA[18] = \<const0> ;
  assign S13_AXI_GEN_RDATA[17] = \<const0> ;
  assign S13_AXI_GEN_RDATA[16] = \<const0> ;
  assign S13_AXI_GEN_RDATA[15] = \<const0> ;
  assign S13_AXI_GEN_RDATA[14] = \<const0> ;
  assign S13_AXI_GEN_RDATA[13] = \<const0> ;
  assign S13_AXI_GEN_RDATA[12] = \<const0> ;
  assign S13_AXI_GEN_RDATA[11] = \<const0> ;
  assign S13_AXI_GEN_RDATA[10] = \<const0> ;
  assign S13_AXI_GEN_RDATA[9] = \<const0> ;
  assign S13_AXI_GEN_RDATA[8] = \<const0> ;
  assign S13_AXI_GEN_RDATA[7] = \<const0> ;
  assign S13_AXI_GEN_RDATA[6] = \<const0> ;
  assign S13_AXI_GEN_RDATA[5] = \<const0> ;
  assign S13_AXI_GEN_RDATA[4] = \<const0> ;
  assign S13_AXI_GEN_RDATA[3] = \<const0> ;
  assign S13_AXI_GEN_RDATA[2] = \<const0> ;
  assign S13_AXI_GEN_RDATA[1] = \<const0> ;
  assign S13_AXI_GEN_RDATA[0] = \<const0> ;
  assign S13_AXI_GEN_RID[0] = \<const0> ;
  assign S13_AXI_GEN_RLAST = \<const0> ;
  assign S13_AXI_GEN_RRESP[1] = \<const0> ;
  assign S13_AXI_GEN_RRESP[0] = \<const0> ;
  assign S13_AXI_GEN_RVALID = \<const0> ;
  assign S13_AXI_GEN_WREADY = \<const0> ;
  assign S13_AXI_RDATA[31] = \<const0> ;
  assign S13_AXI_RDATA[30] = \<const0> ;
  assign S13_AXI_RDATA[29] = \<const0> ;
  assign S13_AXI_RDATA[28] = \<const0> ;
  assign S13_AXI_RDATA[27] = \<const0> ;
  assign S13_AXI_RDATA[26] = \<const0> ;
  assign S13_AXI_RDATA[25] = \<const0> ;
  assign S13_AXI_RDATA[24] = \<const0> ;
  assign S13_AXI_RDATA[23] = \<const0> ;
  assign S13_AXI_RDATA[22] = \<const0> ;
  assign S13_AXI_RDATA[21] = \<const0> ;
  assign S13_AXI_RDATA[20] = \<const0> ;
  assign S13_AXI_RDATA[19] = \<const0> ;
  assign S13_AXI_RDATA[18] = \<const0> ;
  assign S13_AXI_RDATA[17] = \<const0> ;
  assign S13_AXI_RDATA[16] = \<const0> ;
  assign S13_AXI_RDATA[15] = \<const0> ;
  assign S13_AXI_RDATA[14] = \<const0> ;
  assign S13_AXI_RDATA[13] = \<const0> ;
  assign S13_AXI_RDATA[12] = \<const0> ;
  assign S13_AXI_RDATA[11] = \<const0> ;
  assign S13_AXI_RDATA[10] = \<const0> ;
  assign S13_AXI_RDATA[9] = \<const0> ;
  assign S13_AXI_RDATA[8] = \<const0> ;
  assign S13_AXI_RDATA[7] = \<const0> ;
  assign S13_AXI_RDATA[6] = \<const0> ;
  assign S13_AXI_RDATA[5] = \<const0> ;
  assign S13_AXI_RDATA[4] = \<const0> ;
  assign S13_AXI_RDATA[3] = \<const0> ;
  assign S13_AXI_RDATA[2] = \<const0> ;
  assign S13_AXI_RDATA[1] = \<const0> ;
  assign S13_AXI_RDATA[0] = \<const0> ;
  assign S13_AXI_RID[0] = \<const0> ;
  assign S13_AXI_RLAST = \<const0> ;
  assign S13_AXI_RRESP[1] = \<const0> ;
  assign S13_AXI_RRESP[0] = \<const0> ;
  assign S13_AXI_RVALID = \<const0> ;
  assign S13_AXI_WREADY = \<const0> ;
  assign S14_AXI_ACADDR[31] = \<const0> ;
  assign S14_AXI_ACADDR[30] = \<const0> ;
  assign S14_AXI_ACADDR[29] = \<const0> ;
  assign S14_AXI_ACADDR[28] = \<const0> ;
  assign S14_AXI_ACADDR[27] = \<const0> ;
  assign S14_AXI_ACADDR[26] = \<const0> ;
  assign S14_AXI_ACADDR[25] = \<const0> ;
  assign S14_AXI_ACADDR[24] = \<const0> ;
  assign S14_AXI_ACADDR[23] = \<const0> ;
  assign S14_AXI_ACADDR[22] = \<const0> ;
  assign S14_AXI_ACADDR[21] = \<const0> ;
  assign S14_AXI_ACADDR[20] = \<const0> ;
  assign S14_AXI_ACADDR[19] = \<const0> ;
  assign S14_AXI_ACADDR[18] = \<const0> ;
  assign S14_AXI_ACADDR[17] = \<const0> ;
  assign S14_AXI_ACADDR[16] = \<const0> ;
  assign S14_AXI_ACADDR[15] = \<const0> ;
  assign S14_AXI_ACADDR[14] = \<const0> ;
  assign S14_AXI_ACADDR[13] = \<const0> ;
  assign S14_AXI_ACADDR[12] = \<const0> ;
  assign S14_AXI_ACADDR[11] = \<const0> ;
  assign S14_AXI_ACADDR[10] = \<const0> ;
  assign S14_AXI_ACADDR[9] = \<const0> ;
  assign S14_AXI_ACADDR[8] = \<const0> ;
  assign S14_AXI_ACADDR[7] = \<const0> ;
  assign S14_AXI_ACADDR[6] = \<const0> ;
  assign S14_AXI_ACADDR[5] = \<const0> ;
  assign S14_AXI_ACADDR[4] = \<const0> ;
  assign S14_AXI_ACADDR[3] = \<const0> ;
  assign S14_AXI_ACADDR[2] = \<const0> ;
  assign S14_AXI_ACADDR[1] = \<const0> ;
  assign S14_AXI_ACADDR[0] = \<const0> ;
  assign S14_AXI_ACPROT[2] = \<const0> ;
  assign S14_AXI_ACPROT[1] = \<const0> ;
  assign S14_AXI_ACPROT[0] = \<const0> ;
  assign S14_AXI_ACSNOOP[3] = \<const0> ;
  assign S14_AXI_ACSNOOP[2] = \<const0> ;
  assign S14_AXI_ACSNOOP[1] = \<const0> ;
  assign S14_AXI_ACSNOOP[0] = \<const0> ;
  assign S14_AXI_ACVALID = \<const0> ;
  assign S14_AXI_ARREADY = \<const0> ;
  assign S14_AXI_AWREADY = \<const0> ;
  assign S14_AXI_BID[0] = \<const0> ;
  assign S14_AXI_BRESP[1] = \<const0> ;
  assign S14_AXI_BRESP[0] = \<const0> ;
  assign S14_AXI_BVALID = \<const0> ;
  assign S14_AXI_CDREADY = \<const0> ;
  assign S14_AXI_CRREADY = \<const0> ;
  assign S14_AXI_GEN_ARREADY = \<const0> ;
  assign S14_AXI_GEN_AWREADY = \<const0> ;
  assign S14_AXI_GEN_BID[0] = \<const0> ;
  assign S14_AXI_GEN_BRESP[1] = \<const0> ;
  assign S14_AXI_GEN_BRESP[0] = \<const0> ;
  assign S14_AXI_GEN_BVALID = \<const0> ;
  assign S14_AXI_GEN_RDATA[31] = \<const0> ;
  assign S14_AXI_GEN_RDATA[30] = \<const0> ;
  assign S14_AXI_GEN_RDATA[29] = \<const0> ;
  assign S14_AXI_GEN_RDATA[28] = \<const0> ;
  assign S14_AXI_GEN_RDATA[27] = \<const0> ;
  assign S14_AXI_GEN_RDATA[26] = \<const0> ;
  assign S14_AXI_GEN_RDATA[25] = \<const0> ;
  assign S14_AXI_GEN_RDATA[24] = \<const0> ;
  assign S14_AXI_GEN_RDATA[23] = \<const0> ;
  assign S14_AXI_GEN_RDATA[22] = \<const0> ;
  assign S14_AXI_GEN_RDATA[21] = \<const0> ;
  assign S14_AXI_GEN_RDATA[20] = \<const0> ;
  assign S14_AXI_GEN_RDATA[19] = \<const0> ;
  assign S14_AXI_GEN_RDATA[18] = \<const0> ;
  assign S14_AXI_GEN_RDATA[17] = \<const0> ;
  assign S14_AXI_GEN_RDATA[16] = \<const0> ;
  assign S14_AXI_GEN_RDATA[15] = \<const0> ;
  assign S14_AXI_GEN_RDATA[14] = \<const0> ;
  assign S14_AXI_GEN_RDATA[13] = \<const0> ;
  assign S14_AXI_GEN_RDATA[12] = \<const0> ;
  assign S14_AXI_GEN_RDATA[11] = \<const0> ;
  assign S14_AXI_GEN_RDATA[10] = \<const0> ;
  assign S14_AXI_GEN_RDATA[9] = \<const0> ;
  assign S14_AXI_GEN_RDATA[8] = \<const0> ;
  assign S14_AXI_GEN_RDATA[7] = \<const0> ;
  assign S14_AXI_GEN_RDATA[6] = \<const0> ;
  assign S14_AXI_GEN_RDATA[5] = \<const0> ;
  assign S14_AXI_GEN_RDATA[4] = \<const0> ;
  assign S14_AXI_GEN_RDATA[3] = \<const0> ;
  assign S14_AXI_GEN_RDATA[2] = \<const0> ;
  assign S14_AXI_GEN_RDATA[1] = \<const0> ;
  assign S14_AXI_GEN_RDATA[0] = \<const0> ;
  assign S14_AXI_GEN_RID[0] = \<const0> ;
  assign S14_AXI_GEN_RLAST = \<const0> ;
  assign S14_AXI_GEN_RRESP[1] = \<const0> ;
  assign S14_AXI_GEN_RRESP[0] = \<const0> ;
  assign S14_AXI_GEN_RVALID = \<const0> ;
  assign S14_AXI_GEN_WREADY = \<const0> ;
  assign S14_AXI_RDATA[31] = \<const0> ;
  assign S14_AXI_RDATA[30] = \<const0> ;
  assign S14_AXI_RDATA[29] = \<const0> ;
  assign S14_AXI_RDATA[28] = \<const0> ;
  assign S14_AXI_RDATA[27] = \<const0> ;
  assign S14_AXI_RDATA[26] = \<const0> ;
  assign S14_AXI_RDATA[25] = \<const0> ;
  assign S14_AXI_RDATA[24] = \<const0> ;
  assign S14_AXI_RDATA[23] = \<const0> ;
  assign S14_AXI_RDATA[22] = \<const0> ;
  assign S14_AXI_RDATA[21] = \<const0> ;
  assign S14_AXI_RDATA[20] = \<const0> ;
  assign S14_AXI_RDATA[19] = \<const0> ;
  assign S14_AXI_RDATA[18] = \<const0> ;
  assign S14_AXI_RDATA[17] = \<const0> ;
  assign S14_AXI_RDATA[16] = \<const0> ;
  assign S14_AXI_RDATA[15] = \<const0> ;
  assign S14_AXI_RDATA[14] = \<const0> ;
  assign S14_AXI_RDATA[13] = \<const0> ;
  assign S14_AXI_RDATA[12] = \<const0> ;
  assign S14_AXI_RDATA[11] = \<const0> ;
  assign S14_AXI_RDATA[10] = \<const0> ;
  assign S14_AXI_RDATA[9] = \<const0> ;
  assign S14_AXI_RDATA[8] = \<const0> ;
  assign S14_AXI_RDATA[7] = \<const0> ;
  assign S14_AXI_RDATA[6] = \<const0> ;
  assign S14_AXI_RDATA[5] = \<const0> ;
  assign S14_AXI_RDATA[4] = \<const0> ;
  assign S14_AXI_RDATA[3] = \<const0> ;
  assign S14_AXI_RDATA[2] = \<const0> ;
  assign S14_AXI_RDATA[1] = \<const0> ;
  assign S14_AXI_RDATA[0] = \<const0> ;
  assign S14_AXI_RID[0] = \<const0> ;
  assign S14_AXI_RLAST = \<const0> ;
  assign S14_AXI_RRESP[1] = \<const0> ;
  assign S14_AXI_RRESP[0] = \<const0> ;
  assign S14_AXI_RVALID = \<const0> ;
  assign S14_AXI_WREADY = \<const0> ;
  assign S15_AXI_ACADDR[31] = \<const0> ;
  assign S15_AXI_ACADDR[30] = \<const0> ;
  assign S15_AXI_ACADDR[29] = \<const0> ;
  assign S15_AXI_ACADDR[28] = \<const0> ;
  assign S15_AXI_ACADDR[27] = \<const0> ;
  assign S15_AXI_ACADDR[26] = \<const0> ;
  assign S15_AXI_ACADDR[25] = \<const0> ;
  assign S15_AXI_ACADDR[24] = \<const0> ;
  assign S15_AXI_ACADDR[23] = \<const0> ;
  assign S15_AXI_ACADDR[22] = \<const0> ;
  assign S15_AXI_ACADDR[21] = \<const0> ;
  assign S15_AXI_ACADDR[20] = \<const0> ;
  assign S15_AXI_ACADDR[19] = \<const0> ;
  assign S15_AXI_ACADDR[18] = \<const0> ;
  assign S15_AXI_ACADDR[17] = \<const0> ;
  assign S15_AXI_ACADDR[16] = \<const0> ;
  assign S15_AXI_ACADDR[15] = \<const0> ;
  assign S15_AXI_ACADDR[14] = \<const0> ;
  assign S15_AXI_ACADDR[13] = \<const0> ;
  assign S15_AXI_ACADDR[12] = \<const0> ;
  assign S15_AXI_ACADDR[11] = \<const0> ;
  assign S15_AXI_ACADDR[10] = \<const0> ;
  assign S15_AXI_ACADDR[9] = \<const0> ;
  assign S15_AXI_ACADDR[8] = \<const0> ;
  assign S15_AXI_ACADDR[7] = \<const0> ;
  assign S15_AXI_ACADDR[6] = \<const0> ;
  assign S15_AXI_ACADDR[5] = \<const0> ;
  assign S15_AXI_ACADDR[4] = \<const0> ;
  assign S15_AXI_ACADDR[3] = \<const0> ;
  assign S15_AXI_ACADDR[2] = \<const0> ;
  assign S15_AXI_ACADDR[1] = \<const0> ;
  assign S15_AXI_ACADDR[0] = \<const0> ;
  assign S15_AXI_ACPROT[2] = \<const0> ;
  assign S15_AXI_ACPROT[1] = \<const0> ;
  assign S15_AXI_ACPROT[0] = \<const0> ;
  assign S15_AXI_ACSNOOP[3] = \<const0> ;
  assign S15_AXI_ACSNOOP[2] = \<const0> ;
  assign S15_AXI_ACSNOOP[1] = \<const0> ;
  assign S15_AXI_ACSNOOP[0] = \<const0> ;
  assign S15_AXI_ACVALID = \<const0> ;
  assign S15_AXI_ARREADY = \<const0> ;
  assign S15_AXI_AWREADY = \<const0> ;
  assign S15_AXI_BID[0] = \<const0> ;
  assign S15_AXI_BRESP[1] = \<const0> ;
  assign S15_AXI_BRESP[0] = \<const0> ;
  assign S15_AXI_BVALID = \<const0> ;
  assign S15_AXI_CDREADY = \<const0> ;
  assign S15_AXI_CRREADY = \<const0> ;
  assign S15_AXI_GEN_ARREADY = \<const0> ;
  assign S15_AXI_GEN_AWREADY = \<const0> ;
  assign S15_AXI_GEN_BID[0] = \<const0> ;
  assign S15_AXI_GEN_BRESP[1] = \<const0> ;
  assign S15_AXI_GEN_BRESP[0] = \<const0> ;
  assign S15_AXI_GEN_BVALID = \<const0> ;
  assign S15_AXI_GEN_RDATA[31] = \<const0> ;
  assign S15_AXI_GEN_RDATA[30] = \<const0> ;
  assign S15_AXI_GEN_RDATA[29] = \<const0> ;
  assign S15_AXI_GEN_RDATA[28] = \<const0> ;
  assign S15_AXI_GEN_RDATA[27] = \<const0> ;
  assign S15_AXI_GEN_RDATA[26] = \<const0> ;
  assign S15_AXI_GEN_RDATA[25] = \<const0> ;
  assign S15_AXI_GEN_RDATA[24] = \<const0> ;
  assign S15_AXI_GEN_RDATA[23] = \<const0> ;
  assign S15_AXI_GEN_RDATA[22] = \<const0> ;
  assign S15_AXI_GEN_RDATA[21] = \<const0> ;
  assign S15_AXI_GEN_RDATA[20] = \<const0> ;
  assign S15_AXI_GEN_RDATA[19] = \<const0> ;
  assign S15_AXI_GEN_RDATA[18] = \<const0> ;
  assign S15_AXI_GEN_RDATA[17] = \<const0> ;
  assign S15_AXI_GEN_RDATA[16] = \<const0> ;
  assign S15_AXI_GEN_RDATA[15] = \<const0> ;
  assign S15_AXI_GEN_RDATA[14] = \<const0> ;
  assign S15_AXI_GEN_RDATA[13] = \<const0> ;
  assign S15_AXI_GEN_RDATA[12] = \<const0> ;
  assign S15_AXI_GEN_RDATA[11] = \<const0> ;
  assign S15_AXI_GEN_RDATA[10] = \<const0> ;
  assign S15_AXI_GEN_RDATA[9] = \<const0> ;
  assign S15_AXI_GEN_RDATA[8] = \<const0> ;
  assign S15_AXI_GEN_RDATA[7] = \<const0> ;
  assign S15_AXI_GEN_RDATA[6] = \<const0> ;
  assign S15_AXI_GEN_RDATA[5] = \<const0> ;
  assign S15_AXI_GEN_RDATA[4] = \<const0> ;
  assign S15_AXI_GEN_RDATA[3] = \<const0> ;
  assign S15_AXI_GEN_RDATA[2] = \<const0> ;
  assign S15_AXI_GEN_RDATA[1] = \<const0> ;
  assign S15_AXI_GEN_RDATA[0] = \<const0> ;
  assign S15_AXI_GEN_RID[0] = \<const0> ;
  assign S15_AXI_GEN_RLAST = \<const0> ;
  assign S15_AXI_GEN_RRESP[1] = \<const0> ;
  assign S15_AXI_GEN_RRESP[0] = \<const0> ;
  assign S15_AXI_GEN_RVALID = \<const0> ;
  assign S15_AXI_GEN_WREADY = \<const0> ;
  assign S15_AXI_RDATA[31] = \<const0> ;
  assign S15_AXI_RDATA[30] = \<const0> ;
  assign S15_AXI_RDATA[29] = \<const0> ;
  assign S15_AXI_RDATA[28] = \<const0> ;
  assign S15_AXI_RDATA[27] = \<const0> ;
  assign S15_AXI_RDATA[26] = \<const0> ;
  assign S15_AXI_RDATA[25] = \<const0> ;
  assign S15_AXI_RDATA[24] = \<const0> ;
  assign S15_AXI_RDATA[23] = \<const0> ;
  assign S15_AXI_RDATA[22] = \<const0> ;
  assign S15_AXI_RDATA[21] = \<const0> ;
  assign S15_AXI_RDATA[20] = \<const0> ;
  assign S15_AXI_RDATA[19] = \<const0> ;
  assign S15_AXI_RDATA[18] = \<const0> ;
  assign S15_AXI_RDATA[17] = \<const0> ;
  assign S15_AXI_RDATA[16] = \<const0> ;
  assign S15_AXI_RDATA[15] = \<const0> ;
  assign S15_AXI_RDATA[14] = \<const0> ;
  assign S15_AXI_RDATA[13] = \<const0> ;
  assign S15_AXI_RDATA[12] = \<const0> ;
  assign S15_AXI_RDATA[11] = \<const0> ;
  assign S15_AXI_RDATA[10] = \<const0> ;
  assign S15_AXI_RDATA[9] = \<const0> ;
  assign S15_AXI_RDATA[8] = \<const0> ;
  assign S15_AXI_RDATA[7] = \<const0> ;
  assign S15_AXI_RDATA[6] = \<const0> ;
  assign S15_AXI_RDATA[5] = \<const0> ;
  assign S15_AXI_RDATA[4] = \<const0> ;
  assign S15_AXI_RDATA[3] = \<const0> ;
  assign S15_AXI_RDATA[2] = \<const0> ;
  assign S15_AXI_RDATA[1] = \<const0> ;
  assign S15_AXI_RDATA[0] = \<const0> ;
  assign S15_AXI_RID[0] = \<const0> ;
  assign S15_AXI_RLAST = \<const0> ;
  assign S15_AXI_RRESP[1] = \<const0> ;
  assign S15_AXI_RRESP[0] = \<const0> ;
  assign S15_AXI_RVALID = \<const0> ;
  assign S15_AXI_WREADY = \<const0> ;
  assign S1_AXI_ACADDR[31] = \<const0> ;
  assign S1_AXI_ACADDR[30] = \<const0> ;
  assign S1_AXI_ACADDR[29] = \<const0> ;
  assign S1_AXI_ACADDR[28] = \<const0> ;
  assign S1_AXI_ACADDR[27] = \<const0> ;
  assign S1_AXI_ACADDR[26] = \<const0> ;
  assign S1_AXI_ACADDR[25] = \<const0> ;
  assign S1_AXI_ACADDR[24] = \<const0> ;
  assign S1_AXI_ACADDR[23] = \<const0> ;
  assign S1_AXI_ACADDR[22] = \<const0> ;
  assign S1_AXI_ACADDR[21] = \<const0> ;
  assign S1_AXI_ACADDR[20] = \<const0> ;
  assign S1_AXI_ACADDR[19] = \<const0> ;
  assign S1_AXI_ACADDR[18] = \<const0> ;
  assign S1_AXI_ACADDR[17] = \<const0> ;
  assign S1_AXI_ACADDR[16] = \<const0> ;
  assign S1_AXI_ACADDR[15] = \<const0> ;
  assign S1_AXI_ACADDR[14] = \<const0> ;
  assign S1_AXI_ACADDR[13] = \<const0> ;
  assign S1_AXI_ACADDR[12] = \<const0> ;
  assign S1_AXI_ACADDR[11] = \<const0> ;
  assign S1_AXI_ACADDR[10] = \<const0> ;
  assign S1_AXI_ACADDR[9] = \<const0> ;
  assign S1_AXI_ACADDR[8] = \<const0> ;
  assign S1_AXI_ACADDR[7] = \<const0> ;
  assign S1_AXI_ACADDR[6] = \<const0> ;
  assign S1_AXI_ACADDR[5] = \<const0> ;
  assign S1_AXI_ACADDR[4] = \<const0> ;
  assign S1_AXI_ACADDR[3] = \<const0> ;
  assign S1_AXI_ACADDR[2] = \<const0> ;
  assign S1_AXI_ACADDR[1] = \<const0> ;
  assign S1_AXI_ACADDR[0] = \<const0> ;
  assign S1_AXI_ACPROT[2] = \<const0> ;
  assign S1_AXI_ACPROT[1] = \<const0> ;
  assign S1_AXI_ACPROT[0] = \<const0> ;
  assign S1_AXI_ACSNOOP[3] = \<const0> ;
  assign S1_AXI_ACSNOOP[2] = \<const0> ;
  assign S1_AXI_ACSNOOP[1] = \<const0> ;
  assign S1_AXI_ACSNOOP[0] = \<const0> ;
  assign S1_AXI_ACVALID = \<const0> ;
  assign S1_AXI_ARREADY = \<const0> ;
  assign S1_AXI_AWREADY = \<const0> ;
  assign S1_AXI_BID[0] = \<const0> ;
  assign S1_AXI_BRESP[1] = \<const0> ;
  assign S1_AXI_BRESP[0] = \<const0> ;
  assign S1_AXI_BVALID = \<const0> ;
  assign S1_AXI_CDREADY = \<const0> ;
  assign S1_AXI_CRREADY = \<const0> ;
  assign S1_AXI_GEN_ARREADY = \<const0> ;
  assign S1_AXI_GEN_AWREADY = \<const0> ;
  assign S1_AXI_GEN_BID[0] = \<const0> ;
  assign S1_AXI_GEN_BRESP[1] = \<const0> ;
  assign S1_AXI_GEN_BRESP[0] = \<const0> ;
  assign S1_AXI_GEN_BVALID = \<const0> ;
  assign S1_AXI_GEN_RDATA[31] = \<const0> ;
  assign S1_AXI_GEN_RDATA[30] = \<const0> ;
  assign S1_AXI_GEN_RDATA[29] = \<const0> ;
  assign S1_AXI_GEN_RDATA[28] = \<const0> ;
  assign S1_AXI_GEN_RDATA[27] = \<const0> ;
  assign S1_AXI_GEN_RDATA[26] = \<const0> ;
  assign S1_AXI_GEN_RDATA[25] = \<const0> ;
  assign S1_AXI_GEN_RDATA[24] = \<const0> ;
  assign S1_AXI_GEN_RDATA[23] = \<const0> ;
  assign S1_AXI_GEN_RDATA[22] = \<const0> ;
  assign S1_AXI_GEN_RDATA[21] = \<const0> ;
  assign S1_AXI_GEN_RDATA[20] = \<const0> ;
  assign S1_AXI_GEN_RDATA[19] = \<const0> ;
  assign S1_AXI_GEN_RDATA[18] = \<const0> ;
  assign S1_AXI_GEN_RDATA[17] = \<const0> ;
  assign S1_AXI_GEN_RDATA[16] = \<const0> ;
  assign S1_AXI_GEN_RDATA[15] = \<const0> ;
  assign S1_AXI_GEN_RDATA[14] = \<const0> ;
  assign S1_AXI_GEN_RDATA[13] = \<const0> ;
  assign S1_AXI_GEN_RDATA[12] = \<const0> ;
  assign S1_AXI_GEN_RDATA[11] = \<const0> ;
  assign S1_AXI_GEN_RDATA[10] = \<const0> ;
  assign S1_AXI_GEN_RDATA[9] = \<const0> ;
  assign S1_AXI_GEN_RDATA[8] = \<const0> ;
  assign S1_AXI_GEN_RDATA[7] = \<const0> ;
  assign S1_AXI_GEN_RDATA[6] = \<const0> ;
  assign S1_AXI_GEN_RDATA[5] = \<const0> ;
  assign S1_AXI_GEN_RDATA[4] = \<const0> ;
  assign S1_AXI_GEN_RDATA[3] = \<const0> ;
  assign S1_AXI_GEN_RDATA[2] = \<const0> ;
  assign S1_AXI_GEN_RDATA[1] = \<const0> ;
  assign S1_AXI_GEN_RDATA[0] = \<const0> ;
  assign S1_AXI_GEN_RID[0] = \<const0> ;
  assign S1_AXI_GEN_RLAST = \<const0> ;
  assign S1_AXI_GEN_RRESP[1] = \<const0> ;
  assign S1_AXI_GEN_RRESP[0] = \<const0> ;
  assign S1_AXI_GEN_RVALID = \<const0> ;
  assign S1_AXI_GEN_WREADY = \<const0> ;
  assign S1_AXI_RDATA[31] = \<const0> ;
  assign S1_AXI_RDATA[30] = \<const0> ;
  assign S1_AXI_RDATA[29] = \<const0> ;
  assign S1_AXI_RDATA[28] = \<const0> ;
  assign S1_AXI_RDATA[27] = \<const0> ;
  assign S1_AXI_RDATA[26] = \<const0> ;
  assign S1_AXI_RDATA[25] = \<const0> ;
  assign S1_AXI_RDATA[24] = \<const0> ;
  assign S1_AXI_RDATA[23] = \<const0> ;
  assign S1_AXI_RDATA[22] = \<const0> ;
  assign S1_AXI_RDATA[21] = \<const0> ;
  assign S1_AXI_RDATA[20] = \<const0> ;
  assign S1_AXI_RDATA[19] = \<const0> ;
  assign S1_AXI_RDATA[18] = \<const0> ;
  assign S1_AXI_RDATA[17] = \<const0> ;
  assign S1_AXI_RDATA[16] = \<const0> ;
  assign S1_AXI_RDATA[15] = \<const0> ;
  assign S1_AXI_RDATA[14] = \<const0> ;
  assign S1_AXI_RDATA[13] = \<const0> ;
  assign S1_AXI_RDATA[12] = \<const0> ;
  assign S1_AXI_RDATA[11] = \<const0> ;
  assign S1_AXI_RDATA[10] = \<const0> ;
  assign S1_AXI_RDATA[9] = \<const0> ;
  assign S1_AXI_RDATA[8] = \<const0> ;
  assign S1_AXI_RDATA[7] = \<const0> ;
  assign S1_AXI_RDATA[6] = \<const0> ;
  assign S1_AXI_RDATA[5] = \<const0> ;
  assign S1_AXI_RDATA[4] = \<const0> ;
  assign S1_AXI_RDATA[3] = \<const0> ;
  assign S1_AXI_RDATA[2] = \<const0> ;
  assign S1_AXI_RDATA[1] = \<const0> ;
  assign S1_AXI_RDATA[0] = \<const0> ;
  assign S1_AXI_RID[0] = \<const0> ;
  assign S1_AXI_RLAST = \<const0> ;
  assign S1_AXI_RRESP[1] = \<const0> ;
  assign S1_AXI_RRESP[0] = \<const0> ;
  assign S1_AXI_RVALID = \<const0> ;
  assign S1_AXI_WREADY = \<const0> ;
  assign S2_AXI_ACADDR[31] = \<const0> ;
  assign S2_AXI_ACADDR[30] = \<const0> ;
  assign S2_AXI_ACADDR[29] = \<const0> ;
  assign S2_AXI_ACADDR[28] = \<const0> ;
  assign S2_AXI_ACADDR[27] = \<const0> ;
  assign S2_AXI_ACADDR[26] = \<const0> ;
  assign S2_AXI_ACADDR[25] = \<const0> ;
  assign S2_AXI_ACADDR[24] = \<const0> ;
  assign S2_AXI_ACADDR[23] = \<const0> ;
  assign S2_AXI_ACADDR[22] = \<const0> ;
  assign S2_AXI_ACADDR[21] = \<const0> ;
  assign S2_AXI_ACADDR[20] = \<const0> ;
  assign S2_AXI_ACADDR[19] = \<const0> ;
  assign S2_AXI_ACADDR[18] = \<const0> ;
  assign S2_AXI_ACADDR[17] = \<const0> ;
  assign S2_AXI_ACADDR[16] = \<const0> ;
  assign S2_AXI_ACADDR[15] = \<const0> ;
  assign S2_AXI_ACADDR[14] = \<const0> ;
  assign S2_AXI_ACADDR[13] = \<const0> ;
  assign S2_AXI_ACADDR[12] = \<const0> ;
  assign S2_AXI_ACADDR[11] = \<const0> ;
  assign S2_AXI_ACADDR[10] = \<const0> ;
  assign S2_AXI_ACADDR[9] = \<const0> ;
  assign S2_AXI_ACADDR[8] = \<const0> ;
  assign S2_AXI_ACADDR[7] = \<const0> ;
  assign S2_AXI_ACADDR[6] = \<const0> ;
  assign S2_AXI_ACADDR[5] = \<const0> ;
  assign S2_AXI_ACADDR[4] = \<const0> ;
  assign S2_AXI_ACADDR[3] = \<const0> ;
  assign S2_AXI_ACADDR[2] = \<const0> ;
  assign S2_AXI_ACADDR[1] = \<const0> ;
  assign S2_AXI_ACADDR[0] = \<const0> ;
  assign S2_AXI_ACPROT[2] = \<const0> ;
  assign S2_AXI_ACPROT[1] = \<const0> ;
  assign S2_AXI_ACPROT[0] = \<const0> ;
  assign S2_AXI_ACSNOOP[3] = \<const0> ;
  assign S2_AXI_ACSNOOP[2] = \<const0> ;
  assign S2_AXI_ACSNOOP[1] = \<const0> ;
  assign S2_AXI_ACSNOOP[0] = \<const0> ;
  assign S2_AXI_ACVALID = \<const0> ;
  assign S2_AXI_ARREADY = \<const0> ;
  assign S2_AXI_AWREADY = \<const0> ;
  assign S2_AXI_BID[0] = \<const0> ;
  assign S2_AXI_BRESP[1] = \<const0> ;
  assign S2_AXI_BRESP[0] = \<const0> ;
  assign S2_AXI_BVALID = \<const0> ;
  assign S2_AXI_CDREADY = \<const0> ;
  assign S2_AXI_CRREADY = \<const0> ;
  assign S2_AXI_GEN_ARREADY = \<const0> ;
  assign S2_AXI_GEN_AWREADY = \<const0> ;
  assign S2_AXI_GEN_BID[0] = \<const0> ;
  assign S2_AXI_GEN_BRESP[1] = \<const0> ;
  assign S2_AXI_GEN_BRESP[0] = \<const0> ;
  assign S2_AXI_GEN_BVALID = \<const0> ;
  assign S2_AXI_GEN_RDATA[31] = \<const0> ;
  assign S2_AXI_GEN_RDATA[30] = \<const0> ;
  assign S2_AXI_GEN_RDATA[29] = \<const0> ;
  assign S2_AXI_GEN_RDATA[28] = \<const0> ;
  assign S2_AXI_GEN_RDATA[27] = \<const0> ;
  assign S2_AXI_GEN_RDATA[26] = \<const0> ;
  assign S2_AXI_GEN_RDATA[25] = \<const0> ;
  assign S2_AXI_GEN_RDATA[24] = \<const0> ;
  assign S2_AXI_GEN_RDATA[23] = \<const0> ;
  assign S2_AXI_GEN_RDATA[22] = \<const0> ;
  assign S2_AXI_GEN_RDATA[21] = \<const0> ;
  assign S2_AXI_GEN_RDATA[20] = \<const0> ;
  assign S2_AXI_GEN_RDATA[19] = \<const0> ;
  assign S2_AXI_GEN_RDATA[18] = \<const0> ;
  assign S2_AXI_GEN_RDATA[17] = \<const0> ;
  assign S2_AXI_GEN_RDATA[16] = \<const0> ;
  assign S2_AXI_GEN_RDATA[15] = \<const0> ;
  assign S2_AXI_GEN_RDATA[14] = \<const0> ;
  assign S2_AXI_GEN_RDATA[13] = \<const0> ;
  assign S2_AXI_GEN_RDATA[12] = \<const0> ;
  assign S2_AXI_GEN_RDATA[11] = \<const0> ;
  assign S2_AXI_GEN_RDATA[10] = \<const0> ;
  assign S2_AXI_GEN_RDATA[9] = \<const0> ;
  assign S2_AXI_GEN_RDATA[8] = \<const0> ;
  assign S2_AXI_GEN_RDATA[7] = \<const0> ;
  assign S2_AXI_GEN_RDATA[6] = \<const0> ;
  assign S2_AXI_GEN_RDATA[5] = \<const0> ;
  assign S2_AXI_GEN_RDATA[4] = \<const0> ;
  assign S2_AXI_GEN_RDATA[3] = \<const0> ;
  assign S2_AXI_GEN_RDATA[2] = \<const0> ;
  assign S2_AXI_GEN_RDATA[1] = \<const0> ;
  assign S2_AXI_GEN_RDATA[0] = \<const0> ;
  assign S2_AXI_GEN_RID[0] = \<const0> ;
  assign S2_AXI_GEN_RLAST = \<const0> ;
  assign S2_AXI_GEN_RRESP[1] = \<const0> ;
  assign S2_AXI_GEN_RRESP[0] = \<const0> ;
  assign S2_AXI_GEN_RVALID = \<const0> ;
  assign S2_AXI_GEN_WREADY = \<const0> ;
  assign S2_AXI_RDATA[31] = \<const0> ;
  assign S2_AXI_RDATA[30] = \<const0> ;
  assign S2_AXI_RDATA[29] = \<const0> ;
  assign S2_AXI_RDATA[28] = \<const0> ;
  assign S2_AXI_RDATA[27] = \<const0> ;
  assign S2_AXI_RDATA[26] = \<const0> ;
  assign S2_AXI_RDATA[25] = \<const0> ;
  assign S2_AXI_RDATA[24] = \<const0> ;
  assign S2_AXI_RDATA[23] = \<const0> ;
  assign S2_AXI_RDATA[22] = \<const0> ;
  assign S2_AXI_RDATA[21] = \<const0> ;
  assign S2_AXI_RDATA[20] = \<const0> ;
  assign S2_AXI_RDATA[19] = \<const0> ;
  assign S2_AXI_RDATA[18] = \<const0> ;
  assign S2_AXI_RDATA[17] = \<const0> ;
  assign S2_AXI_RDATA[16] = \<const0> ;
  assign S2_AXI_RDATA[15] = \<const0> ;
  assign S2_AXI_RDATA[14] = \<const0> ;
  assign S2_AXI_RDATA[13] = \<const0> ;
  assign S2_AXI_RDATA[12] = \<const0> ;
  assign S2_AXI_RDATA[11] = \<const0> ;
  assign S2_AXI_RDATA[10] = \<const0> ;
  assign S2_AXI_RDATA[9] = \<const0> ;
  assign S2_AXI_RDATA[8] = \<const0> ;
  assign S2_AXI_RDATA[7] = \<const0> ;
  assign S2_AXI_RDATA[6] = \<const0> ;
  assign S2_AXI_RDATA[5] = \<const0> ;
  assign S2_AXI_RDATA[4] = \<const0> ;
  assign S2_AXI_RDATA[3] = \<const0> ;
  assign S2_AXI_RDATA[2] = \<const0> ;
  assign S2_AXI_RDATA[1] = \<const0> ;
  assign S2_AXI_RDATA[0] = \<const0> ;
  assign S2_AXI_RID[0] = \<const0> ;
  assign S2_AXI_RLAST = \<const0> ;
  assign S2_AXI_RRESP[1] = \<const0> ;
  assign S2_AXI_RRESP[0] = \<const0> ;
  assign S2_AXI_RVALID = \<const0> ;
  assign S2_AXI_WREADY = \<const0> ;
  assign S3_AXI_ACADDR[31] = \<const0> ;
  assign S3_AXI_ACADDR[30] = \<const0> ;
  assign S3_AXI_ACADDR[29] = \<const0> ;
  assign S3_AXI_ACADDR[28] = \<const0> ;
  assign S3_AXI_ACADDR[27] = \<const0> ;
  assign S3_AXI_ACADDR[26] = \<const0> ;
  assign S3_AXI_ACADDR[25] = \<const0> ;
  assign S3_AXI_ACADDR[24] = \<const0> ;
  assign S3_AXI_ACADDR[23] = \<const0> ;
  assign S3_AXI_ACADDR[22] = \<const0> ;
  assign S3_AXI_ACADDR[21] = \<const0> ;
  assign S3_AXI_ACADDR[20] = \<const0> ;
  assign S3_AXI_ACADDR[19] = \<const0> ;
  assign S3_AXI_ACADDR[18] = \<const0> ;
  assign S3_AXI_ACADDR[17] = \<const0> ;
  assign S3_AXI_ACADDR[16] = \<const0> ;
  assign S3_AXI_ACADDR[15] = \<const0> ;
  assign S3_AXI_ACADDR[14] = \<const0> ;
  assign S3_AXI_ACADDR[13] = \<const0> ;
  assign S3_AXI_ACADDR[12] = \<const0> ;
  assign S3_AXI_ACADDR[11] = \<const0> ;
  assign S3_AXI_ACADDR[10] = \<const0> ;
  assign S3_AXI_ACADDR[9] = \<const0> ;
  assign S3_AXI_ACADDR[8] = \<const0> ;
  assign S3_AXI_ACADDR[7] = \<const0> ;
  assign S3_AXI_ACADDR[6] = \<const0> ;
  assign S3_AXI_ACADDR[5] = \<const0> ;
  assign S3_AXI_ACADDR[4] = \<const0> ;
  assign S3_AXI_ACADDR[3] = \<const0> ;
  assign S3_AXI_ACADDR[2] = \<const0> ;
  assign S3_AXI_ACADDR[1] = \<const0> ;
  assign S3_AXI_ACADDR[0] = \<const0> ;
  assign S3_AXI_ACPROT[2] = \<const0> ;
  assign S3_AXI_ACPROT[1] = \<const0> ;
  assign S3_AXI_ACPROT[0] = \<const0> ;
  assign S3_AXI_ACSNOOP[3] = \<const0> ;
  assign S3_AXI_ACSNOOP[2] = \<const0> ;
  assign S3_AXI_ACSNOOP[1] = \<const0> ;
  assign S3_AXI_ACSNOOP[0] = \<const0> ;
  assign S3_AXI_ACVALID = \<const0> ;
  assign S3_AXI_ARREADY = \<const0> ;
  assign S3_AXI_AWREADY = \<const0> ;
  assign S3_AXI_BID[0] = \<const0> ;
  assign S3_AXI_BRESP[1] = \<const0> ;
  assign S3_AXI_BRESP[0] = \<const0> ;
  assign S3_AXI_BVALID = \<const0> ;
  assign S3_AXI_CDREADY = \<const0> ;
  assign S3_AXI_CRREADY = \<const0> ;
  assign S3_AXI_GEN_ARREADY = \<const0> ;
  assign S3_AXI_GEN_AWREADY = \<const0> ;
  assign S3_AXI_GEN_BID[0] = \<const0> ;
  assign S3_AXI_GEN_BRESP[1] = \<const0> ;
  assign S3_AXI_GEN_BRESP[0] = \<const0> ;
  assign S3_AXI_GEN_BVALID = \<const0> ;
  assign S3_AXI_GEN_RDATA[31] = \<const0> ;
  assign S3_AXI_GEN_RDATA[30] = \<const0> ;
  assign S3_AXI_GEN_RDATA[29] = \<const0> ;
  assign S3_AXI_GEN_RDATA[28] = \<const0> ;
  assign S3_AXI_GEN_RDATA[27] = \<const0> ;
  assign S3_AXI_GEN_RDATA[26] = \<const0> ;
  assign S3_AXI_GEN_RDATA[25] = \<const0> ;
  assign S3_AXI_GEN_RDATA[24] = \<const0> ;
  assign S3_AXI_GEN_RDATA[23] = \<const0> ;
  assign S3_AXI_GEN_RDATA[22] = \<const0> ;
  assign S3_AXI_GEN_RDATA[21] = \<const0> ;
  assign S3_AXI_GEN_RDATA[20] = \<const0> ;
  assign S3_AXI_GEN_RDATA[19] = \<const0> ;
  assign S3_AXI_GEN_RDATA[18] = \<const0> ;
  assign S3_AXI_GEN_RDATA[17] = \<const0> ;
  assign S3_AXI_GEN_RDATA[16] = \<const0> ;
  assign S3_AXI_GEN_RDATA[15] = \<const0> ;
  assign S3_AXI_GEN_RDATA[14] = \<const0> ;
  assign S3_AXI_GEN_RDATA[13] = \<const0> ;
  assign S3_AXI_GEN_RDATA[12] = \<const0> ;
  assign S3_AXI_GEN_RDATA[11] = \<const0> ;
  assign S3_AXI_GEN_RDATA[10] = \<const0> ;
  assign S3_AXI_GEN_RDATA[9] = \<const0> ;
  assign S3_AXI_GEN_RDATA[8] = \<const0> ;
  assign S3_AXI_GEN_RDATA[7] = \<const0> ;
  assign S3_AXI_GEN_RDATA[6] = \<const0> ;
  assign S3_AXI_GEN_RDATA[5] = \<const0> ;
  assign S3_AXI_GEN_RDATA[4] = \<const0> ;
  assign S3_AXI_GEN_RDATA[3] = \<const0> ;
  assign S3_AXI_GEN_RDATA[2] = \<const0> ;
  assign S3_AXI_GEN_RDATA[1] = \<const0> ;
  assign S3_AXI_GEN_RDATA[0] = \<const0> ;
  assign S3_AXI_GEN_RID[0] = \<const0> ;
  assign S3_AXI_GEN_RLAST = \<const0> ;
  assign S3_AXI_GEN_RRESP[1] = \<const0> ;
  assign S3_AXI_GEN_RRESP[0] = \<const0> ;
  assign S3_AXI_GEN_RVALID = \<const0> ;
  assign S3_AXI_GEN_WREADY = \<const0> ;
  assign S3_AXI_RDATA[31] = \<const0> ;
  assign S3_AXI_RDATA[30] = \<const0> ;
  assign S3_AXI_RDATA[29] = \<const0> ;
  assign S3_AXI_RDATA[28] = \<const0> ;
  assign S3_AXI_RDATA[27] = \<const0> ;
  assign S3_AXI_RDATA[26] = \<const0> ;
  assign S3_AXI_RDATA[25] = \<const0> ;
  assign S3_AXI_RDATA[24] = \<const0> ;
  assign S3_AXI_RDATA[23] = \<const0> ;
  assign S3_AXI_RDATA[22] = \<const0> ;
  assign S3_AXI_RDATA[21] = \<const0> ;
  assign S3_AXI_RDATA[20] = \<const0> ;
  assign S3_AXI_RDATA[19] = \<const0> ;
  assign S3_AXI_RDATA[18] = \<const0> ;
  assign S3_AXI_RDATA[17] = \<const0> ;
  assign S3_AXI_RDATA[16] = \<const0> ;
  assign S3_AXI_RDATA[15] = \<const0> ;
  assign S3_AXI_RDATA[14] = \<const0> ;
  assign S3_AXI_RDATA[13] = \<const0> ;
  assign S3_AXI_RDATA[12] = \<const0> ;
  assign S3_AXI_RDATA[11] = \<const0> ;
  assign S3_AXI_RDATA[10] = \<const0> ;
  assign S3_AXI_RDATA[9] = \<const0> ;
  assign S3_AXI_RDATA[8] = \<const0> ;
  assign S3_AXI_RDATA[7] = \<const0> ;
  assign S3_AXI_RDATA[6] = \<const0> ;
  assign S3_AXI_RDATA[5] = \<const0> ;
  assign S3_AXI_RDATA[4] = \<const0> ;
  assign S3_AXI_RDATA[3] = \<const0> ;
  assign S3_AXI_RDATA[2] = \<const0> ;
  assign S3_AXI_RDATA[1] = \<const0> ;
  assign S3_AXI_RDATA[0] = \<const0> ;
  assign S3_AXI_RID[0] = \<const0> ;
  assign S3_AXI_RLAST = \<const0> ;
  assign S3_AXI_RRESP[1] = \<const0> ;
  assign S3_AXI_RRESP[0] = \<const0> ;
  assign S3_AXI_RVALID = \<const0> ;
  assign S3_AXI_WREADY = \<const0> ;
  assign S4_AXI_ACADDR[31] = \<const0> ;
  assign S4_AXI_ACADDR[30] = \<const0> ;
  assign S4_AXI_ACADDR[29] = \<const0> ;
  assign S4_AXI_ACADDR[28] = \<const0> ;
  assign S4_AXI_ACADDR[27] = \<const0> ;
  assign S4_AXI_ACADDR[26] = \<const0> ;
  assign S4_AXI_ACADDR[25] = \<const0> ;
  assign S4_AXI_ACADDR[24] = \<const0> ;
  assign S4_AXI_ACADDR[23] = \<const0> ;
  assign S4_AXI_ACADDR[22] = \<const0> ;
  assign S4_AXI_ACADDR[21] = \<const0> ;
  assign S4_AXI_ACADDR[20] = \<const0> ;
  assign S4_AXI_ACADDR[19] = \<const0> ;
  assign S4_AXI_ACADDR[18] = \<const0> ;
  assign S4_AXI_ACADDR[17] = \<const0> ;
  assign S4_AXI_ACADDR[16] = \<const0> ;
  assign S4_AXI_ACADDR[15] = \<const0> ;
  assign S4_AXI_ACADDR[14] = \<const0> ;
  assign S4_AXI_ACADDR[13] = \<const0> ;
  assign S4_AXI_ACADDR[12] = \<const0> ;
  assign S4_AXI_ACADDR[11] = \<const0> ;
  assign S4_AXI_ACADDR[10] = \<const0> ;
  assign S4_AXI_ACADDR[9] = \<const0> ;
  assign S4_AXI_ACADDR[8] = \<const0> ;
  assign S4_AXI_ACADDR[7] = \<const0> ;
  assign S4_AXI_ACADDR[6] = \<const0> ;
  assign S4_AXI_ACADDR[5] = \<const0> ;
  assign S4_AXI_ACADDR[4] = \<const0> ;
  assign S4_AXI_ACADDR[3] = \<const0> ;
  assign S4_AXI_ACADDR[2] = \<const0> ;
  assign S4_AXI_ACADDR[1] = \<const0> ;
  assign S4_AXI_ACADDR[0] = \<const0> ;
  assign S4_AXI_ACPROT[2] = \<const0> ;
  assign S4_AXI_ACPROT[1] = \<const0> ;
  assign S4_AXI_ACPROT[0] = \<const0> ;
  assign S4_AXI_ACSNOOP[3] = \<const0> ;
  assign S4_AXI_ACSNOOP[2] = \<const0> ;
  assign S4_AXI_ACSNOOP[1] = \<const0> ;
  assign S4_AXI_ACSNOOP[0] = \<const0> ;
  assign S4_AXI_ACVALID = \<const0> ;
  assign S4_AXI_ARREADY = \<const0> ;
  assign S4_AXI_AWREADY = \<const0> ;
  assign S4_AXI_BID[0] = \<const0> ;
  assign S4_AXI_BRESP[1] = \<const0> ;
  assign S4_AXI_BRESP[0] = \<const0> ;
  assign S4_AXI_BVALID = \<const0> ;
  assign S4_AXI_CDREADY = \<const0> ;
  assign S4_AXI_CRREADY = \<const0> ;
  assign S4_AXI_GEN_ARREADY = \<const0> ;
  assign S4_AXI_GEN_AWREADY = \<const0> ;
  assign S4_AXI_GEN_BID[0] = \<const0> ;
  assign S4_AXI_GEN_BRESP[1] = \<const0> ;
  assign S4_AXI_GEN_BRESP[0] = \<const0> ;
  assign S4_AXI_GEN_BVALID = \<const0> ;
  assign S4_AXI_GEN_RDATA[31] = \<const0> ;
  assign S4_AXI_GEN_RDATA[30] = \<const0> ;
  assign S4_AXI_GEN_RDATA[29] = \<const0> ;
  assign S4_AXI_GEN_RDATA[28] = \<const0> ;
  assign S4_AXI_GEN_RDATA[27] = \<const0> ;
  assign S4_AXI_GEN_RDATA[26] = \<const0> ;
  assign S4_AXI_GEN_RDATA[25] = \<const0> ;
  assign S4_AXI_GEN_RDATA[24] = \<const0> ;
  assign S4_AXI_GEN_RDATA[23] = \<const0> ;
  assign S4_AXI_GEN_RDATA[22] = \<const0> ;
  assign S4_AXI_GEN_RDATA[21] = \<const0> ;
  assign S4_AXI_GEN_RDATA[20] = \<const0> ;
  assign S4_AXI_GEN_RDATA[19] = \<const0> ;
  assign S4_AXI_GEN_RDATA[18] = \<const0> ;
  assign S4_AXI_GEN_RDATA[17] = \<const0> ;
  assign S4_AXI_GEN_RDATA[16] = \<const0> ;
  assign S4_AXI_GEN_RDATA[15] = \<const0> ;
  assign S4_AXI_GEN_RDATA[14] = \<const0> ;
  assign S4_AXI_GEN_RDATA[13] = \<const0> ;
  assign S4_AXI_GEN_RDATA[12] = \<const0> ;
  assign S4_AXI_GEN_RDATA[11] = \<const0> ;
  assign S4_AXI_GEN_RDATA[10] = \<const0> ;
  assign S4_AXI_GEN_RDATA[9] = \<const0> ;
  assign S4_AXI_GEN_RDATA[8] = \<const0> ;
  assign S4_AXI_GEN_RDATA[7] = \<const0> ;
  assign S4_AXI_GEN_RDATA[6] = \<const0> ;
  assign S4_AXI_GEN_RDATA[5] = \<const0> ;
  assign S4_AXI_GEN_RDATA[4] = \<const0> ;
  assign S4_AXI_GEN_RDATA[3] = \<const0> ;
  assign S4_AXI_GEN_RDATA[2] = \<const0> ;
  assign S4_AXI_GEN_RDATA[1] = \<const0> ;
  assign S4_AXI_GEN_RDATA[0] = \<const0> ;
  assign S4_AXI_GEN_RID[0] = \<const0> ;
  assign S4_AXI_GEN_RLAST = \<const0> ;
  assign S4_AXI_GEN_RRESP[1] = \<const0> ;
  assign S4_AXI_GEN_RRESP[0] = \<const0> ;
  assign S4_AXI_GEN_RVALID = \<const0> ;
  assign S4_AXI_GEN_WREADY = \<const0> ;
  assign S4_AXI_RDATA[31] = \<const0> ;
  assign S4_AXI_RDATA[30] = \<const0> ;
  assign S4_AXI_RDATA[29] = \<const0> ;
  assign S4_AXI_RDATA[28] = \<const0> ;
  assign S4_AXI_RDATA[27] = \<const0> ;
  assign S4_AXI_RDATA[26] = \<const0> ;
  assign S4_AXI_RDATA[25] = \<const0> ;
  assign S4_AXI_RDATA[24] = \<const0> ;
  assign S4_AXI_RDATA[23] = \<const0> ;
  assign S4_AXI_RDATA[22] = \<const0> ;
  assign S4_AXI_RDATA[21] = \<const0> ;
  assign S4_AXI_RDATA[20] = \<const0> ;
  assign S4_AXI_RDATA[19] = \<const0> ;
  assign S4_AXI_RDATA[18] = \<const0> ;
  assign S4_AXI_RDATA[17] = \<const0> ;
  assign S4_AXI_RDATA[16] = \<const0> ;
  assign S4_AXI_RDATA[15] = \<const0> ;
  assign S4_AXI_RDATA[14] = \<const0> ;
  assign S4_AXI_RDATA[13] = \<const0> ;
  assign S4_AXI_RDATA[12] = \<const0> ;
  assign S4_AXI_RDATA[11] = \<const0> ;
  assign S4_AXI_RDATA[10] = \<const0> ;
  assign S4_AXI_RDATA[9] = \<const0> ;
  assign S4_AXI_RDATA[8] = \<const0> ;
  assign S4_AXI_RDATA[7] = \<const0> ;
  assign S4_AXI_RDATA[6] = \<const0> ;
  assign S4_AXI_RDATA[5] = \<const0> ;
  assign S4_AXI_RDATA[4] = \<const0> ;
  assign S4_AXI_RDATA[3] = \<const0> ;
  assign S4_AXI_RDATA[2] = \<const0> ;
  assign S4_AXI_RDATA[1] = \<const0> ;
  assign S4_AXI_RDATA[0] = \<const0> ;
  assign S4_AXI_RID[0] = \<const0> ;
  assign S4_AXI_RLAST = \<const0> ;
  assign S4_AXI_RRESP[1] = \<const0> ;
  assign S4_AXI_RRESP[0] = \<const0> ;
  assign S4_AXI_RVALID = \<const0> ;
  assign S4_AXI_WREADY = \<const0> ;
  assign S5_AXI_ACADDR[31] = \<const0> ;
  assign S5_AXI_ACADDR[30] = \<const0> ;
  assign S5_AXI_ACADDR[29] = \<const0> ;
  assign S5_AXI_ACADDR[28] = \<const0> ;
  assign S5_AXI_ACADDR[27] = \<const0> ;
  assign S5_AXI_ACADDR[26] = \<const0> ;
  assign S5_AXI_ACADDR[25] = \<const0> ;
  assign S5_AXI_ACADDR[24] = \<const0> ;
  assign S5_AXI_ACADDR[23] = \<const0> ;
  assign S5_AXI_ACADDR[22] = \<const0> ;
  assign S5_AXI_ACADDR[21] = \<const0> ;
  assign S5_AXI_ACADDR[20] = \<const0> ;
  assign S5_AXI_ACADDR[19] = \<const0> ;
  assign S5_AXI_ACADDR[18] = \<const0> ;
  assign S5_AXI_ACADDR[17] = \<const0> ;
  assign S5_AXI_ACADDR[16] = \<const0> ;
  assign S5_AXI_ACADDR[15] = \<const0> ;
  assign S5_AXI_ACADDR[14] = \<const0> ;
  assign S5_AXI_ACADDR[13] = \<const0> ;
  assign S5_AXI_ACADDR[12] = \<const0> ;
  assign S5_AXI_ACADDR[11] = \<const0> ;
  assign S5_AXI_ACADDR[10] = \<const0> ;
  assign S5_AXI_ACADDR[9] = \<const0> ;
  assign S5_AXI_ACADDR[8] = \<const0> ;
  assign S5_AXI_ACADDR[7] = \<const0> ;
  assign S5_AXI_ACADDR[6] = \<const0> ;
  assign S5_AXI_ACADDR[5] = \<const0> ;
  assign S5_AXI_ACADDR[4] = \<const0> ;
  assign S5_AXI_ACADDR[3] = \<const0> ;
  assign S5_AXI_ACADDR[2] = \<const0> ;
  assign S5_AXI_ACADDR[1] = \<const0> ;
  assign S5_AXI_ACADDR[0] = \<const0> ;
  assign S5_AXI_ACPROT[2] = \<const0> ;
  assign S5_AXI_ACPROT[1] = \<const0> ;
  assign S5_AXI_ACPROT[0] = \<const0> ;
  assign S5_AXI_ACSNOOP[3] = \<const0> ;
  assign S5_AXI_ACSNOOP[2] = \<const0> ;
  assign S5_AXI_ACSNOOP[1] = \<const0> ;
  assign S5_AXI_ACSNOOP[0] = \<const0> ;
  assign S5_AXI_ACVALID = \<const0> ;
  assign S5_AXI_ARREADY = \<const0> ;
  assign S5_AXI_AWREADY = \<const0> ;
  assign S5_AXI_BID[0] = \<const0> ;
  assign S5_AXI_BRESP[1] = \<const0> ;
  assign S5_AXI_BRESP[0] = \<const0> ;
  assign S5_AXI_BVALID = \<const0> ;
  assign S5_AXI_CDREADY = \<const0> ;
  assign S5_AXI_CRREADY = \<const0> ;
  assign S5_AXI_GEN_ARREADY = \<const0> ;
  assign S5_AXI_GEN_AWREADY = \<const0> ;
  assign S5_AXI_GEN_BID[0] = \<const0> ;
  assign S5_AXI_GEN_BRESP[1] = \<const0> ;
  assign S5_AXI_GEN_BRESP[0] = \<const0> ;
  assign S5_AXI_GEN_BVALID = \<const0> ;
  assign S5_AXI_GEN_RDATA[31] = \<const0> ;
  assign S5_AXI_GEN_RDATA[30] = \<const0> ;
  assign S5_AXI_GEN_RDATA[29] = \<const0> ;
  assign S5_AXI_GEN_RDATA[28] = \<const0> ;
  assign S5_AXI_GEN_RDATA[27] = \<const0> ;
  assign S5_AXI_GEN_RDATA[26] = \<const0> ;
  assign S5_AXI_GEN_RDATA[25] = \<const0> ;
  assign S5_AXI_GEN_RDATA[24] = \<const0> ;
  assign S5_AXI_GEN_RDATA[23] = \<const0> ;
  assign S5_AXI_GEN_RDATA[22] = \<const0> ;
  assign S5_AXI_GEN_RDATA[21] = \<const0> ;
  assign S5_AXI_GEN_RDATA[20] = \<const0> ;
  assign S5_AXI_GEN_RDATA[19] = \<const0> ;
  assign S5_AXI_GEN_RDATA[18] = \<const0> ;
  assign S5_AXI_GEN_RDATA[17] = \<const0> ;
  assign S5_AXI_GEN_RDATA[16] = \<const0> ;
  assign S5_AXI_GEN_RDATA[15] = \<const0> ;
  assign S5_AXI_GEN_RDATA[14] = \<const0> ;
  assign S5_AXI_GEN_RDATA[13] = \<const0> ;
  assign S5_AXI_GEN_RDATA[12] = \<const0> ;
  assign S5_AXI_GEN_RDATA[11] = \<const0> ;
  assign S5_AXI_GEN_RDATA[10] = \<const0> ;
  assign S5_AXI_GEN_RDATA[9] = \<const0> ;
  assign S5_AXI_GEN_RDATA[8] = \<const0> ;
  assign S5_AXI_GEN_RDATA[7] = \<const0> ;
  assign S5_AXI_GEN_RDATA[6] = \<const0> ;
  assign S5_AXI_GEN_RDATA[5] = \<const0> ;
  assign S5_AXI_GEN_RDATA[4] = \<const0> ;
  assign S5_AXI_GEN_RDATA[3] = \<const0> ;
  assign S5_AXI_GEN_RDATA[2] = \<const0> ;
  assign S5_AXI_GEN_RDATA[1] = \<const0> ;
  assign S5_AXI_GEN_RDATA[0] = \<const0> ;
  assign S5_AXI_GEN_RID[0] = \<const0> ;
  assign S5_AXI_GEN_RLAST = \<const0> ;
  assign S5_AXI_GEN_RRESP[1] = \<const0> ;
  assign S5_AXI_GEN_RRESP[0] = \<const0> ;
  assign S5_AXI_GEN_RVALID = \<const0> ;
  assign S5_AXI_GEN_WREADY = \<const0> ;
  assign S5_AXI_RDATA[31] = \<const0> ;
  assign S5_AXI_RDATA[30] = \<const0> ;
  assign S5_AXI_RDATA[29] = \<const0> ;
  assign S5_AXI_RDATA[28] = \<const0> ;
  assign S5_AXI_RDATA[27] = \<const0> ;
  assign S5_AXI_RDATA[26] = \<const0> ;
  assign S5_AXI_RDATA[25] = \<const0> ;
  assign S5_AXI_RDATA[24] = \<const0> ;
  assign S5_AXI_RDATA[23] = \<const0> ;
  assign S5_AXI_RDATA[22] = \<const0> ;
  assign S5_AXI_RDATA[21] = \<const0> ;
  assign S5_AXI_RDATA[20] = \<const0> ;
  assign S5_AXI_RDATA[19] = \<const0> ;
  assign S5_AXI_RDATA[18] = \<const0> ;
  assign S5_AXI_RDATA[17] = \<const0> ;
  assign S5_AXI_RDATA[16] = \<const0> ;
  assign S5_AXI_RDATA[15] = \<const0> ;
  assign S5_AXI_RDATA[14] = \<const0> ;
  assign S5_AXI_RDATA[13] = \<const0> ;
  assign S5_AXI_RDATA[12] = \<const0> ;
  assign S5_AXI_RDATA[11] = \<const0> ;
  assign S5_AXI_RDATA[10] = \<const0> ;
  assign S5_AXI_RDATA[9] = \<const0> ;
  assign S5_AXI_RDATA[8] = \<const0> ;
  assign S5_AXI_RDATA[7] = \<const0> ;
  assign S5_AXI_RDATA[6] = \<const0> ;
  assign S5_AXI_RDATA[5] = \<const0> ;
  assign S5_AXI_RDATA[4] = \<const0> ;
  assign S5_AXI_RDATA[3] = \<const0> ;
  assign S5_AXI_RDATA[2] = \<const0> ;
  assign S5_AXI_RDATA[1] = \<const0> ;
  assign S5_AXI_RDATA[0] = \<const0> ;
  assign S5_AXI_RID[0] = \<const0> ;
  assign S5_AXI_RLAST = \<const0> ;
  assign S5_AXI_RRESP[1] = \<const0> ;
  assign S5_AXI_RRESP[0] = \<const0> ;
  assign S5_AXI_RVALID = \<const0> ;
  assign S5_AXI_WREADY = \<const0> ;
  assign S6_AXI_ACADDR[31] = \<const0> ;
  assign S6_AXI_ACADDR[30] = \<const0> ;
  assign S6_AXI_ACADDR[29] = \<const0> ;
  assign S6_AXI_ACADDR[28] = \<const0> ;
  assign S6_AXI_ACADDR[27] = \<const0> ;
  assign S6_AXI_ACADDR[26] = \<const0> ;
  assign S6_AXI_ACADDR[25] = \<const0> ;
  assign S6_AXI_ACADDR[24] = \<const0> ;
  assign S6_AXI_ACADDR[23] = \<const0> ;
  assign S6_AXI_ACADDR[22] = \<const0> ;
  assign S6_AXI_ACADDR[21] = \<const0> ;
  assign S6_AXI_ACADDR[20] = \<const0> ;
  assign S6_AXI_ACADDR[19] = \<const0> ;
  assign S6_AXI_ACADDR[18] = \<const0> ;
  assign S6_AXI_ACADDR[17] = \<const0> ;
  assign S6_AXI_ACADDR[16] = \<const0> ;
  assign S6_AXI_ACADDR[15] = \<const0> ;
  assign S6_AXI_ACADDR[14] = \<const0> ;
  assign S6_AXI_ACADDR[13] = \<const0> ;
  assign S6_AXI_ACADDR[12] = \<const0> ;
  assign S6_AXI_ACADDR[11] = \<const0> ;
  assign S6_AXI_ACADDR[10] = \<const0> ;
  assign S6_AXI_ACADDR[9] = \<const0> ;
  assign S6_AXI_ACADDR[8] = \<const0> ;
  assign S6_AXI_ACADDR[7] = \<const0> ;
  assign S6_AXI_ACADDR[6] = \<const0> ;
  assign S6_AXI_ACADDR[5] = \<const0> ;
  assign S6_AXI_ACADDR[4] = \<const0> ;
  assign S6_AXI_ACADDR[3] = \<const0> ;
  assign S6_AXI_ACADDR[2] = \<const0> ;
  assign S6_AXI_ACADDR[1] = \<const0> ;
  assign S6_AXI_ACADDR[0] = \<const0> ;
  assign S6_AXI_ACPROT[2] = \<const0> ;
  assign S6_AXI_ACPROT[1] = \<const0> ;
  assign S6_AXI_ACPROT[0] = \<const0> ;
  assign S6_AXI_ACSNOOP[3] = \<const0> ;
  assign S6_AXI_ACSNOOP[2] = \<const0> ;
  assign S6_AXI_ACSNOOP[1] = \<const0> ;
  assign S6_AXI_ACSNOOP[0] = \<const0> ;
  assign S6_AXI_ACVALID = \<const0> ;
  assign S6_AXI_ARREADY = \<const0> ;
  assign S6_AXI_AWREADY = \<const0> ;
  assign S6_AXI_BID[0] = \<const0> ;
  assign S6_AXI_BRESP[1] = \<const0> ;
  assign S6_AXI_BRESP[0] = \<const0> ;
  assign S6_AXI_BVALID = \<const0> ;
  assign S6_AXI_CDREADY = \<const0> ;
  assign S6_AXI_CRREADY = \<const0> ;
  assign S6_AXI_GEN_ARREADY = \<const0> ;
  assign S6_AXI_GEN_AWREADY = \<const0> ;
  assign S6_AXI_GEN_BID[0] = \<const0> ;
  assign S6_AXI_GEN_BRESP[1] = \<const0> ;
  assign S6_AXI_GEN_BRESP[0] = \<const0> ;
  assign S6_AXI_GEN_BVALID = \<const0> ;
  assign S6_AXI_GEN_RDATA[31] = \<const0> ;
  assign S6_AXI_GEN_RDATA[30] = \<const0> ;
  assign S6_AXI_GEN_RDATA[29] = \<const0> ;
  assign S6_AXI_GEN_RDATA[28] = \<const0> ;
  assign S6_AXI_GEN_RDATA[27] = \<const0> ;
  assign S6_AXI_GEN_RDATA[26] = \<const0> ;
  assign S6_AXI_GEN_RDATA[25] = \<const0> ;
  assign S6_AXI_GEN_RDATA[24] = \<const0> ;
  assign S6_AXI_GEN_RDATA[23] = \<const0> ;
  assign S6_AXI_GEN_RDATA[22] = \<const0> ;
  assign S6_AXI_GEN_RDATA[21] = \<const0> ;
  assign S6_AXI_GEN_RDATA[20] = \<const0> ;
  assign S6_AXI_GEN_RDATA[19] = \<const0> ;
  assign S6_AXI_GEN_RDATA[18] = \<const0> ;
  assign S6_AXI_GEN_RDATA[17] = \<const0> ;
  assign S6_AXI_GEN_RDATA[16] = \<const0> ;
  assign S6_AXI_GEN_RDATA[15] = \<const0> ;
  assign S6_AXI_GEN_RDATA[14] = \<const0> ;
  assign S6_AXI_GEN_RDATA[13] = \<const0> ;
  assign S6_AXI_GEN_RDATA[12] = \<const0> ;
  assign S6_AXI_GEN_RDATA[11] = \<const0> ;
  assign S6_AXI_GEN_RDATA[10] = \<const0> ;
  assign S6_AXI_GEN_RDATA[9] = \<const0> ;
  assign S6_AXI_GEN_RDATA[8] = \<const0> ;
  assign S6_AXI_GEN_RDATA[7] = \<const0> ;
  assign S6_AXI_GEN_RDATA[6] = \<const0> ;
  assign S6_AXI_GEN_RDATA[5] = \<const0> ;
  assign S6_AXI_GEN_RDATA[4] = \<const0> ;
  assign S6_AXI_GEN_RDATA[3] = \<const0> ;
  assign S6_AXI_GEN_RDATA[2] = \<const0> ;
  assign S6_AXI_GEN_RDATA[1] = \<const0> ;
  assign S6_AXI_GEN_RDATA[0] = \<const0> ;
  assign S6_AXI_GEN_RID[0] = \<const0> ;
  assign S6_AXI_GEN_RLAST = \<const0> ;
  assign S6_AXI_GEN_RRESP[1] = \<const0> ;
  assign S6_AXI_GEN_RRESP[0] = \<const0> ;
  assign S6_AXI_GEN_RVALID = \<const0> ;
  assign S6_AXI_GEN_WREADY = \<const0> ;
  assign S6_AXI_RDATA[31] = \<const0> ;
  assign S6_AXI_RDATA[30] = \<const0> ;
  assign S6_AXI_RDATA[29] = \<const0> ;
  assign S6_AXI_RDATA[28] = \<const0> ;
  assign S6_AXI_RDATA[27] = \<const0> ;
  assign S6_AXI_RDATA[26] = \<const0> ;
  assign S6_AXI_RDATA[25] = \<const0> ;
  assign S6_AXI_RDATA[24] = \<const0> ;
  assign S6_AXI_RDATA[23] = \<const0> ;
  assign S6_AXI_RDATA[22] = \<const0> ;
  assign S6_AXI_RDATA[21] = \<const0> ;
  assign S6_AXI_RDATA[20] = \<const0> ;
  assign S6_AXI_RDATA[19] = \<const0> ;
  assign S6_AXI_RDATA[18] = \<const0> ;
  assign S6_AXI_RDATA[17] = \<const0> ;
  assign S6_AXI_RDATA[16] = \<const0> ;
  assign S6_AXI_RDATA[15] = \<const0> ;
  assign S6_AXI_RDATA[14] = \<const0> ;
  assign S6_AXI_RDATA[13] = \<const0> ;
  assign S6_AXI_RDATA[12] = \<const0> ;
  assign S6_AXI_RDATA[11] = \<const0> ;
  assign S6_AXI_RDATA[10] = \<const0> ;
  assign S6_AXI_RDATA[9] = \<const0> ;
  assign S6_AXI_RDATA[8] = \<const0> ;
  assign S6_AXI_RDATA[7] = \<const0> ;
  assign S6_AXI_RDATA[6] = \<const0> ;
  assign S6_AXI_RDATA[5] = \<const0> ;
  assign S6_AXI_RDATA[4] = \<const0> ;
  assign S6_AXI_RDATA[3] = \<const0> ;
  assign S6_AXI_RDATA[2] = \<const0> ;
  assign S6_AXI_RDATA[1] = \<const0> ;
  assign S6_AXI_RDATA[0] = \<const0> ;
  assign S6_AXI_RID[0] = \<const0> ;
  assign S6_AXI_RLAST = \<const0> ;
  assign S6_AXI_RRESP[1] = \<const0> ;
  assign S6_AXI_RRESP[0] = \<const0> ;
  assign S6_AXI_RVALID = \<const0> ;
  assign S6_AXI_WREADY = \<const0> ;
  assign S7_AXI_ACADDR[31] = \<const0> ;
  assign S7_AXI_ACADDR[30] = \<const0> ;
  assign S7_AXI_ACADDR[29] = \<const0> ;
  assign S7_AXI_ACADDR[28] = \<const0> ;
  assign S7_AXI_ACADDR[27] = \<const0> ;
  assign S7_AXI_ACADDR[26] = \<const0> ;
  assign S7_AXI_ACADDR[25] = \<const0> ;
  assign S7_AXI_ACADDR[24] = \<const0> ;
  assign S7_AXI_ACADDR[23] = \<const0> ;
  assign S7_AXI_ACADDR[22] = \<const0> ;
  assign S7_AXI_ACADDR[21] = \<const0> ;
  assign S7_AXI_ACADDR[20] = \<const0> ;
  assign S7_AXI_ACADDR[19] = \<const0> ;
  assign S7_AXI_ACADDR[18] = \<const0> ;
  assign S7_AXI_ACADDR[17] = \<const0> ;
  assign S7_AXI_ACADDR[16] = \<const0> ;
  assign S7_AXI_ACADDR[15] = \<const0> ;
  assign S7_AXI_ACADDR[14] = \<const0> ;
  assign S7_AXI_ACADDR[13] = \<const0> ;
  assign S7_AXI_ACADDR[12] = \<const0> ;
  assign S7_AXI_ACADDR[11] = \<const0> ;
  assign S7_AXI_ACADDR[10] = \<const0> ;
  assign S7_AXI_ACADDR[9] = \<const0> ;
  assign S7_AXI_ACADDR[8] = \<const0> ;
  assign S7_AXI_ACADDR[7] = \<const0> ;
  assign S7_AXI_ACADDR[6] = \<const0> ;
  assign S7_AXI_ACADDR[5] = \<const0> ;
  assign S7_AXI_ACADDR[4] = \<const0> ;
  assign S7_AXI_ACADDR[3] = \<const0> ;
  assign S7_AXI_ACADDR[2] = \<const0> ;
  assign S7_AXI_ACADDR[1] = \<const0> ;
  assign S7_AXI_ACADDR[0] = \<const0> ;
  assign S7_AXI_ACPROT[2] = \<const0> ;
  assign S7_AXI_ACPROT[1] = \<const0> ;
  assign S7_AXI_ACPROT[0] = \<const0> ;
  assign S7_AXI_ACSNOOP[3] = \<const0> ;
  assign S7_AXI_ACSNOOP[2] = \<const0> ;
  assign S7_AXI_ACSNOOP[1] = \<const0> ;
  assign S7_AXI_ACSNOOP[0] = \<const0> ;
  assign S7_AXI_ACVALID = \<const0> ;
  assign S7_AXI_ARREADY = \<const0> ;
  assign S7_AXI_AWREADY = \<const0> ;
  assign S7_AXI_BID[0] = \<const0> ;
  assign S7_AXI_BRESP[1] = \<const0> ;
  assign S7_AXI_BRESP[0] = \<const0> ;
  assign S7_AXI_BVALID = \<const0> ;
  assign S7_AXI_CDREADY = \<const0> ;
  assign S7_AXI_CRREADY = \<const0> ;
  assign S7_AXI_GEN_ARREADY = \<const0> ;
  assign S7_AXI_GEN_AWREADY = \<const0> ;
  assign S7_AXI_GEN_BID[0] = \<const0> ;
  assign S7_AXI_GEN_BRESP[1] = \<const0> ;
  assign S7_AXI_GEN_BRESP[0] = \<const0> ;
  assign S7_AXI_GEN_BVALID = \<const0> ;
  assign S7_AXI_GEN_RDATA[31] = \<const0> ;
  assign S7_AXI_GEN_RDATA[30] = \<const0> ;
  assign S7_AXI_GEN_RDATA[29] = \<const0> ;
  assign S7_AXI_GEN_RDATA[28] = \<const0> ;
  assign S7_AXI_GEN_RDATA[27] = \<const0> ;
  assign S7_AXI_GEN_RDATA[26] = \<const0> ;
  assign S7_AXI_GEN_RDATA[25] = \<const0> ;
  assign S7_AXI_GEN_RDATA[24] = \<const0> ;
  assign S7_AXI_GEN_RDATA[23] = \<const0> ;
  assign S7_AXI_GEN_RDATA[22] = \<const0> ;
  assign S7_AXI_GEN_RDATA[21] = \<const0> ;
  assign S7_AXI_GEN_RDATA[20] = \<const0> ;
  assign S7_AXI_GEN_RDATA[19] = \<const0> ;
  assign S7_AXI_GEN_RDATA[18] = \<const0> ;
  assign S7_AXI_GEN_RDATA[17] = \<const0> ;
  assign S7_AXI_GEN_RDATA[16] = \<const0> ;
  assign S7_AXI_GEN_RDATA[15] = \<const0> ;
  assign S7_AXI_GEN_RDATA[14] = \<const0> ;
  assign S7_AXI_GEN_RDATA[13] = \<const0> ;
  assign S7_AXI_GEN_RDATA[12] = \<const0> ;
  assign S7_AXI_GEN_RDATA[11] = \<const0> ;
  assign S7_AXI_GEN_RDATA[10] = \<const0> ;
  assign S7_AXI_GEN_RDATA[9] = \<const0> ;
  assign S7_AXI_GEN_RDATA[8] = \<const0> ;
  assign S7_AXI_GEN_RDATA[7] = \<const0> ;
  assign S7_AXI_GEN_RDATA[6] = \<const0> ;
  assign S7_AXI_GEN_RDATA[5] = \<const0> ;
  assign S7_AXI_GEN_RDATA[4] = \<const0> ;
  assign S7_AXI_GEN_RDATA[3] = \<const0> ;
  assign S7_AXI_GEN_RDATA[2] = \<const0> ;
  assign S7_AXI_GEN_RDATA[1] = \<const0> ;
  assign S7_AXI_GEN_RDATA[0] = \<const0> ;
  assign S7_AXI_GEN_RID[0] = \<const0> ;
  assign S7_AXI_GEN_RLAST = \<const0> ;
  assign S7_AXI_GEN_RRESP[1] = \<const0> ;
  assign S7_AXI_GEN_RRESP[0] = \<const0> ;
  assign S7_AXI_GEN_RVALID = \<const0> ;
  assign S7_AXI_GEN_WREADY = \<const0> ;
  assign S7_AXI_RDATA[31] = \<const0> ;
  assign S7_AXI_RDATA[30] = \<const0> ;
  assign S7_AXI_RDATA[29] = \<const0> ;
  assign S7_AXI_RDATA[28] = \<const0> ;
  assign S7_AXI_RDATA[27] = \<const0> ;
  assign S7_AXI_RDATA[26] = \<const0> ;
  assign S7_AXI_RDATA[25] = \<const0> ;
  assign S7_AXI_RDATA[24] = \<const0> ;
  assign S7_AXI_RDATA[23] = \<const0> ;
  assign S7_AXI_RDATA[22] = \<const0> ;
  assign S7_AXI_RDATA[21] = \<const0> ;
  assign S7_AXI_RDATA[20] = \<const0> ;
  assign S7_AXI_RDATA[19] = \<const0> ;
  assign S7_AXI_RDATA[18] = \<const0> ;
  assign S7_AXI_RDATA[17] = \<const0> ;
  assign S7_AXI_RDATA[16] = \<const0> ;
  assign S7_AXI_RDATA[15] = \<const0> ;
  assign S7_AXI_RDATA[14] = \<const0> ;
  assign S7_AXI_RDATA[13] = \<const0> ;
  assign S7_AXI_RDATA[12] = \<const0> ;
  assign S7_AXI_RDATA[11] = \<const0> ;
  assign S7_AXI_RDATA[10] = \<const0> ;
  assign S7_AXI_RDATA[9] = \<const0> ;
  assign S7_AXI_RDATA[8] = \<const0> ;
  assign S7_AXI_RDATA[7] = \<const0> ;
  assign S7_AXI_RDATA[6] = \<const0> ;
  assign S7_AXI_RDATA[5] = \<const0> ;
  assign S7_AXI_RDATA[4] = \<const0> ;
  assign S7_AXI_RDATA[3] = \<const0> ;
  assign S7_AXI_RDATA[2] = \<const0> ;
  assign S7_AXI_RDATA[1] = \<const0> ;
  assign S7_AXI_RDATA[0] = \<const0> ;
  assign S7_AXI_RID[0] = \<const0> ;
  assign S7_AXI_RLAST = \<const0> ;
  assign S7_AXI_RRESP[1] = \<const0> ;
  assign S7_AXI_RRESP[0] = \<const0> ;
  assign S7_AXI_RVALID = \<const0> ;
  assign S7_AXI_WREADY = \<const0> ;
  assign S8_AXI_ACADDR[31] = \<const0> ;
  assign S8_AXI_ACADDR[30] = \<const0> ;
  assign S8_AXI_ACADDR[29] = \<const0> ;
  assign S8_AXI_ACADDR[28] = \<const0> ;
  assign S8_AXI_ACADDR[27] = \<const0> ;
  assign S8_AXI_ACADDR[26] = \<const0> ;
  assign S8_AXI_ACADDR[25] = \<const0> ;
  assign S8_AXI_ACADDR[24] = \<const0> ;
  assign S8_AXI_ACADDR[23] = \<const0> ;
  assign S8_AXI_ACADDR[22] = \<const0> ;
  assign S8_AXI_ACADDR[21] = \<const0> ;
  assign S8_AXI_ACADDR[20] = \<const0> ;
  assign S8_AXI_ACADDR[19] = \<const0> ;
  assign S8_AXI_ACADDR[18] = \<const0> ;
  assign S8_AXI_ACADDR[17] = \<const0> ;
  assign S8_AXI_ACADDR[16] = \<const0> ;
  assign S8_AXI_ACADDR[15] = \<const0> ;
  assign S8_AXI_ACADDR[14] = \<const0> ;
  assign S8_AXI_ACADDR[13] = \<const0> ;
  assign S8_AXI_ACADDR[12] = \<const0> ;
  assign S8_AXI_ACADDR[11] = \<const0> ;
  assign S8_AXI_ACADDR[10] = \<const0> ;
  assign S8_AXI_ACADDR[9] = \<const0> ;
  assign S8_AXI_ACADDR[8] = \<const0> ;
  assign S8_AXI_ACADDR[7] = \<const0> ;
  assign S8_AXI_ACADDR[6] = \<const0> ;
  assign S8_AXI_ACADDR[5] = \<const0> ;
  assign S8_AXI_ACADDR[4] = \<const0> ;
  assign S8_AXI_ACADDR[3] = \<const0> ;
  assign S8_AXI_ACADDR[2] = \<const0> ;
  assign S8_AXI_ACADDR[1] = \<const0> ;
  assign S8_AXI_ACADDR[0] = \<const0> ;
  assign S8_AXI_ACPROT[2] = \<const0> ;
  assign S8_AXI_ACPROT[1] = \<const0> ;
  assign S8_AXI_ACPROT[0] = \<const0> ;
  assign S8_AXI_ACSNOOP[3] = \<const0> ;
  assign S8_AXI_ACSNOOP[2] = \<const0> ;
  assign S8_AXI_ACSNOOP[1] = \<const0> ;
  assign S8_AXI_ACSNOOP[0] = \<const0> ;
  assign S8_AXI_ACVALID = \<const0> ;
  assign S8_AXI_ARREADY = \<const0> ;
  assign S8_AXI_AWREADY = \<const0> ;
  assign S8_AXI_BID[0] = \<const0> ;
  assign S8_AXI_BRESP[1] = \<const0> ;
  assign S8_AXI_BRESP[0] = \<const0> ;
  assign S8_AXI_BVALID = \<const0> ;
  assign S8_AXI_CDREADY = \<const0> ;
  assign S8_AXI_CRREADY = \<const0> ;
  assign S8_AXI_GEN_ARREADY = \<const0> ;
  assign S8_AXI_GEN_AWREADY = \<const0> ;
  assign S8_AXI_GEN_BID[0] = \<const0> ;
  assign S8_AXI_GEN_BRESP[1] = \<const0> ;
  assign S8_AXI_GEN_BRESP[0] = \<const0> ;
  assign S8_AXI_GEN_BVALID = \<const0> ;
  assign S8_AXI_GEN_RDATA[31] = \<const0> ;
  assign S8_AXI_GEN_RDATA[30] = \<const0> ;
  assign S8_AXI_GEN_RDATA[29] = \<const0> ;
  assign S8_AXI_GEN_RDATA[28] = \<const0> ;
  assign S8_AXI_GEN_RDATA[27] = \<const0> ;
  assign S8_AXI_GEN_RDATA[26] = \<const0> ;
  assign S8_AXI_GEN_RDATA[25] = \<const0> ;
  assign S8_AXI_GEN_RDATA[24] = \<const0> ;
  assign S8_AXI_GEN_RDATA[23] = \<const0> ;
  assign S8_AXI_GEN_RDATA[22] = \<const0> ;
  assign S8_AXI_GEN_RDATA[21] = \<const0> ;
  assign S8_AXI_GEN_RDATA[20] = \<const0> ;
  assign S8_AXI_GEN_RDATA[19] = \<const0> ;
  assign S8_AXI_GEN_RDATA[18] = \<const0> ;
  assign S8_AXI_GEN_RDATA[17] = \<const0> ;
  assign S8_AXI_GEN_RDATA[16] = \<const0> ;
  assign S8_AXI_GEN_RDATA[15] = \<const0> ;
  assign S8_AXI_GEN_RDATA[14] = \<const0> ;
  assign S8_AXI_GEN_RDATA[13] = \<const0> ;
  assign S8_AXI_GEN_RDATA[12] = \<const0> ;
  assign S8_AXI_GEN_RDATA[11] = \<const0> ;
  assign S8_AXI_GEN_RDATA[10] = \<const0> ;
  assign S8_AXI_GEN_RDATA[9] = \<const0> ;
  assign S8_AXI_GEN_RDATA[8] = \<const0> ;
  assign S8_AXI_GEN_RDATA[7] = \<const0> ;
  assign S8_AXI_GEN_RDATA[6] = \<const0> ;
  assign S8_AXI_GEN_RDATA[5] = \<const0> ;
  assign S8_AXI_GEN_RDATA[4] = \<const0> ;
  assign S8_AXI_GEN_RDATA[3] = \<const0> ;
  assign S8_AXI_GEN_RDATA[2] = \<const0> ;
  assign S8_AXI_GEN_RDATA[1] = \<const0> ;
  assign S8_AXI_GEN_RDATA[0] = \<const0> ;
  assign S8_AXI_GEN_RID[0] = \<const0> ;
  assign S8_AXI_GEN_RLAST = \<const0> ;
  assign S8_AXI_GEN_RRESP[1] = \<const0> ;
  assign S8_AXI_GEN_RRESP[0] = \<const0> ;
  assign S8_AXI_GEN_RVALID = \<const0> ;
  assign S8_AXI_GEN_WREADY = \<const0> ;
  assign S8_AXI_RDATA[31] = \<const0> ;
  assign S8_AXI_RDATA[30] = \<const0> ;
  assign S8_AXI_RDATA[29] = \<const0> ;
  assign S8_AXI_RDATA[28] = \<const0> ;
  assign S8_AXI_RDATA[27] = \<const0> ;
  assign S8_AXI_RDATA[26] = \<const0> ;
  assign S8_AXI_RDATA[25] = \<const0> ;
  assign S8_AXI_RDATA[24] = \<const0> ;
  assign S8_AXI_RDATA[23] = \<const0> ;
  assign S8_AXI_RDATA[22] = \<const0> ;
  assign S8_AXI_RDATA[21] = \<const0> ;
  assign S8_AXI_RDATA[20] = \<const0> ;
  assign S8_AXI_RDATA[19] = \<const0> ;
  assign S8_AXI_RDATA[18] = \<const0> ;
  assign S8_AXI_RDATA[17] = \<const0> ;
  assign S8_AXI_RDATA[16] = \<const0> ;
  assign S8_AXI_RDATA[15] = \<const0> ;
  assign S8_AXI_RDATA[14] = \<const0> ;
  assign S8_AXI_RDATA[13] = \<const0> ;
  assign S8_AXI_RDATA[12] = \<const0> ;
  assign S8_AXI_RDATA[11] = \<const0> ;
  assign S8_AXI_RDATA[10] = \<const0> ;
  assign S8_AXI_RDATA[9] = \<const0> ;
  assign S8_AXI_RDATA[8] = \<const0> ;
  assign S8_AXI_RDATA[7] = \<const0> ;
  assign S8_AXI_RDATA[6] = \<const0> ;
  assign S8_AXI_RDATA[5] = \<const0> ;
  assign S8_AXI_RDATA[4] = \<const0> ;
  assign S8_AXI_RDATA[3] = \<const0> ;
  assign S8_AXI_RDATA[2] = \<const0> ;
  assign S8_AXI_RDATA[1] = \<const0> ;
  assign S8_AXI_RDATA[0] = \<const0> ;
  assign S8_AXI_RID[0] = \<const0> ;
  assign S8_AXI_RLAST = \<const0> ;
  assign S8_AXI_RRESP[1] = \<const0> ;
  assign S8_AXI_RRESP[0] = \<const0> ;
  assign S8_AXI_RVALID = \<const0> ;
  assign S8_AXI_WREADY = \<const0> ;
  assign S9_AXI_ACADDR[31] = \<const0> ;
  assign S9_AXI_ACADDR[30] = \<const0> ;
  assign S9_AXI_ACADDR[29] = \<const0> ;
  assign S9_AXI_ACADDR[28] = \<const0> ;
  assign S9_AXI_ACADDR[27] = \<const0> ;
  assign S9_AXI_ACADDR[26] = \<const0> ;
  assign S9_AXI_ACADDR[25] = \<const0> ;
  assign S9_AXI_ACADDR[24] = \<const0> ;
  assign S9_AXI_ACADDR[23] = \<const0> ;
  assign S9_AXI_ACADDR[22] = \<const0> ;
  assign S9_AXI_ACADDR[21] = \<const0> ;
  assign S9_AXI_ACADDR[20] = \<const0> ;
  assign S9_AXI_ACADDR[19] = \<const0> ;
  assign S9_AXI_ACADDR[18] = \<const0> ;
  assign S9_AXI_ACADDR[17] = \<const0> ;
  assign S9_AXI_ACADDR[16] = \<const0> ;
  assign S9_AXI_ACADDR[15] = \<const0> ;
  assign S9_AXI_ACADDR[14] = \<const0> ;
  assign S9_AXI_ACADDR[13] = \<const0> ;
  assign S9_AXI_ACADDR[12] = \<const0> ;
  assign S9_AXI_ACADDR[11] = \<const0> ;
  assign S9_AXI_ACADDR[10] = \<const0> ;
  assign S9_AXI_ACADDR[9] = \<const0> ;
  assign S9_AXI_ACADDR[8] = \<const0> ;
  assign S9_AXI_ACADDR[7] = \<const0> ;
  assign S9_AXI_ACADDR[6] = \<const0> ;
  assign S9_AXI_ACADDR[5] = \<const0> ;
  assign S9_AXI_ACADDR[4] = \<const0> ;
  assign S9_AXI_ACADDR[3] = \<const0> ;
  assign S9_AXI_ACADDR[2] = \<const0> ;
  assign S9_AXI_ACADDR[1] = \<const0> ;
  assign S9_AXI_ACADDR[0] = \<const0> ;
  assign S9_AXI_ACPROT[2] = \<const0> ;
  assign S9_AXI_ACPROT[1] = \<const0> ;
  assign S9_AXI_ACPROT[0] = \<const0> ;
  assign S9_AXI_ACSNOOP[3] = \<const0> ;
  assign S9_AXI_ACSNOOP[2] = \<const0> ;
  assign S9_AXI_ACSNOOP[1] = \<const0> ;
  assign S9_AXI_ACSNOOP[0] = \<const0> ;
  assign S9_AXI_ACVALID = \<const0> ;
  assign S9_AXI_ARREADY = \<const0> ;
  assign S9_AXI_AWREADY = \<const0> ;
  assign S9_AXI_BID[0] = \<const0> ;
  assign S9_AXI_BRESP[1] = \<const0> ;
  assign S9_AXI_BRESP[0] = \<const0> ;
  assign S9_AXI_BVALID = \<const0> ;
  assign S9_AXI_CDREADY = \<const0> ;
  assign S9_AXI_CRREADY = \<const0> ;
  assign S9_AXI_GEN_ARREADY = \<const0> ;
  assign S9_AXI_GEN_AWREADY = \<const0> ;
  assign S9_AXI_GEN_BID[0] = \<const0> ;
  assign S9_AXI_GEN_BRESP[1] = \<const0> ;
  assign S9_AXI_GEN_BRESP[0] = \<const0> ;
  assign S9_AXI_GEN_BVALID = \<const0> ;
  assign S9_AXI_GEN_RDATA[31] = \<const0> ;
  assign S9_AXI_GEN_RDATA[30] = \<const0> ;
  assign S9_AXI_GEN_RDATA[29] = \<const0> ;
  assign S9_AXI_GEN_RDATA[28] = \<const0> ;
  assign S9_AXI_GEN_RDATA[27] = \<const0> ;
  assign S9_AXI_GEN_RDATA[26] = \<const0> ;
  assign S9_AXI_GEN_RDATA[25] = \<const0> ;
  assign S9_AXI_GEN_RDATA[24] = \<const0> ;
  assign S9_AXI_GEN_RDATA[23] = \<const0> ;
  assign S9_AXI_GEN_RDATA[22] = \<const0> ;
  assign S9_AXI_GEN_RDATA[21] = \<const0> ;
  assign S9_AXI_GEN_RDATA[20] = \<const0> ;
  assign S9_AXI_GEN_RDATA[19] = \<const0> ;
  assign S9_AXI_GEN_RDATA[18] = \<const0> ;
  assign S9_AXI_GEN_RDATA[17] = \<const0> ;
  assign S9_AXI_GEN_RDATA[16] = \<const0> ;
  assign S9_AXI_GEN_RDATA[15] = \<const0> ;
  assign S9_AXI_GEN_RDATA[14] = \<const0> ;
  assign S9_AXI_GEN_RDATA[13] = \<const0> ;
  assign S9_AXI_GEN_RDATA[12] = \<const0> ;
  assign S9_AXI_GEN_RDATA[11] = \<const0> ;
  assign S9_AXI_GEN_RDATA[10] = \<const0> ;
  assign S9_AXI_GEN_RDATA[9] = \<const0> ;
  assign S9_AXI_GEN_RDATA[8] = \<const0> ;
  assign S9_AXI_GEN_RDATA[7] = \<const0> ;
  assign S9_AXI_GEN_RDATA[6] = \<const0> ;
  assign S9_AXI_GEN_RDATA[5] = \<const0> ;
  assign S9_AXI_GEN_RDATA[4] = \<const0> ;
  assign S9_AXI_GEN_RDATA[3] = \<const0> ;
  assign S9_AXI_GEN_RDATA[2] = \<const0> ;
  assign S9_AXI_GEN_RDATA[1] = \<const0> ;
  assign S9_AXI_GEN_RDATA[0] = \<const0> ;
  assign S9_AXI_GEN_RID[0] = \<const0> ;
  assign S9_AXI_GEN_RLAST = \<const0> ;
  assign S9_AXI_GEN_RRESP[1] = \<const0> ;
  assign S9_AXI_GEN_RRESP[0] = \<const0> ;
  assign S9_AXI_GEN_RVALID = \<const0> ;
  assign S9_AXI_GEN_WREADY = \<const0> ;
  assign S9_AXI_RDATA[31] = \<const0> ;
  assign S9_AXI_RDATA[30] = \<const0> ;
  assign S9_AXI_RDATA[29] = \<const0> ;
  assign S9_AXI_RDATA[28] = \<const0> ;
  assign S9_AXI_RDATA[27] = \<const0> ;
  assign S9_AXI_RDATA[26] = \<const0> ;
  assign S9_AXI_RDATA[25] = \<const0> ;
  assign S9_AXI_RDATA[24] = \<const0> ;
  assign S9_AXI_RDATA[23] = \<const0> ;
  assign S9_AXI_RDATA[22] = \<const0> ;
  assign S9_AXI_RDATA[21] = \<const0> ;
  assign S9_AXI_RDATA[20] = \<const0> ;
  assign S9_AXI_RDATA[19] = \<const0> ;
  assign S9_AXI_RDATA[18] = \<const0> ;
  assign S9_AXI_RDATA[17] = \<const0> ;
  assign S9_AXI_RDATA[16] = \<const0> ;
  assign S9_AXI_RDATA[15] = \<const0> ;
  assign S9_AXI_RDATA[14] = \<const0> ;
  assign S9_AXI_RDATA[13] = \<const0> ;
  assign S9_AXI_RDATA[12] = \<const0> ;
  assign S9_AXI_RDATA[11] = \<const0> ;
  assign S9_AXI_RDATA[10] = \<const0> ;
  assign S9_AXI_RDATA[9] = \<const0> ;
  assign S9_AXI_RDATA[8] = \<const0> ;
  assign S9_AXI_RDATA[7] = \<const0> ;
  assign S9_AXI_RDATA[6] = \<const0> ;
  assign S9_AXI_RDATA[5] = \<const0> ;
  assign S9_AXI_RDATA[4] = \<const0> ;
  assign S9_AXI_RDATA[3] = \<const0> ;
  assign S9_AXI_RDATA[2] = \<const0> ;
  assign S9_AXI_RDATA[1] = \<const0> ;
  assign S9_AXI_RDATA[0] = \<const0> ;
  assign S9_AXI_RID[0] = \<const0> ;
  assign S9_AXI_RLAST = \<const0> ;
  assign S9_AXI_RRESP[1] = \<const0> ;
  assign S9_AXI_RRESP[0] = \<const0> ;
  assign S9_AXI_RVALID = \<const0> ;
  assign S9_AXI_WREADY = \<const0> ;
  assign S_AXI_CTRL_ARREADY = \<const0> ;
  assign S_AXI_CTRL_AWREADY = \<const0> ;
  assign S_AXI_CTRL_BRESP[1] = \<const0> ;
  assign S_AXI_CTRL_BRESP[0] = \<const0> ;
  assign S_AXI_CTRL_BVALID = \<const0> ;
  assign S_AXI_CTRL_RDATA[31] = \<const0> ;
  assign S_AXI_CTRL_RDATA[30] = \<const0> ;
  assign S_AXI_CTRL_RDATA[29] = \<const0> ;
  assign S_AXI_CTRL_RDATA[28] = \<const0> ;
  assign S_AXI_CTRL_RDATA[27] = \<const0> ;
  assign S_AXI_CTRL_RDATA[26] = \<const0> ;
  assign S_AXI_CTRL_RDATA[25] = \<const0> ;
  assign S_AXI_CTRL_RDATA[24] = \<const0> ;
  assign S_AXI_CTRL_RDATA[23] = \<const0> ;
  assign S_AXI_CTRL_RDATA[22] = \<const0> ;
  assign S_AXI_CTRL_RDATA[21] = \<const0> ;
  assign S_AXI_CTRL_RDATA[20] = \<const0> ;
  assign S_AXI_CTRL_RDATA[19] = \<const0> ;
  assign S_AXI_CTRL_RDATA[18] = \<const0> ;
  assign S_AXI_CTRL_RDATA[17] = \<const0> ;
  assign S_AXI_CTRL_RDATA[16] = \<const0> ;
  assign S_AXI_CTRL_RDATA[15] = \<const0> ;
  assign S_AXI_CTRL_RDATA[14] = \<const0> ;
  assign S_AXI_CTRL_RDATA[13] = \<const0> ;
  assign S_AXI_CTRL_RDATA[12] = \<const0> ;
  assign S_AXI_CTRL_RDATA[11] = \<const0> ;
  assign S_AXI_CTRL_RDATA[10] = \<const0> ;
  assign S_AXI_CTRL_RDATA[9] = \<const0> ;
  assign S_AXI_CTRL_RDATA[8] = \<const0> ;
  assign S_AXI_CTRL_RDATA[7] = \<const0> ;
  assign S_AXI_CTRL_RDATA[6] = \<const0> ;
  assign S_AXI_CTRL_RDATA[5] = \<const0> ;
  assign S_AXI_CTRL_RDATA[4] = \<const0> ;
  assign S_AXI_CTRL_RDATA[3] = \<const0> ;
  assign S_AXI_CTRL_RDATA[2] = \<const0> ;
  assign S_AXI_CTRL_RDATA[1] = \<const0> ;
  assign S_AXI_CTRL_RDATA[0] = \<const0> ;
  assign S_AXI_CTRL_RRESP[1] = \<const0> ;
  assign S_AXI_CTRL_RRESP[0] = \<const0> ;
  assign S_AXI_CTRL_RVALID = \<const0> ;
  assign S_AXI_CTRL_WREADY = \<const0> ;
  LUT1 #(
    .INIT(2'h1)) 
    ARESET_i_1
       (.I0(ARESETN),
        .O(p_0_in));
  FDRE ARESET_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(p_0_in),
        .Q(ARESET),
        .R(1'b0));
  Fast_IP_Clock_system_cache_0_0_sc_s_axi_ctrl_interface AXI_Ctrl
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(FE_n_229),
        .Q(\Gen_Block[0].ARB/ARESET_I ),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .ctrl_init_done_i(ctrl_init_done_i),
        .ctrl_init_done_i_reg_0(AXI_Ctrl_n_3),
        .ctrl_init_done_i_reg_1(AXI_Ctrl_n_4),
        .ctrl_ready(ctrl_ready));
  Fast_IP_Clock_system_cache_0_0_sc_back_end BE
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(\CB/Gen_Master_Ports[0].TransOrd/refresh_pending_write ),
        .M0_AXI_ARADDR(M0_AXI_ARADDR),
        .M0_AXI_ARBURST(M0_AXI_ARBURST),
        .M0_AXI_ARLEN(M0_AXI_ARLEN),
        .M0_AXI_ARPROT(\^M0_AXI_ARPROT ),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_ARSIZE(M0_AXI_ARSIZE),
        .M0_AXI_AWADDR(M0_AXI_AWADDR),
        .M0_AXI_AWBURST(M0_AXI_AWBURST),
        .M0_AXI_AWLEN(M0_AXI_AWLEN),
        .M0_AXI_AWPROT(\^M0_AXI_AWPROT ),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_AWSIZE(\^M0_AXI_AWSIZE ),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_WDATA(M0_AXI_WDATA),
        .M0_AXI_WLAST(M0_AXI_WLAST),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M0_AXI_WSTRB(M0_AXI_WSTRB),
        .\M_AXI_ARLEN_reg[7] (\read_req_info[0][Len] ),
        .\M_AXI_ARPROT_reg[1] (CC_n_222),
        .\M_AXI_ARSIZE_reg[2] (\read_req_info[0][Size] ),
        .M_AXI_ARVALID_I_reg(M0_AXI_ARVALID),
        .\M_AXI_AWADDR_reg[23] ({\write_req_info[0][Addr] [23:13],\write_req_info[0][Addr] [5:0]}),
        .\M_AXI_AWLEN_reg[7] ({\write_req_info[0][Len] [7:6],CC_n_76,CC_n_77,\write_req_info[0][Len] [3:0]}),
        .\M_AXI_AWSIZE_reg[1] (\write_req_info[0][Size] ),
        .M_AXI_AWVALID_I_reg(M0_AXI_AWVALID),
        .\M_AXI_WDATA_reg[31] (\write_data_info[0][Data] ),
        .\M_AXI_WSTRB_reg[3] (\write_data_info[0][BE] ),
        .M_AXI_WVALID_I_reg(M0_AXI_WVALID),
        .S(\Gen_Block[0].UD/UD_PR_Comp_Inst5/S ),
        .S_0(\CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.BE_Block_Or_Inst1/S ),
        .\Use_FPGA.Almost_Full_Inst (CC_n_62),
        .\Use_FPGA.Almost_Full_Inst_0 (CC_n_24),
        .\Use_FPGA.Almost_Full_Inst_1 (CC_n_12),
        .aw_fifo_full(\CB/Gen_Master_Ports[0].TransOrd/aw_fifo_full ),
        .bp_fifo_full(\Gen_Block[0].UD/bp_fifo_full ),
        .in({\read_req_info[0][Addr] [23:13],\write_req_info[0][Addr] [12:6],\read_req_info[0][Addr] [5:0]}),
        .need_to_stall_write_reg(BE_n_8),
        .queue_full(\CB/Gen_Master_Ports[0].TransOrd/queue_full ),
        .queue_push(\CB/Gen_Master_Ports[0].TransOrd/queue_push ),
        .queue_push26_out(\CB/Gen_Master_Ports[0].TransOrd/queue_push26_out ),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .ri_fifo_full(\Gen_Block[0].UD/ri_fifo_full ),
        .update_done_ar(\Gen_Block[0].UD/update_done_ar ),
        .update_done_aw(\Gen_Block[0].UD/update_done_aw ),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ));
  Fast_IP_Clock_system_cache_0_0_sc_cache_core CC
       (.A(\Gen_Block[0].LU/LU_Data_WE_And_Inst5/A ),
        .A161_out(\Gen_Block[0].LU/A161_out ),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .A_4(\Gen_Block[0].UD/UD_TagConf_Compare_Inst1/A ),
        .A_N(\Gen_Block[0].LU/LUD_Reg_PR_Or_Inst1/A_N ),
        .D(\Gen_Block[0].UD/update_wr_miss_word ),
        .DATA_INA(lookup_data_new_word),
        .E(\Gen_Block[0].UD/bs_refresh_reg ),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BRESP(M0_AXI_BRESP),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\M_AXI_WDATA_reg[31] (\access_data_info[0,1][Data] ),
        .\M_AXI_WDATA_reg[31]_0 (\access_data_info[0,0][Data] ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\access_data_info[0,1][BE] ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 (\access_data_info[0,0][BE] ),
        .Q(\access_info[0][Addr] ),
        .S(\Use_Port_0.AXI_0/WC_Or_Inst1/S ),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S_0(\Use_Generic_Port_0.AXI_0/W_Channel/WC_Or_Inst1/S ),
        .S_2(\CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.BE_Block_Or_Inst1/S ),
        .S_5(\Gen_Block[0].UD/UD_PR_Comp_Inst5/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (M0_AXI_RREADY),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (FE_n_158),
        .\The_Compare[0].sel_reg (\Gen_Block[0].LU/LU_Data_WE_And_Inst5/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_3 (\Gen_Block[0].UD/UD_TagConf_Compare_Inst1/The_Compare[0].sel_reg ),
        .\Use_FPGA.Almost_Full_Inst (FE_n_31),
        .\Use_FPGA.Empty_Inst (CC_n_30),
        .\Use_FPGA.Empty_Inst_0 (CC_n_221),
        .\Use_FPGA.Full_Inst (CC_n_26),
        .\Use_FPGA.Full_Inst_0 (\CB/Gen_Master_Ports[0].TransOrd/refresh_pending_write ),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[3].lookup_read_data_word_i_reg[3][31] (new_read_data_word),
        .\Use_Reg_Ctrl.queue_exist_i_reg (FE_n_201),
        .\Using_FPGA.MUXCY_I (FE_n_223),
        .\Using_FPGA.MUXCY_I_0 (FE_n_224),
        .\Using_FPGA.MUXCY_I_1 (FE_n_225),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .\access_info[0][Allocate] (\access_info[0][Allocate] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .access_valid(access_valid),
        .\arb_access[Evict] (\arb_access[Evict] ),
        .\arb_access[Wr] (\arb_access[Wr] ),
        .aw_fifo_full(\CB/Gen_Master_Ports[0].TransOrd/aw_fifo_full ),
        .bp_fifo_full(\Gen_Block[0].UD/bp_fifo_full ),
        .bs_exist(\Gen_Block[0].UD/bs_exist ),
        .\bs_port_num_reg[0] (CC_n_13),
        .bs_slv(\Gen_Block[0].UD/bs_slv ),
        .\bs_src_reg[0] (CC_n_154),
        .\bs_src_reg[1] (\Gen_Block[0].UD/bs_src ),
        .in({\read_req_info[0][Addr] [23:13],\write_req_info[0][Addr] [12:6],\read_req_info[0][Addr] [5:0]}),
        .lookup_piperun(lookup_piperun),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lu_check_info_reg[Addr][12] (lookup_stall_addr),
        .\lu_check_info_reg[Port_Num][0] (CC_n_10),
        .\lu_check_locked_hit_reg[3] (CC_n_142),
        .\lu_check_locked_hit_reg[3]_0 (CC_n_223),
        .lu_check_read_info_done_reg(CC_n_224),
        .\lu_mem_info_reg[Addr][12] (\Gen_Block[0].LU/B_Vec ),
        .\lu_mem_info_reg[Addr_Stp][5] ({\access_info[0][Addr_Stp] ,FE_n_219}),
        .\lu_mem_info_reg[Addr_Use][5] (\access_info[0][Addr_Use] ),
        .\lu_mem_info_reg[Len][7] (\access_info[0][Len] ),
        .\lu_mem_info_reg[Port_Num][0] (CC_n_18),
        .\lu_mem_info_reg[Size][2] (\access_info[0][Size] ),
        .lu_mem_single_beat(\Gen_Block[0].LU/lu_mem_single_beat ),
        .lu_mem_valid_reg(CC_n_1),
        .lu_mem_write_alloc0(\Gen_Block[0].LU/lu_mem_write_alloc0 ),
        .lud_addr_pipeline_full(\Gen_Block[0].LU/lud_addr_pipeline_full ),
        .lud_addr_pipeline_full0(\Gen_Block[0].LU/lud_addr_pipeline_full0 ),
        .lud_addr_pipeline_full_reg(CC_n_146),
        .\lud_mem_port_one_hot_reg[1] (\Gen_Block[0].LU/lud_mem_port_one_hot ),
        .lud_reg_port_num(\Gen_Block[0].LU/lud_reg_port_num ),
        .lud_reg_valid_reg(CC_n_4),
        .lud_reg_valid_reg_0(CC_n_144),
        .lud_write_hit_done_reg(FE_n_154),
        .new_read_data_last(\Use_Generic_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .new_read_data_last_1(\Use_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .new_read_data_word(\Use_Generic_Port_0.AXI_0/R_Channel/new_read_data_word ),
        .out({CC_n_65,CC_n_66}),
        .p_95_in(\Gen_Block[0].LU/p_95_in ),
        .\pending_write_reg[0] (BE_n_8),
        .queue_full(\CB/Gen_Master_Ports[0].TransOrd/queue_full ),
        .queue_push(\CB/Gen_Master_Ports[0].TransOrd/queue_push ),
        .queue_push26_out(\CB/Gen_Master_Ports[0].TransOrd/queue_push26_out ),
        .r_hit_push(\Use_Generic_Port_0.AXI_0/R_Channel/r_hit_push ),
        .r_hit_push_7(\Use_Port_0.AXI_0/R_Channel/r_hit_push ),
        .r_miss_fifo_full(\Use_Port_0.AXI_0/R_Channel/r_miss_fifo_full ),
        .r_miss_fifo_full_6(\Use_Generic_Port_0.AXI_0/R_Channel/r_miss_fifo_full ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .ri_fifo_full(\Gen_Block[0].UD/ri_fifo_full ),
        .update_done_ar(\Gen_Block[0].UD/update_done_ar ),
        .update_done_ar_reg(CC_n_222),
        .update_done_aw(\Gen_Block[0].UD/update_done_aw ),
        .update_evict_busy_reg(\write_data_info[0][BE] ),
        .update_evict_busy_reg_0(\write_data_info[0][Data] ),
        .update_evict_valid_reg(CC_n_62),
        .\update_ext_bresp_info[0,0][BRESP] (\update_ext_bresp_info[0,0][BRESP] ),
        .\update_info_reg[Addr][23] ({\write_req_info[0][Addr] [23:13],\write_req_info[0][Addr] [5:0]}),
        .\update_info_reg[Len][7] ({\write_req_info[0][Len] [7:6],CC_n_76,CC_n_77,\write_req_info[0][Len] [3:0]}),
        .\update_info_reg[Len][7]_0 (\read_req_info[0][Len] ),
        .\update_info_reg[Size][1] (\write_req_info[0][Size] ),
        .\update_info_reg[Size][2] (\read_req_info[0][Size] ),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_wm_pop_normal_hold_reg(FE_n_200),
        .\update_wma_data_reg[15] (FE_n_212),
        .\update_wma_data_reg[23] (FE_n_211),
        .\update_wma_data_reg[31] (FE_n_202),
        .\update_wma_data_reg[7] (FE_n_213),
        .update_write_miss_ongoing_reg(FE_n_29),
        .wm_allocate_reg(CC_n_12),
        .wm_allocate_reg_0(CC_n_24),
        .wm_allow(\Gen_Block[0].UD/wm_allow ),
        .wm_port(\Gen_Block[0].UD/wm_port ),
        .wr_port_data_ready(wr_port_data_ready),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_req_info[0][Kind] (\write_req_info[0][Kind] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ));
  Fast_IP_Clock_system_cache_0_0_sc_front_end FE
       (.A(\Gen_Block[0].UD/UD_TagConf_Compare_Inst1/A ),
        .A161_out(\Gen_Block[0].LU/A161_out ),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .A_3(\Gen_Block[0].LU/LU_Data_WE_And_Inst5/A ),
        .A_N(\Gen_Block[0].LU/LUD_Reg_PR_Or_Inst1/A_N ),
        .D(\Gen_Block[0].UD/update_wr_miss_word ),
        .DATA_INA(lookup_data_new_word),
        .E(\Gen_Block[0].UD/bs_refresh_reg ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (CC_n_10),
        .Q(\Gen_Block[0].ARB/ARESET_I ),
        .S(\Use_Port_0.AXI_0/WC_Or_Inst1/S ),
        .S0_AXI_ARADDR(S0_AXI_ARADDR),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE[2]),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .S0_AXI_ARSNOOP(S0_AXI_ARSNOOP),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBAR(S0_AXI_AWBAR[0]),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWCACHE(S0_AXI_AWCACHE[2:0]),
        .S0_AXI_AWID(S0_AXI_AWID),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWREADY(S0_AXI_AWREADY),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S0_AXI_BID(S0_AXI_BID),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .S0_AXI_GEN_ARADDR(S0_AXI_GEN_ARADDR),
        .S0_AXI_GEN_ARBURST(S0_AXI_GEN_ARBURST),
        .S0_AXI_GEN_ARCACHE(S0_AXI_GEN_ARCACHE[2]),
        .S0_AXI_GEN_ARID(S0_AXI_GEN_ARID),
        .S0_AXI_GEN_ARLEN(S0_AXI_GEN_ARLEN),
        .S0_AXI_GEN_ARREADY(S0_AXI_GEN_ARREADY),
        .S0_AXI_GEN_ARSIZE(S0_AXI_GEN_ARSIZE),
        .S0_AXI_GEN_ARVALID(S0_AXI_GEN_ARVALID),
        .S0_AXI_GEN_AWADDR(S0_AXI_GEN_AWADDR),
        .S0_AXI_GEN_AWBURST(S0_AXI_GEN_AWBURST),
        .S0_AXI_GEN_AWCACHE(S0_AXI_GEN_AWCACHE[2:0]),
        .S0_AXI_GEN_AWID(S0_AXI_GEN_AWID),
        .S0_AXI_GEN_AWLEN(S0_AXI_GEN_AWLEN),
        .S0_AXI_GEN_AWLOCK(S0_AXI_GEN_AWLOCK),
        .S0_AXI_GEN_AWREADY(S0_AXI_GEN_AWREADY),
        .S0_AXI_GEN_AWSIZE(S0_AXI_GEN_AWSIZE),
        .S0_AXI_GEN_AWVALID(S0_AXI_GEN_AWVALID),
        .S0_AXI_GEN_BID(S0_AXI_GEN_BID),
        .S0_AXI_GEN_BREADY(S0_AXI_GEN_BREADY),
        .S0_AXI_GEN_BRESP(S0_AXI_GEN_BRESP),
        .S0_AXI_GEN_RDATA(S0_AXI_GEN_RDATA),
        .S0_AXI_GEN_RID(S0_AXI_GEN_RID),
        .S0_AXI_GEN_RLAST(S0_AXI_GEN_RLAST),
        .S0_AXI_GEN_RREADY(S0_AXI_GEN_RREADY),
        .S0_AXI_GEN_RRESP(S0_AXI_GEN_RRESP),
        .S0_AXI_GEN_RVALID(S0_AXI_GEN_RVALID),
        .S0_AXI_GEN_WDATA(S0_AXI_GEN_WDATA),
        .S0_AXI_GEN_WREADY(S0_AXI_GEN_WREADY),
        .S0_AXI_GEN_WSTRB(S0_AXI_GEN_WSTRB),
        .S0_AXI_GEN_WVALID(S0_AXI_GEN_WVALID),
        .S0_AXI_RDATA(S0_AXI_RDATA),
        .\S0_AXI_RDATA[31] (new_read_data_word),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RLAST(S0_AXI_RLAST),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RRESP(S0_AXI_RRESP),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .S0_AXI_WDATA(S0_AXI_WDATA),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WSTRB(S0_AXI_WSTRB),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .S_4(\Use_Generic_Port_0.AXI_0/W_Channel/WC_Or_Inst1/S ),
        .\S_AXI_BID_reg[0] (CC_n_13),
        .\S_AXI_BID_reg[0]_0 (CC_n_221),
        .\S_AXI_BRESP_I_reg[0] (CC_n_154),
        .\S_AXI_BRESP_I_reg[0]_0 (\Gen_Block[0].UD/bs_src ),
        .S_AXI_BVALID_I_reg(S0_AXI_GEN_BVALID),
        .S_AXI_BVALID_I_reg_0(S0_AXI_BVALID),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (FE_n_29),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (FE_n_201),
        .\The_Compare[0].sel_reg (\Gen_Block[0].UD/UD_TagConf_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_2 (\Gen_Block[0].LU/LU_Data_WE_And_Inst5/The_Compare[0].sel_reg ),
        .\Use_FPGA.Almost_Full_Inst (FE_n_158),
        .\Use_FPGA.Almost_Full_Inst_0 (CC_n_224),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (CC_n_223),
        .\Use_Reg_Ctrl.queue_exist_i_reg (CC_n_30),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (CC_n_26),
        .\Using_FPGA.MUXCY_I (CC_n_1),
        .\Using_FPGA.MUXCY_I_0 (\Gen_Block[0].LU/B_Vec ),
        .\Using_FPGA.MUXCY_I_1 (lookup_stall_addr),
        .\Using_FPGA.MUXCY_I_i_1__54 (CC_n_18),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .\access_info[0][Allocate] (\access_info[0][Allocate] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .access_valid(access_valid),
        .\arb_access[Evict] (\arb_access[Evict] ),
        .\arb_access[Wr] (\arb_access[Wr] ),
        .\arb_access_i_reg[Addr][12] (FE_n_223),
        .\arb_access_i_reg[Addr][12]_0 (FE_n_224),
        .\arb_access_i_reg[Addr][12]_1 (FE_n_225),
        .\arb_access_i_reg[Addr][23] (\access_info[0][Addr] ),
        .\arb_access_i_reg[Len][7] (\access_info[0][Len] ),
        .\arb_access_i_reg[Size][1] ({\access_info[0][Addr_Stp] ,FE_n_219}),
        .\arb_access_i_reg[Size][1]_0 (\access_info[0][Addr_Use] ),
        .\arb_access_i_reg[Size][2] (\access_info[0][Size] ),
        .\arb_access_i_reg[Valid] (AXI_Ctrl_n_4),
        .bs_exist(\Gen_Block[0].UD/bs_exist ),
        .\bs_port_num_reg[0] (FE_n_31),
        .bs_slv(\Gen_Block[0].UD/bs_slv ),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .ctrl_init_done_i(ctrl_init_done_i),
        .ctrl_ready(ctrl_ready),
        .ctrl_ready_i_reg(FE_n_229),
        .dvm_2nd_part_reg(AXI_Ctrl_n_3),
        .in(\write_req_info[0][Addr] [12:6]),
        .lookup_piperun(lookup_piperun),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .lu_mem_single_beat(\Gen_Block[0].LU/lu_mem_single_beat ),
        .lu_mem_write_alloc0(\Gen_Block[0].LU/lu_mem_write_alloc0 ),
        .lud_addr_pipeline_full(\Gen_Block[0].LU/lud_addr_pipeline_full ),
        .lud_addr_pipeline_full0(\Gen_Block[0].LU/lud_addr_pipeline_full0 ),
        .lud_addr_pipeline_full_reg(CC_n_142),
        .lud_addr_pipeline_full_reg_0(CC_n_4),
        .lud_addr_pipeline_full_reg_1(CC_n_144),
        .lud_addr_pipeline_full_reg_2(\Gen_Block[0].LU/lud_mem_port_one_hot ),
        .lud_reg_port_num(\Gen_Block[0].LU/lud_reg_port_num ),
        .new_read_data_last(\Use_Generic_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .new_read_data_last_5(\Use_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .new_read_data_word(\Use_Generic_Port_0.AXI_0/R_Channel/new_read_data_word ),
        .out({CC_n_65,CC_n_66}),
        .p_95_in(\Gen_Block[0].LU/p_95_in ),
        .r_hit_push(\Use_Port_0.AXI_0/R_Channel/r_hit_push ),
        .r_hit_push_0(\Use_Generic_Port_0.AXI_0/R_Channel/r_hit_push ),
        .r_miss_fifo_full(\Use_Port_0.AXI_0/R_Channel/r_miss_fifo_full ),
        .r_miss_fifo_full_1(\Use_Generic_Port_0.AXI_0/R_Channel/r_miss_fifo_full ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ),
        .\update_ext_bresp_info[0,0][BRESP] (\update_ext_bresp_info[0,0][BRESP] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_wm_pop_normal_hold_reg(CC_n_24),
        .wm_allow(\Gen_Block[0].UD/wm_allow ),
        .wm_port(\Gen_Block[0].UD/wm_port ),
        .\wr_port_data_info_reg[0][BE][0] (FE_n_213),
        .\wr_port_data_info_reg[0][BE][1] (FE_n_212),
        .\wr_port_data_info_reg[0][BE][2] (FE_n_211),
        .\wr_port_data_info_reg[0][BE][3] (FE_n_202),
        .\wr_port_data_info_reg[0][BE][3]_0 (\access_data_info[0,0][BE] ),
        .\wr_port_data_info_reg[0][BE][3]_1 (\access_data_info[0,1][BE] ),
        .\wr_port_data_info_reg[0][Data][31] (\access_data_info[0,1][Data] ),
        .\wr_port_data_info_reg[0][Data][31]_0 (\access_data_info[0,0][Data] ),
        .\wr_port_data_info_reg[0][Last] (FE_n_200),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(FE_n_154),
        .wr_port_data_valid_i_reg_0(CC_n_146));
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif

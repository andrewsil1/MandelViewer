-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pretest is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x_V : IN STD_LOGIC_VECTOR (39 downto 0);
    y_V : IN STD_LOGIC_VECTOR (39 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of pretest is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv40_800000000 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv41_800000000 : STD_LOGIC_VECTOR (40 downto 0) := "00000100000000000000000000000000000000000";
    constant ap_const_lv41_1FE00000000 : STD_LOGIC_VECTOR (40 downto 0) := "11111111000000000000000000000000000000000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv40_FE00000000 : STD_LOGIC_VECTOR (39 downto 0) := "1111111000000000000000000000000000000000";
    constant ap_const_lv40_8000000000 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv35_0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000000";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv40_7FFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "0111111111111111111111111111111111111111";
    constant ap_const_lv33_0 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000000000000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv80_40000000000000001 : STD_LOGIC_VECTOR (79 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Result_9_reg_867 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_150_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Val2_13_reg_879 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_31_reg_891 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_415_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_10_reg_897 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_2_fu_274_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal reg_903 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal reg_914 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_3_fu_300_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal reg_929 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_23_fu_540_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_92_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal p_Result_s_reg_935 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_reg_951 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_1_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_961 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_968 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_669_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_reg_979 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_985 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge968_demorgan_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge968_demorgan_reg_990 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_277_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal reg_1002 : STD_LOGIC_VECTOR (80 downto 0);
    signal r_V_7_fu_283_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal r_V_4_fu_828_p1 : STD_LOGIC_VECTOR (80 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal r_3_reg_1026 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_1032 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_1037 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Result_8_reg_1059 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_reg_1065 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_1_reg_1070 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_2_reg_1076 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notrhs_reg_1081 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge980_demorgan_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge980_demorgan_reg_1087 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (80 downto 0);
    signal reg_1113 : STD_LOGIC_VECTOR (80 downto 0);
    signal r_V_fu_78_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (79 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_12_fu_831_p1 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_82_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_82_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal lhs_V_fu_88_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_92_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal rhs_V_1_cast_fu_551_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal grp_fu_92_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_2_fu_639_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_8_fu_385_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ret_V_5_fu_188_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Result_5_fu_112_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Result_5_fu_112_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_4_fu_98_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_120_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal signbit_i_i_i_i169_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_150_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge6_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_997_not_fu_246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1000_not_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1001_not_fu_788_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_794_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_454_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal lhs_V_fu_88_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal ret_V_7_fu_174_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_194_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal brmerge1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge12_demorgan_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge3_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_2_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_277_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_277_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_7_fu_283_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Result_s_fu_292_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_3_fu_300_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_s_15_fu_304_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_1_fu_314_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal y2_V_fu_344_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_fu_353_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_2_fu_360_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_fu_353_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_372_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_11_fu_372_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal lhs_V_1_fu_816_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal rhs_V_1_fu_819_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal p_Result_2_fu_360_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_415_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_18_fu_423_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_18_fu_423_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev1_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_441_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_454_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_1_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_454_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal deleted_zeros_fu_252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp966_demorgan_fu_459_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_demorgan_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp3_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_540_p0 : STD_LOGIC_VECTOR (79 downto 0);
    signal rhs_V_fu_544_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal rhs_V_fu_544_p3 : STD_LOGIC_VECTOR (74 downto 0);
    signal grp_fu_568_p0 : STD_LOGIC_VECTOR (33 downto 0);
    signal q_V_fu_598_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_22_fu_607_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal p_Result_7_fu_614_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_22_fu_607_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_626_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_25_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_2_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_194_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_614_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_fu_669_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_28_fu_692_p1 : STD_LOGIC_VECTOR (79 downto 0);
    signal tmp_28_fu_692_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal rev3_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_7_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_2_fu_711_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_zeros_1_fu_730_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_not2_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge7_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phitmp964_demorgan_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_demorgan_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp4_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp5_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_794_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge4_fu_240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge5_fu_132_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge9_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal brmerge2_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal lhs_V_1_fu_816_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal r_V_4_fu_828_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_12_fu_831_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal r_V_6_fu_840_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal r_V_6_fu_840_p3 : STD_LOGIC_VECTOR (72 downto 0);
    signal grp_fu_851_p0 : STD_LOGIC_VECTOR (80 downto 0);
    signal tmp_14_fu_847_p1 : STD_LOGIC_VECTOR (80 downto 0);
    signal grp_fu_851_p1 : STD_LOGIC_VECTOR (80 downto 0);
    signal rev4_fu_856_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_92_p01 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_92_p03 : STD_LOGIC_VECTOR (39 downto 0);
    signal p_Result_5_fu_112_p10 : STD_LOGIC_VECTOR (79 downto 0);

    component calc_mul_41s_40s_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (40 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (80 downto 0) );
    end component;


    component calc_mul_40s_40s_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (39 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (79 downto 0) );
    end component;



begin
    calc_mul_41s_40s_bkb_U1 : component calc_mul_41s_40s_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 41,
        din1_WIDTH => 40,
        dout_WIDTH => 81)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_82_p0,
        din1 => grp_fu_82_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_82_p2);

    calc_mul_40s_40s_cud_U2 : component calc_mul_40s_40s_cud
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 40,
        din1_WIDTH => 40,
        dout_WIDTH => 80)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_277_p0,
        din1 => grp_fu_277_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_277_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    reg_1002_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_1002 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_92_p2),81));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_1002 <= r_V_4_fu_828_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_1002 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_7_fu_283_p1),81));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_1002 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_277_p2),81));
            end if; 
        end if;
    end process;

    reg_1037_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_1037 <= grp_fu_92_p2(79 downto 76);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_1037 <= p_Result_s_15_fu_304_p1(79 downto 76);
            end if; 
        end if;
    end process;

    reg_1113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                reg_1113 <= tmp_12_fu_831_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                reg_1113 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_389_p2),81));
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reg_1113 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_V_fu_78_p1),81));
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                reg_1113 <= grp_fu_82_p2;
            end if; 
        end if;
    end process;

    reg_903_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                reg_903 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_150_p3),80));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                reg_903 <= r_V_2_fu_274_p1;
            end if; 
        end if;
    end process;

    reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                reg_914 <= grp_fu_92_p2(79 downto 75);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_914 <= p_Result_1_fu_314_p1(79 downto 75);
            end if; 
        end if;
    end process;

    reg_929_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                reg_929 <= grp_fu_92_p2(40 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                reg_929 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_540_p1),40));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                reg_929 <= grp_fu_150_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                reg_929 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_300_p1),40));
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Range1_all_ones_2_reg_1076 <= grp_fu_682_p2;
                Range1_all_zeros_1_reg_1070 <= grp_fu_677_p2;
                brmerge980_demorgan_reg_1087 <= brmerge980_demorgan_fu_719_p2;
                carry_3_reg_1065 <= carry_3_fu_663_p2;
                notrhs_reg_1081 <= grp_fu_851_p2;
                p_Result_8_reg_1059 <= grp_fu_415_p1(39 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Range1_all_ones_reg_968 <= grp_fu_682_p2;
                Range1_all_zeros_reg_961 <= grp_fu_677_p2;
                Range2_all_ones_reg_951 <= grp_fu_687_p2;
                r_1_reg_956 <= grp_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                brmerge968_demorgan_reg_990 <= brmerge968_demorgan_fu_448_p2;
                carry_1_reg_985 <= carry_1_fu_409_p2;
                p_Result_3_reg_979 <= p_Result_3_fu_669_p1(39 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                p_Result_10_reg_897 <= grp_fu_415_p1(39 downto 39);
                p_Result_9_reg_867 <= ret_V_7_fu_174_p2(40 downto 40);
                p_Val2_13_reg_879 <= grp_fu_150_p3;
                tmp_31_reg_891 <= ret_V_7_fu_174_p2(40 downto 40);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                p_Result_6_reg_1032 <= grp_fu_92_p2(79 downto 79);
                r_3_reg_1026 <= grp_fu_568_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                p_Result_s_reg_935 <= p_Result_s_fu_292_p1(79 downto 79);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= (rev4_fu_856_p2 or notrhs_reg_1081);
    brmerge12_demorgan_fu_225_p2 <= (tmp_31_reg_891 and p_Result_10_reg_897);
    brmerge1_fu_210_p2 <= (tmp_31_reg_891 or p_Result_10_reg_897);
    brmerge2_fu_501_p2 <= (underflow_fu_496_p2 or overflow_fu_479_p2);
    brmerge3_fu_229_p2 <= (brmerge12_demorgan_fu_225_p2 xor ap_const_lv1_1);
    brmerge4_fu_240_p2 <= (underflow_3_fu_235_p2 or overflow_2_fu_219_p2);
    brmerge5_fu_132_p2 <= (p_Result_5_fu_112_p3 xor p_Result_4_fu_98_p3);
    brmerge6_fu_144_p2 <= (signbit_i_i_i_i169_fu_138_p2 or p_Result_5_fu_112_p3);
    brmerge7_fu_745_p2 <= (p_not2_fu_739_p2 or p_Result_8_reg_1059);
    brmerge968_demorgan_fu_448_p2 <= (p_Result_3_fu_669_p3 and deleted_ones_fu_441_p3);
    brmerge980_demorgan_fu_719_p2 <= (grp_fu_415_p3 and deleted_ones_2_fu_711_p3);
    brmerge9_fu_777_p2 <= (underflow_2_fu_772_p2 or overflow_1_fu_755_p2);
    brmerge_fu_469_p2 <= (p_not_fu_463_p2 or p_Result_3_reg_979);
    carry_1_fu_409_p2 <= (p_Result_2_fu_360_p3 and grp_fu_657_p2);
    carry_3_fu_663_p2 <= (p_Result_7_fu_614_p3 and grp_fu_657_p2);
    deleted_ones_2_fu_711_p3 <= 
        p_7_fu_705_p2 when (carry_3_fu_663_p2(0) = '1') else 
        grp_fu_682_p2;
    deleted_ones_fu_441_p3 <= 
        p_s_fu_436_p2 when (carry_1_fu_409_p2(0) = '1') else 
        Range1_all_ones_reg_968;
    deleted_zeros_1_fu_730_p3 <= 
        Range1_all_ones_2_reg_1076 when (carry_3_reg_1065(0) = '1') else 
        Range1_all_zeros_1_reg_1070;
    deleted_zeros_fu_252_p3 <= 
        Range1_all_ones_reg_968 when (carry_1_reg_985(0) = '1') else 
        Range1_all_zeros_reg_961;

    grp_fu_150_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, brmerge6_fu_144_p2, p_997_not_fu_246_p2, p_1000_not_fu_512_p2, p_1001_not_fu_788_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_150_p0 <= p_1001_not_fu_788_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_150_p0 <= p_1000_not_fu_512_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_150_p0 <= p_997_not_fu_246_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_150_p0 <= brmerge6_fu_144_p2;
        else 
            grp_fu_150_p0 <= "X";
        end if; 
    end process;

    grp_fu_150_p3 <= 
        grp_fu_794_p3 when (grp_fu_150_p0(0) = '1') else 
        grp_fu_454_p3;
    grp_fu_194_p1 <= grp_fu_92_p2(40 - 1 downto 0);
    grp_fu_194_p3 <= grp_fu_194_p1(39 downto 39);
    grp_fu_277_p0 <= r_V_7_fu_283_p1(40 - 1 downto 0);
    grp_fu_277_p1 <= r_V_7_fu_283_p1(40 - 1 downto 0);

    grp_fu_389_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state13, rhs_V_1_cast_fu_551_p1, lhs_V_1_fu_816_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_389_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_1_fu_816_p1),80));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_389_p0 <= rhs_V_1_cast_fu_551_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_389_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv40_FE00000000),80));
        else 
            grp_fu_389_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_389_p1_assign_proc : process(x_V, ap_CS_fsm_state2, ap_CS_fsm_state10, reg_1002, ap_CS_fsm_state13, rhs_V_1_fu_819_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_1_fu_819_p1),80));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_389_p1 <= reg_1002(80 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_V),80));
        else 
            grp_fu_389_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_389_p2 <= std_logic_vector(signed(grp_fu_389_p0) + signed(grp_fu_389_p1));
    grp_fu_415_p1 <= grp_fu_92_p2(40 - 1 downto 0);
    grp_fu_415_p3 <= grp_fu_415_p1(39 downto 39);

    grp_fu_454_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, underflow_3_fu_235_p2, underflow_1_fu_126_p2, underflow_2_fu_772_p2, underflow_fu_496_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_454_p0 <= underflow_2_fu_772_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_454_p0 <= underflow_fu_496_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_454_p0 <= underflow_3_fu_235_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_454_p0 <= underflow_1_fu_126_p2;
        else 
            grp_fu_454_p0 <= "X";
        end if; 
    end process;


    grp_fu_454_p2_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, reg_929, ap_CS_fsm_state12, grp_fu_389_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_454_p2 <= reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_454_p2 <= grp_fu_389_p2(40 - 1 downto 0);
        else 
            grp_fu_454_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_454_p3 <= 
        ap_const_lv40_8000000000 when (grp_fu_454_p0(0) = '1') else 
        grp_fu_454_p2;
    grp_fu_568_p0 <= reg_929(34 - 1 downto 0);
    grp_fu_568_p2 <= "0" when (grp_fu_568_p0 = ap_const_lv34_0) else "1";
    grp_fu_657_p2 <= (grp_fu_194_p3 xor ap_const_lv1_1);
    grp_fu_677_p2 <= "1" when (reg_914 = ap_const_lv5_0) else "0";
    grp_fu_682_p2 <= "1" when (reg_914 = ap_const_lv5_1F) else "0";
    grp_fu_687_p2 <= "1" when (reg_1037 = ap_const_lv4_F) else "0";

    grp_fu_794_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state12, brmerge4_fu_240_p2, brmerge5_fu_132_p2, brmerge9_fu_777_p2, brmerge2_fu_501_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_794_p0 <= brmerge9_fu_777_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_794_p0 <= brmerge2_fu_501_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_794_p0 <= brmerge4_fu_240_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_794_p0 <= brmerge5_fu_132_p2;
        else 
            grp_fu_794_p0 <= "X";
        end if; 
    end process;


    grp_fu_794_p2_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state9, reg_929, ap_CS_fsm_state12, grp_fu_389_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            grp_fu_794_p2 <= reg_929;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_794_p2 <= grp_fu_389_p2(40 - 1 downto 0);
        else 
            grp_fu_794_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_794_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (grp_fu_794_p0(0) = '1') else 
        grp_fu_794_p2;

    grp_fu_82_p0_assign_proc : process(ap_CS_fsm_state1, r_V_2_fu_274_p1, ap_CS_fsm_state4, ap_CS_fsm_state14, r_V_fu_78_p1, tmp_12_fu_831_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_82_p0 <= tmp_12_fu_831_p1(41 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_82_p0 <= r_V_2_fu_274_p1(41 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_82_p0 <= r_V_fu_78_p1(41 - 1 downto 0);
        else 
            grp_fu_82_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_82_p1_assign_proc : process(ap_CS_fsm_state1, r_V_2_fu_274_p1, ap_CS_fsm_state4, r_V_4_fu_828_p1, ap_CS_fsm_state14, r_V_fu_78_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_82_p1 <= r_V_4_fu_828_p1(40 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_82_p1 <= r_V_2_fu_274_p1(40 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_82_p1 <= r_V_fu_78_p1(40 - 1 downto 0);
        else 
            grp_fu_82_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_851_p0_assign_proc : process(ap_CS_fsm_state11, reg_1113, ap_CS_fsm_state20, tmp_14_fu_847_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_851_p0 <= tmp_14_fu_847_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_851_p0 <= reg_1113;
        else 
            grp_fu_851_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_851_p1_assign_proc : process(ap_CS_fsm_state11, reg_1113, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_851_p1 <= reg_1113;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv80_40000000000000001),81));
        else 
            grp_fu_851_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_851_p2 <= "1" when (signed(grp_fu_851_p0) < signed(grp_fu_851_p1)) else "0";

    grp_fu_92_p0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, rhs_V_1_cast_fu_551_p1, grp_fu_92_p01, grp_fu_92_p03)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_92_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_92_p03),80));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_92_p0 <= rhs_V_1_cast_fu_551_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_92_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_92_p01),80));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_92_p0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv40_800000000),80));
        else 
            grp_fu_92_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_92_p01 <= y2_V_fu_344_p1(74 downto 35);
    grp_fu_92_p03 <= q_V_fu_598_p1(74 downto 35);

    grp_fu_92_p1_assign_proc : process(x_V, ap_CS_fsm_state2, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, reg_1113, tmp_2_fu_639_p1, tmp_8_fu_385_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_639_p1),80));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_92_p1 <= reg_1113(80 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_8_fu_385_p1),80));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_92_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(x_V),80));
        else 
            grp_fu_92_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_92_p2 <= std_logic_vector(unsigned(grp_fu_92_p0) + unsigned(grp_fu_92_p1));
    lhs_V_1_fu_816_p0 <= reg_929;
        lhs_V_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_1_fu_816_p0),41));

    lhs_V_fu_88_p0 <= x_V;
        lhs_V_fu_88_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_88_p0),41));

    overflow_1_fu_755_p2 <= (tmp_4_fu_750_p2 and brmerge7_fu_745_p2);
    overflow_2_fu_219_p2 <= (tmp_10_fu_214_p2 and brmerge1_fu_210_p2);
    overflow_fu_479_p2 <= (tmp_9_fu_474_p2 and brmerge_fu_469_p2);
    p_1000_not_fu_512_p2 <= (tmp3_fu_507_p2 or phitmp966_demorgan_fu_459_p2);
    p_1001_not_fu_788_p2 <= (tmp5_fu_783_p2 or phitmp964_demorgan_fu_735_p2);
    p_7_fu_705_p2 <= (rev3_fu_699_p2 and grp_fu_687_p2);
    p_997_not_fu_246_p2 <= (tmp_10_fu_214_p2 or brmerge12_demorgan_fu_225_p2);
    p_Result_1_fu_314_p1 <= grp_fu_82_p2(80 - 1 downto 0);
    p_Result_2_fu_360_p1 <= reg_1113(80 - 1 downto 0);
    p_Result_2_fu_360_p3 <= p_Result_2_fu_360_p1(74 downto 74);
    p_Result_3_fu_669_p1 <= grp_fu_92_p2(40 - 1 downto 0);
    p_Result_3_fu_669_p3 <= p_Result_3_fu_669_p1(39 downto 39);
    p_Result_4_fu_98_p3 <= ret_V_5_fu_188_p2(40 downto 40);
    p_Result_5_fu_112_p1 <= p_Result_5_fu_112_p10(40 - 1 downto 0);
    p_Result_5_fu_112_p10 <= std_logic_vector(signed(grp_fu_389_p0) + signed(grp_fu_389_p1));
    p_Result_5_fu_112_p3 <= p_Result_5_fu_112_p1(39 downto 39);
    p_Result_7_fu_614_p1 <= reg_1002(80 - 1 downto 0);
    p_Result_7_fu_614_p3 <= p_Result_7_fu_614_p1(74 downto 74);
    p_Result_s_15_fu_304_p1 <= grp_fu_82_p2(80 - 1 downto 0);
    p_Result_s_fu_292_p1 <= grp_fu_82_p2(80 - 1 downto 0);
    p_not2_fu_739_p2 <= (deleted_zeros_1_fu_730_p3 xor ap_const_lv1_1);
    p_not_fu_463_p2 <= (deleted_zeros_fu_252_p3 xor ap_const_lv1_1);
    p_s_fu_436_p2 <= (rev1_fu_430_p2 and Range2_all_ones_reg_951);
    phitmp964_demorgan_fu_735_p2 <= (carry_3_reg_1065 and Range1_all_ones_2_reg_1076);
    phitmp966_demorgan_fu_459_p2 <= (carry_1_reg_985 and Range1_all_ones_reg_968);
    q_V_fu_598_p1 <= reg_1002(80 - 1 downto 0);
    r_2_fu_621_p2 <= (tmp_22_fu_607_p3 or r_3_reg_1026);
        r_V_2_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_879),80));

    r_V_4_fu_828_p0 <= reg_929;
        r_V_4_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_fu_828_p0),81));

    r_V_6_fu_840_p1 <= reg_903(40 - 1 downto 0);
    r_V_6_fu_840_p3 <= (r_V_6_fu_840_p1 & ap_const_lv33_0);
    r_V_7_fu_283_p0 <= reg_903(40 - 1 downto 0);
        r_V_7_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_7_fu_283_p0),80));

        r_V_fu_78_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(y_V),80));

    r_fu_367_p2 <= (tmp_fu_353_p3 or r_1_reg_956);
    ret_V_5_fu_188_p2 <= std_logic_vector(signed(ap_const_lv41_1FE00000000) + signed(lhs_V_fu_88_p1));
    ret_V_7_fu_174_p2 <= std_logic_vector(unsigned(ap_const_lv41_800000000) + unsigned(lhs_V_fu_88_p1));
    rev1_fu_430_p2 <= (tmp_18_fu_423_p3 xor ap_const_lv1_1);
    rev3_fu_699_p2 <= (tmp_28_fu_692_p3 xor ap_const_lv1_1);
    rev4_fu_856_p2 <= (grp_fu_851_p2 xor ap_const_lv1_1);
        rhs_V_1_cast_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_544_p3),80));

        rhs_V_1_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_13_reg_879),41));

    rhs_V_fu_544_p1 <= reg_903(40 - 1 downto 0);
    rhs_V_fu_544_p3 <= (rhs_V_fu_544_p1 & ap_const_lv35_0);
    signbit_i_i_i_i169_fu_138_p2 <= (p_Result_4_fu_98_p3 xor ap_const_lv1_1);
    tmp2_demorgan_fu_485_p2 <= (phitmp966_demorgan_fu_459_p2 or brmerge968_demorgan_reg_990);
    tmp2_fu_490_p2 <= (tmp2_demorgan_fu_485_p2 xor ap_const_lv1_1);
    tmp3_fu_507_p2 <= (tmp_9_fu_474_p2 or brmerge968_demorgan_reg_990);
    tmp4_demorgan_fu_761_p2 <= (phitmp964_demorgan_fu_735_p2 or brmerge980_demorgan_reg_1087);
    tmp4_fu_766_p2 <= (tmp4_demorgan_fu_761_p2 xor ap_const_lv1_1);
    tmp5_fu_783_p2 <= (tmp_4_fu_750_p2 or brmerge980_demorgan_reg_1087);
    tmp_10_fu_214_p2 <= (p_Result_9_reg_867 xor ap_const_lv1_1);
    tmp_11_fu_372_p1 <= reg_1113(80 - 1 downto 0);
    tmp_11_fu_372_p3 <= tmp_11_fu_372_p1(34 downto 34);
    tmp_12_fu_831_p0 <= reg_1113(41 - 1 downto 0);
        tmp_12_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_831_p0),81));

        tmp_14_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_6_fu_840_p3),81));

    tmp_18_fu_423_p1 <= reg_1113(80 - 1 downto 0);
    tmp_18_fu_423_p3 <= tmp_18_fu_423_p1(75 downto 75);
    tmp_1_fu_120_p2 <= (p_Result_5_fu_112_p3 xor ap_const_lv1_1);
    tmp_22_fu_607_p1 <= reg_1002(80 - 1 downto 0);
    tmp_22_fu_607_p3 <= tmp_22_fu_607_p1(35 downto 35);
    tmp_23_fu_540_p0 <= grp_fu_82_p2(80 - 1 downto 0);
    tmp_23_fu_540_p1 <= tmp_23_fu_540_p0(34 - 1 downto 0);
    tmp_25_fu_626_p1 <= reg_1002(80 - 1 downto 0);
    tmp_25_fu_626_p3 <= tmp_25_fu_626_p1(34 downto 34);
    tmp_28_fu_692_p1 <= reg_1002(80 - 1 downto 0);
    tmp_28_fu_692_p3 <= tmp_28_fu_692_p1(75 downto 75);
    tmp_2_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_633_p2),40));
    tmp_3_fu_300_p0 <= grp_fu_82_p2(80 - 1 downto 0);
    tmp_3_fu_300_p1 <= tmp_3_fu_300_p0(34 - 1 downto 0);
    tmp_4_fu_750_p2 <= (p_Result_6_reg_1032 xor ap_const_lv1_1);
    tmp_6_fu_633_p2 <= (tmp_25_fu_626_p3 and r_2_fu_621_p2);
    tmp_7_fu_379_p2 <= (tmp_11_fu_372_p3 and r_fu_367_p2);
    tmp_8_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_379_p2),40));
    tmp_9_fu_474_p2 <= (p_Result_s_reg_935 xor ap_const_lv1_1);
    tmp_fu_353_p1 <= reg_1113(80 - 1 downto 0);
    tmp_fu_353_p3 <= tmp_fu_353_p1(35 downto 35);
    underflow_1_fu_126_p2 <= (tmp_1_fu_120_p2 and p_Result_4_fu_98_p3);
    underflow_2_fu_772_p2 <= (tmp4_fu_766_p2 and p_Result_6_reg_1032);
    underflow_3_fu_235_p2 <= (p_Result_9_reg_867 and brmerge3_fu_229_p2);
    underflow_fu_496_p2 <= (tmp2_fu_490_p2 and p_Result_s_reg_935);
    y2_V_fu_344_p1 <= reg_1113(80 - 1 downto 0);
end behav;

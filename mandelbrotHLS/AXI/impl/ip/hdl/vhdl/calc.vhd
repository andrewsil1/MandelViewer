-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calc is
generic (
    C_M_AXI_BUF_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_IN_PARMS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_IN_PARMS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BUF_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_AWUSER_WIDTH-1 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH/8-1 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_WUSER_WIDTH-1 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ARUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_RUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_BUSER_WIDTH-1 downto 0);
    s_axi_in_parms_AWVALID : IN STD_LOGIC;
    s_axi_in_parms_AWREADY : OUT STD_LOGIC;
    s_axi_in_parms_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_ADDR_WIDTH-1 downto 0);
    s_axi_in_parms_WVALID : IN STD_LOGIC;
    s_axi_in_parms_WREADY : OUT STD_LOGIC;
    s_axi_in_parms_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_DATA_WIDTH-1 downto 0);
    s_axi_in_parms_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_DATA_WIDTH/8-1 downto 0);
    s_axi_in_parms_ARVALID : IN STD_LOGIC;
    s_axi_in_parms_ARREADY : OUT STD_LOGIC;
    s_axi_in_parms_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_ADDR_WIDTH-1 downto 0);
    s_axi_in_parms_RVALID : OUT STD_LOGIC;
    s_axi_in_parms_RREADY : IN STD_LOGIC;
    s_axi_in_parms_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_DATA_WIDTH-1 downto 0);
    s_axi_in_parms_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_in_parms_BVALID : OUT STD_LOGIC;
    s_axi_in_parms_BREADY : IN STD_LOGIC;
    s_axi_in_parms_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of calc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calc,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.500000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=144,HLS_SYN_FF=19148,HLS_SYN_LUT=27023,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (52 downto 0) := "00000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (52 downto 0) := "00000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (52 downto 0) := "00000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (52 downto 0) := "00000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (52 downto 0) := "00000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (52 downto 0) := "00000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (52 downto 0) := "00000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (52 downto 0) := "00001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (52 downto 0) := "00010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (52 downto 0) := "00100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (52 downto 0) := "01000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (52 downto 0) := "10000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv36_7FFFFFFFF : STD_LOGIC_VECTOR (35 downto 0) := "011111111111111111111111111111111111";
    constant ap_const_lv36_800000000 : STD_LOGIC_VECTOR (35 downto 0) := "100000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv24_1 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (52 downto 0) := "00000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal X0_V : STD_LOGIC_VECTOR (35 downto 0);
    signal Y0_V : STD_LOGIC_VECTOR (35 downto 0);
    signal X1_V : STD_LOGIC_VECTOR (35 downto 0);
    signal width_V : STD_LOGIC_VECTOR (11 downto 0);
    signal maxIter : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln96_reg_2419 : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln96_reg_2419_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln96_reg_2419_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_AWVALID : STD_LOGIC;
    signal buf_r_AWREADY : STD_LOGIC;
    signal buf_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal buf_r_WVALID : STD_LOGIC;
    signal buf_r_WREADY : STD_LOGIC;
    signal buf_r_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_r_ARREADY : STD_LOGIC;
    signal buf_r_RVALID : STD_LOGIC;
    signal buf_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_r_RLAST : STD_LOGIC;
    signal buf_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BVALID : STD_LOGIC;
    signal buf_r_BREADY : STD_LOGIC;
    signal buf_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal index_1_reg_432 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_op_assign_reg_442 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1937_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal width_V_read_reg_1962 : STD_LOGIC_VECTOR (11 downto 0);
    signal Y0_V_read_reg_1971 : STD_LOGIC_VECTOR (35 downto 0);
    signal X0_V_read_reg_1976 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln703_3_fu_1094_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_1989 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal trunc_ln1192_2_fu_812_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal trunc_ln99_fu_1795_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_state52_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state53_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state53_io : BOOLEAN;
    signal ap_block_state54_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state54_io : BOOLEAN;
    signal ap_block_state55_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state56_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state57_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state58_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state59_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln96_fu_1783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_reg_1994 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal lshr_ln_reg_1999 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal icmp_ln85_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1118_fu_639_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1118_reg_2004 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln1118_fu_642_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1118_reg_2011 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln703_fu_646_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln703_reg_2023 : STD_LOGIC_VECTOR (47 downto 0);
    signal rhs_V_4_fu_649_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal rhs_V_4_reg_2035 : STD_LOGIC_VECTOR (36 downto 0);
    signal reg_2040 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal grp_mandel_calc_fu_453_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_mandel_calc_fu_453_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_453_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_461_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_461_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_469_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_469_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_477_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_477_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_485_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_485_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_493_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_493_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_501_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_501_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_509_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_509_ap_done : STD_LOGIC;
    signal ap_block_state50_on_subcall_done : BOOLEAN;
    signal trunc_ln1192_fu_804_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1789_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_V_reg_2043 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal select_ln340_18_fu_1554_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2052 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_mandel_calc_fu_461_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1945_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_728_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1116_fu_669_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal and_ln785_7_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_7_reg_2057 : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_2062 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln340_19_fu_1589_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_469_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_2_fu_1012_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1116_2_fu_709_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1148_fu_531_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_698_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1192_1_fu_808_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2067 : STD_LOGIC_VECTOR (35 downto 0);
    signal and_ln786_18_fu_1404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_18_reg_2072 : STD_LOGIC_VECTOR (0 downto 0);
    signal maxIter_read_reg_2077 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln700_fu_658_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln700_reg_2097 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1866_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal reg_2107 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln340_20_fu_1624_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_477_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_1840_p10 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_4_fu_1176_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1116_1_fu_694_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_713_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln340_21_fu_1659_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2137 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_mandel_calc_fu_485_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_673_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1116_3_fu_724_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal reg_2142 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln1192_3_fu_816_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2147 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln340_22_fu_1694_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_493_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_6_fu_1340_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1116_4_fu_739_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_743_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1192_4_fu_820_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln1192_4_reg_2152 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln703_1_fu_930_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2157 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln340_23_fu_1729_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_501_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1116_5_fu_754_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_758_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1192_5_fu_824_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln1192_5_reg_2162 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2167 : STD_LOGIC_VECTOR (47 downto 0);
    signal select_ln340_24_fu_1764_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_509_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_7_fu_1422_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln1116_6_fu_769_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_773_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1192_6_fu_828_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln1192_6_reg_2172 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln703_5_fu_1258_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal reg_2177 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1116_7_fu_784_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal trunc_ln1192_7_fu_832_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal trunc_ln1192_7_reg_2182 : STD_LOGIC_VECTOR (35 downto 0);
    signal and_ln785_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_912_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_reg_2199 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_fu_970_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_reg_2212 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_13_fu_994_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_13_reg_2218 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_2_fu_1052_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_2_reg_2231 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_14_fu_1076_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_14_reg_2237 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_3_fu_1134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_3_reg_2250 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_15_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_15_reg_2256 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_4_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_4_reg_2269 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_16_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_16_reg_2275 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_5_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_5_reg_2288 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_17_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_17_reg_2294 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_6_fu_1380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_6_reg_2307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln786_19_fu_1486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_19_reg_2332 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_2419_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_2419_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_2419_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln96_reg_2419_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state52 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal mem_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_0_ce0 : STD_LOGIC;
    signal mem_0_we0 : STD_LOGIC;
    signal mem_0_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_0_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_1_ce0 : STD_LOGIC;
    signal mem_1_we0 : STD_LOGIC;
    signal mem_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_2_ce0 : STD_LOGIC;
    signal mem_2_we0 : STD_LOGIC;
    signal mem_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_3_ce0 : STD_LOGIC;
    signal mem_3_we0 : STD_LOGIC;
    signal mem_3_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_3_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_4_ce0 : STD_LOGIC;
    signal mem_4_we0 : STD_LOGIC;
    signal mem_4_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_4_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_5_ce0 : STD_LOGIC;
    signal mem_5_we0 : STD_LOGIC;
    signal mem_5_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_5_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_6_ce0 : STD_LOGIC;
    signal mem_6_we0 : STD_LOGIC;
    signal mem_6_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_6_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mem_7_ce0 : STD_LOGIC;
    signal mem_7_we0 : STD_LOGIC;
    signal mem_7_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mem_7_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mandel_calc_fu_453_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_453_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_461_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_461_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_461_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_469_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_469_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_469_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_477_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_477_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_477_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_485_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_485_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_485_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_493_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_493_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_493_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_501_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_501_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_501_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_mandel_calc_fu_509_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_509_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_509_x_in_V : STD_LOGIC_VECTOR (35 downto 0);
    signal indvars_iv_reg_378 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Val2_30_reg_388 : STD_LOGIC_VECTOR (35 downto 0);
    signal t_V_1_reg_398 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_0_reg_409 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_1_0_reg_421 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln79_fu_653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal grp_mandel_calc_fu_453_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal grp_mandel_calc_fu_461_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_469_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_477_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_485_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_493_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_501_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_509_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln91_fu_1772_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_1_fu_1809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln99_2_fu_1827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal rhs_V_fu_521_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal shl_ln_fu_616_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln79_fu_613_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_534_p0 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_534_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_534_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Result_21_fu_551_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_539_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_559_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_589_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_19_fu_1492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_1903_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_589_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal y_V_fu_1879_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal p_Val2_29_fu_547_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_7_fu_1897_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal sub_ln79_fu_525_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln1118_fu_642_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal rhs_V_4_fu_649_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_673_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_673_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_fu_688_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_698_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_698_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_1_fu_703_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_713_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_713_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_2_fu_718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_728_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_728_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_3_fu_733_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_743_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_743_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_4_fu_748_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_758_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_758_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_5_fu_763_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_773_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_773_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln700_6_fu_778_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_788_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln1192_fu_848_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_9_fu_860_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_47_fu_852_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_46_fu_840_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_fu_900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_7_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_906_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_1_fu_918_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_s_fu_942_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_49_fu_934_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_1_fu_952_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_48_fu_922_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_6_fu_958_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_11_fu_964_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_1_fu_982_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_9_fu_976_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_988_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_2_fu_1000_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_10_fu_1024_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_51_fu_1016_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_2_fu_1034_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_fu_1004_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_7_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_12_fu_1046_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_2_fu_1064_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_10_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_1070_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_3_fu_1082_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_11_fu_1106_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_53_fu_1098_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_3_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_fu_1086_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_8_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_13_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_3_fu_1146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_11_fu_1140_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_3_fu_1152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_4_fu_1164_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_12_fu_1188_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_55_fu_1180_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_4_fu_1198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_1168_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_9_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_14_fu_1210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_4_fu_1228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_12_fu_1222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_4_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_5_fu_1246_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_13_fu_1270_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_57_fu_1262_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_5_fu_1280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_fu_1250_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_10_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_15_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_5_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_13_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_5_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_6_fu_1328_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_14_fu_1352_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_59_fu_1344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_6_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_1332_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_11_fu_1368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_16_fu_1374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_6_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_14_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_6_fu_1398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1192_7_fu_1410_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_15_fu_1434_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_61_fu_1426_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_7_fu_1444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_fu_1414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_12_fu_1450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_17_fu_1456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_7_fu_1474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_15_fu_1468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_7_fu_1480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_1496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_21_fu_1527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_1519_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_4_fu_1531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln388_9_fu_1548_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln340_22_fu_1536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_1519_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_9_fu_1548_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_5_fu_1566_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_23_fu_1562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_1576_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_10_fu_1583_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln340_24_fu_1571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_1576_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_10_fu_1583_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_6_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_25_fu_1597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_26_fu_1606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_11_fu_1611_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_11_fu_1618_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_7_fu_1636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_28_fu_1632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1646_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_12_fu_1653_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln340_29_fu_1641_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1646_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_12_fu_1653_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_9_fu_1671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_30_fu_1667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_1681_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_13_fu_1688_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln340_31_fu_1676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_1681_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_13_fu_1688_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_10_fu_1706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_32_fu_1702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1716_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_14_fu_1723_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln340_33_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1716_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_14_fu_1723_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal xor_ln340_11_fu_1741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_34_fu_1737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_15_fu_1751_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_15_fu_1758_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal or_ln340_35_fu_1746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_15_fu_1751_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal select_ln388_15_fu_1758_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1789_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln1_fu_1799_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln99_fu_1837_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_16_fu_1840_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1866_p0 : STD_LOGIC_VECTOR (36 downto 0);
    signal lhs_V_3_fu_1862_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal lhs_V_fu_517_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_1866_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal rhs_V_fu_521_p1 : STD_LOGIC_VECTOR (36 downto 0);
    signal p_Result_23_fu_1883_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_1871_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_8_fu_1891_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_8_fu_1909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1937_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_20_fu_1501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_27_fu_1915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_589_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_597_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1945_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_1945_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_534_ap_start : STD_LOGIC;
    signal grp_fu_534_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (52 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_534_p10 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_673_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_698_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_713_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_728_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_743_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_758_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_773_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_788_p00 : STD_LOGIC_VECTOR (47 downto 0);

    component mandel_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_in_V : IN STD_LOGIC_VECTOR (35 downto 0);
        y_in_V : IN STD_LOGIC_VECTOR (35 downto 0);
        maxIter : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calc_sdiv_37ns_13eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (36 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component calc_mul_12ns_36sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component calc_mux_832_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (15 downto 0);
        din6 : IN STD_LOGIC_VECTOR (15 downto 0);
        din7 : IN STD_LOGIC_VECTOR (15 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calc_mem_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calc_in_parms_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        X0_V : OUT STD_LOGIC_VECTOR (35 downto 0);
        Y0_V : OUT STD_LOGIC_VECTOR (35 downto 0);
        X1_V : OUT STD_LOGIC_VECTOR (35 downto 0);
        width_V : OUT STD_LOGIC_VECTOR (11 downto 0);
        maxIter : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calc_buf_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    calc_in_parms_s_axi_U : component calc_in_parms_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_IN_PARMS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_IN_PARMS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_in_parms_AWVALID,
        AWREADY => s_axi_in_parms_AWREADY,
        AWADDR => s_axi_in_parms_AWADDR,
        WVALID => s_axi_in_parms_WVALID,
        WREADY => s_axi_in_parms_WREADY,
        WDATA => s_axi_in_parms_WDATA,
        WSTRB => s_axi_in_parms_WSTRB,
        ARVALID => s_axi_in_parms_ARVALID,
        ARREADY => s_axi_in_parms_ARREADY,
        ARADDR => s_axi_in_parms_ARADDR,
        RVALID => s_axi_in_parms_RVALID,
        RREADY => s_axi_in_parms_RREADY,
        RDATA => s_axi_in_parms_RDATA,
        RRESP => s_axi_in_parms_RRESP,
        BVALID => s_axi_in_parms_BVALID,
        BREADY => s_axi_in_parms_BREADY,
        BRESP => s_axi_in_parms_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        X0_V => X0_V,
        Y0_V => Y0_V,
        X1_V => X1_V,
        width_V => width_V,
        maxIter => maxIter);

    calc_buf_r_m_axi_U : component calc_buf_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUF_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUF_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUF_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUF_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUF_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUF_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUF_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUF_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BUF_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BUF_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUF_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUF_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_buf_r_AWVALID,
        AWREADY => m_axi_buf_r_AWREADY,
        AWADDR => m_axi_buf_r_AWADDR,
        AWID => m_axi_buf_r_AWID,
        AWLEN => m_axi_buf_r_AWLEN,
        AWSIZE => m_axi_buf_r_AWSIZE,
        AWBURST => m_axi_buf_r_AWBURST,
        AWLOCK => m_axi_buf_r_AWLOCK,
        AWCACHE => m_axi_buf_r_AWCACHE,
        AWPROT => m_axi_buf_r_AWPROT,
        AWQOS => m_axi_buf_r_AWQOS,
        AWREGION => m_axi_buf_r_AWREGION,
        AWUSER => m_axi_buf_r_AWUSER,
        WVALID => m_axi_buf_r_WVALID,
        WREADY => m_axi_buf_r_WREADY,
        WDATA => m_axi_buf_r_WDATA,
        WSTRB => m_axi_buf_r_WSTRB,
        WLAST => m_axi_buf_r_WLAST,
        WID => m_axi_buf_r_WID,
        WUSER => m_axi_buf_r_WUSER,
        ARVALID => m_axi_buf_r_ARVALID,
        ARREADY => m_axi_buf_r_ARREADY,
        ARADDR => m_axi_buf_r_ARADDR,
        ARID => m_axi_buf_r_ARID,
        ARLEN => m_axi_buf_r_ARLEN,
        ARSIZE => m_axi_buf_r_ARSIZE,
        ARBURST => m_axi_buf_r_ARBURST,
        ARLOCK => m_axi_buf_r_ARLOCK,
        ARCACHE => m_axi_buf_r_ARCACHE,
        ARPROT => m_axi_buf_r_ARPROT,
        ARQOS => m_axi_buf_r_ARQOS,
        ARREGION => m_axi_buf_r_ARREGION,
        ARUSER => m_axi_buf_r_ARUSER,
        RVALID => m_axi_buf_r_RVALID,
        RREADY => m_axi_buf_r_RREADY,
        RDATA => m_axi_buf_r_RDATA,
        RLAST => m_axi_buf_r_RLAST,
        RID => m_axi_buf_r_RID,
        RUSER => m_axi_buf_r_RUSER,
        RRESP => m_axi_buf_r_RRESP,
        BVALID => m_axi_buf_r_BVALID,
        BREADY => m_axi_buf_r_BREADY,
        BRESP => m_axi_buf_r_BRESP,
        BID => m_axi_buf_r_BID,
        BUSER => m_axi_buf_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => buf_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => buf_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => buf_r_RDATA,
        I_RID => buf_r_RID,
        I_RUSER => buf_r_RUSER,
        I_RRESP => buf_r_RRESP,
        I_RLAST => buf_r_RLAST,
        I_AWVALID => buf_r_AWVALID,
        I_AWREADY => buf_r_AWREADY,
        I_AWADDR => buf_r_AWADDR,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_1,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => buf_r_WVALID,
        I_WREADY => buf_r_WREADY,
        I_WDATA => buf_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => buf_r_BVALID,
        I_BREADY => buf_r_BREADY,
        I_BRESP => buf_r_BRESP,
        I_BID => buf_r_BID,
        I_BUSER => buf_r_BUSER);

    mem_0_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_0_address0,
        ce0 => mem_0_ce0,
        we0 => mem_0_we0,
        d0 => mem_0_d0,
        q0 => mem_0_q0);

    mem_1_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_1_address0,
        ce0 => mem_1_ce0,
        we0 => mem_1_we0,
        d0 => mem_1_d0,
        q0 => mem_1_q0);

    mem_2_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_2_address0,
        ce0 => mem_2_ce0,
        we0 => mem_2_we0,
        d0 => mem_2_d0,
        q0 => mem_2_q0);

    mem_3_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_3_address0,
        ce0 => mem_3_ce0,
        we0 => mem_3_we0,
        d0 => mem_3_d0,
        q0 => mem_3_q0);

    mem_4_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_4_address0,
        ce0 => mem_4_ce0,
        we0 => mem_4_we0,
        d0 => mem_4_d0,
        q0 => mem_4_q0);

    mem_5_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_5_address0,
        ce0 => mem_5_ce0,
        we0 => mem_5_we0,
        d0 => mem_5_d0,
        q0 => mem_5_q0);

    mem_6_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_6_address0,
        ce0 => mem_6_ce0,
        we0 => mem_6_we0,
        d0 => mem_6_d0,
        q0 => mem_6_q0);

    mem_7_U : component calc_mem_0
    generic map (
        DataWidth => 16,
        AddressRange => 240,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mem_7_address0,
        ce0 => mem_7_ce0,
        we0 => mem_7_we0,
        d0 => mem_7_d0,
        q0 => mem_7_q0);

    grp_mandel_calc_fu_453 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_453_ap_start,
        ap_done => grp_mandel_calc_fu_453_ap_done,
        ap_idle => grp_mandel_calc_fu_453_ap_idle,
        ap_ready => grp_mandel_calc_fu_453_ap_ready,
        x_in_V => reg_2040,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_453_ap_return);

    grp_mandel_calc_fu_461 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_461_ap_start,
        ap_done => grp_mandel_calc_fu_461_ap_done,
        ap_idle => grp_mandel_calc_fu_461_ap_idle,
        ap_ready => grp_mandel_calc_fu_461_ap_ready,
        x_in_V => grp_mandel_calc_fu_461_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_461_ap_return);

    grp_mandel_calc_fu_469 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_469_ap_start,
        ap_done => grp_mandel_calc_fu_469_ap_done,
        ap_idle => grp_mandel_calc_fu_469_ap_idle,
        ap_ready => grp_mandel_calc_fu_469_ap_ready,
        x_in_V => grp_mandel_calc_fu_469_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_469_ap_return);

    grp_mandel_calc_fu_477 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_477_ap_start,
        ap_done => grp_mandel_calc_fu_477_ap_done,
        ap_idle => grp_mandel_calc_fu_477_ap_idle,
        ap_ready => grp_mandel_calc_fu_477_ap_ready,
        x_in_V => grp_mandel_calc_fu_477_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_477_ap_return);

    grp_mandel_calc_fu_485 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_485_ap_start,
        ap_done => grp_mandel_calc_fu_485_ap_done,
        ap_idle => grp_mandel_calc_fu_485_ap_idle,
        ap_ready => grp_mandel_calc_fu_485_ap_ready,
        x_in_V => grp_mandel_calc_fu_485_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_485_ap_return);

    grp_mandel_calc_fu_493 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_493_ap_start,
        ap_done => grp_mandel_calc_fu_493_ap_done,
        ap_idle => grp_mandel_calc_fu_493_ap_idle,
        ap_ready => grp_mandel_calc_fu_493_ap_ready,
        x_in_V => grp_mandel_calc_fu_493_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_493_ap_return);

    grp_mandel_calc_fu_501 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_501_ap_start,
        ap_done => grp_mandel_calc_fu_501_ap_done,
        ap_idle => grp_mandel_calc_fu_501_ap_idle,
        ap_ready => grp_mandel_calc_fu_501_ap_ready,
        x_in_V => grp_mandel_calc_fu_501_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_501_ap_return);

    grp_mandel_calc_fu_509 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_509_ap_start,
        ap_done => grp_mandel_calc_fu_509_ap_done,
        ap_idle => grp_mandel_calc_fu_509_ap_idle,
        ap_ready => grp_mandel_calc_fu_509_ap_ready,
        x_in_V => grp_mandel_calc_fu_509_x_in_V,
        y_in_V => p_Val2_30_reg_388,
        maxIter => maxIter_read_reg_2077,
        ap_return => grp_mandel_calc_fu_509_ap_return);

    calc_sdiv_37ns_13eOg_U13 : component calc_sdiv_37ns_13eOg
    generic map (
        ID => 1,
        NUM_STAGE => 41,
        din0_WIDTH => 37,
        din1_WIDTH => 13,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_534_ap_start,
        done => grp_fu_534_ap_done,
        din0 => grp_fu_534_p0,
        din1 => grp_fu_534_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_534_p2);

    calc_mul_12ns_36sfYi_U14 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_673_p0,
        din1 => grp_fu_673_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_673_p2);

    calc_mul_12ns_36sfYi_U15 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_698_p0,
        din1 => grp_fu_698_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_698_p2);

    calc_mul_12ns_36sfYi_U16 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_713_p0,
        din1 => grp_fu_713_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_713_p2);

    calc_mul_12ns_36sfYi_U17 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_728_p0,
        din1 => grp_fu_728_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_728_p2);

    calc_mul_12ns_36sfYi_U18 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_743_p0,
        din1 => grp_fu_743_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_743_p2);

    calc_mul_12ns_36sfYi_U19 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_758_p0,
        din1 => grp_fu_758_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_758_p2);

    calc_mul_12ns_36sfYi_U20 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_773_p0,
        din1 => grp_fu_773_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_773_p2);

    calc_mul_12ns_36sfYi_U21 : component calc_mul_12ns_36sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 12,
        din1_WIDTH => 36,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_788_p0,
        din1 => grp_fu_788_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_788_p2);

    calc_mux_832_16_1_1_U22 : component calc_mux_832_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 16,
        din6_WIDTH => 16,
        din7_WIDTH => 16,
        din8_WIDTH => 32,
        dout_WIDTH => 16)
    port map (
        din0 => mem_0_q0,
        din1 => mem_1_q0,
        din2 => mem_2_q0,
        din3 => mem_3_q0,
        din4 => mem_4_q0,
        din5 => mem_5_q0,
        din6 => mem_6_q0,
        din7 => mem_7_q0,
        din8 => tmp_16_fu_1840_p9,
        dout => tmp_16_fu_1840_p10);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state52) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln85_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state52)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state52);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((icmp_ln85_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_453_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_453_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_453_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_453_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_453_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_461_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_461_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_461_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_461_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_461_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_469_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_469_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_469_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_469_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_469_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_477_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_477_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_477_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_477_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_477_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_485_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_485_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_485_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_485_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_485_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_493_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_493_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_493_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_493_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_493_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_501_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_501_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_501_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_501_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_501_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_509_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_509_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                    grp_mandel_calc_fu_509_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_509_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_509_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_442_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                i_op_assign_reg_442 <= ap_const_lv12_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                i_op_assign_reg_442 <= grp_fu_1789_p2;
            end if; 
        end if;
    end process;

    index_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                index_0_reg_409 <= ap_const_lv24_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                index_0_reg_409 <= reg_2052(24 - 1 downto 0);
            end if; 
        end if;
    end process;

    index_1_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln85_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then 
                index_1_reg_432 <= index_0_reg_409;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                index_1_reg_432 <= grp_fu_1945_p2(24 - 1 downto 0);
            end if; 
        end if;
    end process;

    indvars_iv_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                indvars_iv_reg_378 <= zext_ln1118_fu_639_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                indvars_iv_reg_378 <= grp_fu_1945_p2(24 - 1 downto 0);
            end if; 
        end if;
    end process;

    p_Val2_30_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                p_Val2_30_reg_388 <= Y0_V_read_reg_1971;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                p_Val2_30_reg_388 <= grp_fu_1937_p3;
            end if; 
        end if;
    end process;

    reg_1989_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_1989 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln99_fu_1795_p1),36));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_1989 <= trunc_ln1192_2_fu_812_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_1989 <= add_ln703_3_fu_1094_p2;
            end if; 
        end if;
    end process;

    reg_2040_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2040 <= trunc_ln1192_fu_804_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2040 <= zext_ln99_1_fu_1809_p1(36 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2040 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_453_ap_return),36));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2040 <= grp_fu_1937_p3;
            end if; 
        end if;
    end process;

    reg_2052_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2052 <= zext_ln1116_fu_669_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2052 <= grp_fu_728_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state47) or ((icmp_ln85_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44)))) then 
                reg_2052 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1945_p2),48));
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2052 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_461_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2052 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_18_fu_1554_p3),48));
            end if; 
        end if;
    end process;

    reg_2062_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2062 <= grp_fu_698_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_2062 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1148_fu_531_p1),48));
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2062 <= zext_ln1116_2_fu_709_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_2062 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_2_fu_1012_p2),48));
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2062 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_469_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2062 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_19_fu_1589_p3),48));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2062 <= zext_ln99_1_fu_1809_p1(48 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_2067_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2067 <= zext_ln99_2_fu_1827_p1(36 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2067 <= trunc_ln1192_1_fu_808_p1;
            end if; 
        end if;
    end process;

    reg_2107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2107 <= grp_fu_713_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2107 <= zext_ln1116_1_fu_694_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_2107 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_4_fu_1176_p2),48));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_reg_2419 = ap_const_lv1_0))) then 
                reg_2107 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1840_p10),48));
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2107 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_477_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2107 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_20_fu_1624_p3),48));
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reg_2107 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1866_p2),48));
            end if; 
        end if;
    end process;

    reg_2137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2137 <= zext_ln1116_3_fu_724_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2137 <= grp_fu_673_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2137 <= zext_ln99_1_fu_1809_p1(48 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2137 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_485_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2137 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_21_fu_1659_p3),48));
            end if; 
        end if;
    end process;

    reg_2142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2142 <= trunc_ln1192_3_fu_816_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2142 <= zext_ln99_1_fu_1809_p1(36 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_2147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2147 <= grp_fu_743_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2147 <= zext_ln1116_4_fu_739_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_2147 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_6_fu_1340_p2),48));
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2147 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_493_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2147 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_22_fu_1694_p3),48));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2147 <= zext_ln99_1_fu_1809_p1(48 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_2157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2157 <= grp_fu_758_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2157 <= zext_ln1116_5_fu_754_p1;
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2157 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_501_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2157 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_23_fu_1729_p3),48));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2157 <= zext_ln99_1_fu_1809_p1(48 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_2157 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_1_fu_930_p2),48));
            end if; 
        end if;
    end process;

    reg_2167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2167 <= grp_fu_773_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2167 <= zext_ln1116_6_fu_769_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_2167 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_7_fu_1422_p2),48));
            elsif (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                reg_2167 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_509_ap_return),48));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                reg_2167 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_24_fu_1764_p3),48));
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2167 <= zext_ln99_1_fu_1809_p1(48 - 1 downto 0);
            end if; 
        end if;
    end process;

    reg_2177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_2177 <= grp_fu_788_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then 
                reg_2177 <= zext_ln1116_7_fu_784_p1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_0))) then 
                reg_2177 <= zext_ln99_1_fu_1809_p1(48 - 1 downto 0);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
                reg_2177 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_5_fu_1258_p2),48));
            end if; 
        end if;
    end process;

    t_V_1_reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                t_V_1_reg_398 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
                t_V_1_reg_398 <= line_V_reg_2043;
            end if; 
        end if;
    end process;

    tmp_V_1_0_reg_421_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
                tmp_V_1_0_reg_421 <= add_ln700_reg_2097;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state43) and (icmp_ln79_fu_653_p2 = ap_const_lv1_0))) then 
                tmp_V_1_0_reg_421 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                X0_V_read_reg_1976 <= X0_V;
                Y0_V_read_reg_1971 <= Y0_V;
                maxIter_read_reg_2077 <= maxIter;
                width_V_read_reg_1962 <= width_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state44) and (icmp_ln85_fu_664_p2 = ap_const_lv1_0))) then
                add_ln700_reg_2097 <= add_ln700_fu_658_p2;
                lshr_ln_reg_1999 <= tmp_V_1_0_reg_421(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                and_ln785_1_reg_2212 <= and_ln785_1_fu_970_p2;
                and_ln785_2_reg_2231 <= and_ln785_2_fu_1052_p2;
                and_ln785_3_reg_2250 <= and_ln785_3_fu_1134_p2;
                and_ln785_4_reg_2269 <= and_ln785_4_fu_1216_p2;
                and_ln785_5_reg_2288 <= and_ln785_5_fu_1298_p2;
                and_ln785_6_reg_2307 <= and_ln785_6_fu_1380_p2;
                and_ln785_7_reg_2057 <= and_ln785_7_fu_1462_p2;
                and_ln785_reg_2193 <= and_ln785_fu_888_p2;
                and_ln786_13_reg_2218 <= and_ln786_13_fu_994_p2;
                and_ln786_14_reg_2237 <= and_ln786_14_fu_1076_p2;
                and_ln786_15_reg_2256 <= and_ln786_15_fu_1158_p2;
                and_ln786_16_reg_2275 <= and_ln786_16_fu_1240_p2;
                and_ln786_17_reg_2294 <= and_ln786_17_fu_1322_p2;
                and_ln786_18_reg_2072 <= and_ln786_18_fu_1404_p2;
                and_ln786_19_reg_2332 <= and_ln786_19_fu_1486_p2;
                and_ln786_reg_2199 <= and_ln786_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln96_reg_2419 <= icmp_ln96_fu_1783_p2;
                icmp_ln96_reg_2419_pp0_iter1_reg <= icmp_ln96_reg_2419;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln96_reg_2419_pp0_iter2_reg <= icmp_ln96_reg_2419_pp0_iter1_reg;
                icmp_ln96_reg_2419_pp0_iter3_reg <= icmp_ln96_reg_2419_pp0_iter2_reg;
                icmp_ln96_reg_2419_pp0_iter4_reg <= icmp_ln96_reg_2419_pp0_iter3_reg;
                icmp_ln96_reg_2419_pp0_iter5_reg <= icmp_ln96_reg_2419_pp0_iter4_reg;
                icmp_ln96_reg_2419_pp0_iter6_reg <= icmp_ln96_reg_2419_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                line_V_reg_2043 <= grp_fu_1789_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                rhs_V_4_reg_2035 <= rhs_V_4_fu_649_p1;
                sext_ln1118_reg_2011 <= sext_ln1118_fu_642_p1;
                sext_ln703_reg_2023 <= sext_ln703_fu_646_p1;
                tmp_17_reg_1994 <= sub_ln79_fu_525_p2(13 downto 2);
                    zext_ln1118_reg_2004(11 downto 0) <= zext_ln1118_fu_639_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                trunc_ln1192_4_reg_2152 <= trunc_ln1192_4_fu_820_p1;
                trunc_ln1192_5_reg_2162 <= trunc_ln1192_5_fu_824_p1;
                trunc_ln1192_6_reg_2172 <= trunc_ln1192_6_fu_828_p1;
                trunc_ln1192_7_reg_2182 <= trunc_ln1192_7_fu_832_p1;
            end if;
        end if;
    end process;
    zext_ln1118_reg_2004(23 downto 12) <= "000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, icmp_ln96_fu_1783_p2, ap_CS_fsm_state44, icmp_ln85_fu_664_p2, ap_CS_fsm_state50, ap_block_state50_on_subcall_done, ap_CS_fsm_state43, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6, icmp_ln79_fu_653_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                if (((icmp_ln79_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state44;
                end if;
            when ap_ST_fsm_state44 => 
                if (((icmp_ln85_fu_664_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state44))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                if (((ap_const_boolean_0 = ap_block_state50_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_state51;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln96_fu_1783_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1192_1_fu_918_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2062));
    add_ln1192_2_fu_1000_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2107));
    add_ln1192_3_fu_1082_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2052));
    add_ln1192_4_fu_1164_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2147));
    add_ln1192_5_fu_1246_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2157));
    add_ln1192_6_fu_1328_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2167));
    add_ln1192_7_fu_1410_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2177));
    add_ln1192_fu_848_p2 <= std_logic_vector(signed(sext_ln703_reg_2023) + signed(reg_2137));
    add_ln700_fu_658_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) + unsigned(tmp_V_1_0_reg_421));
    add_ln703_1_fu_930_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(reg_2067));
    add_ln703_2_fu_1012_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(reg_1989));
    add_ln703_3_fu_1094_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(reg_2142));
    add_ln703_4_fu_1176_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(trunc_ln1192_4_reg_2152));
    add_ln703_5_fu_1258_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(trunc_ln1192_5_reg_2162));
    add_ln703_6_fu_1340_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(trunc_ln1192_6_reg_2172));
    add_ln703_7_fu_1422_p2 <= std_logic_vector(signed(X0_V_read_reg_1976) + signed(trunc_ln1192_7_reg_2182));
    and_ln785_1_fu_970_p2 <= (xor_ln785_11_fu_964_p2 and or_ln785_6_fu_958_p2);
    and_ln785_2_fu_1052_p2 <= (xor_ln785_12_fu_1046_p2 and or_ln785_7_fu_1040_p2);
    and_ln785_3_fu_1134_p2 <= (xor_ln785_13_fu_1128_p2 and or_ln785_8_fu_1122_p2);
    and_ln785_4_fu_1216_p2 <= (xor_ln785_14_fu_1210_p2 and or_ln785_9_fu_1204_p2);
    and_ln785_5_fu_1298_p2 <= (xor_ln785_15_fu_1292_p2 and or_ln785_10_fu_1286_p2);
    and_ln785_6_fu_1380_p2 <= (xor_ln785_16_fu_1374_p2 and or_ln785_11_fu_1368_p2);
    and_ln785_7_fu_1462_p2 <= (xor_ln785_17_fu_1456_p2 and or_ln785_12_fu_1450_p2);
    and_ln785_fu_888_p2 <= (xor_ln785_fu_882_p2 and or_ln785_fu_876_p2);
    and_ln786_13_fu_994_p2 <= (tmp_48_fu_922_p3 and or_ln786_1_fu_988_p2);
    and_ln786_14_fu_1076_p2 <= (tmp_50_fu_1004_p3 and or_ln786_2_fu_1070_p2);
    and_ln786_15_fu_1158_p2 <= (tmp_52_fu_1086_p3 and or_ln786_3_fu_1152_p2);
    and_ln786_16_fu_1240_p2 <= (tmp_54_fu_1168_p3 and or_ln786_4_fu_1234_p2);
    and_ln786_17_fu_1322_p2 <= (tmp_56_fu_1250_p3 and or_ln786_5_fu_1316_p2);
    and_ln786_18_fu_1404_p2 <= (tmp_58_fu_1332_p3 and or_ln786_6_fu_1398_p2);
    and_ln786_19_fu_1486_p2 <= (tmp_60_fu_1414_p3 and or_ln786_7_fu_1480_p2);
    and_ln786_fu_912_p2 <= (tmp_46_fu_840_p3 and or_ln786_fu_906_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(51);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state60 <= ap_CS_fsm(52);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln96_reg_2419_pp0_iter6_reg, buf_r_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= ((buf_r_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter6_reg = ap_const_lv1_0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, icmp_ln96_reg_2419_pp0_iter6_reg, buf_r_BVALID, ap_block_state53_io, ap_block_state54_io)
    begin
                ap_block_pp0_stage0_11001 <= (((buf_r_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter6_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, icmp_ln96_reg_2419_pp0_iter6_reg, buf_r_BVALID, ap_block_state53_io, ap_block_state54_io)
    begin
                ap_block_pp0_stage0_subdone <= (((buf_r_BVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter6_reg = ap_const_lv1_0)) or ((ap_const_boolean_1 = ap_block_state54_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state53_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_state50_on_subcall_done_assign_proc : process(grp_mandel_calc_fu_453_ap_done, grp_mandel_calc_fu_461_ap_done, grp_mandel_calc_fu_469_ap_done, grp_mandel_calc_fu_477_ap_done, grp_mandel_calc_fu_485_ap_done, grp_mandel_calc_fu_493_ap_done, grp_mandel_calc_fu_501_ap_done, grp_mandel_calc_fu_509_ap_done)
    begin
                ap_block_state50_on_subcall_done <= ((grp_mandel_calc_fu_509_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_501_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_493_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_485_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_477_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_469_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_461_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_453_ap_done = ap_const_logic_0));
    end process;

        ap_block_state52_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state53_io_assign_proc : process(icmp_ln96_reg_2419, buf_r_AWREADY)
    begin
                ap_block_state53_io <= ((buf_r_AWREADY = ap_const_logic_0) and (icmp_ln96_reg_2419 = ap_const_lv1_0));
    end process;

        ap_block_state53_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state54_io_assign_proc : process(icmp_ln96_reg_2419_pp0_iter1_reg, buf_r_WREADY)
    begin
                ap_block_state54_io <= ((buf_r_WREADY = ap_const_logic_0) and (icmp_ln96_reg_2419_pp0_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state54_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state55_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state56_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state57_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state58_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state59_pp0_stage0_iter7_assign_proc : process(icmp_ln96_reg_2419_pp0_iter6_reg, buf_r_BVALID)
    begin
                ap_block_state59_pp0_stage0_iter7 <= ((buf_r_BVALID = ap_const_logic_0) and (icmp_ln96_reg_2419_pp0_iter6_reg = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state52_assign_proc : process(icmp_ln96_fu_1783_p2)
    begin
        if ((icmp_ln96_fu_1783_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state52 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state52 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state43, icmp_ln79_fu_653_p2)
    begin
        if (((icmp_ln79_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state43, icmp_ln79_fu_653_p2)
    begin
        if (((icmp_ln79_fu_653_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state43))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    buf_r_AWADDR <= reg_2067(32 - 1 downto 0);

    buf_r_AWVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln96_reg_2419, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_reg_2419 = ap_const_lv1_0))) then 
            buf_r_AWVALID <= ap_const_logic_1;
        else 
            buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_BREADY_assign_proc : process(ap_enable_reg_pp0_iter7, icmp_ln96_reg_2419_pp0_iter6_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter6_reg = ap_const_lv1_0))) then 
            buf_r_BREADY <= ap_const_logic_1;
        else 
            buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    buf_r_WDATA <= reg_2107(16 - 1 downto 0);

    buf_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln96_reg_2419_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter1_reg = ap_const_lv1_0))) then 
            buf_r_WVALID <= ap_const_logic_1;
        else 
            buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(m_axi_buf_r_AWREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln96_reg_2419)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln96_reg_2419 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter7, icmp_ln96_reg_2419_pp0_iter6_reg)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln96_reg_2419_pp0_iter1_reg)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln96_reg_2419_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_1789_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_op_assign_reg_442, ap_CS_fsm_state43, ap_enable_reg_pp0_iter0, t_V_1_reg_398)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_1789_p0 <= i_op_assign_reg_442;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            grp_fu_1789_p0 <= t_V_1_reg_398;
        else 
            grp_fu_1789_p0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1789_p2 <= std_logic_vector(unsigned(grp_fu_1789_p0) + unsigned(ap_const_lv12_1));

    grp_fu_1866_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state60, lhs_V_3_fu_1862_p1, lhs_V_fu_517_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_1866_p0 <= lhs_V_3_fu_1862_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_1866_p0 <= lhs_V_fu_517_p1;
        else 
            grp_fu_1866_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1866_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state60, rhs_V_4_reg_2035, rhs_V_fu_521_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_1866_p1 <= rhs_V_4_reg_2035;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_1866_p1 <= rhs_V_fu_521_p1;
        else 
            grp_fu_1866_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1866_p2 <= std_logic_vector(signed(grp_fu_1866_p0) - signed(grp_fu_1866_p1));

    grp_fu_1937_p0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state42, ap_CS_fsm_state48, or_ln340_20_fu_1501_p2, or_ln340_27_fu_1915_p2, or_ln340_fu_583_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_1937_p0 <= or_ln340_27_fu_1915_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_1937_p0 <= or_ln340_20_fu_1501_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_1937_p0 <= or_ln340_fu_583_p2;
        else 
            grp_fu_1937_p0 <= "X";
        end if; 
    end process;

    grp_fu_1937_p3 <= 
        grp_fu_589_p3 when (grp_fu_1937_p0(0) = '1') else 
        grp_fu_597_p3;

    grp_fu_1945_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_state60, X0_V_read_reg_1976, ap_CS_fsm_state47, ap_CS_fsm_state44, zext_ln1118_reg_2004, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_1945_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv24_1),36));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1945_p0 <= X0_V_read_reg_1976;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state60))) then 
            grp_fu_1945_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln1118_reg_2004),36));
        else 
            grp_fu_1945_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_1945_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, index_1_reg_432, ap_CS_fsm_state60, ap_CS_fsm_state47, ap_CS_fsm_state44, reg_2040, ap_enable_reg_pp0_iter0, indvars_iv_reg_378, index_0_reg_409)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_1945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_378),36));
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_1945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_reg_432),36));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1945_p1 <= reg_2040;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            grp_fu_1945_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_0_reg_409),36));
        else 
            grp_fu_1945_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1945_p2 <= std_logic_vector(signed(grp_fu_1945_p0) + signed(grp_fu_1945_p1));

    grp_fu_534_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_534_ap_start <= ap_const_logic_1;
        else 
            grp_fu_534_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_534_p0 <= reg_2107(37 - 1 downto 0);
    grp_fu_534_p1 <= grp_fu_534_p10(13 - 1 downto 0);
    grp_fu_534_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1962),37));

    grp_fu_589_p0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state42, ap_CS_fsm_state48, or_ln340_19_fu_1492_p2, xor_ln340_12_fu_1903_p2, xor_ln340_2_fu_571_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_589_p0 <= xor_ln340_12_fu_1903_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_589_p0 <= or_ln340_19_fu_1492_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_589_p0 <= xor_ln340_2_fu_571_p2;
        else 
            grp_fu_589_p0 <= "X";
        end if; 
    end process;


    grp_fu_589_p2_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state42, ap_CS_fsm_state48, reg_2052, y_V_fu_1879_p1, p_Val2_29_fu_547_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_589_p2 <= y_V_fu_1879_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_589_p2 <= reg_2052(36 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_589_p2 <= p_Val2_29_fu_547_p1;
        else 
            grp_fu_589_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_589_p3 <= 
        ap_const_lv36_7FFFFFFFF when (grp_fu_589_p0(0) = '1') else 
        grp_fu_589_p2;

    grp_fu_597_p0_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state42, ap_CS_fsm_state48, and_ln786_reg_2199, underflow_fu_565_p2, underflow_7_fu_1897_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_597_p0 <= underflow_7_fu_1897_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_597_p0 <= and_ln786_reg_2199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_597_p0 <= underflow_fu_565_p2;
        else 
            grp_fu_597_p0 <= "X";
        end if; 
    end process;


    grp_fu_597_p2_assign_proc : process(ap_CS_fsm_state60, ap_CS_fsm_state42, ap_CS_fsm_state48, reg_2052, y_V_fu_1879_p1, p_Val2_29_fu_547_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            grp_fu_597_p2 <= y_V_fu_1879_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_597_p2 <= reg_2052(36 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            grp_fu_597_p2 <= p_Val2_29_fu_547_p1;
        else 
            grp_fu_597_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_597_p3 <= 
        ap_const_lv36_800000000 when (grp_fu_597_p0(0) = '1') else 
        grp_fu_597_p2;
    grp_fu_673_p0 <= grp_fu_673_p00(12 - 1 downto 0);
    grp_fu_673_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_0_reg_421),48));
    grp_fu_673_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_698_p0 <= grp_fu_698_p00(12 - 1 downto 0);
    grp_fu_698_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_fu_688_p2),48));
    grp_fu_698_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_713_p0 <= grp_fu_713_p00(12 - 1 downto 0);
    grp_fu_713_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_1_fu_703_p2),48));
    grp_fu_713_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_728_p0 <= grp_fu_728_p00(12 - 1 downto 0);
    grp_fu_728_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_2_fu_718_p2),48));
    grp_fu_728_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_743_p0 <= grp_fu_743_p00(12 - 1 downto 0);
    grp_fu_743_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_3_fu_733_p2),48));
    grp_fu_743_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_758_p0 <= grp_fu_758_p00(12 - 1 downto 0);
    grp_fu_758_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_4_fu_748_p2),48));
    grp_fu_758_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_773_p0 <= grp_fu_773_p00(12 - 1 downto 0);
    grp_fu_773_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_5_fu_763_p2),48));
    grp_fu_773_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_fu_788_p0 <= grp_fu_788_p00(12 - 1 downto 0);
    grp_fu_788_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_6_fu_778_p2),48));
    grp_fu_788_p1 <= sext_ln1118_reg_2011(36 - 1 downto 0);
    grp_mandel_calc_fu_453_ap_start <= grp_mandel_calc_fu_453_ap_start_reg;
    grp_mandel_calc_fu_461_ap_start <= grp_mandel_calc_fu_461_ap_start_reg;
    grp_mandel_calc_fu_461_x_in_V <= reg_2052(36 - 1 downto 0);
    grp_mandel_calc_fu_469_ap_start <= grp_mandel_calc_fu_469_ap_start_reg;
    grp_mandel_calc_fu_469_x_in_V <= reg_2062(36 - 1 downto 0);
    grp_mandel_calc_fu_477_ap_start <= grp_mandel_calc_fu_477_ap_start_reg;
    grp_mandel_calc_fu_477_x_in_V <= reg_2107(36 - 1 downto 0);
    grp_mandel_calc_fu_485_ap_start <= grp_mandel_calc_fu_485_ap_start_reg;
    grp_mandel_calc_fu_485_x_in_V <= reg_2137(36 - 1 downto 0);
    grp_mandel_calc_fu_493_ap_start <= grp_mandel_calc_fu_493_ap_start_reg;
    grp_mandel_calc_fu_493_x_in_V <= reg_2147(36 - 1 downto 0);
    grp_mandel_calc_fu_501_ap_start <= grp_mandel_calc_fu_501_ap_start_reg;
    grp_mandel_calc_fu_501_x_in_V <= reg_2157(36 - 1 downto 0);
    grp_mandel_calc_fu_509_ap_start <= grp_mandel_calc_fu_509_ap_start_reg;
    grp_mandel_calc_fu_509_x_in_V <= reg_2167(36 - 1 downto 0);
    icmp_ln785_1_fu_952_p2 <= "0" when (tmp_s_fu_942_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_2_fu_1034_p2 <= "0" when (tmp_10_fu_1024_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_3_fu_1116_p2 <= "0" when (tmp_11_fu_1106_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_4_fu_1198_p2 <= "0" when (tmp_12_fu_1188_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_5_fu_1280_p2 <= "0" when (tmp_13_fu_1270_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_6_fu_1362_p2 <= "0" when (tmp_14_fu_1352_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_7_fu_1444_p2 <= "0" when (tmp_15_fu_1434_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_fu_870_p2 <= "0" when (tmp_9_fu_860_p4 = ap_const_lv12_0) else "1";
    icmp_ln786_1_fu_982_p2 <= "0" when (tmp_s_fu_942_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_2_fu_1064_p2 <= "0" when (tmp_10_fu_1024_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_3_fu_1146_p2 <= "0" when (tmp_11_fu_1106_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_4_fu_1228_p2 <= "0" when (tmp_12_fu_1188_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_5_fu_1310_p2 <= "0" when (tmp_13_fu_1270_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_6_fu_1392_p2 <= "0" when (tmp_14_fu_1352_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_7_fu_1474_p2 <= "0" when (tmp_15_fu_1434_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_fu_900_p2 <= "0" when (tmp_9_fu_860_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln79_fu_653_p2 <= "1" when (t_V_1_reg_398 = tmp_17_reg_1994) else "0";
    icmp_ln85_fu_664_p2 <= "1" when (tmp_V_1_0_reg_421 = width_V_read_reg_1962) else "0";
    icmp_ln96_fu_1783_p2 <= "1" when (index_1_reg_432 = indvars_iv_reg_378) else "0";
        lhs_V_3_fu_1862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_30_reg_388),37));

        lhs_V_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X1_V),37));

    lshr_ln1_fu_1799_p4 <= i_op_assign_reg_442(11 downto 3);

    mem_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_0_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_0_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_0_ce0 <= ap_const_logic_1;
        else 
            mem_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_0_d0 <= reg_2040(16 - 1 downto 0);

    mem_0_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_0_we0 <= ap_const_logic_1;
        else 
            mem_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_1_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_1_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_1_ce0 <= ap_const_logic_1;
        else 
            mem_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_1_d0 <= reg_2052(16 - 1 downto 0);

    mem_1_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_1_we0 <= ap_const_logic_1;
        else 
            mem_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_2_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_2_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_2_ce0 <= ap_const_logic_1;
        else 
            mem_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_2_d0 <= reg_2062(16 - 1 downto 0);

    mem_2_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_2_we0 <= ap_const_logic_1;
        else 
            mem_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_3_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_3_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_3_ce0 <= ap_const_logic_1;
        else 
            mem_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_3_d0 <= reg_2107(16 - 1 downto 0);

    mem_3_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_3_we0 <= ap_const_logic_1;
        else 
            mem_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_4_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_4_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_4_ce0 <= ap_const_logic_1;
        else 
            mem_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_4_d0 <= reg_2137(16 - 1 downto 0);

    mem_4_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_4_we0 <= ap_const_logic_1;
        else 
            mem_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_5_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_5_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_5_ce0 <= ap_const_logic_1;
        else 
            mem_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_5_d0 <= reg_2147(16 - 1 downto 0);

    mem_5_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_5_we0 <= ap_const_logic_1;
        else 
            mem_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_6_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_6_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_6_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_6_ce0 <= ap_const_logic_1;
        else 
            mem_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_6_d0 <= reg_2157(16 - 1 downto 0);

    mem_6_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_6_we0 <= ap_const_logic_1;
        else 
            mem_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    mem_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51, zext_ln91_fu_1772_p1, zext_ln99_1_fu_1809_p1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem_7_address0 <= zext_ln99_1_fu_1809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_7_address0 <= zext_ln91_fu_1772_p1(8 - 1 downto 0);
        else 
            mem_7_address0 <= "XXXXXXXX";
        end if; 
    end process;


    mem_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state51)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state51) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mem_7_ce0 <= ap_const_logic_1;
        else 
            mem_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mem_7_d0 <= reg_2167(16 - 1 downto 0);

    mem_7_we0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            mem_7_we0 <= ap_const_logic_1;
        else 
            mem_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_19_fu_1492_p2 <= (and_ln786_reg_2199 or and_ln785_reg_2193);
    or_ln340_20_fu_1501_p2 <= (xor_ln340_3_fu_1496_p2 or and_ln785_reg_2193);
    or_ln340_21_fu_1527_p2 <= (and_ln786_13_reg_2218 or and_ln785_1_reg_2212);
    or_ln340_22_fu_1536_p2 <= (xor_ln340_4_fu_1531_p2 or and_ln785_1_reg_2212);
    or_ln340_23_fu_1562_p2 <= (and_ln786_14_reg_2237 or and_ln785_2_reg_2231);
    or_ln340_24_fu_1571_p2 <= (xor_ln340_5_fu_1566_p2 or and_ln785_2_reg_2231);
    or_ln340_25_fu_1597_p2 <= (and_ln786_15_reg_2256 or and_ln785_3_reg_2250);
    or_ln340_26_fu_1606_p2 <= (xor_ln340_6_fu_1601_p2 or and_ln785_3_reg_2250);
    or_ln340_27_fu_1915_p2 <= (xor_ln340_8_fu_1909_p2 or p_Result_23_fu_1883_p3);
    or_ln340_28_fu_1632_p2 <= (and_ln786_16_reg_2275 or and_ln785_4_reg_2269);
    or_ln340_29_fu_1641_p2 <= (xor_ln340_7_fu_1636_p2 or and_ln785_4_reg_2269);
    or_ln340_30_fu_1667_p2 <= (and_ln786_17_reg_2294 or and_ln785_5_reg_2288);
    or_ln340_31_fu_1676_p2 <= (xor_ln340_9_fu_1671_p2 or and_ln785_5_reg_2288);
    or_ln340_32_fu_1702_p2 <= (and_ln786_18_reg_2072 or and_ln785_6_reg_2307);
    or_ln340_33_fu_1711_p2 <= (xor_ln340_10_fu_1706_p2 or and_ln785_6_reg_2307);
    or_ln340_34_fu_1737_p2 <= (and_ln786_19_reg_2332 or and_ln785_7_reg_2057);
    or_ln340_35_fu_1746_p2 <= (xor_ln340_11_fu_1741_p2 or and_ln785_7_reg_2057);
    or_ln340_fu_583_p2 <= (xor_ln340_fu_577_p2 or p_Result_21_fu_551_p3);
    or_ln700_1_fu_703_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_2);
    or_ln700_2_fu_718_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_3);
    or_ln700_3_fu_733_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_4);
    or_ln700_4_fu_748_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_5);
    or_ln700_5_fu_763_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_6);
    or_ln700_6_fu_778_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_7);
    or_ln700_fu_688_p2 <= (tmp_V_1_0_reg_421 or ap_const_lv12_1);
    or_ln785_10_fu_1286_p2 <= (tmp_57_fu_1262_p3 or icmp_ln785_5_fu_1280_p2);
    or_ln785_11_fu_1368_p2 <= (tmp_59_fu_1344_p3 or icmp_ln785_6_fu_1362_p2);
    or_ln785_12_fu_1450_p2 <= (tmp_61_fu_1426_p3 or icmp_ln785_7_fu_1444_p2);
    or_ln785_6_fu_958_p2 <= (tmp_49_fu_934_p3 or icmp_ln785_1_fu_952_p2);
    or_ln785_7_fu_1040_p2 <= (tmp_51_fu_1016_p3 or icmp_ln785_2_fu_1034_p2);
    or_ln785_8_fu_1122_p2 <= (tmp_53_fu_1098_p3 or icmp_ln785_3_fu_1116_p2);
    or_ln785_9_fu_1204_p2 <= (tmp_55_fu_1180_p3 or icmp_ln785_4_fu_1198_p2);
    or_ln785_fu_876_p2 <= (tmp_47_fu_852_p3 or icmp_ln785_fu_870_p2);
    or_ln786_1_fu_988_p2 <= (xor_ln786_9_fu_976_p2 or icmp_ln786_1_fu_982_p2);
    or_ln786_2_fu_1070_p2 <= (xor_ln786_10_fu_1058_p2 or icmp_ln786_2_fu_1064_p2);
    or_ln786_3_fu_1152_p2 <= (xor_ln786_11_fu_1140_p2 or icmp_ln786_3_fu_1146_p2);
    or_ln786_4_fu_1234_p2 <= (xor_ln786_12_fu_1222_p2 or icmp_ln786_4_fu_1228_p2);
    or_ln786_5_fu_1316_p2 <= (xor_ln786_13_fu_1304_p2 or icmp_ln786_5_fu_1310_p2);
    or_ln786_6_fu_1398_p2 <= (xor_ln786_14_fu_1386_p2 or icmp_ln786_6_fu_1392_p2);
    or_ln786_7_fu_1480_p2 <= (xor_ln786_15_fu_1468_p2 or icmp_ln786_7_fu_1474_p2);
    or_ln786_fu_906_p2 <= (xor_ln786_7_fu_894_p2 or icmp_ln786_fu_900_p2);
    p_Result_21_fu_551_p3 <= grp_fu_534_p2(35 downto 35);
    p_Result_22_fu_1871_p3 <= grp_fu_1866_p2(36 downto 36);
    p_Result_23_fu_1883_p3 <= grp_fu_1866_p2(35 downto 35);
    p_Result_s_fu_539_p3 <= grp_fu_534_p2(36 downto 36);
    p_Val2_29_fu_547_p1 <= grp_fu_534_p2(36 - 1 downto 0);
    rhs_V_4_fu_649_p0 <= grp_fu_1937_p3;
        rhs_V_4_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_649_p0),37));

    rhs_V_fu_521_p0 <= X0_V;
        rhs_V_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_521_p0),37));

    select_ln340_10_fu_1576_p2 <= reg_2062(36 - 1 downto 0);
    select_ln340_10_fu_1576_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_23_fu_1562_p2(0) = '1') else 
        select_ln340_10_fu_1576_p2;
    select_ln340_11_fu_1611_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_25_fu_1597_p2(0) = '1') else 
        reg_1989;
    select_ln340_12_fu_1646_p2 <= reg_2107(36 - 1 downto 0);
    select_ln340_12_fu_1646_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_28_fu_1632_p2(0) = '1') else 
        select_ln340_12_fu_1646_p2;
    select_ln340_13_fu_1681_p2 <= reg_2177(36 - 1 downto 0);
    select_ln340_13_fu_1681_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_30_fu_1667_p2(0) = '1') else 
        select_ln340_13_fu_1681_p2;
    select_ln340_14_fu_1716_p2 <= reg_2147(36 - 1 downto 0);
    select_ln340_14_fu_1716_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_32_fu_1702_p2(0) = '1') else 
        select_ln340_14_fu_1716_p2;
    select_ln340_15_fu_1751_p2 <= reg_2167(36 - 1 downto 0);
    select_ln340_15_fu_1751_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_34_fu_1737_p2(0) = '1') else 
        select_ln340_15_fu_1751_p2;
    select_ln340_18_fu_1554_p3 <= 
        select_ln340_9_fu_1519_p3 when (or_ln340_22_fu_1536_p2(0) = '1') else 
        select_ln388_9_fu_1548_p3;
    select_ln340_19_fu_1589_p3 <= 
        select_ln340_10_fu_1576_p3 when (or_ln340_24_fu_1571_p2(0) = '1') else 
        select_ln388_10_fu_1583_p3;
    select_ln340_20_fu_1624_p3 <= 
        select_ln340_11_fu_1611_p3 when (or_ln340_26_fu_1606_p2(0) = '1') else 
        select_ln388_11_fu_1618_p3;
    select_ln340_21_fu_1659_p3 <= 
        select_ln340_12_fu_1646_p3 when (or_ln340_29_fu_1641_p2(0) = '1') else 
        select_ln388_12_fu_1653_p3;
    select_ln340_22_fu_1694_p3 <= 
        select_ln340_13_fu_1681_p3 when (or_ln340_31_fu_1676_p2(0) = '1') else 
        select_ln388_13_fu_1688_p3;
    select_ln340_23_fu_1729_p3 <= 
        select_ln340_14_fu_1716_p3 when (or_ln340_33_fu_1711_p2(0) = '1') else 
        select_ln388_14_fu_1723_p3;
    select_ln340_24_fu_1764_p3 <= 
        select_ln340_15_fu_1751_p3 when (or_ln340_35_fu_1746_p2(0) = '1') else 
        select_ln388_15_fu_1758_p3;
    select_ln340_9_fu_1519_p2 <= reg_2157(36 - 1 downto 0);
    select_ln340_9_fu_1519_p3 <= 
        ap_const_lv36_7FFFFFFFF when (or_ln340_21_fu_1527_p2(0) = '1') else 
        select_ln340_9_fu_1519_p2;
    select_ln388_10_fu_1583_p2 <= reg_2062(36 - 1 downto 0);
    select_ln388_10_fu_1583_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_14_reg_2237(0) = '1') else 
        select_ln388_10_fu_1583_p2;
    select_ln388_11_fu_1618_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_15_reg_2256(0) = '1') else 
        reg_1989;
    select_ln388_12_fu_1653_p2 <= reg_2107(36 - 1 downto 0);
    select_ln388_12_fu_1653_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_16_reg_2275(0) = '1') else 
        select_ln388_12_fu_1653_p2;
    select_ln388_13_fu_1688_p2 <= reg_2177(36 - 1 downto 0);
    select_ln388_13_fu_1688_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_17_reg_2294(0) = '1') else 
        select_ln388_13_fu_1688_p2;
    select_ln388_14_fu_1723_p2 <= reg_2147(36 - 1 downto 0);
    select_ln388_14_fu_1723_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_18_reg_2072(0) = '1') else 
        select_ln388_14_fu_1723_p2;
    select_ln388_15_fu_1758_p2 <= reg_2167(36 - 1 downto 0);
    select_ln388_15_fu_1758_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_19_reg_2332(0) = '1') else 
        select_ln388_15_fu_1758_p2;
    select_ln388_9_fu_1548_p2 <= reg_2157(36 - 1 downto 0);
    select_ln388_9_fu_1548_p3 <= 
        ap_const_lv36_800000000 when (and_ln786_13_reg_2218(0) = '1') else 
        select_ln388_9_fu_1548_p2;
    sext_ln1118_fu_642_p0 <= grp_fu_1937_p3;
        sext_ln1118_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_fu_642_p0),48));

        sext_ln703_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X0_V_read_reg_1976),48));

    shl_ln_fu_616_p3 <= (width_V_read_reg_1962 & ap_const_lv2_0);
    sub_ln79_fu_525_p2 <= std_logic_vector(unsigned(shl_ln_fu_616_p3) - unsigned(zext_ln79_fu_613_p1));
    tmp_10_fu_1024_p4 <= add_ln1192_2_fu_1000_p2(47 downto 36);
    tmp_11_fu_1106_p4 <= add_ln1192_3_fu_1082_p2(47 downto 36);
    tmp_12_fu_1188_p4 <= add_ln1192_4_fu_1164_p2(47 downto 36);
    tmp_13_fu_1270_p4 <= add_ln1192_5_fu_1246_p2(47 downto 36);
    tmp_14_fu_1352_p4 <= add_ln1192_6_fu_1328_p2(47 downto 36);
    tmp_15_fu_1434_p4 <= add_ln1192_7_fu_1410_p2(47 downto 36);
    tmp_16_fu_1840_p9 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln99_fu_1837_p0),32));
    tmp_46_fu_840_p3 <= add_ln1192_fu_848_p2(47 downto 47);
    tmp_47_fu_852_p3 <= grp_fu_1945_p2(35 downto 35);
    tmp_48_fu_922_p3 <= add_ln1192_1_fu_918_p2(47 downto 47);
    tmp_49_fu_934_p3 <= add_ln703_1_fu_930_p2(35 downto 35);
    tmp_50_fu_1004_p3 <= add_ln1192_2_fu_1000_p2(47 downto 47);
    tmp_51_fu_1016_p3 <= add_ln703_2_fu_1012_p2(35 downto 35);
    tmp_52_fu_1086_p3 <= add_ln1192_3_fu_1082_p2(47 downto 47);
    tmp_53_fu_1098_p3 <= add_ln703_3_fu_1094_p2(35 downto 35);
    tmp_54_fu_1168_p3 <= add_ln1192_4_fu_1164_p2(47 downto 47);
    tmp_55_fu_1180_p3 <= add_ln703_4_fu_1176_p2(35 downto 35);
    tmp_56_fu_1250_p3 <= add_ln1192_5_fu_1246_p2(47 downto 47);
    tmp_57_fu_1262_p3 <= add_ln703_5_fu_1258_p2(35 downto 35);
    tmp_58_fu_1332_p3 <= add_ln1192_6_fu_1328_p2(47 downto 47);
    tmp_59_fu_1344_p3 <= add_ln703_6_fu_1340_p2(35 downto 35);
    tmp_60_fu_1414_p3 <= add_ln1192_7_fu_1410_p2(47 downto 47);
    tmp_61_fu_1426_p3 <= add_ln703_7_fu_1422_p2(35 downto 35);
    tmp_9_fu_860_p4 <= add_ln1192_fu_848_p2(47 downto 36);
    tmp_s_fu_942_p4 <= add_ln1192_1_fu_918_p2(47 downto 36);
    trunc_ln1192_1_fu_808_p1 <= grp_fu_698_p2(36 - 1 downto 0);
    trunc_ln1192_2_fu_812_p1 <= grp_fu_713_p2(36 - 1 downto 0);
    trunc_ln1192_3_fu_816_p1 <= grp_fu_728_p2(36 - 1 downto 0);
    trunc_ln1192_4_fu_820_p1 <= grp_fu_743_p2(36 - 1 downto 0);
    trunc_ln1192_5_fu_824_p1 <= grp_fu_758_p2(36 - 1 downto 0);
    trunc_ln1192_6_fu_828_p1 <= grp_fu_773_p2(36 - 1 downto 0);
    trunc_ln1192_7_fu_832_p1 <= grp_fu_788_p2(36 - 1 downto 0);
    trunc_ln1192_fu_804_p1 <= grp_fu_673_p2(36 - 1 downto 0);
    trunc_ln99_fu_1795_p1 <= i_op_assign_reg_442(3 - 1 downto 0);
    underflow_7_fu_1897_p2 <= (xor_ln786_8_fu_1891_p2 and p_Result_22_fu_1871_p3);
    underflow_fu_565_p2 <= (xor_ln786_fu_559_p2 and p_Result_s_fu_539_p3);
    xor_ln340_10_fu_1706_p2 <= (ap_const_lv1_1 xor and_ln786_18_reg_2072);
    xor_ln340_11_fu_1741_p2 <= (ap_const_lv1_1 xor and_ln786_19_reg_2332);
    xor_ln340_12_fu_1903_p2 <= (p_Result_23_fu_1883_p3 xor p_Result_22_fu_1871_p3);
    xor_ln340_2_fu_571_p2 <= (p_Result_s_fu_539_p3 xor p_Result_21_fu_551_p3);
    xor_ln340_3_fu_1496_p2 <= (ap_const_lv1_1 xor and_ln786_reg_2199);
    xor_ln340_4_fu_1531_p2 <= (ap_const_lv1_1 xor and_ln786_13_reg_2218);
    xor_ln340_5_fu_1566_p2 <= (ap_const_lv1_1 xor and_ln786_14_reg_2237);
    xor_ln340_6_fu_1601_p2 <= (ap_const_lv1_1 xor and_ln786_15_reg_2256);
    xor_ln340_7_fu_1636_p2 <= (ap_const_lv1_1 xor and_ln786_16_reg_2275);
    xor_ln340_8_fu_1909_p2 <= (p_Result_22_fu_1871_p3 xor ap_const_lv1_1);
    xor_ln340_9_fu_1671_p2 <= (ap_const_lv1_1 xor and_ln786_17_reg_2294);
    xor_ln340_fu_577_p2 <= (p_Result_s_fu_539_p3 xor ap_const_lv1_1);
    xor_ln785_11_fu_964_p2 <= (tmp_48_fu_922_p3 xor ap_const_lv1_1);
    xor_ln785_12_fu_1046_p2 <= (tmp_50_fu_1004_p3 xor ap_const_lv1_1);
    xor_ln785_13_fu_1128_p2 <= (tmp_52_fu_1086_p3 xor ap_const_lv1_1);
    xor_ln785_14_fu_1210_p2 <= (tmp_54_fu_1168_p3 xor ap_const_lv1_1);
    xor_ln785_15_fu_1292_p2 <= (tmp_56_fu_1250_p3 xor ap_const_lv1_1);
    xor_ln785_16_fu_1374_p2 <= (tmp_58_fu_1332_p3 xor ap_const_lv1_1);
    xor_ln785_17_fu_1456_p2 <= (tmp_60_fu_1414_p3 xor ap_const_lv1_1);
    xor_ln785_fu_882_p2 <= (tmp_46_fu_840_p3 xor ap_const_lv1_1);
    xor_ln786_10_fu_1058_p2 <= (tmp_51_fu_1016_p3 xor ap_const_lv1_1);
    xor_ln786_11_fu_1140_p2 <= (tmp_53_fu_1098_p3 xor ap_const_lv1_1);
    xor_ln786_12_fu_1222_p2 <= (tmp_55_fu_1180_p3 xor ap_const_lv1_1);
    xor_ln786_13_fu_1304_p2 <= (tmp_57_fu_1262_p3 xor ap_const_lv1_1);
    xor_ln786_14_fu_1386_p2 <= (tmp_59_fu_1344_p3 xor ap_const_lv1_1);
    xor_ln786_15_fu_1468_p2 <= (tmp_61_fu_1426_p3 xor ap_const_lv1_1);
    xor_ln786_7_fu_894_p2 <= (tmp_47_fu_852_p3 xor ap_const_lv1_1);
    xor_ln786_8_fu_1891_p2 <= (p_Result_23_fu_1883_p3 xor ap_const_lv1_1);
    xor_ln786_9_fu_976_p2 <= (tmp_49_fu_934_p3 xor ap_const_lv1_1);
    xor_ln786_fu_559_p2 <= (p_Result_21_fu_551_p3 xor ap_const_lv1_1);
    y_V_fu_1879_p1 <= grp_fu_1866_p2(36 - 1 downto 0);
    zext_ln1116_1_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_fu_688_p2),48));
    zext_ln1116_2_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_1_fu_703_p2),48));
    zext_ln1116_3_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_2_fu_718_p2),48));
    zext_ln1116_4_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_3_fu_733_p2),48));
    zext_ln1116_5_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_4_fu_748_p2),48));
    zext_ln1116_6_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_5_fu_763_p2),48));
    zext_ln1116_7_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_6_fu_778_p2),48));
    zext_ln1116_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_0_reg_421),48));
    zext_ln1118_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1962),24));
    zext_ln1148_fu_531_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1962),37));
    zext_ln79_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1962),14));
    zext_ln91_fu_1772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1999),64));
    zext_ln99_1_fu_1809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_1799_p4),64));
    zext_ln99_2_fu_1827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_reg_432),64));
    zext_ln99_fu_1837_p0 <= reg_1989(3 - 1 downto 0);
end behav;

-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calc is
generic (
    C_M_AXI_BUF_R_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BUF_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_IN_PARMS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_IN_PARMS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BUF_R_TARGET_ADDR : INTEGER := 0;
    C_M_AXI_BUF_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BUF_R_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_buf_r_AWVALID : OUT STD_LOGIC;
    m_axi_buf_r_AWREADY : IN STD_LOGIC;
    m_axi_buf_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_AWUSER_WIDTH-1 downto 0);
    m_axi_buf_r_WVALID : OUT STD_LOGIC;
    m_axi_buf_r_WREADY : IN STD_LOGIC;
    m_axi_buf_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH/8-1 downto 0);
    m_axi_buf_r_WLAST : OUT STD_LOGIC;
    m_axi_buf_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_WUSER_WIDTH-1 downto 0);
    m_axi_buf_r_ARVALID : OUT STD_LOGIC;
    m_axi_buf_r_ARREADY : IN STD_LOGIC;
    m_axi_buf_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ADDR_WIDTH-1 downto 0);
    m_axi_buf_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_buf_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_buf_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_buf_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ARUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RVALID : IN STD_LOGIC;
    m_axi_buf_r_RREADY : OUT STD_LOGIC;
    m_axi_buf_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_DATA_WIDTH-1 downto 0);
    m_axi_buf_r_RLAST : IN STD_LOGIC;
    m_axi_buf_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_RUSER_WIDTH-1 downto 0);
    m_axi_buf_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BVALID : IN STD_LOGIC;
    m_axi_buf_r_BREADY : OUT STD_LOGIC;
    m_axi_buf_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_buf_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_ID_WIDTH-1 downto 0);
    m_axi_buf_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUF_R_BUSER_WIDTH-1 downto 0);
    s_axi_in_parms_AWVALID : IN STD_LOGIC;
    s_axi_in_parms_AWREADY : OUT STD_LOGIC;
    s_axi_in_parms_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_ADDR_WIDTH-1 downto 0);
    s_axi_in_parms_WVALID : IN STD_LOGIC;
    s_axi_in_parms_WREADY : OUT STD_LOGIC;
    s_axi_in_parms_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_DATA_WIDTH-1 downto 0);
    s_axi_in_parms_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_DATA_WIDTH/8-1 downto 0);
    s_axi_in_parms_ARVALID : IN STD_LOGIC;
    s_axi_in_parms_ARREADY : OUT STD_LOGIC;
    s_axi_in_parms_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_ADDR_WIDTH-1 downto 0);
    s_axi_in_parms_RVALID : OUT STD_LOGIC;
    s_axi_in_parms_RREADY : IN STD_LOGIC;
    s_axi_in_parms_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_IN_PARMS_DATA_WIDTH-1 downto 0);
    s_axi_in_parms_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_in_parms_BVALID : OUT STD_LOGIC;
    s_axi_in_parms_BREADY : IN STD_LOGIC;
    s_axi_in_parms_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of calc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calc,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.250000,HLS_SYN_LAT=5063471,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=176,HLS_SYN_FF=21963,HLS_SYN_LUT=24793,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (70 downto 0) := "00000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (70 downto 0) := "00000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (70 downto 0) := "00000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (70 downto 0) := "00000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (70 downto 0) := "00000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (70 downto 0) := "00000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (70 downto 0) := "00000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (70 downto 0) := "00001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (70 downto 0) := "00010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (70 downto 0) := "00100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (70 downto 0) := "01000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (70 downto 0) := "10000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv12_780 : STD_LOGIC_VECTOR (11 downto 0) := "011110000000";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv40_8000000000 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv40_7FFFFFFFFF : STD_LOGIC_VECTOR (39 downto 0) := "0111111111111111111111111111111111111111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv12_FFF : STD_LOGIC_VECTOR (11 downto 0) := "111111111111";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (70 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal setup : STD_LOGIC;
    signal X0_V : STD_LOGIC_VECTOR (39 downto 0);
    signal Y0_V : STD_LOGIC_VECTOR (39 downto 0);
    signal X1_V : STD_LOGIC_VECTOR (39 downto 0);
    signal width_V : STD_LOGIC_VECTOR (11 downto 0);
    signal maxWidth_V_1_data_reg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal maxWidth_V_1_vld_reg : STD_LOGIC := '0';
    signal maxWidth_V_1_vld_in : STD_LOGIC;
    signal unroll_1_data_reg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal unroll_1_vld_reg : STD_LOGIC := '0';
    signal unroll_1_vld_in : STD_LOGIC;
    signal maxIter : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_r_blk_n_AW : STD_LOGIC;
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal buf_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal buf_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal buf_r_AWVALID : STD_LOGIC;
    signal buf_r_AWREADY : STD_LOGIC;
    signal buf_r_WVALID : STD_LOGIC;
    signal buf_r_WREADY : STD_LOGIC;
    signal buf_r_WDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_r_ARREADY : STD_LOGIC;
    signal buf_r_RVALID : STD_LOGIC;
    signal buf_r_RDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_r_RLAST : STD_LOGIC;
    signal buf_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BVALID : STD_LOGIC;
    signal buf_r_BREADY : STD_LOGIC;
    signal buf_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal buf_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal buf_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal maxIter_read_reg_1717 : STD_LOGIC_VECTOR (15 downto 0);
    signal width_V_read_reg_1729 : STD_LOGIC_VECTOR (11 downto 0);
    signal Y0_V_read_reg_1737 : STD_LOGIC_VECTOR (39 downto 0);
    signal X0_V_read_reg_1742 : STD_LOGIC_VECTOR (39 downto 0);
    signal setup_read_reg_1755 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1116_1_fu_563_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_1759 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal icmp_ln79_fu_915_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal select_ln340_21_fu_1429_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal grp_mandel_calc_fu_344_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mandel_calc_fu_320_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_320_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_328_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_328_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_336_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_336_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_344_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_344_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_352_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_352_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_360_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_360_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_368_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_368_ap_done : STD_LOGIC;
    signal grp_mandel_calc_fu_376_ap_ready : STD_LOGIC;
    signal grp_mandel_calc_fu_376_ap_done : STD_LOGIC;
    signal ap_block_state58_on_subcall_done : BOOLEAN;
    signal zext_ln1148_fu_398_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal delta_V_fu_414_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal sub_ln78_fu_678_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln78_reg_1764 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal p_Result_s_reg_1769 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_21_reg_1782 : STD_LOGIC_VECTOR (0 downto 0);
    signal rhs_V_4_fu_384_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal rhs_V_4_reg_1794 : STD_LOGIC_VECTOR (40 downto 0);
    signal sext_ln1118_fu_499_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln1118_reg_1806 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln703_fu_507_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln703_reg_1811 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln78_fu_510_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal sext_ln78_reg_1816 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln78_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal maxWidth_V_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal unroll_1_state : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_state48 : BOOLEAN;
    signal line_V_fu_528_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal line_V_reg_1836 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_789_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal index_reg_1841 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln78_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln703_3_fu_939_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal reg_1849 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln1116_3_fu_593_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_1275_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_336_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal buf_addr_reg_1854 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_1867 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_1359_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_320_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1116_2_fu_578_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln700_reg_1907 : STD_LOGIC_VECTOR (11 downto 0);
    signal reg_1912 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_1917 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln703_2_fu_893_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln340_19_fu_1415_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_328_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1116_4_fu_608_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln1192_2_fu_765_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_2_reg_1942 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_627_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_1947 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln703_4_fu_985_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln340_22_fu_1499_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_352_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1116_5_fu_623_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln1192_3_fu_769_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_3_reg_1952 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_1957 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln703_5_fu_1031_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln340_23_fu_1569_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_360_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1116_fu_538_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln1192_4_fu_773_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_4_reg_1962 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_642_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal reg_1967 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln703_6_fu_1077_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln340_24_fu_1639_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_368_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln1116_6_fu_638_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln1192_5_fu_777_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_5_reg_1972 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_fu_757_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal reg_1977 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln340_25_fu_1709_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_376_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln703_7_fu_1123_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_6_fu_781_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_6_reg_1982 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln703_1_fu_847_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal reg_1987 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln1116_7_fu_653_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln1192_7_fu_785_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_7_reg_1992 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_48_reg_1997 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_49_reg_2009 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_reg_2015 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_reg_2020 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_50_reg_2025 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_2037 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_1_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_1_reg_2043 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_1_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_1_reg_2048 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_52_reg_2053 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_53_reg_2065 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_2_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_2_reg_2071 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_2_fu_921_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_2_reg_2076 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_reg_2081 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_55_reg_2093 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_3_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_3_reg_2099 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_3_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_3_reg_2104 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_56_reg_2109 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_57_reg_2121 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_4_fu_1007_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_4_reg_2127 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_4_fu_1013_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_4_reg_2132 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_reg_2137 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_2149 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_5_fu_1053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_5_reg_2155 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_5_fu_1059_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_5_reg_2160 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_60_reg_2165 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_61_reg_2177 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_6_fu_1099_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_6_reg_2183 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_6_fu_1105_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_6_reg_2188 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1192_1_fu_761_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal trunc_ln1192_1_reg_2199 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_63_reg_2205 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_7_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln785_7_reg_2211 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_7_fu_1151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln786_7_reg_2216 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mandel_calc_fu_320_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_320_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_320_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_328_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_328_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_328_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_336_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_336_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_336_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_344_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_344_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_344_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_352_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_352_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_352_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_360_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_360_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_360_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_368_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_368_ap_idle : STD_LOGIC;
    signal grp_mandel_calc_fu_368_x_in_V : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_mandel_calc_fu_376_ap_start : STD_LOGIC;
    signal grp_mandel_calc_fu_376_ap_idle : STD_LOGIC;
    signal p_Val2_30_reg_268 : STD_LOGIC_VECTOR (39 downto 0);
    signal t_V_1_reg_278 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_0_reg_289 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_V_1_0_reg_300 : STD_LOGIC_VECTOR (11 downto 0);
    signal index_1_0_reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mandel_calc_fu_320_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal grp_mandel_calc_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_336_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_344_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_352_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_360_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_368_ap_start_reg : STD_LOGIC := '0';
    signal grp_mandel_calc_fu_376_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln85_fu_547_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal rhs_V_4_fu_384_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal rhs_V_fu_388_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal lhs_V_3_fu_674_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal lhs_V_fu_503_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal rhs_V_fu_388_p1 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_401_p0 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_401_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (40 downto 0);
    signal xor_ln340_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_457_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln340_26_fu_1397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_11_fu_464_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal lshr_ln_fu_472_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln1118_fu_499_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_8_fu_813_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_542_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_542_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_fu_557_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_567_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_567_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_1_fu_572_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_582_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_582_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_2_fu_587_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_597_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_597_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_3_fu_602_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_612_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_612_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_4_fu_617_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_627_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_627_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_5_fu_632_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_642_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_642_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln700_6_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_657_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_657_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_662_p0 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_662_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal and_ln_fu_485_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln78_1_fu_481_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_23_fu_695_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_22_fu_683_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_733_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_20_fu_1339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_733_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_741_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal y_V_fu_691_p1 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_789_p0 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_789_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln1192_fu_835_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_9_fu_859_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_905_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1192_2_fu_881_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal add_ln1192_3_fu_927_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_10_fu_951_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1192_4_fu_973_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_11_fu_997_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1192_5_fu_1019_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_12_fu_1043_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1192_6_fu_1065_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_13_fu_1089_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1192_7_fu_1111_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_14_fu_1135_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_1166_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_1317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1166_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_7_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_8_fu_1172_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1182_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_1177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1182_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_1236_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_5_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1199_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_2_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1219_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_24_fu_1327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1219_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_fu_1157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_9_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_1247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_12_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_fu_1322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_6_fu_1263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1219_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_741_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_7_fu_1297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_12_fu_1301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_10_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_6_fu_1227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_11_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1333_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln388_9_fu_1345_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln340_22_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_1352_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_1359_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_21_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_733_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_457_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_8_fu_1367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_13_fu_1371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_11_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_3_fu_1387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_14_fu_1392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_3_fu_1376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_8_fu_1403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_23_fu_1269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_9_fu_1352_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_9_fu_1345_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_11_fu_1422_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln340_27_fu_1409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_11_fu_464_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_11_fu_1422_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_9_fu_1437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_14_fu_1441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_12_fu_1452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_4_fu_1457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_15_fu_1462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_4_fu_1446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_9_fu_1473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_28_fu_1467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1485_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_12_fu_1492_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln340_29_fu_1479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_12_fu_1485_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_12_fu_1492_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_10_fu_1507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_15_fu_1511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_13_fu_1522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_5_fu_1527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_16_fu_1532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_5_fu_1516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_10_fu_1543_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_30_fu_1537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_1555_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_13_fu_1562_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln340_31_fu_1549_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_13_fu_1555_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_13_fu_1562_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_11_fu_1577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_16_fu_1581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_14_fu_1592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_6_fu_1597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_17_fu_1602_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_6_fu_1586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_11_fu_1613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_32_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1625_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_14_fu_1632_p2 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln340_33_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_14_fu_1625_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_14_fu_1632_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal or_ln785_12_fu_1647_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_17_fu_1651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_15_fu_1662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_7_fu_1667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_18_fu_1672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_7_fu_1656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_12_fu_1683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_34_fu_1677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_35_fu_1689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_15_fu_1695_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal select_ln388_15_fu_1702_p3 : STD_LOGIC_VECTOR (39 downto 0);
    signal grp_fu_401_ap_start : STD_LOGIC;
    signal grp_fu_401_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (70 downto 0);
    signal grp_fu_401_p10 : STD_LOGIC_VECTOR (40 downto 0);
    signal grp_fu_542_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_567_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_582_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_597_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_612_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_627_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_642_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_657_p00 : STD_LOGIC_VECTOR (51 downto 0);

    component mandel_calc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_in_V : IN STD_LOGIC_VECTOR (39 downto 0);
        y_in_V : IN STD_LOGIC_VECTOR (39 downto 0);
        maxIter : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calc_sdiv_41ns_13eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (40 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (40 downto 0) );
    end component;


    component calc_mul_12ns_40sfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (39 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component calc_in_parms_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        setup : OUT STD_LOGIC;
        X0_V : OUT STD_LOGIC_VECTOR (39 downto 0);
        Y0_V : OUT STD_LOGIC_VECTOR (39 downto 0);
        X1_V : OUT STD_LOGIC_VECTOR (39 downto 0);
        width_V : OUT STD_LOGIC_VECTOR (11 downto 0);
        maxWidth_V : IN STD_LOGIC_VECTOR (11 downto 0);
        maxWidth_V_ap_vld : IN STD_LOGIC;
        unroll : IN STD_LOGIC_VECTOR (15 downto 0);
        unroll_ap_vld : IN STD_LOGIC;
        maxIter : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component calc_buf_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_TARGET_ADDR : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (1 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    calc_in_parms_s_axi_U : component calc_in_parms_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_IN_PARMS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_IN_PARMS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_in_parms_AWVALID,
        AWREADY => s_axi_in_parms_AWREADY,
        AWADDR => s_axi_in_parms_AWADDR,
        WVALID => s_axi_in_parms_WVALID,
        WREADY => s_axi_in_parms_WREADY,
        WDATA => s_axi_in_parms_WDATA,
        WSTRB => s_axi_in_parms_WSTRB,
        ARVALID => s_axi_in_parms_ARVALID,
        ARREADY => s_axi_in_parms_ARREADY,
        ARADDR => s_axi_in_parms_ARADDR,
        RVALID => s_axi_in_parms_RVALID,
        RREADY => s_axi_in_parms_RREADY,
        RDATA => s_axi_in_parms_RDATA,
        RRESP => s_axi_in_parms_RRESP,
        BVALID => s_axi_in_parms_BVALID,
        BREADY => s_axi_in_parms_BREADY,
        BRESP => s_axi_in_parms_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        setup => setup,
        X0_V => X0_V,
        Y0_V => Y0_V,
        X1_V => X1_V,
        width_V => width_V,
        maxWidth_V => maxWidth_V_1_data_reg,
        maxWidth_V_ap_vld => maxWidth_V_1_vld_reg,
        unroll => unroll_1_data_reg,
        unroll_ap_vld => unroll_1_vld_reg,
        maxIter => maxIter);

    calc_buf_r_m_axi_U : component calc_buf_r_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 16,
        USER_AW => 32,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BUF_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BUF_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BUF_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BUF_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BUF_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BUF_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BUF_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BUF_R_BUSER_WIDTH,
        C_TARGET_ADDR => C_M_AXI_BUF_R_TARGET_ADDR,
        C_USER_VALUE => C_M_AXI_BUF_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BUF_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BUF_R_CACHE_VALUE)
    port map (
        AWVALID => m_axi_buf_r_AWVALID,
        AWREADY => m_axi_buf_r_AWREADY,
        AWADDR => m_axi_buf_r_AWADDR,
        AWID => m_axi_buf_r_AWID,
        AWLEN => m_axi_buf_r_AWLEN,
        AWSIZE => m_axi_buf_r_AWSIZE,
        AWBURST => m_axi_buf_r_AWBURST,
        AWLOCK => m_axi_buf_r_AWLOCK,
        AWCACHE => m_axi_buf_r_AWCACHE,
        AWPROT => m_axi_buf_r_AWPROT,
        AWQOS => m_axi_buf_r_AWQOS,
        AWREGION => m_axi_buf_r_AWREGION,
        AWUSER => m_axi_buf_r_AWUSER,
        WVALID => m_axi_buf_r_WVALID,
        WREADY => m_axi_buf_r_WREADY,
        WDATA => m_axi_buf_r_WDATA,
        WSTRB => m_axi_buf_r_WSTRB,
        WLAST => m_axi_buf_r_WLAST,
        WID => m_axi_buf_r_WID,
        WUSER => m_axi_buf_r_WUSER,
        ARVALID => m_axi_buf_r_ARVALID,
        ARREADY => m_axi_buf_r_ARREADY,
        ARADDR => m_axi_buf_r_ARADDR,
        ARID => m_axi_buf_r_ARID,
        ARLEN => m_axi_buf_r_ARLEN,
        ARSIZE => m_axi_buf_r_ARSIZE,
        ARBURST => m_axi_buf_r_ARBURST,
        ARLOCK => m_axi_buf_r_ARLOCK,
        ARCACHE => m_axi_buf_r_ARCACHE,
        ARPROT => m_axi_buf_r_ARPROT,
        ARQOS => m_axi_buf_r_ARQOS,
        ARREGION => m_axi_buf_r_ARREGION,
        ARUSER => m_axi_buf_r_ARUSER,
        RVALID => m_axi_buf_r_RVALID,
        RREADY => m_axi_buf_r_RREADY,
        RDATA => m_axi_buf_r_RDATA,
        RLAST => m_axi_buf_r_RLAST,
        RID => m_axi_buf_r_RID,
        RUSER => m_axi_buf_r_RUSER,
        RRESP => m_axi_buf_r_RRESP,
        BVALID => m_axi_buf_r_BVALID,
        BREADY => m_axi_buf_r_BREADY,
        BRESP => m_axi_buf_r_BRESP,
        BID => m_axi_buf_r_BID,
        BUSER => m_axi_buf_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => buf_r_ARREADY,
        I_ARADDR => ap_const_lv32_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => buf_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => buf_r_RDATA,
        I_RID => buf_r_RID,
        I_RUSER => buf_r_RUSER,
        I_RRESP => buf_r_RRESP,
        I_RLAST => buf_r_RLAST,
        I_AWVALID => buf_r_AWVALID,
        I_AWREADY => buf_r_AWREADY,
        I_AWADDR => buf_addr_reg_1854,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_8,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => buf_r_WVALID,
        I_WREADY => buf_r_WREADY,
        I_WDATA => buf_r_WDATA,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv2_3,
        I_BVALID => buf_r_BVALID,
        I_BREADY => buf_r_BREADY,
        I_BRESP => buf_r_BRESP,
        I_BID => buf_r_BID,
        I_BUSER => buf_r_BUSER);

    grp_mandel_calc_fu_320 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_320_ap_start,
        ap_done => grp_mandel_calc_fu_320_ap_done,
        ap_idle => grp_mandel_calc_fu_320_ap_idle,
        ap_ready => grp_mandel_calc_fu_320_ap_ready,
        x_in_V => grp_mandel_calc_fu_320_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_320_ap_return);

    grp_mandel_calc_fu_328 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_328_ap_start,
        ap_done => grp_mandel_calc_fu_328_ap_done,
        ap_idle => grp_mandel_calc_fu_328_ap_idle,
        ap_ready => grp_mandel_calc_fu_328_ap_ready,
        x_in_V => grp_mandel_calc_fu_328_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_328_ap_return);

    grp_mandel_calc_fu_336 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_336_ap_start,
        ap_done => grp_mandel_calc_fu_336_ap_done,
        ap_idle => grp_mandel_calc_fu_336_ap_idle,
        ap_ready => grp_mandel_calc_fu_336_ap_ready,
        x_in_V => grp_mandel_calc_fu_336_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_336_ap_return);

    grp_mandel_calc_fu_344 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_344_ap_start,
        ap_done => grp_mandel_calc_fu_344_ap_done,
        ap_idle => grp_mandel_calc_fu_344_ap_idle,
        ap_ready => grp_mandel_calc_fu_344_ap_ready,
        x_in_V => grp_mandel_calc_fu_344_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_344_ap_return);

    grp_mandel_calc_fu_352 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_352_ap_start,
        ap_done => grp_mandel_calc_fu_352_ap_done,
        ap_idle => grp_mandel_calc_fu_352_ap_idle,
        ap_ready => grp_mandel_calc_fu_352_ap_ready,
        x_in_V => grp_mandel_calc_fu_352_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_352_ap_return);

    grp_mandel_calc_fu_360 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_360_ap_start,
        ap_done => grp_mandel_calc_fu_360_ap_done,
        ap_idle => grp_mandel_calc_fu_360_ap_idle,
        ap_ready => grp_mandel_calc_fu_360_ap_ready,
        x_in_V => grp_mandel_calc_fu_360_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_360_ap_return);

    grp_mandel_calc_fu_368 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_368_ap_start,
        ap_done => grp_mandel_calc_fu_368_ap_done,
        ap_idle => grp_mandel_calc_fu_368_ap_idle,
        ap_ready => grp_mandel_calc_fu_368_ap_ready,
        x_in_V => grp_mandel_calc_fu_368_x_in_V,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_368_ap_return);

    grp_mandel_calc_fu_376 : component mandel_calc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_mandel_calc_fu_376_ap_start,
        ap_done => grp_mandel_calc_fu_376_ap_done,
        ap_idle => grp_mandel_calc_fu_376_ap_idle,
        ap_ready => grp_mandel_calc_fu_376_ap_ready,
        x_in_V => reg_1977,
        y_in_V => p_Val2_30_reg_268,
        maxIter => maxIter_read_reg_1717,
        ap_return => grp_mandel_calc_fu_376_ap_return);

    calc_sdiv_41ns_13eOg_U13 : component calc_sdiv_41ns_13eOg
    generic map (
        ID => 1,
        NUM_STAGE => 45,
        din0_WIDTH => 41,
        din1_WIDTH => 13,
        dout_WIDTH => 41)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_401_ap_start,
        done => grp_fu_401_ap_done,
        din0 => grp_fu_401_p0,
        din1 => grp_fu_401_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_401_p2);

    calc_mul_12ns_40sfYi_U14 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_542_p0,
        din1 => grp_fu_542_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p2);

    calc_mul_12ns_40sfYi_U15 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_567_p0,
        din1 => grp_fu_567_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    calc_mul_12ns_40sfYi_U16 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_582_p0,
        din1 => grp_fu_582_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p2);

    calc_mul_12ns_40sfYi_U17 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_597_p0,
        din1 => grp_fu_597_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p2);

    calc_mul_12ns_40sfYi_U18 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_612_p0,
        din1 => grp_fu_612_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_612_p2);

    calc_mul_12ns_40sfYi_U19 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_627_p0,
        din1 => grp_fu_627_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_627_p2);

    calc_mul_12ns_40sfYi_U20 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_642_p0,
        din1 => grp_fu_642_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_642_p2);

    calc_mul_12ns_40sfYi_U21 : component calc_mul_12ns_40sfYi
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 12,
        din1_WIDTH => 40,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_657_p0,
        din1 => grp_fu_657_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_320_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_320_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_320_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_320_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_320_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_336_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_336_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_336_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_336_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_336_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_344_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_344_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_344_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_344_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_344_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_352_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_352_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_352_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_352_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_352_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_360_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_360_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_360_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_360_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_360_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_368_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_368_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_368_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_368_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_368_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_mandel_calc_fu_376_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_mandel_calc_fu_376_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
                    grp_mandel_calc_fu_376_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mandel_calc_fu_376_ap_ready = ap_const_logic_1)) then 
                    grp_mandel_calc_fu_376_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    index_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                index_0_reg_289 <= index_reg_1841;
            elsif (((setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                index_0_reg_289 <= ap_const_lv24_0;
            end if; 
        end if;
    end process;

    index_1_0_reg_311_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((buf_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                index_1_0_reg_311 <= reg_1912(32 - 1 downto 0);
            elsif ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (icmp_ln78_fu_869_p2 = ap_const_lv1_0) and (setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                index_1_0_reg_311 <= zext_ln78_fu_513_p1;
            end if; 
        end if;
    end process;

    maxWidth_V_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    maxWidth_V_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (maxWidth_V_1_vld_reg = ap_const_logic_0) and (maxWidth_V_1_vld_in = ap_const_logic_1))) then 
                maxWidth_V_1_vld_reg <= ap_const_logic_1;
            elsif (((maxWidth_V_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (maxWidth_V_1_vld_reg = ap_const_logic_1))) then 
                maxWidth_V_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;

    p_Val2_30_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                p_Val2_30_reg_268 <= grp_fu_1275_p3;
            elsif (((setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                p_Val2_30_reg_268 <= Y0_V_read_reg_1737;
            end if; 
        end if;
    end process;

    reg_1759_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1759 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_662_p2),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
                reg_1759 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(delta_V_fu_414_p1),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                reg_1759 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln1148_fu_398_p1),52));
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1759 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_344_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1759 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_21_fu_1429_p3),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1759 <= grp_fu_597_p2;
            elsif (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1759 <= zext_ln1116_1_fu_563_p1;
            end if; 
        end if;
    end process;

    reg_1849_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1849 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_336_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1849 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1275_p3),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1849 <= grp_fu_582_p2;
            elsif (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1849 <= zext_ln1116_3_fu_593_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1849 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_3_fu_939_p2),52));
            end if; 
        end if;
    end process;

    reg_1867_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1867 <= zext_ln1116_2_fu_578_p1;
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1867 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_320_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1867 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1359_p3),52));
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                reg_1867 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_392_p2),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1867 <= grp_fu_567_p2;
            end if; 
        end if;
    end process;

    reg_1912_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                if ((icmp_ln79_fu_915_p2 = ap_const_lv1_1)) then 
                    reg_1912 <= grp_fu_1275_p3;
                elsif ((icmp_ln79_fu_915_p2 = ap_const_lv1_0)) then 
                    reg_1912 <= grp_fu_662_p2;
                end if;
            end if; 
        end if;
    end process;

    reg_1917_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1917 <= zext_ln1116_4_fu_608_p1;
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1917 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_328_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1917 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_19_fu_1415_p3),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1917 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_2_fu_893_p2),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1917 <= grp_fu_612_p2;
            end if; 
        end if;
    end process;

    reg_1947_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1947 <= zext_ln1116_5_fu_623_p1;
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1947 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_352_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1947 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_22_fu_1499_p3),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1947 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_4_fu_985_p2),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1947 <= grp_fu_627_p2;
            end if; 
        end if;
    end process;

    reg_1957_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1957 <= zext_ln1116_fu_538_p1;
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1957 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_360_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1957 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_23_fu_1569_p3),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1957 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_5_fu_1031_p2),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1957 <= grp_fu_542_p2;
            end if; 
        end if;
    end process;

    reg_1967_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1967 <= zext_ln1116_6_fu_638_p1;
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1967 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_368_ap_return),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1967 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln340_24_fu_1639_p3),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1967 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_6_fu_1077_p2),52));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1967 <= grp_fu_642_p2;
            end if; 
        end if;
    end process;

    reg_1977_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1977 <= add_ln703_7_fu_1123_p2;
            elsif ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
                reg_1977 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_mandel_calc_fu_376_ap_return),40));
            elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
                reg_1977 <= select_ln340_25_fu_1709_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1977 <= trunc_ln1192_fu_757_p1;
            end if; 
        end if;
    end process;

    reg_1987_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                reg_1987 <= zext_ln1116_7_fu_653_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
                reg_1987 <= grp_fu_657_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
                reg_1987 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln703_1_fu_847_p2),52));
            end if; 
        end if;
    end process;

    t_V_1_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then 
                t_V_1_reg_278 <= line_V_reg_1836;
            elsif (((setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                t_V_1_reg_278 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    tmp_V_1_0_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((buf_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
                tmp_V_1_0_reg_300 <= add_ln700_reg_1907;
            elsif ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (icmp_ln78_fu_869_p2 = ap_const_lv1_0) and (setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                tmp_V_1_0_reg_300 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    unroll_1_state_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    unroll_1_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (unroll_1_vld_reg = ap_const_logic_0) and (unroll_1_vld_in = ap_const_logic_1))) then 
                unroll_1_vld_reg <= ap_const_logic_1;
            elsif (((unroll_1_vld_in = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_1) and (unroll_1_vld_reg = ap_const_logic_1))) then 
                unroll_1_vld_reg <= ap_const_logic_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                X0_V_read_reg_1742 <= X0_V;
                Y0_V_read_reg_1737 <= Y0_V;
                maxIter_read_reg_1717 <= maxIter;
                setup_read_reg_1755 <= (0=>setup, others=>'-');
                width_V_read_reg_1729 <= width_V;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln79_fu_915_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                add_ln700_reg_1907 <= grp_fu_789_p2(12 - 1 downto 0);
                buf_addr_reg_1854 <= zext_ln85_fu_547_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                icmp_ln785_1_reg_2043 <= icmp_ln785_1_fu_823_p2;
                icmp_ln785_2_reg_2071 <= icmp_ln785_2_fu_829_p2;
                icmp_ln785_3_reg_2099 <= icmp_ln785_3_fu_961_p2;
                icmp_ln785_4_reg_2127 <= icmp_ln785_4_fu_1007_p2;
                icmp_ln785_5_reg_2155 <= icmp_ln785_5_fu_1053_p2;
                icmp_ln785_6_reg_2183 <= icmp_ln785_6_fu_1099_p2;
                icmp_ln785_7_reg_2211 <= icmp_ln785_7_fu_1145_p2;
                icmp_ln785_reg_2015 <= icmp_ln785_fu_517_p2;
                icmp_ln786_1_reg_2048 <= icmp_ln786_1_fu_875_p2;
                icmp_ln786_2_reg_2076 <= icmp_ln786_2_fu_921_p2;
                icmp_ln786_3_reg_2104 <= icmp_ln786_3_fu_967_p2;
                icmp_ln786_4_reg_2132 <= icmp_ln786_4_fu_1013_p2;
                icmp_ln786_5_reg_2160 <= icmp_ln786_5_fu_1059_p2;
                icmp_ln786_6_reg_2188 <= icmp_ln786_6_fu_1105_p2;
                icmp_ln786_7_reg_2216 <= icmp_ln786_7_fu_1151_p2;
                icmp_ln786_reg_2020 <= icmp_ln786_fu_533_p2;
                tmp_48_reg_1997 <= add_ln1192_fu_835_p2(51 downto 51);
                tmp_49_reg_2009 <= grp_fu_662_p2(39 downto 39);
                tmp_50_reg_2025 <= grp_fu_789_p2(51 downto 51);
                tmp_51_reg_2037 <= add_ln703_1_fu_847_p2(39 downto 39);
                tmp_52_reg_2053 <= add_ln1192_2_fu_881_p2(51 downto 51);
                tmp_53_reg_2065 <= add_ln703_2_fu_893_p2(39 downto 39);
                tmp_54_reg_2081 <= add_ln1192_3_fu_927_p2(51 downto 51);
                tmp_55_reg_2093 <= add_ln703_3_fu_939_p2(39 downto 39);
                tmp_56_reg_2109 <= add_ln1192_4_fu_973_p2(51 downto 51);
                tmp_57_reg_2121 <= add_ln703_4_fu_985_p2(39 downto 39);
                tmp_58_reg_2137 <= add_ln1192_5_fu_1019_p2(51 downto 51);
                tmp_59_reg_2149 <= add_ln703_5_fu_1031_p2(39 downto 39);
                tmp_60_reg_2165 <= add_ln1192_6_fu_1065_p2(51 downto 51);
                tmp_61_reg_2177 <= add_ln703_6_fu_1077_p2(39 downto 39);
                tmp_62_reg_2193 <= add_ln1192_7_fu_1111_p2(51 downto 51);
                tmp_63_reg_2205 <= add_ln703_7_fu_1123_p2(39 downto 39);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (icmp_ln78_fu_869_p2 = ap_const_lv1_0) and (setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                index_reg_1841 <= grp_fu_789_p2(24 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                line_V_reg_1836 <= line_V_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (maxWidth_V_1_vld_reg = ap_const_logic_0) and (maxWidth_V_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (maxWidth_V_1_vld_in = ap_const_logic_1) and (maxWidth_V_1_vld_reg = ap_const_logic_1)))) then
                maxWidth_V_1_data_reg(7) <= '1';
    maxWidth_V_1_data_reg(8) <= '1';
    maxWidth_V_1_data_reg(9) <= '1';
    maxWidth_V_1_data_reg(10) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                p_Result_21_reg_1782 <= grp_fu_401_p2(39 downto 39);
                p_Result_s_reg_1769 <= grp_fu_401_p2(40 downto 40);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                rhs_V_4_reg_1794 <= rhs_V_4_fu_384_p1;
                sext_ln1118_reg_1806 <= sext_ln1118_fu_499_p1;
                sext_ln78_reg_1816 <= sext_ln78_fu_510_p1;
                sub_ln78_reg_1764 <= sub_ln78_fu_678_p2;
                    zext_ln703_reg_1811(11 downto 0) <= zext_ln703_fu_507_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                trunc_ln1192_1_reg_2199 <= trunc_ln1192_1_fu_761_p1;
                trunc_ln1192_2_reg_1942 <= trunc_ln1192_2_fu_765_p1;
                trunc_ln1192_3_reg_1952 <= trunc_ln1192_3_fu_769_p1;
                trunc_ln1192_4_reg_1962 <= trunc_ln1192_4_fu_773_p1;
                trunc_ln1192_5_reg_1972 <= trunc_ln1192_5_fu_777_p1;
                trunc_ln1192_6_reg_1982 <= trunc_ln1192_6_fu_781_p1;
                trunc_ln1192_7_reg_1992 <= trunc_ln1192_7_fu_785_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (unroll_1_vld_reg = ap_const_logic_0) and (unroll_1_vld_in = ap_const_logic_1)) or (not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (ap_const_logic_1 = ap_const_logic_1) and (unroll_1_vld_in = ap_const_logic_1) and (unroll_1_vld_reg = ap_const_logic_1)))) then
                unroll_1_data_reg(3) <= '1';
            end if;
        end if;
    end process;
    maxWidth_V_1_data_reg(6 downto 0) <= "0000000";
    maxWidth_V_1_data_reg(11) <= '0';
    unroll_1_data_reg(2 downto 0) <= "000";
    unroll_1_data_reg(15 downto 4) <= "000000000000";
    zext_ln703_reg_1811(23 downto 12) <= "000000000000";
    maxWidth_V_1_state(1 downto 0) <= "00";
    unroll_1_state(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state71, buf_r_AWREADY, buf_r_WREADY, buf_r_BVALID, setup_read_reg_1755, ap_CS_fsm_state49, icmp_ln79_fu_915_p2, ap_block_state58_on_subcall_done, ap_CS_fsm_state48, maxWidth_V_1_state, unroll_1_state, icmp_ln78_fu_869_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state48) and ((icmp_ln78_fu_869_p2 = ap_const_lv1_1) or (setup_read_reg_1755 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (icmp_ln78_fu_869_p2 = ap_const_lv1_0) and (setup_read_reg_1755 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state49 => 
                if (((icmp_ln79_fu_915_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state49))) then
                    ap_NS_fsm <= ap_ST_fsm_state48;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                if ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then
                    ap_NS_fsm <= ap_ST_fsm_state59;
                else
                    ap_NS_fsm <= ap_ST_fsm_state58;
                end if;
            when ap_ST_fsm_state59 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59))) then
                    ap_NS_fsm <= ap_ST_fsm_state60;
                else
                    ap_NS_fsm <= ap_ST_fsm_state59;
                end if;
            when ap_ST_fsm_state60 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60))) then
                    ap_NS_fsm <= ap_ST_fsm_state61;
                else
                    ap_NS_fsm <= ap_ST_fsm_state60;
                end if;
            when ap_ST_fsm_state61 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61))) then
                    ap_NS_fsm <= ap_ST_fsm_state62;
                else
                    ap_NS_fsm <= ap_ST_fsm_state61;
                end if;
            when ap_ST_fsm_state62 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62))) then
                    ap_NS_fsm <= ap_ST_fsm_state63;
                else
                    ap_NS_fsm <= ap_ST_fsm_state62;
                end if;
            when ap_ST_fsm_state63 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63))) then
                    ap_NS_fsm <= ap_ST_fsm_state64;
                else
                    ap_NS_fsm <= ap_ST_fsm_state63;
                end if;
            when ap_ST_fsm_state64 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64))) then
                    ap_NS_fsm <= ap_ST_fsm_state65;
                else
                    ap_NS_fsm <= ap_ST_fsm_state64;
                end if;
            when ap_ST_fsm_state65 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65))) then
                    ap_NS_fsm <= ap_ST_fsm_state66;
                else
                    ap_NS_fsm <= ap_ST_fsm_state65;
                end if;
            when ap_ST_fsm_state66 => 
                if (((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66))) then
                    ap_NS_fsm <= ap_ST_fsm_state67;
                else
                    ap_NS_fsm <= ap_ST_fsm_state66;
                end if;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                if (((buf_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state71;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln1192_2_fu_881_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1849));
    add_ln1192_3_fu_927_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1759));
    add_ln1192_4_fu_973_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1917));
    add_ln1192_5_fu_1019_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1947));
    add_ln1192_6_fu_1065_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1967));
    add_ln1192_7_fu_1111_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1987));
    add_ln1192_fu_835_p2 <= std_logic_vector(signed(sext_ln78_reg_1816) + signed(reg_1957));
    add_ln703_1_fu_847_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_1_reg_2199));
    add_ln703_2_fu_893_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_2_reg_1942));
    add_ln703_3_fu_939_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_3_reg_1952));
    add_ln703_4_fu_985_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_4_reg_1962));
    add_ln703_5_fu_1031_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_5_reg_1972));
    add_ln703_6_fu_1077_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_6_reg_1982));
    add_ln703_7_fu_1123_p2 <= std_logic_vector(signed(X0_V_read_reg_1742) + signed(trunc_ln1192_7_reg_1992));
    and_ln785_1_fu_1322_p2 <= (xor_ln785_11_fu_1231_p2 and or_ln785_6_fu_1227_p2);
    and_ln785_2_fu_1306_p2 <= (xor_ln785_12_fu_1301_p2 and or_ln785_7_fu_1297_p2);
    and_ln785_3_fu_1376_p2 <= (xor_ln785_13_fu_1371_p2 and or_ln785_8_fu_1367_p2);
    and_ln785_4_fu_1446_p2 <= (xor_ln785_14_fu_1441_p2 and or_ln785_9_fu_1437_p2);
    and_ln785_5_fu_1516_p2 <= (xor_ln785_15_fu_1511_p2 and or_ln785_10_fu_1507_p2);
    and_ln785_6_fu_1586_p2 <= (xor_ln785_16_fu_1581_p2 and or_ln785_11_fu_1577_p2);
    and_ln785_7_fu_1656_p2 <= (xor_ln785_17_fu_1651_p2 and or_ln785_12_fu_1647_p2);
    and_ln785_fu_1236_p2 <= (xor_ln785_fu_1161_p2 and or_ln785_fu_1157_p2);
    and_ln786_12_fu_1252_p2 <= (tmp_50_reg_2025 and or_ln786_1_fu_1247_p2);
    and_ln786_14_fu_1392_p2 <= (tmp_54_reg_2081 and or_ln786_3_fu_1387_p2);
    and_ln786_15_fu_1462_p2 <= (tmp_56_reg_2109 and or_ln786_4_fu_1457_p2);
    and_ln786_16_fu_1532_p2 <= (tmp_58_reg_2137 and or_ln786_5_fu_1527_p2);
    and_ln786_17_fu_1602_p2 <= (tmp_60_reg_2165 and or_ln786_6_fu_1597_p2);
    and_ln786_18_fu_1672_p2 <= (tmp_62_reg_2193 and or_ln786_7_fu_1667_p2);
    and_ln_fu_485_p3 <= (lshr_ln_fu_472_p4 & ap_const_lv2_0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);

    ap_block_state48_assign_proc : process(maxWidth_V_1_state, unroll_1_state)
    begin
                ap_block_state48 <= ((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)));
    end process;


    ap_block_state58_on_subcall_done_assign_proc : process(grp_mandel_calc_fu_320_ap_done, grp_mandel_calc_fu_328_ap_done, grp_mandel_calc_fu_336_ap_done, grp_mandel_calc_fu_344_ap_done, grp_mandel_calc_fu_352_ap_done, grp_mandel_calc_fu_360_ap_done, grp_mandel_calc_fu_368_ap_done, grp_mandel_calc_fu_376_ap_done)
    begin
                ap_block_state58_on_subcall_done <= ((grp_mandel_calc_fu_376_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_368_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_360_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_352_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_344_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_336_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_328_ap_done = ap_const_logic_0) or (grp_mandel_calc_fu_320_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(setup_read_reg_1755, ap_CS_fsm_state48, maxWidth_V_1_state, unroll_1_state, icmp_ln78_fu_869_p2)
    begin
        if ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state48) and ((icmp_ln78_fu_869_p2 = ap_const_lv1_1) or (setup_read_reg_1755 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(setup_read_reg_1755, ap_CS_fsm_state48, maxWidth_V_1_state, unroll_1_state, icmp_ln78_fu_869_p2)
    begin
        if ((not(((unroll_1_state = ap_const_lv2_1) or (maxWidth_V_1_state = ap_const_lv2_1) or ((unroll_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)) or ((maxWidth_V_1_state = ap_const_lv2_3) and (ap_const_logic_1 = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state48) and ((icmp_ln78_fu_869_p2 = ap_const_lv1_1) or (setup_read_reg_1755 = ap_const_lv1_1)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    buf_r_AWVALID_assign_proc : process(ap_CS_fsm_state58, buf_r_AWREADY, ap_block_state58_on_subcall_done)
    begin
        if ((not(((ap_const_boolean_1 = ap_block_state58_on_subcall_done) or (buf_r_AWREADY = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state58))) then 
            buf_r_AWVALID <= ap_const_logic_1;
        else 
            buf_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_BREADY_assign_proc : process(ap_CS_fsm_state71, buf_r_BVALID)
    begin
        if (((buf_r_BVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state71))) then 
            buf_r_BREADY <= ap_const_logic_1;
        else 
            buf_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_WDATA_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, reg_1759, reg_1849, reg_1867, reg_1917, reg_1947, reg_1957, reg_1967, reg_1977)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            buf_r_WDATA <= reg_1977(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            buf_r_WDATA <= reg_1967(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            buf_r_WDATA <= reg_1957(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            buf_r_WDATA <= reg_1947(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            buf_r_WDATA <= reg_1759(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            buf_r_WDATA <= reg_1849(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            buf_r_WDATA <= reg_1917(16 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            buf_r_WDATA <= reg_1867(16 - 1 downto 0);
        else 
            buf_r_WDATA <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    buf_r_WVALID_assign_proc : process(ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, buf_r_WREADY)
    begin
        if ((((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state66)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state65)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state64)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state63)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state62)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state61)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state60)) or ((buf_r_WREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state59)))) then 
            buf_r_WVALID <= ap_const_logic_1;
        else 
            buf_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    buf_r_blk_n_AW_assign_proc : process(m_axi_buf_r_AWREADY, ap_CS_fsm_state58)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            buf_r_blk_n_AW <= m_axi_buf_r_AWREADY;
        else 
            buf_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_B_assign_proc : process(m_axi_buf_r_BVALID, ap_CS_fsm_state71)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            buf_r_blk_n_B <= m_axi_buf_r_BVALID;
        else 
            buf_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    buf_r_blk_n_W_assign_proc : process(m_axi_buf_r_WREADY, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59))) then 
            buf_r_blk_n_W <= m_axi_buf_r_WREADY;
        else 
            buf_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    delta_V_fu_414_p1 <= grp_fu_401_p2(40 - 1 downto 0);

    grp_fu_1166_p0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, grp_fu_392_p2, or_ln786_2_fu_1317_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1166_p0 <= or_ln786_2_fu_1317_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1166_p0 <= grp_fu_392_p2(40 downto 40);
        else 
            grp_fu_1166_p0 <= "X";
        end if; 
    end process;


    grp_fu_1166_p1_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, tmp_52_reg_2053, xor_ln786_7_fu_703_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1166_p1 <= tmp_52_reg_2053;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1166_p1 <= xor_ln786_7_fu_703_p2;
        else 
            grp_fu_1166_p1 <= "X";
        end if; 
    end process;

    grp_fu_1166_p2 <= (grp_fu_1166_p1 and grp_fu_1166_p0);

    grp_fu_1182_p0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state47, p_Result_s_reg_1769, or_ln786_fu_1177_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1182_p0 <= or_ln786_fu_1177_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1182_p0 <= p_Result_s_reg_1769;
        else 
            grp_fu_1182_p0 <= "X";
        end if; 
    end process;


    grp_fu_1182_p1_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state47, tmp_48_reg_1997, xor_ln786_fu_426_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1182_p1 <= tmp_48_reg_1997;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1182_p1 <= xor_ln786_fu_426_p2;
        else 
            grp_fu_1182_p1 <= "X";
        end if; 
    end process;

    grp_fu_1182_p2 <= (grp_fu_1182_p1 and grp_fu_1182_p0);

    grp_fu_1199_p0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, grp_fu_392_p2, and_ln785_2_fu_1306_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1199_p0 <= and_ln785_2_fu_1306_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1199_p0 <= grp_fu_392_p2(39 downto 39);
        else 
            grp_fu_1199_p0 <= "X";
        end if; 
    end process;

    grp_fu_1199_p2 <= (grp_fu_1333_p2 or grp_fu_1199_p0);

    grp_fu_1219_p0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, or_ln340_24_fu_1327_p2, xor_ln340_3_fu_715_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1219_p0 <= or_ln340_24_fu_1327_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1219_p0 <= xor_ln340_3_fu_715_p2;
        else 
            grp_fu_1219_p0 <= "X";
        end if; 
    end process;


    grp_fu_1219_p2_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, reg_1917, y_V_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1219_p2 <= reg_1917(40 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1219_p2 <= y_V_fu_691_p1;
        else 
            grp_fu_1219_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1219_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (grp_fu_1219_p0(0) = '1') else 
        grp_fu_1219_p2;
    grp_fu_1275_p3 <= 
        grp_fu_1219_p3 when (grp_fu_1199_p2(0) = '1') else 
        grp_fu_741_p3;

    grp_fu_1333_p0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, grp_fu_392_p2, grp_fu_1166_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1333_p0 <= grp_fu_1166_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_1333_p0 <= grp_fu_392_p2(40 downto 40);
        else 
            grp_fu_1333_p0 <= "X";
        end if; 
    end process;

    grp_fu_1333_p2 <= (grp_fu_1333_p0 xor ap_const_lv1_1);

    grp_fu_1359_p0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state47, or_ln340_21_fu_1187_p2, or_ln340_fu_445_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_1359_p0 <= or_ln340_21_fu_1187_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_1359_p0 <= or_ln340_fu_445_p2;
        else 
            grp_fu_1359_p0 <= "X";
        end if; 
    end process;

    grp_fu_1359_p3 <= 
        grp_fu_733_p3 when (grp_fu_1359_p0(0) = '1') else 
        grp_fu_457_p3;

    grp_fu_392_p0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, lhs_V_3_fu_674_p1, lhs_V_fu_503_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_392_p0 <= lhs_V_3_fu_674_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_392_p0 <= lhs_V_fu_503_p1;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state49, rhs_V_4_reg_1794, rhs_V_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_392_p1 <= rhs_V_4_reg_1794;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            grp_fu_392_p1 <= rhs_V_fu_388_p1;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_392_p2 <= std_logic_vector(signed(grp_fu_392_p0) - signed(grp_fu_392_p1));

    grp_fu_401_ap_start_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            grp_fu_401_ap_start <= ap_const_logic_1;
        else 
            grp_fu_401_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_401_p0 <= reg_1867(41 - 1 downto 0);
    grp_fu_401_p1 <= grp_fu_401_p10(13 - 1 downto 0);
    grp_fu_401_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1729),41));
    grp_fu_457_p2 <= reg_1759(40 - 1 downto 0);
    grp_fu_457_p3 <= 
        ap_const_lv40_8000000000 when (grp_fu_1182_p2(0) = '1') else 
        grp_fu_457_p2;
    grp_fu_542_p0 <= grp_fu_542_p00(12 - 1 downto 0);
    grp_fu_542_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_0_reg_300),52));
    grp_fu_542_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_567_p0 <= grp_fu_567_p00(12 - 1 downto 0);
    grp_fu_567_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_fu_557_p2),52));
    grp_fu_567_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_582_p0 <= grp_fu_582_p00(12 - 1 downto 0);
    grp_fu_582_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_1_fu_572_p2),52));
    grp_fu_582_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_597_p0 <= grp_fu_597_p00(12 - 1 downto 0);
    grp_fu_597_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_2_fu_587_p2),52));
    grp_fu_597_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_612_p0 <= grp_fu_612_p00(12 - 1 downto 0);
    grp_fu_612_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_3_fu_602_p2),52));
    grp_fu_612_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_627_p0 <= grp_fu_627_p00(12 - 1 downto 0);
    grp_fu_627_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_4_fu_617_p2),52));
    grp_fu_627_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_642_p0 <= grp_fu_642_p00(12 - 1 downto 0);
    grp_fu_642_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_5_fu_632_p2),52));
    grp_fu_642_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);
    grp_fu_657_p0 <= grp_fu_657_p00(12 - 1 downto 0);
    grp_fu_657_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_6_fu_647_p2),52));
    grp_fu_657_p1 <= sext_ln1118_reg_1806(40 - 1 downto 0);

    grp_fu_662_p0_assign_proc : process(X0_V_read_reg_1742, ap_CS_fsm_state49, ap_CS_fsm_state55)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_662_p0 <= X0_V_read_reg_1742;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_662_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv32_8),40));
        else 
            grp_fu_662_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_662_p1_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state55, reg_1977, index_1_0_reg_311)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_662_p1 <= reg_1977;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_0_reg_311),40));
        else 
            grp_fu_662_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_662_p2 <= std_logic_vector(signed(grp_fu_662_p0) + signed(grp_fu_662_p1));

    grp_fu_733_p0_assign_proc : process(ap_CS_fsm_state56, ap_CS_fsm_state47, or_ln340_20_fu_1339_p2, xor_ln340_2_fu_436_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_733_p0 <= or_ln340_20_fu_1339_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_733_p0 <= xor_ln340_2_fu_436_p2;
        else 
            grp_fu_733_p0 <= "X";
        end if; 
    end process;

    grp_fu_733_p2 <= reg_1759(40 - 1 downto 0);
    grp_fu_733_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (grp_fu_733_p0(0) = '1') else 
        grp_fu_733_p2;

    grp_fu_741_p2_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state56, reg_1917, y_V_fu_691_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            grp_fu_741_p2 <= reg_1917(40 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_741_p2 <= y_V_fu_691_p1;
        else 
            grp_fu_741_p2 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_741_p3 <= 
        ap_const_lv40_8000000000 when (grp_fu_1166_p2(0) = '1') else 
        grp_fu_741_p2;

    grp_fu_789_p0_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state55, zext_ln703_reg_1811, sext_ln78_reg_1816, ap_CS_fsm_state48)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_789_p0 <= sext_ln78_reg_1816;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_789_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(ap_const_lv12_8),52));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_789_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln703_reg_1811),52));
        else 
            grp_fu_789_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_789_p1_assign_proc : process(ap_CS_fsm_state49, ap_CS_fsm_state55, ap_CS_fsm_state48, reg_1867, index_0_reg_289, tmp_V_1_0_reg_300)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            grp_fu_789_p1 <= reg_1867;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            grp_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_0_reg_300),52));
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_0_reg_289),52));
        else 
            grp_fu_789_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_789_p2 <= std_logic_vector(signed(grp_fu_789_p0) + signed(grp_fu_789_p1));
    grp_mandel_calc_fu_320_ap_start <= grp_mandel_calc_fu_320_ap_start_reg;
    grp_mandel_calc_fu_320_x_in_V <= reg_1867(40 - 1 downto 0);
    grp_mandel_calc_fu_328_ap_start <= grp_mandel_calc_fu_328_ap_start_reg;
    grp_mandel_calc_fu_328_x_in_V <= reg_1917(40 - 1 downto 0);
    grp_mandel_calc_fu_336_ap_start <= grp_mandel_calc_fu_336_ap_start_reg;
    grp_mandel_calc_fu_336_x_in_V <= reg_1849(40 - 1 downto 0);
    grp_mandel_calc_fu_344_ap_start <= grp_mandel_calc_fu_344_ap_start_reg;
    grp_mandel_calc_fu_344_x_in_V <= reg_1759(40 - 1 downto 0);
    grp_mandel_calc_fu_352_ap_start <= grp_mandel_calc_fu_352_ap_start_reg;
    grp_mandel_calc_fu_352_x_in_V <= reg_1947(40 - 1 downto 0);
    grp_mandel_calc_fu_360_ap_start <= grp_mandel_calc_fu_360_ap_start_reg;
    grp_mandel_calc_fu_360_x_in_V <= reg_1957(40 - 1 downto 0);
    grp_mandel_calc_fu_368_ap_start <= grp_mandel_calc_fu_368_ap_start_reg;
    grp_mandel_calc_fu_368_x_in_V <= reg_1967(40 - 1 downto 0);
    grp_mandel_calc_fu_376_ap_start <= grp_mandel_calc_fu_376_ap_start_reg;
    icmp_ln785_1_fu_823_p2 <= "0" when (tmp_9_fu_859_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_2_fu_829_p2 <= "0" when (tmp_s_fu_905_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_3_fu_961_p2 <= "0" when (tmp_10_fu_951_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_4_fu_1007_p2 <= "0" when (tmp_11_fu_997_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_5_fu_1053_p2 <= "0" when (tmp_12_fu_1043_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_6_fu_1099_p2 <= "0" when (tmp_13_fu_1089_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_7_fu_1145_p2 <= "0" when (tmp_14_fu_1135_p4 = ap_const_lv12_0) else "1";
    icmp_ln785_fu_517_p2 <= "0" when (tmp_8_fu_813_p4 = ap_const_lv12_0) else "1";
    icmp_ln786_1_fu_875_p2 <= "0" when (tmp_9_fu_859_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_2_fu_921_p2 <= "0" when (tmp_s_fu_905_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_3_fu_967_p2 <= "0" when (tmp_10_fu_951_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_4_fu_1013_p2 <= "0" when (tmp_11_fu_997_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_5_fu_1059_p2 <= "0" when (tmp_12_fu_1043_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_6_fu_1105_p2 <= "0" when (tmp_13_fu_1089_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_7_fu_1151_p2 <= "0" when (tmp_14_fu_1135_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln786_fu_533_p2 <= "0" when (tmp_8_fu_813_p4 = ap_const_lv12_FFF) else "1";
    icmp_ln78_fu_869_p2 <= "1" when (t_V_1_reg_278 = sub_ln78_reg_1764) else "0";
    icmp_ln79_fu_915_p2 <= "1" when (tmp_V_1_0_reg_300 = width_V_read_reg_1729) else "0";
        lhs_V_3_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_30_reg_268),41));

        lhs_V_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X1_V),41));

    line_V_fu_528_p2 <= std_logic_vector(unsigned(t_V_1_reg_278) + unsigned(ap_const_lv12_1));
    lshr_ln_fu_472_p4 <= width_V_read_reg_1729(11 downto 2);

    maxWidth_V_1_vld_in_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            maxWidth_V_1_vld_in <= ap_const_logic_1;
        else 
            maxWidth_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    or_ln340_20_fu_1339_p2 <= (grp_fu_1182_p2 or and_ln785_fu_1236_p2);
    or_ln340_21_fu_1187_p2 <= (xor_ln340_5_fu_1193_p2 or and_ln785_fu_1236_p2);
    or_ln340_22_fu_1257_p2 <= (and_ln786_12_fu_1252_p2 or and_ln785_1_fu_1322_p2);
    or_ln340_23_fu_1269_p2 <= (xor_ln340_6_fu_1263_p2 or and_ln785_1_fu_1322_p2);
    or_ln340_24_fu_1327_p2 <= (grp_fu_1166_p2 or and_ln785_2_fu_1306_p2);
    or_ln340_26_fu_1397_p2 <= (and_ln786_14_fu_1392_p2 or and_ln785_3_fu_1376_p2);
    or_ln340_27_fu_1409_p2 <= (xor_ln340_8_fu_1403_p2 or and_ln785_3_fu_1376_p2);
    or_ln340_28_fu_1467_p2 <= (and_ln786_15_fu_1462_p2 or and_ln785_4_fu_1446_p2);
    or_ln340_29_fu_1479_p2 <= (xor_ln340_9_fu_1473_p2 or and_ln785_4_fu_1446_p2);
    or_ln340_30_fu_1537_p2 <= (and_ln786_16_fu_1532_p2 or and_ln785_5_fu_1516_p2);
    or_ln340_31_fu_1549_p2 <= (xor_ln340_10_fu_1543_p2 or and_ln785_5_fu_1516_p2);
    or_ln340_32_fu_1607_p2 <= (and_ln786_17_fu_1602_p2 or and_ln785_6_fu_1586_p2);
    or_ln340_33_fu_1619_p2 <= (xor_ln340_11_fu_1613_p2 or and_ln785_6_fu_1586_p2);
    or_ln340_34_fu_1677_p2 <= (and_ln786_18_fu_1672_p2 or and_ln785_7_fu_1656_p2);
    or_ln340_35_fu_1689_p2 <= (xor_ln340_12_fu_1683_p2 or and_ln785_7_fu_1656_p2);
    or_ln340_fu_445_p2 <= (xor_ln340_fu_440_p2 or p_Result_21_reg_1782);
    or_ln700_1_fu_572_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_2);
    or_ln700_2_fu_587_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_3);
    or_ln700_3_fu_602_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_4);
    or_ln700_4_fu_617_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_5);
    or_ln700_5_fu_632_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_6);
    or_ln700_6_fu_647_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_7);
    or_ln700_fu_557_p2 <= (tmp_V_1_0_reg_300 or ap_const_lv12_1);
    or_ln785_10_fu_1507_p2 <= (tmp_59_reg_2149 or icmp_ln785_5_reg_2155);
    or_ln785_11_fu_1577_p2 <= (tmp_61_reg_2177 or icmp_ln785_6_reg_2183);
    or_ln785_12_fu_1647_p2 <= (tmp_63_reg_2205 or icmp_ln785_7_reg_2211);
    or_ln785_6_fu_1227_p2 <= (tmp_51_reg_2037 or icmp_ln785_1_reg_2043);
    or_ln785_7_fu_1297_p2 <= (tmp_53_reg_2065 or icmp_ln785_2_reg_2071);
    or_ln785_8_fu_1367_p2 <= (tmp_55_reg_2093 or icmp_ln785_3_reg_2099);
    or_ln785_9_fu_1437_p2 <= (tmp_57_reg_2121 or icmp_ln785_4_reg_2127);
    or_ln785_fu_1157_p2 <= (tmp_49_reg_2009 or icmp_ln785_reg_2015);
    or_ln786_1_fu_1247_p2 <= (xor_ln786_9_fu_1242_p2 or icmp_ln786_1_reg_2048);
    or_ln786_2_fu_1317_p2 <= (xor_ln786_10_fu_1312_p2 or icmp_ln786_2_reg_2076);
    or_ln786_3_fu_1387_p2 <= (xor_ln786_11_fu_1382_p2 or icmp_ln786_3_reg_2104);
    or_ln786_4_fu_1457_p2 <= (xor_ln786_12_fu_1452_p2 or icmp_ln786_4_reg_2132);
    or_ln786_5_fu_1527_p2 <= (xor_ln786_13_fu_1522_p2 or icmp_ln786_5_reg_2160);
    or_ln786_6_fu_1597_p2 <= (xor_ln786_14_fu_1592_p2 or icmp_ln786_6_reg_2188);
    or_ln786_7_fu_1667_p2 <= (xor_ln786_15_fu_1662_p2 or icmp_ln786_7_reg_2216);
    or_ln786_fu_1177_p2 <= (xor_ln786_8_fu_1172_p2 or icmp_ln786_reg_2020);
    p_Result_22_fu_683_p3 <= grp_fu_392_p2(40 downto 40);
    p_Result_23_fu_695_p3 <= grp_fu_392_p2(39 downto 39);
    rhs_V_4_fu_384_p0 <= grp_fu_1359_p3;
        rhs_V_4_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_4_fu_384_p0),41));

    rhs_V_fu_388_p0 <= X0_V;
        rhs_V_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_388_p0),41));

    select_ln340_11_fu_464_p2 <= reg_1849(40 - 1 downto 0);
    select_ln340_11_fu_464_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (or_ln340_26_fu_1397_p2(0) = '1') else 
        select_ln340_11_fu_464_p2;
    select_ln340_12_fu_1485_p2 <= reg_1947(40 - 1 downto 0);
    select_ln340_12_fu_1485_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (or_ln340_28_fu_1467_p2(0) = '1') else 
        select_ln340_12_fu_1485_p2;
    select_ln340_13_fu_1555_p2 <= reg_1957(40 - 1 downto 0);
    select_ln340_13_fu_1555_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (or_ln340_30_fu_1537_p2(0) = '1') else 
        select_ln340_13_fu_1555_p2;
    select_ln340_14_fu_1625_p2 <= reg_1967(40 - 1 downto 0);
    select_ln340_14_fu_1625_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (or_ln340_32_fu_1607_p2(0) = '1') else 
        select_ln340_14_fu_1625_p2;
    select_ln340_15_fu_1695_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (or_ln340_34_fu_1677_p2(0) = '1') else 
        reg_1977;
    select_ln340_19_fu_1415_p3 <= 
        select_ln340_9_fu_1352_p3 when (or_ln340_23_fu_1269_p2(0) = '1') else 
        select_ln388_9_fu_1345_p3;
    select_ln340_21_fu_1429_p3 <= 
        select_ln340_11_fu_464_p3 when (or_ln340_27_fu_1409_p2(0) = '1') else 
        select_ln388_11_fu_1422_p3;
    select_ln340_22_fu_1499_p3 <= 
        select_ln340_12_fu_1485_p3 when (or_ln340_29_fu_1479_p2(0) = '1') else 
        select_ln388_12_fu_1492_p3;
    select_ln340_23_fu_1569_p3 <= 
        select_ln340_13_fu_1555_p3 when (or_ln340_31_fu_1549_p2(0) = '1') else 
        select_ln388_13_fu_1562_p3;
    select_ln340_24_fu_1639_p3 <= 
        select_ln340_14_fu_1625_p3 when (or_ln340_33_fu_1619_p2(0) = '1') else 
        select_ln388_14_fu_1632_p3;
    select_ln340_25_fu_1709_p3 <= 
        select_ln340_15_fu_1695_p3 when (or_ln340_35_fu_1689_p2(0) = '1') else 
        select_ln388_15_fu_1702_p3;
    select_ln340_9_fu_1352_p2 <= reg_1987(40 - 1 downto 0);
    select_ln340_9_fu_1352_p3 <= 
        ap_const_lv40_7FFFFFFFFF when (or_ln340_22_fu_1257_p2(0) = '1') else 
        select_ln340_9_fu_1352_p2;
    select_ln388_11_fu_1422_p2 <= reg_1849(40 - 1 downto 0);
    select_ln388_11_fu_1422_p3 <= 
        ap_const_lv40_8000000000 when (and_ln786_14_fu_1392_p2(0) = '1') else 
        select_ln388_11_fu_1422_p2;
    select_ln388_12_fu_1492_p2 <= reg_1947(40 - 1 downto 0);
    select_ln388_12_fu_1492_p3 <= 
        ap_const_lv40_8000000000 when (and_ln786_15_fu_1462_p2(0) = '1') else 
        select_ln388_12_fu_1492_p2;
    select_ln388_13_fu_1562_p2 <= reg_1957(40 - 1 downto 0);
    select_ln388_13_fu_1562_p3 <= 
        ap_const_lv40_8000000000 when (and_ln786_16_fu_1532_p2(0) = '1') else 
        select_ln388_13_fu_1562_p2;
    select_ln388_14_fu_1632_p2 <= reg_1967(40 - 1 downto 0);
    select_ln388_14_fu_1632_p3 <= 
        ap_const_lv40_8000000000 when (and_ln786_17_fu_1602_p2(0) = '1') else 
        select_ln388_14_fu_1632_p2;
    select_ln388_15_fu_1702_p3 <= 
        ap_const_lv40_8000000000 when (and_ln786_18_fu_1672_p2(0) = '1') else 
        reg_1977;
    select_ln388_9_fu_1345_p2 <= reg_1987(40 - 1 downto 0);
    select_ln388_9_fu_1345_p3 <= 
        ap_const_lv40_8000000000 when (and_ln786_12_fu_1252_p2(0) = '1') else 
        select_ln388_9_fu_1345_p2;
    sext_ln1118_fu_499_p0 <= grp_fu_1359_p3;
        sext_ln1118_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1118_fu_499_p0),52));

        sext_ln78_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(X0_V_read_reg_1742),52));

    sub_ln78_fu_678_p2 <= std_logic_vector(unsigned(and_ln_fu_485_p3) - unsigned(zext_ln78_1_fu_481_p1));
    tmp_10_fu_951_p4 <= add_ln1192_3_fu_927_p2(51 downto 40);
    tmp_11_fu_997_p4 <= add_ln1192_4_fu_973_p2(51 downto 40);
    tmp_12_fu_1043_p4 <= add_ln1192_5_fu_1019_p2(51 downto 40);
    tmp_13_fu_1089_p4 <= add_ln1192_6_fu_1065_p2(51 downto 40);
    tmp_14_fu_1135_p4 <= add_ln1192_7_fu_1111_p2(51 downto 40);
    tmp_8_fu_813_p4 <= add_ln1192_fu_835_p2(51 downto 40);
    tmp_9_fu_859_p4 <= grp_fu_789_p2(51 downto 40);
    tmp_s_fu_905_p4 <= add_ln1192_2_fu_881_p2(51 downto 40);
    trunc_ln1192_1_fu_761_p1 <= grp_fu_567_p2(40 - 1 downto 0);
    trunc_ln1192_2_fu_765_p1 <= grp_fu_582_p2(40 - 1 downto 0);
    trunc_ln1192_3_fu_769_p1 <= grp_fu_597_p2(40 - 1 downto 0);
    trunc_ln1192_4_fu_773_p1 <= grp_fu_612_p2(40 - 1 downto 0);
    trunc_ln1192_5_fu_777_p1 <= grp_fu_627_p2(40 - 1 downto 0);
    trunc_ln1192_6_fu_781_p1 <= grp_fu_642_p2(40 - 1 downto 0);
    trunc_ln1192_7_fu_785_p1 <= grp_fu_657_p2(40 - 1 downto 0);
    trunc_ln1192_fu_757_p1 <= grp_fu_542_p2(40 - 1 downto 0);

    unroll_1_vld_in_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            unroll_1_vld_in <= ap_const_logic_1;
        else 
            unroll_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln340_10_fu_1543_p2 <= (ap_const_lv1_1 xor and_ln786_16_fu_1532_p2);
    xor_ln340_11_fu_1613_p2 <= (ap_const_lv1_1 xor and_ln786_17_fu_1602_p2);
    xor_ln340_12_fu_1683_p2 <= (ap_const_lv1_1 xor and_ln786_18_fu_1672_p2);
    xor_ln340_2_fu_436_p2 <= (p_Result_s_reg_1769 xor p_Result_21_reg_1782);
    xor_ln340_3_fu_715_p2 <= (p_Result_23_fu_695_p3 xor p_Result_22_fu_683_p3);
    xor_ln340_5_fu_1193_p2 <= (grp_fu_1182_p2 xor ap_const_lv1_1);
    xor_ln340_6_fu_1263_p2 <= (ap_const_lv1_1 xor and_ln786_12_fu_1252_p2);
    xor_ln340_8_fu_1403_p2 <= (ap_const_lv1_1 xor and_ln786_14_fu_1392_p2);
    xor_ln340_9_fu_1473_p2 <= (ap_const_lv1_1 xor and_ln786_15_fu_1462_p2);
    xor_ln340_fu_440_p2 <= (p_Result_s_reg_1769 xor ap_const_lv1_1);
    xor_ln785_11_fu_1231_p2 <= (tmp_50_reg_2025 xor ap_const_lv1_1);
    xor_ln785_12_fu_1301_p2 <= (tmp_52_reg_2053 xor ap_const_lv1_1);
    xor_ln785_13_fu_1371_p2 <= (tmp_54_reg_2081 xor ap_const_lv1_1);
    xor_ln785_14_fu_1441_p2 <= (tmp_56_reg_2109 xor ap_const_lv1_1);
    xor_ln785_15_fu_1511_p2 <= (tmp_58_reg_2137 xor ap_const_lv1_1);
    xor_ln785_16_fu_1581_p2 <= (tmp_60_reg_2165 xor ap_const_lv1_1);
    xor_ln785_17_fu_1651_p2 <= (tmp_62_reg_2193 xor ap_const_lv1_1);
    xor_ln785_fu_1161_p2 <= (tmp_48_reg_1997 xor ap_const_lv1_1);
    xor_ln786_10_fu_1312_p2 <= (tmp_53_reg_2065 xor ap_const_lv1_1);
    xor_ln786_11_fu_1382_p2 <= (tmp_55_reg_2093 xor ap_const_lv1_1);
    xor_ln786_12_fu_1452_p2 <= (tmp_57_reg_2121 xor ap_const_lv1_1);
    xor_ln786_13_fu_1522_p2 <= (tmp_59_reg_2149 xor ap_const_lv1_1);
    xor_ln786_14_fu_1592_p2 <= (tmp_61_reg_2177 xor ap_const_lv1_1);
    xor_ln786_15_fu_1662_p2 <= (tmp_63_reg_2205 xor ap_const_lv1_1);
    xor_ln786_7_fu_703_p2 <= (p_Result_23_fu_695_p3 xor ap_const_lv1_1);
    xor_ln786_8_fu_1172_p2 <= (tmp_49_reg_2009 xor ap_const_lv1_1);
    xor_ln786_9_fu_1242_p2 <= (tmp_51_reg_2037 xor ap_const_lv1_1);
    xor_ln786_fu_426_p2 <= (p_Result_21_reg_1782 xor ap_const_lv1_1);
    y_V_fu_691_p1 <= grp_fu_392_p2(40 - 1 downto 0);
    zext_ln1116_1_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_fu_557_p2),52));
    zext_ln1116_2_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_1_fu_572_p2),52));
    zext_ln1116_3_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_2_fu_587_p2),52));
    zext_ln1116_4_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_3_fu_602_p2),52));
    zext_ln1116_5_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_4_fu_617_p2),52));
    zext_ln1116_6_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_5_fu_632_p2),52));
    zext_ln1116_7_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln700_6_fu_647_p2),52));
    zext_ln1116_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_1_0_reg_300),52));
    zext_ln1148_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1729),41));
    zext_ln703_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(width_V_read_reg_1729),24));
    zext_ln78_1_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_fu_472_p4),12));
    zext_ln78_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_0_reg_289),32));
    zext_ln85_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_0_reg_311),64));
end behav;
